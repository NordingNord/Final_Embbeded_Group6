-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_23_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111010111000011", 1 => "0000011100011001", 2 => "0011001101000100", 
    3 => "1111010111011111", 4 => "0000101110110000", 5 => "0001011010110011", 
    6 => "0001010111001001", 7 => "1111000001010111", 8 => "0000101101000100", 
    9 => "0000001111011111", 10 => "1110100001001111", 11 => "1111101010001000", 
    12 => "0001101000010101", 13 => "0001011101111001", 14 => "0000011000101101", 
    15 => "0000101100010100", 16 => "1111111001100010", 17 => "1111110110100001", 
    18 => "1110100001001100", 19 => "1111110101111011", 20 => "0000000000001001", 
    21 => "0001010010001001", 22 => "0011011000010000", 23 => "0000101111110101", 
    24 => "0000110111111111", 25 => "0000111101100101", 26 => "0011000001011010", 
    27 => "0001010000100100", 28 => "1111100000100111", 29 => "1110011101110100", 
    30 => "0000110110001111", 31 => "0001011111101001", 32 => "1110111101101100", 
    33 => "0001000110001100", 34 => "0010010010101110", 35 => "0001000010001001", 
    36 => "0000001001101101", 37 => "1110101100110001", 38 => "0001011111100010", 
    39 => "1110100000011110", 40 => "1111011101111101", 41 => "0001011111101001", 
    42 => "1110011001101111", 43 => "1110111010110010", 44 => "0000101111011001", 
    45 => "1111111001010100", 46 => "0000101110111000", 47 => "0001100110011011", 
    48 => "1111011001111101", 49 => "0001111011000110", 50 => "0000101010011100", 
    51 => "0000100100111010", 52 => "1110011010110111", 53 => "1111010001011110", 
    54 => "0001110001010111", 55 => "0010100000011100", 56 => "0010100010001011", 
    57 => "0000110000100111", 58 => "0010011101011101", 59 => "1111101100101011", 
    60 => "1110111011100111", 61 => "1111111011100111", 62 => "0001001010010101", 
    63 => "0001100000100010", 64 => "0000100110110101", 65 => "1110110010011001", 
    66 => "0001011101100100", 67 => "0000100110001000", 68 => "1111000001000101", 
    69 => "1111010101010010", 70 => "0000101010001111", 71 => "0001000011000000", 
    72 => "1111011001101110", 73 => "1110110010001010", 74 => "0000011110101010", 
    75 => "0000111101001001", 76 => "1111100111111110", 77 => "1110010110001101", 
    78 => "1110110011100011", 79 => "1111010100000000", 80 => "1110101010110100", 
    81 => "0000001101000000", 82 => "1111000010100011", 83 => "0000011110011011", 
    84 => "1110101010101010", 85 => "0000011011111111", 86 => "0000010010110001", 
    87 => "0000100101110111", 88 => "0100011110000110", 89 => "1111001101101101", 
    90 => "0000100001010000", 91 => "0001011101101011", 92 => "1110100010001111", 
    93 => "1111010100111010", 94 => "0000010010001001", 95 => "0000100000011011", 
    96 => "0000001011110100", 97 => "0000011001101110", 98 => "0001101101000110", 
    99 => "0000000110000110", 100 => "1111001101111111", 101 => "0000100101100000", 
    102 => "0001100110101010", 103 => "1111000111111100", 104 => "1111001101111111", 
    105 => "0000110111111011", 106 => "1110111010111010", 107 => "1110110110010101", 
    108 => "0011001110100010", 109 => "0010001001010110", 110 => "1110101111010000", 
    111 => "0000101000101000", 112 => "0000011110001110", 113 => "0000111001010110", 
    114 => "0000101111101100", 115 => "0000111101001110", 116 => "0001001100001001", 
    117 => "0000101010110010", 118 => "1111111100111100", 119 => "0000010111001110", 
    120 => "0010000001100000", 121 => "1111011100100010", 122 => "0000111101010100", 
    123 => "0001101010101011", 124 => "1111011000101010", 125 => "0000101001101001", 
    126 => "0000111111000010", 127 => "1111000100011100", 128 => "1111110100001011", 
    129 => "1111110100011000", 130 => "0001100101111010", 131 => "1110101101000111", 
    132 => "1111101101000101", 133 => "1110101000001100", 134 => "0010011101100110", 
    135 => "0001010001111000", 136 => "1111110011001000", 137 => "0000001000000010", 
    138 => "0000101101001011", 139 => "0000100000001111", 140 => "0011000100111001", 
    141 => "0010100011100111", 142 => "1111111011010110", 143 => "1111011111111101", 
    144 => "0000101011011100", 145 => "1110001111001011", 146 => "1111010011000000", 
    147 => "1110111010011010", 148 => "1111001011010111", 149 => "0001001110010001", 
    150 => "0000100101010111", 151 => "0001010011010100", 152 => "0000101110001000", 
    153 => "1111100111110010", 154 => "1111000101111001", 155 => "0000101101001100", 
    156 => "0001001000011111", 157 => "0001000010100010", 158 => "1111111111100110", 
    159 => "1111011100010000", 160 => "0001011100000000", 161 => "1111011100101011", 
    162 => "0100100011110001", 163 => "0000110010001111", 164 => "0001010001101010", 
    165 => "1110011011010011", 166 => "0001100110101101", 167 => "0000101001111001", 
    168 => "1111111000010001", 169 => "0000000100000001", 170 => "0000000011011011", 
    171 => "1110111011000011", 172 => "0011001010001111", 173 => "0011010100101011", 
    174 => "0000000010001011", 175 => "1111001110100010", 176 => "1111111010000010", 
    177 => "1111101001000011", 178 => "1110110000111001", 179 => "1111100101000100", 
    180 => "1111100000011110", 181 => "0001001000110111", 182 => "0001101010101011", 
    183 => "0011001101111100", 184 => "0000011000110001", 185 => "0000001000111100", 
    186 => "0010000010000011", 187 => "1110111100001100", 188 => "1111111011100100", 
    189 => "1110100011100001", 190 => "1110011110011111", 191 => "1110110111011111", 
    192 => "0001011100111111", 193 => "1110011111100001", 194 => "1110111100100000", 
    195 => "1111010010110000", 196 => "0001000101000000", 197 => "1110110110101001", 
    198 => "1111000100001010", 199 => "1111001001001100", 200 => "1110100010111110", 
    201 => "0000101101111000", 202 => "1110010111110010", 203 => "1110101010000011", 
    204 => "1111000111111000", 205 => "0000000011010110", 206 => "0001000111010100", 
    207 => "0000110011000001", 208 => "1110111110110111", 209 => "0000010100101010", 
    210 => "1111111010011101", 211 => "0000011010100110", 212 => "0000101011101001", 
    213 => "1111010001010001", 214 => "0000111000111111", 215 => "0001001000001010", 
    216 => "1110100110010000", 217 => "0000101001010001", 218 => "0000100111000111", 
    219 => "0000111001000111", 220 => "1110100000111100", 221 => "1110011110101110", 
    222 => "1111010011111000", 223 => "0001100110001111", 224 => "1110110101100000", 
    225 => "1111000000100000", 226 => "0000100110010000", 227 => "1110110011100001", 
    228 => "0000001011000111", 229 => "0000101000100100", 230 => "0001000000011110", 
    231 => "0000000001000111", 232 => "0000001011001000", 233 => "1111100111001110", 
    234 => "0000100100101100", 235 => "0001011100010101", 236 => "1110111111100101", 
    237 => "0001001110101100", 238 => "1111000110010010", 239 => "1110110111010100", 
    240 => "0000000101010110", 241 => "1110111111000101", 242 => "0000000110110101", 
    243 => "0000010001100000", 244 => "0000000101001001", 245 => "0000110001100011", 
    246 => "0000010101001101", 247 => "0000010101001111", 248 => "0001010111010001", 
    249 => "0000110110110101", 250 => "0001010000000000", 251 => "1110101111110111", 
    252 => "1111111111011111", 253 => "1111001000011001", 254 => "0000011100101100", 
    255 => "0000000100110111", 256 => "0001100011000110", 257 => "1111111100010110", 
    258 => "1111110100000111", 259 => "0001001110000011", 260 => "1110100011000111", 
    261 => "1111000101000101", 262 => "0000111011001111", 263 => "0000011110110010", 
    264 => "1110110000011001", 265 => "0001001001011000", 266 => "0000100011110001", 
    267 => "1111101001101100", 268 => "0000111001100110", 269 => "0000011110010110", 
    270 => "0000110010101110", 271 => "1111110111111011", 272 => "1111101110001111", 
    273 => "0000100110100010", 274 => "1111100111111110", 275 => "0000100001101000", 
    276 => "1111101001101011", 277 => "1111111101111001", 278 => "1110111100000001", 
    279 => "0000011101001110", 280 => "1111100010101011", 281 => "1111010101111001", 
    282 => "0000011000100011", 283 => "0000111100000010", 284 => "0001100011101001", 
    285 => "1111111001110010", 286 => "0000010101110100", 287 => "1110100011101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_23 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_23 is
    component infer_layer_6_weights_V_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_23_rom_U :  component infer_layer_6_weights_V_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



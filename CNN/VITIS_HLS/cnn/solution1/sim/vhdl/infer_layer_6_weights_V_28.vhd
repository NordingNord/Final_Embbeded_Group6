-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_28_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_28_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101101011000", 1 => "10101001100000", 2 => "10110001100011", 
    3 => "00010011010010", 4 => "00010101001101", 5 => "11101110011010", 
    6 => "11111100010100", 7 => "01000001011100", 8 => "11101011100110", 
    9 => "00100000000100", 10 => "10111010100011", 11 => "10111010100101", 
    12 => "11111100000111", 13 => "01010011000010", 14 => "00100101110101", 
    15 => "10110011010011", 16 => "01100001000001", 17 => "10101111000101", 
    18 => "11001011110010", 19 => "01001000101100", 20 => "10010101101110", 
    21 => "00101111100101", 22 => "11010111111011", 23 => "00011110010011", 
    24 => "11101011010000", 25 => "00110111001101", 26 => "00001000100011", 
    27 => "01011011000110", 28 => "00010000111110", 29 => "00110011000011", 
    30 => "10110010010100", 31 => "01001001010101", 32 => "00000100101010", 
    33 => "01100010010101", 34 => "01100001001011", 35 => "00101000000100", 
    36 => "01001010010101", 37 => "11011110111101", 38 => "00100111101010", 
    39 => "00000011010000", 40 => "11111110011011", 41 => "11101110111101", 
    42 => "01001111101001", 43 => "11000000000000", 44 => "00000110000011", 
    45 => "10100010010011", 46 => "11010111001101", 47 => "11111011101000", 
    48 => "10101000001011", 49 => "00010010011101", 50 => "11000001100110", 
    51 => "11110001011110", 52 => "11001010111010", 53 => "01011011101100", 
    54 => "11100110001110", 55 => "00110000110110", 56 => "11001000011000", 
    57 => "01100000000011", 58 => "01010011110000", 59 => "11010000111101", 
    60 => "01001010001000", 61 => "11010001111111", 62 => "01011101001000", 
    63 => "01001000101100", 64 => "00000111011111", 65 => "11100100010100", 
    66 => "00111101101110", 67 => "10101010100110", 68 => "10011011000000", 
    69 => "00110110010000", 70 => "10010101111000", 71 => "11000010010011", 
    72 => "10101101011011", 73 => "00000101111010", 74 => "00110110000010", 
    75 => "11101000111111", 76 => "11000010000000", 77 => "11011101100000", 
    78 => "00010100011010", 79 => "10011001010010", 80 => "11110111100011", 
    81 => "11111100100101", 82 => "01000010011101", 83 => "00111101111000", 
    84 => "11110101100001", 85 => "00110101001110", 86 => "01011110000100", 
    87 => "11011000000001", 88 => "00101010101011", 89 => "00001111111100", 
    90 => "01011011001001", 91 => "10111011011001", 92 => "10011001100110", 
    93 => "11011001000110", 94 => "11110010011010", 95 => "11111100010010", 
    96 => "10010010110111", 97 => "00100000111100", 98 => "11110000100100", 
    99 => "11011110010100", 100 => "10100100010101", 101 => "00101110101011", 
    102 => "00111100111011", 103 => "10111000000101", 104 => "00101101001001", 
    105 => "00110101110010", 106 => "00010000011111", 107 => "10011010011010", 
    108 => "00110110011101", 109 => "11100001101101", 110 => "00010000110111", 
    111 => "11001111101100", 112 => "00101111110010", 113 => "01000110100101", 
    114 => "00110101100001", 115 => "00010000100111", 116 => "00000110101001", 
    117 => "00101010111111", 118 => "10011110111111", 119 => "01100001100110", 
    120 => "11100101011100", 121 => "01101001000111", 122 => "00100100100111", 
    123 => "00100110000010", 124 => "00001110000001", 125 => "00110011100011", 
    126 => "11011111100100", 127 => "11010110001111", 128 => "11101100000111", 
    129 => "01011000100001", 130 => "10110001101110", 131 => "11000110001100", 
    132 => "00101110010000", 133 => "11001100010011", 134 => "10010101100110", 
    135 => "11000000110101", 136 => "10011110011011", 137 => "11101000100011", 
    138 => "01010001110111", 139 => "00000110111110", 140 => "00101010010101", 
    141 => "10011000011010", 142 => "01010010011110", 143 => "00110010100110", 
    144 => "10110011001011", 145 => "00111001010010", 146 => "10011011111111", 
    147 => "10110111111010", 148 => "10110110110101", 149 => "10101000111101", 
    150 => "11111110010010", 151 => "10010110011111", 152 => "00000000101001", 
    153 => "00110100100110", 154 => "10010011001100", 155 => "11010000011111", 
    156 => "00011110111100", 157 => "01011000111110", 158 => "10111010011011", 
    159 => "10111000001000", 160 => "00010010101001", 161 => "00011011000111", 
    162 => "00010110111001", 163 => "11110111111101", 164 => "10101011110010", 
    165 => "00101010010110", 166 => "01011010101101", 167 => "11101011100000", 
    168 => "01010011010001", 169 => "10111100101100", 170 => "11110111110011", 
    171 => "10100101010100", 172 => "00110000111010", 173 => "00011110101100", 
    174 => "11001111110110", 175 => "11011100010110", 176 => "11000110000100", 
    177 => "11000001000110", 178 => "11111101000011", 179 => "11101110100011", 
    180 => "01001010110010", 181 => "10101111010101", 182 => "00000111010110", 
    183 => "10110100100010", 184 => "00101001010000", 185 => "10100111010010", 
    186 => "01001110100010", 187 => "01011111010011", 188 => "10111001001001", 
    189 => "11100001101101", 190 => "11100000100010", 191 => "00001111001011", 
    192 => "10101100000010", 193 => "11110010101101", 194 => "00011101010111", 
    195 => "00110001010101", 196 => "10100100001001", 197 => "01000110001100", 
    198 => "10010110101000", 199 => "01010101100010", 200 => "01001100110000", 
    201 => "01101000110001", 202 => "11110100110100", 203 => "00000111000101", 
    204 => "10010110110001", 205 => "00110101100100", 206 => "11001111101101", 
    207 => "11011010001000", 208 => "10100010010011", 209 => "10011001011100", 
    210 => "10011001101101", 211 => "10101000011111", 212 => "00001011001100", 
    213 => "11100000110010", 214 => "00101010111001", 215 => "01001100001101", 
    216 => "11100111110100", 217 => "11011011100110", 218 => "00010011001001", 
    219 => "10011110110101", 220 => "00011100010000", 221 => "01100000001000", 
    222 => "00011011100000", 223 => "11011011111101", 224 => "10101000001000", 
    225 => "00111110000110", 226 => "11110101111101", 227 => "11100001000001", 
    228 => "01000110001010", 229 => "01001000010110", 230 => "00001110110001", 
    231 => "11110001011110", 232 => "01000000110011", 233 => "00011101001111", 
    234 => "00101111110100", 235 => "00110011110101", 236 => "11101001010110", 
    237 => "00100011110101", 238 => "01100110110111", 239 => "11010000110010", 
    240 => "11111110001110", 241 => "11010100010100", 242 => "11011110100001", 
    243 => "10110010000011", 244 => "00111000110010", 245 => "00000110100000", 
    246 => "10101100000100", 247 => "10100101010100", 248 => "01001100010101", 
    249 => "00101000000111", 250 => "00010010110110", 251 => "10110110111000", 
    252 => "00100011010001", 253 => "11100000100011", 254 => "11110110110111", 
    255 => "11110010010000", 256 => "01001111001101", 257 => "00110110001100", 
    258 => "11101000001000", 259 => "11111100011000", 260 => "10111001011001", 
    261 => "10101110110000", 262 => "00100110001010", 263 => "11001000001001", 
    264 => "00011001000010", 265 => "10110111000010", 266 => "00111111110000", 
    267 => "00001000011100", 268 => "11010001011000", 269 => "10100010001000", 
    270 => "10101110110110", 271 => "00101100111000", 272 => "11000111101000", 
    273 => "11010100100100", 274 => "00111001010111", 275 => "10100001010011", 
    276 => "11100101001011", 277 => "10011000001111", 278 => "01010000111010", 
    279 => "10011010010100", 280 => "01011010010100", 281 => "01100001100010", 
    282 => "11101101011000", 283 => "00010110011111", 284 => "10100010101001", 
    285 => "10011010111001", 286 => "00100010011100", 287 => "00000110111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_28 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_28 is
    component infer_layer_6_weights_V_28_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_28_rom_U :  component infer_layer_6_weights_V_28_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



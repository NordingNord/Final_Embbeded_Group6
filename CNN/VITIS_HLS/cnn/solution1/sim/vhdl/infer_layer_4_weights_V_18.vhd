-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_18_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00011110110111", 1 => "10010011001101", 2 => "01010011001100", 
    3 => "00010000011011", 4 => "01010100000111", 5 => "11000000011100", 
    6 => "10100001111000", 7 => "00111110011010", 8 => "10101110010110", 
    9 => "00100111001001", 10 => "11010011100100", 11 => "11111001110101", 
    12 => "10111110000111", 13 => "11110100100000", 14 => "10101011110111", 
    15 => "10100000000010", 16 => "11101010100101", 17 => "11110111111101", 
    18 => "00111101100110", 19 => "00100111111111", 20 => "01010100101010", 
    21 => "11011101010110", 22 => "00100100100110", 23 => "10110011001111", 
    24 => "01100000101110", 25 => "10100000111101", 26 => "10111101001001", 
    27 => "11011100011100", 28 => "11111000000001", 29 => "01010001000110", 
    30 => "01011101111010", 31 => "00011110110000", 32 => "01000100000000", 
    33 => "11001010000010", 34 => "11011111000110", 35 => "10110011100111", 
    36 => "01000000111000", 37 => "10111101010111", 38 => "00010100001101", 
    39 => "00100011101100", 40 => "00110000100000", 41 => "01011000000100", 
    42 => "11111010001101", 43 => "10100011111001", 44 => "01000110010000", 
    45 => "00110010111010", 46 => "11111111101101", 47 => "10010100000111", 
    48 => "11001100000101", 49 => "00110001100110", 50 => "11101110100110", 
    51 => "11011001101000", 52 => "00001010101101", 53 => "11111100111011", 
    54 => "01100110100111", 55 => "00111011011111", 56 => "01000000001000", 
    57 => "11001000011100", 58 => "11011101110101", 59 => "11111010101111", 
    60 => "00111000011010", 61 => "11000010101011", 62 => "00100101101101", 
    63 => "00111110010101", 64 => "11001011001101", 65 => "01010001011101", 
    66 => "11110100110000", 67 => "00101001110111", 68 => "10111011110111", 
    69 => "10010111110001", 70 => "10110010100011", 71 => "10111011010100", 
    72 => "11010000101101", 73 => "11001011000011", 74 => "10101100100101", 
    75 => "00001100110100", 76 => "00100100001001", 77 => "00110001001110", 
    78 => "11100100011101", 79 => "00011111011010", 80 => "00000000010000", 
    81 => "10110110001100", 82 => "00110110010111", 83 => "10100010110011", 
    84 => "11011111111001", 85 => "01011000001101", 86 => "11111000110001", 
    87 => "00000111011000", 88 => "10111101011100", 89 => "01010010101100", 
    90 => "01001111000100", 91 => "10111011001010", 92 => "11100111111001", 
    93 => "10010011110110", 94 => "11110101011111", 95 => "01011011010101", 
    96 => "11111011100101", 97 => "00010010011000", 98 => "11110011100000", 
    99 => "11011000111001", 100 => "00111000011011", 101 => "01011100001101", 
    102 => "11101110100101", 103 => "00110011110100", 104 => "11010101101001", 
    105 => "11010000000011", 106 => "01001100110101", 107 => "00110011001011", 
    108 => "11011010011000", 109 => "01011101001000", 110 => "10110111101000", 
    111 => "00001001101001", 112 => "01000100011010", 113 => "01001011001001", 
    114 => "00100000001100", 115 => "01011000000110", 116 => "00001110111001", 
    117 => "10101000010110", 118 => "00100000001110", 119 => "11101110110110", 
    120 => "11101001110000", 121 => "10111101010010", 122 => "01011011010000", 
    123 => "00011001111011", 124 => "11110111110000", 125 => "01000101011000", 
    126 => "11010111010000", 127 => "11110000101110", 128 => "11001001011010", 
    129 => "00010001111101", 130 => "11011010000011", 131 => "10110000011001", 
    132 => "01010010000101", 133 => "11100111011100", 134 => "11000101011100", 
    135 => "11001101001001", 136 => "11010110100110", 137 => "00111100101000", 
    138 => "10110001111010", 139 => "00101100011010", 140 => "11010101010000", 
    141 => "11101011111000", 142 => "11100000010011", 143 => "11001011101100", 
    144 => "00101101010000", 145 => "10101101110010", 146 => "00110010101010", 
    147 => "00000010000110", 148 => "11110010010110", 149 => "11001011001100", 
    150 => "01001001110100", 151 => "10100110110101", 152 => "00010001011000", 
    153 => "01010001100010", 154 => "00001100110110", 155 => "01000001010001", 
    156 => "00000000010010", 157 => "10010001100100", 158 => "10101000011111", 
    159 => "01010111111000", 160 => "11100000111110", 161 => "10100111101001", 
    162 => "00111100101001", 163 => "11111101000010", 164 => "01000010010011", 
    165 => "00110111000111", 166 => "01010000000001", 167 => "00100001100100", 
    168 => "01000010111111", 169 => "10101010011011", 170 => "00101110111100", 
    171 => "11100101001100", 172 => "11011101000011", 173 => "00011001100111", 
    174 => "00000010010011", 175 => "11100101101000", 176 => "10011001011010", 
    177 => "11000001111010", 178 => "10101000100010", 179 => "10101010111100", 
    180 => "11110111000010", 181 => "01001010000111", 182 => "00111010000101", 
    183 => "01000100010110", 184 => "11100111010101", 185 => "10100010011010", 
    186 => "10100111000100", 187 => "11101010110100", 188 => "00101100101001", 
    189 => "11010000011110", 190 => "10100010001001", 191 => "11110001110011", 
    192 => "00111011100101", 193 => "11110011000110", 194 => "10110101001101", 
    195 => "11000110000000", 196 => "11001000101001", 197 => "10011000000100", 
    198 => "00001100010110", 199 => "11100110111111", 200 => "11111010111011", 
    201 => "11000011100010", 202 => "00100101000101", 203 => "11000011011110", 
    204 => "00100000101111", 205 => "00000110010011", 206 => "01001010100100", 
    207 => "11010110011101", 208 => "01000011010100", 209 => "10110101000110", 
    210 => "10110101110101", 211 => "11110001010010", 212 => "00101010110100", 
    213 => "11010111110111", 214 => "11011101101010", 215 => "00000011111110", 
    216 => "10100000110100", 217 => "01000101100110", 218 => "00001111110111", 
    219 => "11001010011000", 220 => "00001010110011", 221 => "01000100011001", 
    222 => "00001100101100", 223 => "11110001110001", 224 => "00011101011100", 
    225 => "00101110110101", 226 => "10101011010101", 227 => "01011011011111", 
    228 => "10101000111010", 229 => "00110000000110", 230 => "00100111100000", 
    231 => "10011011010110", 232 => "00010101111011", 233 => "00111101101101", 
    234 => "10011001011101", 235 => "00100110011111", 236 => "01100111110001", 
    237 => "00001010011000", 238 => "01100011110000", 239 => "00101010000001", 
    240 => "11010110101010", 241 => "11111100011110", 242 => "10101010101110", 
    243 => "01010110000010", 244 => "00110110110001", 245 => "10100101101111", 
    246 => "01010001010110", 247 => "00001100001010", 248 => "11111000000110", 
    249 => "00110101110000", 250 => "01010110111110", 251 => "00111111100101", 
    252 => "00011001000010", 253 => "00011001000110", 254 => "00010001110000", 
    255 => "00011010011011", 256 => "00001000110101", 257 => "11001001111000", 
    258 => "01010110101011", 259 => "11001001010011", 260 => "01000010100101", 
    261 => "10111000010101", 262 => "01011001010000", 263 => "01010010010110", 
    264 => "00111100000101", 265 => "10111011011000", 266 => "11010011010000", 
    267 => "11011111110111", 268 => "10011101000010", 269 => "11011011001001", 
    270 => "00110100111001", 271 => "10111110010000", 272 => "00111000110011", 
    273 => "11001011010010", 274 => "01010111101100", 275 => "10100000100111", 
    276 => "10100110100000", 277 => "10111001011011", 278 => "00111110001001", 
    279 => "01001011011001", 280 => "11101000111101", 281 => "10110001000001", 
    282 => "10101100101011", 283 => "00100011001001", 284 => "11001001111100", 
    285 => "10100100000010", 286 => "10010100011010", 287 => "11111001001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_18 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_18 is
    component infer_layer_4_weights_V_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_18_rom_U :  component infer_layer_4_weights_V_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



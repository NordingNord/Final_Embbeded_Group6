-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_25_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_25_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00011101111001", 1 => "00000111100001", 2 => "00110000100000", 
    3 => "10010010101110", 4 => "10011110000001", 5 => "00011101111011", 
    6 => "10011000001100", 7 => "00010101110010", 8 => "11011001101100", 
    9 => "10010111110101", 10 => "10101111000110", 11 => "00100011101010", 
    12 => "10110110010011", 13 => "00101110110011", 14 => "10011011011110", 
    15 => "00000011111000", 16 => "11000010110001", 17 => "11010100101001", 
    18 => "01011100111000", 19 => "01010000001010", 20 => "00100001000100", 
    21 => "00000110000001", 22 => "00100010011001", 23 => "10100000100000", 
    24 => "00101111000011", 25 => "00100100101001", 26 => "11001010011011", 
    27 => "01011001001011", 28 => "00011001010100", 29 => "11101000000101", 
    30 => "11111001001111", 31 => "11101111111011", 32 => "11010011001001", 
    33 => "00001101101101", 34 => "10110110011000", 35 => "10010100110010", 
    36 => "00000011100000", 37 => "11100001001001", 38 => "01011111100011", 
    39 => "00100110010010", 40 => "11010111111001", 41 => "01010001011001", 
    42 => "10100111001111", 43 => "00000010110001", 44 => "10101010101111", 
    45 => "00000011010000", 46 => "10110101001111", 47 => "10011011001100", 
    48 => "11010111100010", 49 => "00101011011111", 50 => "11001111101000", 
    51 => "10101011001110", 52 => "00001011010110", 53 => "11001000011101", 
    54 => "10011111100001", 55 => "10100011011110", 56 => "00011000001110", 
    57 => "11001011010010", 58 => "01011110001001", 59 => "00001000100100", 
    60 => "01000110010101", 61 => "11101010010111", 62 => "11000010000111", 
    63 => "10111010011111", 64 => "10111100000101", 65 => "10011000101111", 
    66 => "01100101101011", 67 => "00111010101011", 68 => "10110110000000", 
    69 => "11111010100100", 70 => "00010100000000", 71 => "01000001000001", 
    72 => "10011000100000", 73 => "01001001100001", 74 => "00111011111100", 
    75 => "10101000010100", 76 => "00100001110000", 77 => "10100010011011", 
    78 => "00101100110000", 79 => "00111110000111", 80 => "01010001101101", 
    81 => "10001111100000", 82 => "01000110001001", 83 => "10010010101111", 
    84 => "00110110001101", 85 => "01001011011101", 86 => "01000110010000", 
    87 => "01011010011100", 88 => "10011101100000", 89 => "11000010100011", 
    90 => "11100011001001", 91 => "00110101101111", 92 => "00110011101101", 
    93 => "10110011000000", 94 => "00111010010110", 95 => "11001111011110", 
    96 => "11101110001011", 97 => "11100111000010", 98 => "01001001000111", 
    99 => "10100011000011", 100 => "01000011110110", 101 => "10110111101000", 
    102 => "11100011111011", 103 => "11100010111011", 104 => "00110101100011", 
    105 => "10110001010001", 106 => "01100110010000", 107 => "00000111100101", 
    108 => "11100010101011", 109 => "11001100010110", 110 => "10101100110001", 
    111 => "01001011011001", 112 => "10110111000000", 113 => "11110001001001", 
    114 => "01010111001100", 115 => "00001111101111", 116 => "00001010100101", 
    117 => "10010010001100", 118 => "00010000101111", 119 => "00100100001001", 
    120 => "01011101001101", 121 => "11001100100001", 122 => "01001110101010", 
    123 => "00001010111000", 124 => "10010111110001", 125 => "11010001101110", 
    126 => "11111111111000", 127 => "11101001101110", 128 => "00111110011000", 
    129 => "11110010011000", 130 => "11000110100111", 131 => "00001000010011", 
    132 => "00000001110110", 133 => "00101101000000", 134 => "10101001100101", 
    135 => "11011001001011", 136 => "00100101111110", 137 => "00010000000110", 
    138 => "10110011001100", 139 => "00111000000011", 140 => "10110110111101", 
    141 => "01011101001001", 142 => "10101010000100", 143 => "11110000001010", 
    144 => "01000100101111", 145 => "11000111000000", 146 => "00001000111000", 
    147 => "00000000010110", 148 => "11110100101101", 149 => "10011001110001", 
    150 => "10100000100111", 151 => "00010001110100", 152 => "11101110110111", 
    153 => "00010000110010", 154 => "00001000111101", 155 => "00010101010110", 
    156 => "00001111001101", 157 => "01000100011101", 158 => "11000101110101", 
    159 => "00010001100111", 160 => "10101111001010", 161 => "00001001111000", 
    162 => "11110011101111", 163 => "11100010000100", 164 => "00011110100000", 
    165 => "00011000111110", 166 => "00101100001011", 167 => "00101000100010", 
    168 => "11111100110111", 169 => "11000101110000", 170 => "11010110111010", 
    171 => "10111010001111", 172 => "11011010110101", 173 => "01011110010111", 
    174 => "00000010010001", 175 => "00010100111111", 176 => "11001111010110", 
    177 => "11111111011100", 178 => "11000001111110", 179 => "11100110111010", 
    180 => "01001000111010", 181 => "00100110011011", 182 => "00111011000010", 
    183 => "11011111000100", 184 => "01100110110100", 185 => "10100110000011", 
    186 => "11011000110111", 187 => "10011101111100", 188 => "01000010010011", 
    189 => "10001110000111", 190 => "11000001101001", 191 => "01001000000111", 
    192 => "00110110001011", 193 => "00110010100000", 194 => "11010100110011", 
    195 => "11011010001000", 196 => "10110011001010", 197 => "00110000110111", 
    198 => "10111001110010", 199 => "01011101110111", 200 => "11110110001001", 
    201 => "10110110001000", 202 => "11100011100100", 203 => "10100110011011", 
    204 => "00111100110010", 205 => "10101100110010", 206 => "01011111010011", 
    207 => "10110011000000", 208 => "11110100000000", 209 => "11010000110001", 
    210 => "10110111100100", 211 => "11000001011011", 212 => "11001111100101", 
    213 => "00011101001010", 214 => "11001101011000", 215 => "11011101011100", 
    216 => "01001011001111", 217 => "00011101011011", 218 => "00001011010000", 
    219 => "01001010100010", 220 => "00100010011110", 221 => "11000100111110", 
    222 => "11100101000101", 223 => "00100010000110", 224 => "01001110111001", 
    225 => "10111001111011", 226 => "01000000010101", 227 => "10100010100111", 
    228 => "11100100001011", 229 => "11100100001100", 230 => "11001111011100", 
    231 => "00011001111111", 232 => "00010100000000", 233 => "00111011111110", 
    234 => "11000011100001", 235 => "11101011110011", 236 => "11111101011001", 
    237 => "10010010001011", 238 => "10110110111000", 239 => "11001010110110", 
    240 => "00001100111110", 241 => "00000101010000", 242 => "00110100111010", 
    243 => "11110000100101", 244 => "11011001110111", 245 => "00111101000110", 
    246 => "11011111010100", 247 => "10111110111100", 248 => "10101100011110", 
    249 => "01000111110010", 250 => "01100111010110", 251 => "11011000110011", 
    252 => "10100011110111", 253 => "00000110110101", 254 => "00110110110100", 
    255 => "00111001100101", 256 => "10111011000000", 257 => "00101101000111", 
    258 => "00001000001001", 259 => "11001010001101", 260 => "00001001001110", 
    261 => "11100101000001", 262 => "00011011010110", 263 => "00100000111100", 
    264 => "00010011111110", 265 => "00011011011110", 266 => "01011000011000", 
    267 => "11111001001000", 268 => "10110111110101", 269 => "00010000110101", 
    270 => "00010100011011", 271 => "10010100000011", 272 => "10101000010010", 
    273 => "01000110100001", 274 => "11100001001111", 275 => "11001100011101", 
    276 => "00111001111001", 277 => "00100110110010", 278 => "01010010100110", 
    279 => "00000001010000", 280 => "11010001101011", 281 => "01000011011001", 
    282 => "01011011010101", 283 => "00011110100111", 284 => "11000000100011", 
    285 => "11110010010001", 286 => "11000010000010", 287 => "01010111100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_25 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_25 is
    component infer_layer_4_weights_V_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_25_rom_U :  component infer_layer_4_weights_V_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



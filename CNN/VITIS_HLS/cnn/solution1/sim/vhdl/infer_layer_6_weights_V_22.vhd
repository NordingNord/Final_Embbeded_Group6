-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_22_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001011011001100", 1 => "1111001100000110", 2 => "1101110100000001", 
    3 => "1111001111011000", 4 => "0000101101011010", 5 => "1110110001101101", 
    6 => "1110111010000110", 7 => "0000011111011011", 8 => "1110101010100110", 
    9 => "1110100101011100", 10 => "0000100010011110", 11 => "0001000000001111", 
    12 => "1111010111000110", 13 => "1101101011010000", 14 => "0001011101110101", 
    15 => "0001000001100110", 16 => "0000101101011101", 17 => "0000101100001011", 
    18 => "1111111110100001", 19 => "0000001001000110", 20 => "1110101101110000", 
    21 => "0000011001000010", 22 => "1111101001010110", 23 => "1111111101101001", 
    24 => "0110000100100111", 25 => "0001001101010111", 26 => "0001010100010101", 
    27 => "1111001010010001", 28 => "1110111001011110", 29 => "1111010110110010", 
    30 => "1110100001101000", 31 => "1110100011101010", 32 => "0010011101101100", 
    33 => "1111110001101011", 34 => "1110110000000011", 35 => "1111100100001001", 
    36 => "1110100100100010", 37 => "0000101000011101", 38 => "1111100001000100", 
    39 => "1111010101010000", 40 => "0001100000101000", 41 => "0000000000011111", 
    42 => "0000010111001110", 43 => "1110111011100001", 44 => "1110001110010010", 
    45 => "1100111111111001", 46 => "1111100001010100", 47 => "0000001001011010", 
    48 => "0001001011100011", 49 => "0001010001100100", 50 => "1111100111011000", 
    51 => "1111101111001001", 52 => "0000011000111000", 53 => "1111000111100010", 
    54 => "1111110110110011", 55 => "0001001111111010", 56 => "0101010101100110", 
    57 => "1110110100100100", 58 => "0100101111011110", 59 => "0001001011110100", 
    60 => "1110100110100011", 61 => "1111010110110011", 62 => "1111110000011010", 
    63 => "0000101000110010", 64 => "0000110000000001", 65 => "1110101111101001", 
    66 => "0010100100010101", 67 => "1111101110011111", 68 => "0000110011010111", 
    69 => "1110111001011101", 70 => "1111001011111100", 71 => "1111110000010011", 
    72 => "0000011100001110", 73 => "1110111001011010", 74 => "1111000110101100", 
    75 => "1111010011110010", 76 => "0000100101010111", 77 => "1100111011001111", 
    78 => "1110100000001010", 79 => "0000100000000110", 80 => "0000111100111101", 
    81 => "1111001010111110", 82 => "0001001011011011", 83 => "0001011100000110", 
    84 => "1111100100111010", 85 => "0000101101001001", 86 => "0000010101110000", 
    87 => "0010110101000011", 88 => "0110000111101010", 89 => "0001010011000111", 
    90 => "0101010100000101", 91 => "0000001101100000", 92 => "0000101101010010", 
    93 => "1111101110110011", 94 => "1111100110100010", 95 => "1111000101001101", 
    96 => "1111011111101011", 97 => "0001100110101010", 98 => "0110001111010100", 
    99 => "0001000100111110", 100 => "1110011011110101", 101 => "1110100101010001", 
    102 => "0100010001101001", 103 => "0000000000010001", 104 => "0001000001110010", 
    105 => "0001001011010110", 106 => "0001010111001100", 107 => "1111010010110100", 
    108 => "0100011001011110", 109 => "0011000110010000", 110 => "1111010110000011", 
    111 => "1110000101000110", 112 => "0000110011000110", 113 => "1101110000110001", 
    114 => "0000010100101000", 115 => "1111110011111111", 116 => "0000100001110011", 
    117 => "1110101110001010", 118 => "0010111101111111", 119 => "0100010100111100", 
    120 => "0100111000001000", 121 => "1111100000100101", 122 => "0010110001011110", 
    123 => "0001001000010001", 124 => "0000000100101100", 125 => "0000110011010001", 
    126 => "1111101111001011", 127 => "1111011101111100", 128 => "1111011011101100", 
    129 => "0000000010010101", 130 => "0011101111101110", 131 => "0001101010011100", 
    132 => "0000110111110101", 133 => "0000001011000011", 134 => "0011101010110101", 
    135 => "0000011100110101", 136 => "1111101001110111", 137 => "0000000110110110", 
    138 => "0001001110110101", 139 => "1110101111000110", 140 => "0011110001100100", 
    141 => "0011001010001011", 142 => "0001100011100000", 143 => "1110100111001011", 
    144 => "1110100001111110", 145 => "1100110100010110", 146 => "1111010110100011", 
    147 => "0001010101010110", 148 => "1111111100011010", 149 => "1110111101100011", 
    150 => "0100010000001101", 151 => "0100000101000011", 152 => "1110111001100110", 
    153 => "1111111101001000", 154 => "0100011110000011", 155 => "1111011001001100", 
    156 => "1110111010001011", 157 => "1111010101010100", 158 => "0000011100101111", 
    159 => "1111010100101000", 160 => "1110001110000011", 161 => "0000101111100100", 
    162 => "0100001101100001", 163 => "0000111010001010", 164 => "1110101100011110", 
    165 => "1111001110001000", 166 => "0001010010100101", 167 => "1111110110001000", 
    168 => "0000110110000111", 169 => "1111010011011110", 170 => "1111000010011010", 
    171 => "0000010100100000", 172 => "0010111101000110", 173 => "0010011101011100", 
    174 => "1111000001101100", 175 => "1101100000101000", 176 => "1110011010110111", 
    177 => "1111100100011110", 178 => "1111101110110000", 179 => "1111001000000101", 
    180 => "1111000111001010", 181 => "1110101100001101", 182 => "0010110101110100", 
    183 => "0011110010001111", 184 => "1111000100101001", 185 => "1110111010100111", 
    186 => "0010110010101111", 187 => "1111000010011000", 188 => "1110101110111010", 
    189 => "0001100010011011", 190 => "0001011001000111", 191 => "0000100110010000", 
    192 => "0000011011111011", 193 => "0000010110011010", 194 => "1101101101100101", 
    195 => "0000010101011011", 196 => "1111110001101101", 197 => "1111111001010111", 
    198 => "1110110001100010", 199 => "1111100010010011", 200 => "1111001111100100", 
    201 => "0001100010010011", 202 => "0000001011101001", 203 => "1111011100010100", 
    204 => "1111111111111011", 205 => "0011011010101111", 206 => "0000001001011101", 
    207 => "1110000000100011", 208 => "0000100000001010", 209 => "1110100110000010", 
    210 => "0000101110000101", 211 => "0001011110110101", 212 => "1110100010011001", 
    213 => "1111111010000000", 214 => "1101110010110001", 215 => "1110110111111111", 
    216 => "1110111110000111", 217 => "0000111100011010", 218 => "1100110001101110", 
    219 => "0000110110011111", 220 => "0000111001011110", 221 => "1111000110110011", 
    222 => "1111010111001010", 223 => "0000011010001101", 224 => "1101101011010011", 
    225 => "1110011111100100", 226 => "1101011100100101", 227 => "1110110101010110", 
    228 => "0000111110100000", 229 => "0000100111110100", 230 => "1110010101110111", 
    231 => "1111101111101111", 232 => "1111110001011100", 233 => "0000111000110111", 
    234 => "1110110100011111", 235 => "1111001100000110", 236 => "0000111100011010", 
    237 => "0001111101011101", 238 => "1111100110110111", 239 => "1111110101000110", 
    240 => "0000100100111001", 241 => "1111110000101000", 242 => "0000000001101111", 
    243 => "0000110010110110", 244 => "0000110001100001", 245 => "1111100011000011", 
    246 => "1110001100000111", 247 => "1110010101000111", 248 => "1111000111101010", 
    249 => "1111010011000001", 250 => "1110010010110110", 251 => "0001000000001100", 
    252 => "1111001010011101", 253 => "0001011011011101", 254 => "0001100000001101", 
    255 => "0000100111111100", 256 => "0000010011111001", 257 => "1111000011011001", 
    258 => "1100010101100101", 259 => "0001011101110010", 260 => "0000111111100110", 
    261 => "1110100100110010", 262 => "1101101011101100", 263 => "1111011111111010", 
    264 => "0001010000001010", 265 => "1111101011101001", 266 => "1111000011110100", 
    267 => "0001001000100011", 268 => "1111101010011100", 269 => "0000110011101101", 
    270 => "1110100001001011", 271 => "1101101000111001", 272 => "1111001110110011", 
    273 => "0000100110100010", 274 => "1111000011000101", 275 => "1110101100111100", 
    276 => "1111011111011111", 277 => "1110111110001011", 278 => "1110011110000110", 
    279 => "1101010010011110", 280 => "0000011001110001", 281 => "0000100110010001", 
    282 => "1110101101100110", 283 => "0001011111110010", 284 => "1111111100100011", 
    285 => "0000100000000101", 286 => "1111101001110000", 287 => "0000001101101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_22 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_22 is
    component infer_layer_6_weights_V_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_22_rom_U :  component infer_layer_6_weights_V_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



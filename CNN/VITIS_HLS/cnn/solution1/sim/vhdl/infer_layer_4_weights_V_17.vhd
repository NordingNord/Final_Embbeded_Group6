-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_17_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_17_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111001100111100", 1 => "1110101011111001", 2 => "0000100101111010", 
    3 => "1111101100100111", 4 => "1110111110000001", 5 => "0001000010110001", 
    6 => "1110110000110001", 7 => "1111110001111110", 8 => "0000011011001111", 
    9 => "0000011100000011", 10 => "0000100000110011", 11 => "0000011110110111", 
    12 => "0000010010000011", 13 => "1111000111001001", 14 => "0001000000000001", 
    15 => "0001000111101000", 16 => "0001001110110110", 17 => "0001100101001111", 
    18 => "1100101110110110", 19 => "1101011001000000", 20 => "0000001111011011", 
    21 => "1111000001111001", 22 => "1110111110000000", 23 => "1110101101010110", 
    24 => "1111100010100100", 25 => "1110101010110101", 26 => "0000000111001011", 
    27 => "1111010110111011", 28 => "1100010011100011", 29 => "0001010001110011", 
    30 => "0000001100001110", 31 => "0000111001000011", 32 => "1110000010010111", 
    33 => "0001001000100111", 34 => "1110100111001000", 35 => "1110101001101000", 
    36 => "1111011110100001", 37 => "0001001000011001", 38 => "0000100010110011", 
    39 => "0000000011101000", 40 => "1111010101001110", 41 => "0000110101101101", 
    42 => "1111011100110100", 43 => "0001010011000000", 44 => "0000000001011100", 
    45 => "0001000111110001", 46 => "0000010101101101", 47 => "0001010001110010", 
    48 => "0000111101110101", 49 => "1111110111001011", 50 => "1011111000100110", 
    51 => "0000000001101111", 52 => "0001101001100101", 53 => "0000111111010010", 
    54 => "0000001011000010", 55 => "0001010010100010", 56 => "1111011011011001", 
    57 => "1110110111110000", 58 => "1111011101010010", 59 => "1110110000011110", 
    60 => "1100001111111000", 61 => "0000010000110011", 62 => "1101101010101110", 
    63 => "1111001001101100", 64 => "1111110110100011", 65 => "0000101010100000", 
    66 => "0000011010000000", 67 => "0000011110100101", 68 => "0001010011101100", 
    69 => "1111101110000011", 70 => "1111110001100110", 71 => "1110100001100111", 
    72 => "0000011110010011", 73 => "0000110001101010", 74 => "0000001000000001", 
    75 => "0000011111111110", 76 => "0000010010100000", 77 => "0001000111010001", 
    78 => "1111110001000111", 79 => "1111011110001101", 80 => "0001010010100111", 
    81 => "0000010110001110", 82 => "1101110101000011", 83 => "1111111010101010", 
    84 => "0001011000011000", 85 => "0001001001110100", 86 => "0001011011000011", 
    87 => "0001010110010100", 88 => "0000011011111000", 89 => "1111001000110000", 
    90 => "1111000110011011", 91 => "0000100001110110", 92 => "1100001111001111", 
    93 => "0000001100111110", 94 => "1111100001011011", 95 => "1111010000010101", 
    96 => "1111011111110000", 97 => "0000100100100001", 98 => "0000000011110010", 
    99 => "1110110010001101", 100 => "1111101010110000", 101 => "1111101110111011", 
    102 => "1110101000110011", 103 => "0001010110101000", 104 => "0000000011011000", 
    105 => "1111100111010011", 106 => "0000010001010011", 107 => "1111110101100010", 
    108 => "0001000011000110", 109 => "1111001000110010", 110 => "0001010111111110", 
    111 => "1111010110001111", 112 => "0000001100010001", 113 => "1111111111011010", 
    114 => "1100010000101011", 115 => "1101000011100110", 116 => "1111010000101011", 
    117 => "1111000011101010", 118 => "1111001011001110", 119 => "1111011110101101", 
    120 => "1111010011000001", 121 => "1111111001000110", 122 => "0000011111111110", 
    123 => "1110111111010000", 124 => "1101011001000011", 125 => "1111001001000110", 
    126 => "1110011110011000", 127 => "1101010000111000", 128 => "1110110101101011", 
    129 => "1111011110000010", 130 => "0001100101100011", 131 => "0000011100000000", 
    132 => "1111100011111000", 133 => "0000010100100000", 134 => "1110111001010100", 
    135 => "0000110110011100", 136 => "1111100001101000", 137 => "1110100001001111", 
    138 => "0000111101000111", 139 => "0000100011110100", 140 => "0000101110001100", 
    141 => "1110101011010110", 142 => "1111001001010100", 143 => "1110111100011000", 
    144 => "1110110111010110", 145 => "0001010111100101", 146 => "1100000001101011", 
    147 => "1111100101111111", 148 => "0001110010010001", 149 => "0001100110111100", 
    150 => "0000011001111011", 151 => "1111100000111100", 152 => "0000010011100011", 
    153 => "1111111101100100", 154 => "1110110001111001", 155 => "0000111000001100", 
    156 => "1100010100111011", 157 => "1110100101011011", 158 => "1100110000000100", 
    159 => "1110000100001001", 160 => "0000011101000111", 161 => "1110110101011011", 
    162 => "1110111011100101", 163 => "1110101010110110", 164 => "1111100001101110", 
    165 => "0001000110100110", 166 => "1110011100110100", 167 => "0001010001111111", 
    168 => "0001001100110111", 169 => "0000101010110011", 170 => "0000100101110111", 
    171 => "0000000101001101", 172 => "1111101000001110", 173 => "1111011000111100", 
    174 => "1111011000100001", 175 => "1111000000100010", 176 => "0000010010000111", 
    177 => "1111010001011111", 178 => "1111011110001011", 179 => "0001111101010100", 
    180 => "0000101011100001", 181 => "0001011000010010", 182 => "1111110011010001", 
    183 => "1111010010001001", 184 => "0000100101111111", 185 => "1111100010010100", 
    186 => "0000110100001110", 187 => "1111011110111110", 188 => "1100010011011001", 
    189 => "1111111101011101", 190 => "1100010101100101", 191 => "1111011011110000", 
    192 => "1101010101100010", 193 => "1111010001011110", 194 => "1111011111011110", 
    195 => "1110011100001010", 196 => "0000101100110111", 197 => "1110110100000100", 
    198 => "1111100111011100", 199 => "1111011101100110", 200 => "1111111010000010", 
    201 => "0000010011111001", 202 => "0001010001010101", 203 => "1111011111100110", 
    204 => "1110100011001000", 205 => "1110100001000011", 206 => "0001100010011010", 
    207 => "1110011110100101", 208 => "0001100101011000", 209 => "1110001010011111", 
    210 => "0101010101100000", 211 => "1111100010001001", 212 => "0000110011010101", 
    213 => "0001000101111001", 214 => "1110100100110111", 215 => "0001000011101110", 
    216 => "1111001111011100", 217 => "1110100111010100", 218 => "1111000100001111", 
    219 => "1110100110001010", 220 => "1101001010010101", 221 => "0001011100000011", 
    222 => "1111000000101100", 223 => "1111111010010110", 224 => "1011010000110111", 
    225 => "1111111100001111", 226 => "0000101000111000", 227 => "0001000101001101", 
    228 => "0000010100110000", 229 => "1111001100000111", 230 => "0000100100010000", 
    231 => "0000100101111000", 232 => "0001001111011000", 233 => "1110111111110101", 
    234 => "1111111111100011", 235 => "1110011001001100", 236 => "1110100011010000", 
    237 => "0000100100010110", 238 => "1111101110111111", 239 => "0001100011011010", 
    240 => "1111000001111000", 241 => "0000111101101100", 242 => "0100100101101011", 
    243 => "0001001001110000", 244 => "0001001010101000", 245 => "1110010101000110", 
    246 => "1110110011110011", 247 => "0001010110000010", 248 => "0001011110000101", 
    249 => "1111011010100001", 250 => "0001001001110011", 251 => "0001011000010001", 
    252 => "1010000011001101", 253 => "1111110101000100", 254 => "1010011111110101", 
    255 => "1110001000100001", 256 => "1100001000110011", 257 => "0001100000011111", 
    258 => "0001011110011100", 259 => "1111111001100101", 260 => "0000111110000000", 
    261 => "1111000010111000", 262 => "0000010010000111", 263 => "0000100101011110", 
    264 => "0000101001111101", 265 => "0000011010011000", 266 => "1110101111000000", 
    267 => "1110101111111000", 268 => "0001000111000101", 269 => "1110010011101100", 
    270 => "1110111000111100", 271 => "0001100110101000", 272 => "0001010110101111", 
    273 => "0000010011001110", 274 => "0110110000011110", 275 => "0001101001111001", 
    276 => "1111001111100101", 277 => "0000100100001011", 278 => "1111111011111111", 
    279 => "0000111000101001", 280 => "0001011101110111", 281 => "1101111011100111", 
    282 => "1111110000110111", 283 => "1111001010000100", 284 => "1010000011100110", 
    285 => "1111011000110001", 286 => "1010100001110000", 287 => "1101111101110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_17 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_17 is
    component infer_layer_4_weights_V_17_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_17_rom_U :  component infer_layer_4_weights_V_17_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



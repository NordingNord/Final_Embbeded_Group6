-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_23_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11100111001011101", 1 => "00000001111010110", 
    2 => "00000111000111010", 3 => "00000100110110010", 
    4 => "11110101011100011", 5 => "11101001101101011", 
    6 => "11111001010100101", 7 => "11111101001110111", 
    8 => "11111110010101010", 9 => "11110100101001001", 
    10 => "00000100011111100", 11 => "00001100000010100", 
    12 => "11111000001001000", 13 => "11111001000111000", 
    14 => "00000000111101001", 15 => "00000101011111000", 
    16 => "11110011010011101", 17 => "11110101111110011", 
    18 => "00111101010101100", 19 => "00100000010001100", 
    20 => "00000010010100111", 21 => "00001001011001110", 
    22 => "11110101011011101", 23 => "00001001110100111", 
    24 => "00000101001010111", 25 => "11100111001101101", 
    26 => "00001010001110101", 27 => "11111111111100010", 
    28 => "11110010110010000", 29 => "00000010100110011", 
    30 => "11101011011011101", 31 => "00010110011110001", 
    32 => "11011000011101011", 33 => "00000100100010000", 
    34 => "11111110010011001", 35 => "11111010001111010", 
    36 => "11111011011010000", 37 => "11110001011001001", 
    38 => "00000000111000111", 39 => "11111110111111111", 
    40 => "11110101010100100", 41 => "00000101010001101", 
    42 => "11111001001111010", 43 => "11110010110001100", 
    44 => "11110111111001100", 45 => "11101101100000110", 
    46 => "11111100001100011", 47 => "00001000111110011", 
    48 => "00000101100010111", 49 => "11110001101110111", 
    50 => "00111010100000011", 51 => "00000100111101101", 
    52 => "00001010001001001", 53 => "00000110101011110", 
    54 => "11111000110100001", 55 => "11111000100001010", 
    56 => "11111100010101111", 57 => "11101000001010001", 
    58 => "11110101100100001", 59 => "11110110110100100", 
    60 => "11010100110100111", 61 => "11111000001000001", 
    62 => "11110001010101000", 63 => "11101101100100001", 
    64 => "11111000110000111", 65 => "00000010100010111", 
    66 => "11110101100011101", 67 => "11111110101101100", 
    68 => "11110011111001100", 69 => "00001011010001111", 
    70 => "00000101010000011", 71 => "11110100101011001", 
    72 => "00001100111111010", 73 => "00001010110111010", 
    74 => "00001010011111110", 75 => "00001011111010010", 
    76 => "11111100001110000", 77 => "11111111101101110", 
    78 => "11111101000101000", 79 => "00000100011011100", 
    80 => "11111110111101011", 81 => "00000110000111100", 
    82 => "11101101000110110", 83 => "11011111101001100", 
    84 => "00001011011001100", 85 => "00001100111011011", 
    86 => "00001000101100100", 87 => "00000011001000011", 
    88 => "11110011001101110", 89 => "00011000111000101", 
    90 => "11111101110001010", 91 => "11111011110100110", 
    92 => "11011011001011111", 93 => "00000000111110111", 
    94 => "00001010111101000", 95 => "11100110011010100", 
    96 => "00011011100001001", 97 => "00001100000101011", 
    98 => "00001011011000010", 99 => "11111000100011000", 
    100 => "00001100000111010", 101 => "11110000000010100", 
    102 => "11111000000010111", 103 => "11110011100011100", 
    104 => "00000101111001000", 105 => "11110011000000100", 
    106 => "00000101000011001", 107 => "00000010111000011", 
    108 => "11111111000000010", 109 => "11110111111000111", 
    110 => "11111100110111101", 111 => "11110000011110001", 
    112 => "00001010010101000", 113 => "11110001101010100", 
    114 => "01001011000100011", 115 => "00101101010110010", 
    116 => "11101110110001011", 117 => "00000100101101101", 
    118 => "11110110010110011", 119 => "00001010001111001", 
    120 => "00001100110110010", 121 => "11100011100000110", 
    122 => "00000110010100001", 123 => "00000011010000011", 
    124 => "00110000001010011", 125 => "11111100011011101", 
    126 => "00000010111110100", 127 => "00101001101000101", 
    128 => "00100001001000001", 129 => "11110101110001000", 
    130 => "11111011101111000", 131 => "11110001111101110", 
    132 => "11111101110101101", 133 => "00000100100010100", 
    134 => "11111011001010010", 135 => "11110011010100000", 
    136 => "00000001010101010", 137 => "00001010110000101", 
    138 => "00000101000110010", 139 => "11111011001001100", 
    140 => "11111011110110010", 141 => "11110110100000101", 
    142 => "11110011001010111", 143 => "11110111011111100", 
    144 => "11111100110010010", 145 => "11111010001001010", 
    146 => "00110101011000011", 147 => "11111101110100111", 
    148 => "00000001010000100", 149 => "11110100110100011", 
    150 => "00000110001101010", 151 => "00000011110000100", 
    152 => "11111110110101111", 153 => "00011100000010011", 
    154 => "11110110110101111", 155 => "11110011010001011", 
    156 => "00011011101000100", 157 => "11111100110111101", 
    158 => "00110101110100101", 159 => "00000010010111010", 
    160 => "00001010011101101", 161 => "11111011110000101", 
    162 => "11111111001101111", 163 => "00001101110100100", 
    164 => "00001011000010000", 165 => "00001001000111001", 
    166 => "11111101011000100", 167 => "11111010010111110", 
    168 => "11111111110100100", 169 => "11111101000111111", 
    170 => "11111010101011010", 171 => "11111101001100111", 
    172 => "00001010111010100", 173 => "00000100001101001", 
    174 => "00000011111000110", 175 => "00001000111110101", 
    176 => "11110011000000110", 177 => "11111001110100010", 
    178 => "11010001100011100", 179 => "11001011100011010", 
    180 => "00001010000010101", 181 => "00000010101010011", 
    182 => "11110011100100001", 183 => "11110011001010101", 
    184 => "11111101110110101", 185 => "00010111001111001", 
    186 => "00001010101100011", 187 => "11110111000000100", 
    188 => "00001111101110101", 189 => "00001011011000001", 
    190 => "00100101010000000", 191 => "11110001000001111", 
    192 => "00100001100010010", 193 => "00001101001111100", 
    194 => "11111101000111111", 195 => "11111000101000001", 
    196 => "11111001000110111", 197 => "11111101101000100", 
    198 => "11111101101000110", 199 => "00001100111010111", 
    200 => "11111011000000101", 201 => "11110111000011000", 
    202 => "11110011001011111", 203 => "00001100010100001", 
    204 => "11110101100001100", 205 => "11111101111101000", 
    206 => "00001001110101100", 207 => "11110001110101101", 
    208 => "00000111001001101", 209 => "00001011000111101", 
    210 => "00101001110110100", 211 => "00010001110000110", 
    212 => "00000100011001000", 213 => "00001010110111010", 
    214 => "00001100111110110", 215 => "11110101101111010", 
    216 => "00000111110101000", 217 => "00001101010111110", 
    218 => "11110011111011111", 219 => "00001000001101011", 
    220 => "00101110000111110", 221 => "00000000110101110", 
    222 => "00010010100111110", 223 => "00011000100000110", 
    224 => "00101010011011111", 225 => "00000000010100100", 
    226 => "11111111010010000", 227 => "11110110000011101", 
    228 => "11110011101010010", 229 => "00001000001111000", 
    230 => "11111110010010001", 231 => "00000100101110010", 
    232 => "11111001010100111", 233 => "00001011110101010", 
    234 => "11111010100101000", 235 => "00000010010100110", 
    236 => "00000100101010011", 237 => "00000010000100110", 
    238 => "00001010001100000", 239 => "00000000110001001", 
    240 => "11110011010011010", 241 => "11110110101001001", 
    242 => "00001110101110010", 243 => "00000100110000100", 
    244 => "00000001001110000", 245 => "11111011110111010", 
    246 => "00001101000010110", 247 => "11111111111000011", 
    248 => "00001010111010101", 249 => "00001110000110110", 
    250 => "00001000101110001", 251 => "11111011101110101", 
    252 => "00100001011010010", 253 => "00000100010011101", 
    254 => "00110001011110110", 255 => "00001100110010000", 
    256 => "00000101100101101", 257 => "00001000101011100", 
    258 => "11111000000001010", 259 => "00001010010001011", 
    260 => "00001001110000000", 261 => "00011001010110111", 
    262 => "11110111000010011", 263 => "11111100000101110", 
    264 => "11111101101111010", 265 => "11110100101001010", 
    266 => "11110110100010001", 267 => "00000101001010010", 
    268 => "00001010001110001", 269 => "11111101110000101", 
    270 => "00000110100001011", 271 => "00001011100100111", 
    272 => "11111001111100001", 273 => "00001100010000111", 
    274 => "11000100000011110", 275 => "11101001001001110", 
    276 => "11110110000100001", 277 => "00010001110010001", 
    278 => "11111001010110100", 279 => "11111111101111110", 
    280 => "11110011011011100", 281 => "00100111010000110", 
    282 => "00000001101111101", 283 => "00000100010010011", 
    284 => "00101000001111100", 285 => "00010011101110111", 
    286 => "00111000001000011", 287 => "00000001010011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_23 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_23 is
    component infer_layer_4_weights_V_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_23_rom_U :  component infer_layer_4_weights_V_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



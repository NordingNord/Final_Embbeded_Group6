// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_max_pooling2d_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_1954_p_din0,
        grp_fu_1954_p_din1,
        grp_fu_1954_p_opcode,
        grp_fu_1954_p_dout0,
        grp_fu_1954_p_ce,
        grp_fu_1958_p_din0,
        grp_fu_1958_p_din1,
        grp_fu_1958_p_opcode,
        grp_fu_1958_p_dout0,
        grp_fu_1958_p_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [16:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [14:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_1954_p_din0;
output  [31:0] grp_fu_1954_p_din1;
output  [4:0] grp_fu_1954_p_opcode;
input  [0:0] grp_fu_1954_p_dout0;
output   grp_fu_1954_p_ce;
output  [31:0] grp_fu_1958_p_din0;
output  [31:0] grp_fu_1958_p_din1;
output  [4:0] grp_fu_1958_p_opcode;
input  [0:0] grp_fu_1958_p_dout0;
output   grp_fu_1958_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] input_r_address0;
reg input_r_ce0;
reg[16:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten51_reg_138;
reg   [5:0] i_reg_150;
reg   [10:0] indvar_flatten_reg_162;
reg   [5:0] ii_reg_173;
reg   [5:0] iii_reg_184;
reg   [31:0] reg_206;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln118_reg_981;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln118_reg_981_pp0_iter1_reg;
reg   [4:0] tmp_12_reg_966;
reg   [4:0] tmp_12_reg_966_pp0_iter1_reg;
reg   [4:0] tmp_12_reg_966_pp0_iter2_reg;
reg   [4:0] tmp_12_reg_966_pp0_iter3_reg;
wire   [11:0] zext_ln121_fu_232_p1;
reg   [11:0] zext_ln121_reg_971;
reg   [11:0] zext_ln121_reg_971_pp0_iter1_reg;
reg   [4:0] tmp_13_reg_976;
reg   [4:0] tmp_13_reg_976_pp0_iter1_reg;
reg   [4:0] tmp_13_reg_976_pp0_iter2_reg;
reg   [4:0] tmp_13_reg_976_pp0_iter3_reg;
wire   [0:0] icmp_ln118_fu_252_p2;
reg   [0:0] icmp_ln118_reg_981_pp0_iter2_reg;
reg   [0:0] icmp_ln118_reg_981_pp0_iter3_reg;
wire   [0:0] icmp_ln121_fu_258_p2;
reg   [0:0] icmp_ln121_reg_985;
reg   [0:0] icmp_ln121_reg_985_pp0_iter1_reg;
reg   [0:0] icmp_ln121_reg_985_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_985_pp0_iter3_reg;
wire   [5:0] select_ln118_fu_264_p3;
reg   [5:0] select_ln118_reg_995;
wire   [5:0] add_ln118_1_fu_272_p2;
reg   [5:0] add_ln118_1_reg_1000;
reg   [5:0] add_ln118_1_reg_1000_pp0_iter1_reg;
reg   [4:0] p_mid_reg_1006;
reg   [4:0] p_mid_reg_1006_pp0_iter1_reg;
reg   [4:0] p_mid_reg_1006_pp0_iter2_reg;
reg   [4:0] p_mid_reg_1006_pp0_iter3_reg;
wire   [0:0] and_ln118_fu_326_p2;
reg   [0:0] and_ln118_reg_1011;
reg   [0:0] and_ln118_reg_1011_pp0_iter1_reg;
reg   [0:0] and_ln118_reg_1011_pp0_iter2_reg;
reg   [0:0] and_ln118_reg_1011_pp0_iter3_reg;
wire   [5:0] add_ln121_fu_332_p2;
reg   [5:0] add_ln121_reg_1018;
reg   [5:0] add_ln121_reg_1018_pp0_iter1_reg;
reg   [5:0] add_ln121_reg_1018_pp0_iter2_reg;
reg   [5:0] add_ln121_reg_1018_pp0_iter3_reg;
wire   [5:0] select_ln121_fu_344_p3;
reg   [5:0] select_ln121_reg_1024;
reg   [5:0] select_ln121_reg_1024_pp0_iter1_reg;
reg   [5:0] select_ln121_reg_1024_pp0_iter2_reg;
reg   [5:0] select_ln121_reg_1024_pp0_iter3_reg;
wire   [11:0] zext_ln121_1_fu_352_p1;
reg   [11:0] zext_ln121_1_reg_1031;
reg   [11:0] zext_ln121_1_reg_1031_pp0_iter1_reg;
wire   [16:0] iii_cast_fu_384_p1;
reg   [16:0] iii_cast_reg_1036;
reg   [16:0] iii_cast_reg_1036_pp0_iter1_reg;
wire   [10:0] add_ln121_1_fu_422_p2;
reg   [10:0] add_ln121_1_reg_1051;
wire   [14:0] add_ln118_fu_428_p2;
reg   [14:0] add_ln118_reg_1056;
wire   [5:0] empty_35_fu_434_p2;
reg   [5:0] empty_35_reg_1061;
wire   [5:0] select_ln118_6_fu_440_p3;
reg   [5:0] select_ln118_6_reg_1066;
wire   [5:0] select_ln121_4_fu_446_p3;
reg   [5:0] select_ln121_4_reg_1071;
reg   [31:0] input_load_1_reg_1076;
wire   [5:0] add_ln124_fu_451_p2;
reg   [5:0] add_ln124_reg_1083;
wire   [10:0] select_ln121_5_fu_456_p3;
reg   [10:0] select_ln121_5_reg_1088;
wire   [11:0] empty_36_fu_465_p2;
reg   [11:0] empty_36_reg_1093;
wire   [31:0] select_ln134_fu_513_p3;
reg   [31:0] select_ln134_reg_1099;
wire   [31:0] select_ln134_1_fu_662_p3;
reg   [31:0] select_ln134_1_reg_1106;
wire   [16:0] add_ln133_5_fu_690_p2;
reg   [16:0] add_ln133_5_reg_1118;
wire   [31:0] select_ln134_2_fu_778_p3;
reg   [31:0] select_ln134_2_reg_1123;
reg   [31:0] select_ln134_2_reg_1123_pp0_iter3_reg;
reg   [31:0] input_load_3_reg_1135;
reg    ap_enable_reg_pp0_iter3;
wire   [14:0] add_ln140_fu_867_p2;
reg   [14:0] add_ln140_reg_1142;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter3_state9;
reg    ap_enable_reg_pp0_iter4;
reg   [14:0] ap_phi_mux_indvar_flatten51_phi_fu_142_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_i_phi_fu_154_p4;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_166_p4;
reg   [5:0] ap_phi_mux_ii_phi_fu_177_p4;
reg   [5:0] ap_phi_mux_iii_phi_fu_188_p4;
wire   [63:0] zext_ln133_fu_406_p1;
wire   [63:0] zext_ln133_1_fu_417_p1;
wire   [63:0] zext_ln133_2_fu_685_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln133_3_fu_785_p1;
wire   [63:0] zext_ln140_fu_962_p1;
reg   [31:0] grp_fu_195_p0;
reg   [31:0] grp_fu_195_p1;
reg   [31:0] grp_fu_201_p0;
reg   [31:0] grp_fu_201_p1;
wire   [5:0] empty_fu_226_p0;
wire   [6:0] empty_fu_226_p1;
wire   [11:0] empty_fu_226_p2;
wire   [5:0] p_mid115_fu_292_p0;
wire   [6:0] p_mid115_fu_292_p1;
wire   [11:0] p_mid115_fu_292_p2;
wire   [11:0] add_ln133_fu_246_p2;
wire   [0:0] icmp_ln124_fu_320_p2;
wire   [0:0] xor_ln118_fu_314_p2;
wire   [0:0] or_ln121_fu_338_p2;
wire   [11:0] select_ln118_2_fu_298_p3;
wire   [11:0] add_ln133_6_fu_356_p2;
wire   [11:0] select_ln118_4_fu_306_p3;
wire   [11:0] select_ln121_2_fu_362_p3;
wire   [11:0] or_ln121_1_fu_370_p2;
wire   [10:0] tmp_fu_388_p4;
wire   [16:0] add_ln133_1_fu_398_p3;
wire   [16:0] shl_ln133_mid2_fu_376_p3;
wire   [16:0] add_ln133_2_fu_411_p2;
wire   [5:0] empty_36_fu_465_p0;
wire   [6:0] empty_36_fu_465_p1;
wire   [31:0] bitcast_ln134_fu_471_p1;
wire   [7:0] tmp_2_fu_475_p4;
wire   [22:0] trunc_ln134_fu_485_p1;
wire   [0:0] icmp_ln134_1_fu_495_p2;
wire   [0:0] icmp_ln134_fu_489_p2;
wire   [0:0] or_ln134_fu_501_p2;
wire   [0:0] grp_fu_195_p2;
wire   [0:0] and_ln134_fu_507_p2;
wire   [5:0] p_mid117_fu_526_p2;
wire   [5:0] p_mid119_fu_535_p0;
wire   [6:0] p_mid119_fu_535_p1;
wire   [11:0] p_mid119_fu_535_p2;
wire   [11:0] add_ln133_3_fu_522_p2;
wire   [11:0] select_ln118_3_fu_541_p3;
wire   [11:0] add_ln133_7_fu_554_p2;
wire   [11:0] select_ln118_5_fu_547_p3;
wire   [11:0] select_ln121_3_fu_559_p3;
wire   [11:0] or_ln121_2_fu_566_p2;
wire   [31:0] bitcast_ln134_1_fu_580_p1;
wire   [31:0] bitcast_ln134_2_fu_597_p1;
wire   [7:0] tmp_4_fu_583_p4;
wire   [22:0] trunc_ln134_1_fu_593_p1;
wire   [0:0] icmp_ln134_3_fu_620_p2;
wire   [0:0] icmp_ln134_2_fu_614_p2;
wire   [7:0] tmp_5_fu_600_p4;
wire   [22:0] trunc_ln134_2_fu_610_p1;
wire   [0:0] icmp_ln134_5_fu_638_p2;
wire   [0:0] icmp_ln134_4_fu_632_p2;
wire   [0:0] or_ln134_1_fu_626_p2;
wire   [0:0] or_ln134_2_fu_644_p2;
wire   [0:0] and_ln134_1_fu_650_p2;
wire   [0:0] and_ln134_2_fu_656_p2;
wire   [10:0] tmp_7_fu_668_p4;
wire   [16:0] add_ln133_4_fu_678_p3;
wire   [16:0] shl_ln133_1_mid2_fu_572_p3;
wire   [31:0] bitcast_ln134_3_fu_695_p1;
wire   [31:0] bitcast_ln134_4_fu_713_p1;
wire   [7:0] tmp_8_fu_699_p4;
wire   [22:0] trunc_ln134_3_fu_709_p1;
wire   [0:0] icmp_ln134_7_fu_736_p2;
wire   [0:0] icmp_ln134_6_fu_730_p2;
wire   [7:0] tmp_9_fu_716_p4;
wire   [22:0] trunc_ln134_4_fu_726_p1;
wire   [0:0] icmp_ln134_9_fu_754_p2;
wire   [0:0] icmp_ln134_8_fu_748_p2;
wire   [0:0] or_ln134_3_fu_742_p2;
wire   [0:0] or_ln134_4_fu_760_p2;
wire   [0:0] and_ln134_3_fu_766_p2;
wire   [0:0] grp_fu_201_p2;
wire   [0:0] and_ln134_4_fu_772_p2;
wire   [4:0] mul20_fu_792_p0;
wire   [5:0] mul20_fu_792_p1;
wire   [9:0] p_cast3_cast_fu_798_p1;
wire   [9:0] mul20_fu_792_p2;
wire   [4:0] mul20_mid1_fu_810_p0;
wire   [5:0] mul20_mid1_fu_810_p1;
wire   [9:0] mul20_mid1_fu_810_p2;
wire   [4:0] p_mid1_fu_823_p4;
wire   [9:0] p_cast3_cast_mid1_fu_832_p1;
wire   [9:0] select_ln118_1_fu_816_p3;
wire   [9:0] mul221_fu_801_p2;
wire   [9:0] mul221_mid1_fu_836_p2;
wire   [9:0] select_ln118_7_fu_842_p3;
wire   [9:0] select_ln121_1_fu_849_p3;
wire   [14:0] iii_cast5_fu_864_p1;
wire   [14:0] add26_mid2_fu_856_p3;
wire   [31:0] bitcast_ln134_5_fu_873_p1;
wire   [31:0] bitcast_ln134_6_fu_890_p1;
wire   [7:0] tmp_1_fu_876_p4;
wire   [22:0] trunc_ln134_5_fu_886_p1;
wire   [0:0] icmp_ln134_11_fu_913_p2;
wire   [0:0] icmp_ln134_10_fu_907_p2;
wire   [7:0] tmp_10_fu_893_p4;
wire   [22:0] trunc_ln134_6_fu_903_p1;
wire   [0:0] icmp_ln134_13_fu_931_p2;
wire   [0:0] icmp_ln134_12_fu_925_p2;
wire   [0:0] or_ln134_5_fu_919_p2;
wire   [0:0] or_ln134_6_fu_937_p2;
wire   [0:0] and_ln134_5_fu_943_p2;
wire   [0:0] and_ln134_6_fu_949_p2;
wire    grp_fu_195_ce;
wire   [4:0] grp_fu_195_opcode;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    grp_fu_201_ce;
wire   [4:0] grp_fu_201_opcode;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] empty_36_fu_465_p00;
wire   [11:0] empty_fu_226_p00;
wire   [9:0] mul20_fu_792_p00;
wire   [9:0] mul20_mid1_fu_810_p00;
wire   [11:0] p_mid115_fu_292_p00;
wire   [11:0] p_mid119_fu_535_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U22(
    .din0(empty_fu_226_p0),
    .din1(empty_fu_226_p1),
    .dout(empty_fu_226_p2)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U23(
    .din0(p_mid115_fu_292_p0),
    .din1(p_mid115_fu_292_p1),
    .dout(p_mid115_fu_292_p2)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U24(
    .din0(empty_36_fu_465_p0),
    .din1(empty_36_fu_465_p1),
    .dout(empty_36_fu_465_p2)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U25(
    .din0(p_mid119_fu_535_p0),
    .din1(p_mid119_fu_535_p1),
    .dout(p_mid119_fu_535_p2)
);

infer_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U26(
    .din0(mul20_fu_792_p0),
    .din1(mul20_fu_792_p1),
    .dout(mul20_fu_792_p2)
);

infer_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U27(
    .din0(mul20_mid1_fu_810_p0),
    .din1(mul20_mid1_fu_810_p1),
    .dout(mul20_mid1_fu_810_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter3_state9)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter3_state9))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_150 <= select_ln118_6_reg_1066;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_150 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_reg_173 <= select_ln121_4_reg_1071;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_173 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iii_reg_184 <= add_ln124_reg_1083;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_184 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten51_reg_138 <= add_ln118_reg_1056;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten51_reg_138 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_162 <= select_ln121_5_reg_1088;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_162 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_fu_252_p2 == 1'd0))) begin
        add_ln118_1_reg_1000 <= add_ln118_1_fu_272_p2;
        add_ln121_1_reg_1051 <= add_ln121_1_fu_422_p2;
        add_ln121_reg_1018 <= add_ln121_fu_332_p2;
        and_ln118_reg_1011 <= and_ln118_fu_326_p2;
        icmp_ln121_reg_985 <= icmp_ln121_fu_258_p2;
        iii_cast_reg_1036[5 : 0] <= iii_cast_fu_384_p1[5 : 0];
        p_mid_reg_1006 <= {{add_ln118_1_fu_272_p2[5:1]}};
        select_ln118_reg_995 <= select_ln118_fu_264_p3;
        select_ln121_reg_1024 <= select_ln121_fu_344_p3;
        zext_ln121_1_reg_1031[5 : 0] <= zext_ln121_1_fu_352_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln118_1_reg_1000_pp0_iter1_reg <= add_ln118_1_reg_1000;
        add_ln121_reg_1018_pp0_iter1_reg <= add_ln121_reg_1018;
        add_ln121_reg_1018_pp0_iter2_reg <= add_ln121_reg_1018_pp0_iter1_reg;
        add_ln121_reg_1018_pp0_iter3_reg <= add_ln121_reg_1018_pp0_iter2_reg;
        and_ln118_reg_1011_pp0_iter1_reg <= and_ln118_reg_1011;
        and_ln118_reg_1011_pp0_iter2_reg <= and_ln118_reg_1011_pp0_iter1_reg;
        and_ln118_reg_1011_pp0_iter3_reg <= and_ln118_reg_1011_pp0_iter2_reg;
        empty_36_reg_1093 <= empty_36_fu_465_p2;
        icmp_ln118_reg_981 <= icmp_ln118_fu_252_p2;
        icmp_ln118_reg_981_pp0_iter1_reg <= icmp_ln118_reg_981;
        icmp_ln118_reg_981_pp0_iter2_reg <= icmp_ln118_reg_981_pp0_iter1_reg;
        icmp_ln118_reg_981_pp0_iter3_reg <= icmp_ln118_reg_981_pp0_iter2_reg;
        icmp_ln121_reg_985_pp0_iter1_reg <= icmp_ln121_reg_985;
        icmp_ln121_reg_985_pp0_iter2_reg <= icmp_ln121_reg_985_pp0_iter1_reg;
        icmp_ln121_reg_985_pp0_iter3_reg <= icmp_ln121_reg_985_pp0_iter2_reg;
        iii_cast_reg_1036_pp0_iter1_reg[5 : 0] <= iii_cast_reg_1036[5 : 0];
        p_mid_reg_1006_pp0_iter1_reg <= p_mid_reg_1006;
        p_mid_reg_1006_pp0_iter2_reg <= p_mid_reg_1006_pp0_iter1_reg;
        p_mid_reg_1006_pp0_iter3_reg <= p_mid_reg_1006_pp0_iter2_reg;
        select_ln121_reg_1024_pp0_iter1_reg <= select_ln121_reg_1024;
        select_ln121_reg_1024_pp0_iter2_reg <= select_ln121_reg_1024_pp0_iter1_reg;
        select_ln121_reg_1024_pp0_iter3_reg <= select_ln121_reg_1024_pp0_iter2_reg;
        tmp_12_reg_966 <= {{ap_phi_mux_i_phi_fu_154_p4[5:1]}};
        tmp_12_reg_966_pp0_iter1_reg <= tmp_12_reg_966;
        tmp_12_reg_966_pp0_iter2_reg <= tmp_12_reg_966_pp0_iter1_reg;
        tmp_12_reg_966_pp0_iter3_reg <= tmp_12_reg_966_pp0_iter2_reg;
        tmp_13_reg_976 <= {{ap_phi_mux_ii_phi_fu_177_p4[5:1]}};
        tmp_13_reg_976_pp0_iter1_reg <= tmp_13_reg_976;
        tmp_13_reg_976_pp0_iter2_reg <= tmp_13_reg_976_pp0_iter1_reg;
        tmp_13_reg_976_pp0_iter3_reg <= tmp_13_reg_976_pp0_iter2_reg;
        zext_ln121_1_reg_1031_pp0_iter1_reg[5 : 0] <= zext_ln121_1_reg_1031[5 : 0];
        zext_ln121_reg_971[5 : 0] <= zext_ln121_fu_232_p1[5 : 0];
        zext_ln121_reg_971_pp0_iter1_reg[5 : 0] <= zext_ln121_reg_971[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln118_reg_1056 <= add_ln118_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln124_reg_1083 <= add_ln124_fu_451_p2;
        input_load_1_reg_1076 <= input_r_q0;
        select_ln118_6_reg_1066 <= select_ln118_6_fu_440_p3;
        select_ln121_4_reg_1071 <= select_ln121_4_fu_446_p3;
        select_ln121_5_reg_1088 <= select_ln121_5_fu_456_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln133_5_reg_1118 <= add_ln133_5_fu_690_p2;
        select_ln134_1_reg_1106 <= select_ln134_1_fu_662_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln118_reg_981_pp0_iter3_reg == 1'd0))) begin
        add_ln140_reg_1142 <= add_ln140_fu_867_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_35_reg_1061[5 : 1] <= empty_35_fu_434_p2[5 : 1];
        select_ln134_2_reg_1123_pp0_iter3_reg <= select_ln134_2_reg_1123;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_reg_981_pp0_iter2_reg == 1'd0))) begin
        input_load_3_reg_1135 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln118_reg_981_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_206 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln118_reg_981_pp0_iter2_reg == 1'd0))) begin
        select_ln134_2_reg_1123 <= select_ln134_2_fu_778_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln134_reg_1099 <= select_ln134_fu_513_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_pp0_exit_iter3_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_981 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_154_p4 = select_ln118_6_reg_1066;
    end else begin
        ap_phi_mux_i_phi_fu_154_p4 = i_reg_150;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ii_phi_fu_177_p4 = select_ln121_4_reg_1071;
    end else begin
        ap_phi_mux_ii_phi_fu_177_p4 = ii_reg_173;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_iii_phi_fu_188_p4 = add_ln124_reg_1083;
    end else begin
        ap_phi_mux_iii_phi_fu_188_p4 = iii_reg_184;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten51_phi_fu_142_p4 = add_ln118_reg_1056;
    end else begin
        ap_phi_mux_indvar_flatten51_phi_fu_142_p4 = indvar_flatten51_reg_138;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_981 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = select_ln121_5_reg_1088;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = indvar_flatten_reg_162;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_195_p0 = input_load_1_reg_1076;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_195_p0 = input_r_q1;
    end else begin
        grp_fu_195_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_195_p1 = select_ln134_fu_513_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_195_p1 = 32'd0;
    end else begin
        grp_fu_195_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_201_p0 = input_load_3_reg_1135;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_201_p0 = input_r_q1;
    end else begin
        grp_fu_201_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_201_p1 = select_ln134_2_reg_1123;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_201_p1 = select_ln134_1_reg_1106;
    end else begin
        grp_fu_201_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln133_3_fu_785_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln133_1_fu_417_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address1 = zext_ln133_2_fu_685_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln133_fu_406_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_reg_981_pp0_iter3_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add26_mid2_fu_856_p3 = {{select_ln121_1_fu_849_p3}, {5'd0}};

assign add_ln118_1_fu_272_p2 = (ap_phi_mux_i_phi_fu_154_p4 + 6'd2);

assign add_ln118_fu_428_p2 = (indvar_flatten51_reg_138 + 15'd1);

assign add_ln121_1_fu_422_p2 = (ap_phi_mux_indvar_flatten_phi_fu_166_p4 + 11'd1);

assign add_ln121_fu_332_p2 = (select_ln118_fu_264_p3 + 6'd2);

assign add_ln124_fu_451_p2 = (select_ln121_reg_1024 + 6'd1);

assign add_ln133_1_fu_398_p3 = {{tmp_fu_388_p4}, {select_ln121_fu_344_p3}};

assign add_ln133_2_fu_411_p2 = (shl_ln133_mid2_fu_376_p3 + iii_cast_fu_384_p1);

assign add_ln133_3_fu_522_p2 = (empty_36_reg_1093 + zext_ln121_reg_971_pp0_iter1_reg);

assign add_ln133_4_fu_678_p3 = {{tmp_7_fu_668_p4}, {select_ln121_reg_1024_pp0_iter1_reg}};

assign add_ln133_5_fu_690_p2 = (shl_ln133_1_mid2_fu_572_p3 + iii_cast_reg_1036_pp0_iter1_reg);

assign add_ln133_6_fu_356_p2 = (select_ln118_2_fu_298_p3 + zext_ln121_1_fu_352_p1);

assign add_ln133_7_fu_554_p2 = (select_ln118_3_fu_541_p3 + zext_ln121_1_reg_1031_pp0_iter1_reg);

assign add_ln133_fu_246_p2 = (empty_fu_226_p2 + zext_ln121_fu_232_p1);

assign add_ln140_fu_867_p2 = (iii_cast5_fu_864_p1 + add26_mid2_fu_856_p3);

assign and_ln118_fu_326_p2 = (xor_ln118_fu_314_p2 & icmp_ln124_fu_320_p2);

assign and_ln134_1_fu_650_p2 = (or_ln134_2_fu_644_p2 & or_ln134_1_fu_626_p2);

assign and_ln134_2_fu_656_p2 = (grp_fu_1954_p_dout0 & and_ln134_1_fu_650_p2);

assign and_ln134_3_fu_766_p2 = (or_ln134_4_fu_760_p2 & or_ln134_3_fu_742_p2);

assign and_ln134_4_fu_772_p2 = (grp_fu_1958_p_dout0 & and_ln134_3_fu_766_p2);

assign and_ln134_5_fu_943_p2 = (or_ln134_6_fu_937_p2 & or_ln134_5_fu_919_p2);

assign and_ln134_6_fu_949_p2 = (grp_fu_1958_p_dout0 & and_ln134_5_fu_943_p2);

assign and_ln134_fu_507_p2 = (or_ln134_fu_501_p2 & grp_fu_1954_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln134_1_fu_580_p1 = input_load_1_reg_1076;

assign bitcast_ln134_2_fu_597_p1 = select_ln134_reg_1099;

assign bitcast_ln134_3_fu_695_p1 = reg_206;

assign bitcast_ln134_4_fu_713_p1 = select_ln134_1_reg_1106;

assign bitcast_ln134_5_fu_873_p1 = input_load_3_reg_1135;

assign bitcast_ln134_6_fu_890_p1 = select_ln134_2_reg_1123_pp0_iter3_reg;

assign bitcast_ln134_fu_471_p1 = reg_206;

assign empty_35_fu_434_p2 = (i_reg_150 | 6'd1);

assign empty_36_fu_465_p0 = empty_36_fu_465_p00;

assign empty_36_fu_465_p00 = empty_35_reg_1061;

assign empty_36_fu_465_p1 = 12'd58;

assign empty_fu_226_p0 = empty_fu_226_p00;

assign empty_fu_226_p00 = ap_phi_mux_i_phi_fu_154_p4;

assign empty_fu_226_p1 = 12'd58;

assign grp_fu_1954_p_ce = 1'b1;

assign grp_fu_1954_p_din0 = grp_fu_195_p0;

assign grp_fu_1954_p_din1 = grp_fu_195_p1;

assign grp_fu_1954_p_opcode = 5'd2;

assign grp_fu_1958_p_ce = 1'b1;

assign grp_fu_1958_p_din0 = grp_fu_201_p0;

assign grp_fu_1958_p_din1 = grp_fu_201_p1;

assign grp_fu_1958_p_opcode = 5'd2;

assign grp_fu_195_ce = 1'b1;

assign grp_fu_195_opcode = 5'd2;

assign grp_fu_195_p2 = grp_fu_1954_p_dout0;

assign grp_fu_201_ce = 1'b1;

assign grp_fu_201_opcode = 5'd2;

assign grp_fu_201_p2 = grp_fu_1958_p_dout0;

assign icmp_ln118_fu_252_p2 = ((ap_phi_mux_indvar_flatten51_phi_fu_142_p4 == 15'd26912) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_258_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_166_p4 == 11'd928) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_320_p2 = ((ap_phi_mux_iii_phi_fu_188_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln134_10_fu_907_p2 = ((tmp_1_fu_876_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_11_fu_913_p2 = ((trunc_ln134_5_fu_886_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_12_fu_925_p2 = ((tmp_10_fu_893_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_13_fu_931_p2 = ((trunc_ln134_6_fu_903_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_1_fu_495_p2 = ((trunc_ln134_fu_485_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_2_fu_614_p2 = ((tmp_4_fu_583_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_3_fu_620_p2 = ((trunc_ln134_1_fu_593_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_4_fu_632_p2 = ((tmp_5_fu_600_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_5_fu_638_p2 = ((trunc_ln134_2_fu_610_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_6_fu_730_p2 = ((tmp_8_fu_699_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_7_fu_736_p2 = ((trunc_ln134_3_fu_709_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_8_fu_748_p2 = ((tmp_9_fu_716_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_9_fu_754_p2 = ((trunc_ln134_4_fu_726_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_489_p2 = ((tmp_2_fu_475_p4 != 8'd255) ? 1'b1 : 1'b0);

assign iii_cast5_fu_864_p1 = select_ln121_reg_1024_pp0_iter3_reg;

assign iii_cast_fu_384_p1 = select_ln121_fu_344_p3;

assign mul20_fu_792_p0 = mul20_fu_792_p00;

assign mul20_fu_792_p00 = tmp_12_reg_966_pp0_iter3_reg;

assign mul20_fu_792_p1 = 10'd29;

assign mul20_mid1_fu_810_p0 = mul20_mid1_fu_810_p00;

assign mul20_mid1_fu_810_p00 = p_mid_reg_1006_pp0_iter3_reg;

assign mul20_mid1_fu_810_p1 = 10'd29;

assign mul221_fu_801_p2 = (p_cast3_cast_fu_798_p1 + mul20_fu_792_p2);

assign mul221_mid1_fu_836_p2 = (p_cast3_cast_mid1_fu_832_p1 + select_ln118_1_fu_816_p3);

assign or_ln121_1_fu_370_p2 = (select_ln121_2_fu_362_p3 | 12'd1);

assign or_ln121_2_fu_566_p2 = (select_ln121_3_fu_559_p3 | 12'd1);

assign or_ln121_fu_338_p2 = (icmp_ln121_fu_258_p2 | and_ln118_fu_326_p2);

assign or_ln134_1_fu_626_p2 = (icmp_ln134_3_fu_620_p2 | icmp_ln134_2_fu_614_p2);

assign or_ln134_2_fu_644_p2 = (icmp_ln134_5_fu_638_p2 | icmp_ln134_4_fu_632_p2);

assign or_ln134_3_fu_742_p2 = (icmp_ln134_7_fu_736_p2 | icmp_ln134_6_fu_730_p2);

assign or_ln134_4_fu_760_p2 = (icmp_ln134_9_fu_754_p2 | icmp_ln134_8_fu_748_p2);

assign or_ln134_5_fu_919_p2 = (icmp_ln134_11_fu_913_p2 | icmp_ln134_10_fu_907_p2);

assign or_ln134_6_fu_937_p2 = (icmp_ln134_13_fu_931_p2 | icmp_ln134_12_fu_925_p2);

assign or_ln134_fu_501_p2 = (icmp_ln134_fu_489_p2 | icmp_ln134_1_fu_495_p2);

assign output_r_address0 = zext_ln140_fu_962_p1;

assign output_r_d0 = ((and_ln134_6_fu_949_p2[0:0] == 1'b1) ? input_load_3_reg_1135 : select_ln134_2_reg_1123_pp0_iter3_reg);

assign p_cast3_cast_fu_798_p1 = tmp_13_reg_976_pp0_iter3_reg;

assign p_cast3_cast_mid1_fu_832_p1 = p_mid1_fu_823_p4;

assign p_mid115_fu_292_p0 = p_mid115_fu_292_p00;

assign p_mid115_fu_292_p00 = add_ln118_1_fu_272_p2;

assign p_mid115_fu_292_p1 = 12'd58;

assign p_mid117_fu_526_p2 = (6'd1 | add_ln118_1_reg_1000_pp0_iter1_reg);

assign p_mid119_fu_535_p0 = p_mid119_fu_535_p00;

assign p_mid119_fu_535_p00 = p_mid117_fu_526_p2;

assign p_mid119_fu_535_p1 = 12'd58;

assign p_mid1_fu_823_p4 = {{add_ln121_reg_1018_pp0_iter3_reg[5:1]}};

assign select_ln118_1_fu_816_p3 = ((icmp_ln121_reg_985_pp0_iter3_reg[0:0] == 1'b1) ? mul20_mid1_fu_810_p2 : mul20_fu_792_p2);

assign select_ln118_2_fu_298_p3 = ((icmp_ln121_fu_258_p2[0:0] == 1'b1) ? p_mid115_fu_292_p2 : empty_fu_226_p2);

assign select_ln118_3_fu_541_p3 = ((icmp_ln121_reg_985_pp0_iter1_reg[0:0] == 1'b1) ? p_mid119_fu_535_p2 : empty_36_reg_1093);

assign select_ln118_4_fu_306_p3 = ((icmp_ln121_fu_258_p2[0:0] == 1'b1) ? p_mid115_fu_292_p2 : add_ln133_fu_246_p2);

assign select_ln118_5_fu_547_p3 = ((icmp_ln121_reg_985_pp0_iter1_reg[0:0] == 1'b1) ? p_mid119_fu_535_p2 : add_ln133_3_fu_522_p2);

assign select_ln118_6_fu_440_p3 = ((icmp_ln121_reg_985[0:0] == 1'b1) ? add_ln118_1_reg_1000 : i_reg_150);

assign select_ln118_7_fu_842_p3 = ((icmp_ln121_reg_985_pp0_iter3_reg[0:0] == 1'b1) ? mul20_mid1_fu_810_p2 : mul221_fu_801_p2);

assign select_ln118_fu_264_p3 = ((icmp_ln121_fu_258_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_ii_phi_fu_177_p4);

assign select_ln121_1_fu_849_p3 = ((and_ln118_reg_1011_pp0_iter3_reg[0:0] == 1'b1) ? mul221_mid1_fu_836_p2 : select_ln118_7_fu_842_p3);

assign select_ln121_2_fu_362_p3 = ((and_ln118_fu_326_p2[0:0] == 1'b1) ? add_ln133_6_fu_356_p2 : select_ln118_4_fu_306_p3);

assign select_ln121_3_fu_559_p3 = ((and_ln118_reg_1011_pp0_iter1_reg[0:0] == 1'b1) ? add_ln133_7_fu_554_p2 : select_ln118_5_fu_547_p3);

assign select_ln121_4_fu_446_p3 = ((and_ln118_reg_1011[0:0] == 1'b1) ? add_ln121_reg_1018 : select_ln118_reg_995);

assign select_ln121_5_fu_456_p3 = ((icmp_ln121_reg_985[0:0] == 1'b1) ? 11'd1 : add_ln121_1_reg_1051);

assign select_ln121_fu_344_p3 = ((or_ln121_fu_338_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_iii_phi_fu_188_p4);

assign select_ln134_1_fu_662_p3 = ((and_ln134_2_fu_656_p2[0:0] == 1'b1) ? input_load_1_reg_1076 : select_ln134_reg_1099);

assign select_ln134_2_fu_778_p3 = ((and_ln134_4_fu_772_p2[0:0] == 1'b1) ? reg_206 : select_ln134_1_reg_1106);

assign select_ln134_fu_513_p3 = ((and_ln134_fu_507_p2[0:0] == 1'b1) ? reg_206 : 32'd0);

assign shl_ln133_1_mid2_fu_572_p3 = {{or_ln121_2_fu_566_p2}, {5'd0}};

assign shl_ln133_mid2_fu_376_p3 = {{or_ln121_1_fu_370_p2}, {5'd0}};

assign tmp_10_fu_893_p4 = {{bitcast_ln134_6_fu_890_p1[30:23]}};

assign tmp_1_fu_876_p4 = {{bitcast_ln134_5_fu_873_p1[30:23]}};

assign tmp_2_fu_475_p4 = {{bitcast_ln134_fu_471_p1[30:23]}};

assign tmp_4_fu_583_p4 = {{bitcast_ln134_1_fu_580_p1[30:23]}};

assign tmp_5_fu_600_p4 = {{bitcast_ln134_2_fu_597_p1[30:23]}};

assign tmp_7_fu_668_p4 = {{select_ln121_3_fu_559_p3[11:1]}};

assign tmp_8_fu_699_p4 = {{bitcast_ln134_3_fu_695_p1[30:23]}};

assign tmp_9_fu_716_p4 = {{bitcast_ln134_4_fu_713_p1[30:23]}};

assign tmp_fu_388_p4 = {{select_ln121_2_fu_362_p3[11:1]}};

assign trunc_ln134_1_fu_593_p1 = bitcast_ln134_1_fu_580_p1[22:0];

assign trunc_ln134_2_fu_610_p1 = bitcast_ln134_2_fu_597_p1[22:0];

assign trunc_ln134_3_fu_709_p1 = bitcast_ln134_3_fu_695_p1[22:0];

assign trunc_ln134_4_fu_726_p1 = bitcast_ln134_4_fu_713_p1[22:0];

assign trunc_ln134_5_fu_886_p1 = bitcast_ln134_5_fu_873_p1[22:0];

assign trunc_ln134_6_fu_903_p1 = bitcast_ln134_6_fu_890_p1[22:0];

assign trunc_ln134_fu_485_p1 = bitcast_ln134_fu_471_p1[22:0];

assign xor_ln118_fu_314_p2 = (icmp_ln121_fu_258_p2 ^ 1'd1);

assign zext_ln121_1_fu_352_p1 = add_ln121_fu_332_p2;

assign zext_ln121_fu_232_p1 = ap_phi_mux_ii_phi_fu_177_p4;

assign zext_ln133_1_fu_417_p1 = add_ln133_2_fu_411_p2;

assign zext_ln133_2_fu_685_p1 = add_ln133_4_fu_678_p3;

assign zext_ln133_3_fu_785_p1 = add_ln133_5_reg_1118;

assign zext_ln133_fu_406_p1 = add_ln133_1_fu_398_p3;

assign zext_ln140_fu_962_p1 = add_ln140_reg_1142;

always @ (posedge ap_clk) begin
    zext_ln121_reg_971[11:6] <= 6'b000000;
    zext_ln121_reg_971_pp0_iter1_reg[11:6] <= 6'b000000;
    zext_ln121_1_reg_1031[11:6] <= 6'b000000;
    zext_ln121_1_reg_1031_pp0_iter1_reg[11:6] <= 6'b000000;
    iii_cast_reg_1036[16:6] <= 11'b00000000000;
    iii_cast_reg_1036_pp0_iter1_reg[16:6] <= 11'b00000000000;
    empty_35_reg_1061[0] <= 1'b1;
end

endmodule //infer_max_pooling2d_2

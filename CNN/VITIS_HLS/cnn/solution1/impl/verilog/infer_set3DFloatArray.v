// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_set3DFloatArray (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_we0,
        array_r_d0,
        array1_address0,
        array1_ce0,
        array1_we0,
        array1_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state18 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] array_r_address0;
output   array_r_ce0;
output   array_r_we0;
output  [31:0] array_r_d0;
output  [10:0] array1_address0;
output   array1_ce0;
output   array1_we0;
output  [31:0] array1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_r_ce0;
reg array_r_we0;
reg array1_ce0;
reg array1_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten17_reg_94;
reg   [3:0] i_reg_105;
reg   [9:0] indvar_flatten_reg_116;
reg   [3:0] ii_reg_127;
reg   [5:0] iii_reg_138;
wire   [11:0] add_ln8_fu_149_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln8_fu_189_p2;
wire   [3:0] select_ln8_fu_275_p3;
wire   [3:0] select_ln10_14_fu_323_p3;
wire   [11:0] add_ln14_fu_341_p2;
wire   [0:0] icmp_ln14_fu_353_p2;
reg   [0:0] icmp_ln14_reg_409;
reg   [0:0] icmp_ln14_reg_409_pp0_iter1_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter2_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter3_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter4_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter5_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter6_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter7_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter8_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter9_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter10_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter11_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter12_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter13_reg;
reg   [0:0] icmp_ln14_reg_409_pp0_iter14_reg;
wire   [5:0] add_ln12_fu_359_p2;
wire   [9:0] select_ln10_15_fu_371_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
wire   [63:0] zext_ln14_fu_379_p1;
wire    ap_block_pp0_stage0;
wire   [8:0] p_shl1_fu_163_p3;
wire   [11:0] p_shl_fu_155_p3;
wire   [11:0] p_shl1_cast_fu_171_p1;
wire   [0:0] icmp_ln10_fu_195_p2;
wire   [3:0] add_ln8_3_fu_209_p2;
wire   [8:0] p_shl1_mid1_fu_223_p3;
wire   [11:0] p_shl_mid1_fu_215_p3;
wire   [11:0] p_shl1_cast_mid1_fu_231_p1;
wire   [11:0] mul7_mid1_fu_235_p2;
wire   [11:0] mul7_fu_175_p2;
wire   [8:0] tmp_fu_181_p3;
wire   [0:0] icmp_ln12_fu_263_p2;
wire   [0:0] not_exitcond_flatten_fu_257_p2;
wire   [3:0] ii_mid27_fu_201_p3;
wire   [0:0] icmp_ln12_mid216_fu_269_p2;
wire   [0:0] or_ln10_fu_289_p2;
wire   [3:0] add_ln10_fu_283_p2;
wire   [8:0] p_mid1_fu_303_p3;
wire   [8:0] zext_ln12_mid214_fu_249_p3;
wire   [8:0] select_ln10_13_fu_311_p3;
wire   [5:0] select_ln10_fu_295_p3;
wire   [11:0] iii_cast_fu_331_p1;
wire   [11:0] mul7_mid2_fu_241_p3;
wire   [11:0] add_ln14_2_fu_335_p2;
wire   [11:0] select_ln10_13_cast_fu_319_p1;
wire   [9:0] add_ln10_3_fu_365_p2;
wire   [11:0] grp_fu_347_p2;
wire    ap_CS_fsm_state18;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

infer_urem_12ns_12ns_12_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
urem_12ns_12ns_12_16_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln14_fu_341_p2),
    .din1(12'd1296),
    .ce(1'b1),
    .dout(grp_fu_347_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_105 <= select_ln8_fu_275_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_105 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_reg_127 <= select_ln10_14_fu_323_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_127 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iii_reg_138 <= add_ln12_fu_359_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_138 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten17_reg_94 <= add_ln8_fu_149_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_94 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_116 <= select_ln10_15_fu_371_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_116 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_409 <= icmp_ln14_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln14_reg_409_pp0_iter10_reg <= icmp_ln14_reg_409_pp0_iter9_reg;
        icmp_ln14_reg_409_pp0_iter11_reg <= icmp_ln14_reg_409_pp0_iter10_reg;
        icmp_ln14_reg_409_pp0_iter12_reg <= icmp_ln14_reg_409_pp0_iter11_reg;
        icmp_ln14_reg_409_pp0_iter13_reg <= icmp_ln14_reg_409_pp0_iter12_reg;
        icmp_ln14_reg_409_pp0_iter14_reg <= icmp_ln14_reg_409_pp0_iter13_reg;
        icmp_ln14_reg_409_pp0_iter2_reg <= icmp_ln14_reg_409_pp0_iter1_reg;
        icmp_ln14_reg_409_pp0_iter3_reg <= icmp_ln14_reg_409_pp0_iter2_reg;
        icmp_ln14_reg_409_pp0_iter4_reg <= icmp_ln14_reg_409_pp0_iter3_reg;
        icmp_ln14_reg_409_pp0_iter5_reg <= icmp_ln14_reg_409_pp0_iter4_reg;
        icmp_ln14_reg_409_pp0_iter6_reg <= icmp_ln14_reg_409_pp0_iter5_reg;
        icmp_ln14_reg_409_pp0_iter7_reg <= icmp_ln14_reg_409_pp0_iter6_reg;
        icmp_ln14_reg_409_pp0_iter8_reg <= icmp_ln14_reg_409_pp0_iter7_reg;
        icmp_ln14_reg_409_pp0_iter9_reg <= icmp_ln14_reg_409_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_409_pp0_iter1_reg <= icmp_ln14_reg_409;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_189_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        array1_ce0 = 1'b1;
    end else begin
        array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln14_reg_409_pp0_iter14_reg == 1'd0))) begin
        array1_we0 = 1'b1;
    end else begin
        array1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln14_reg_409_pp0_iter14_reg == 1'd1))) begin
        array_r_we0 = 1'b1;
    end else begin
        array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln8_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln8_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_3_fu_365_p2 = (indvar_flatten_reg_116 + 10'd1);

assign add_ln10_fu_283_p2 = (ii_mid27_fu_201_p3 + 4'd1);

assign add_ln12_fu_359_p2 = (select_ln10_fu_295_p3 + 6'd1);

assign add_ln14_2_fu_335_p2 = (iii_cast_fu_331_p1 + mul7_mid2_fu_241_p3);

assign add_ln14_fu_341_p2 = (add_ln14_2_fu_335_p2 + select_ln10_13_cast_fu_319_p1);

assign add_ln8_3_fu_209_p2 = (i_reg_105 + 4'd1);

assign add_ln8_fu_149_p2 = (indvar_flatten17_reg_94 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign array1_address0 = zext_ln14_fu_379_p1;

assign array1_d0 = 32'd0;

assign array_r_address0 = zext_ln14_fu_379_p1;

assign array_r_d0 = 32'd0;

assign icmp_ln10_fu_195_p2 = ((indvar_flatten_reg_116 == 10'd288) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_263_p2 = ((iii_reg_138 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln12_mid216_fu_269_p2 = (not_exitcond_flatten_fu_257_p2 & icmp_ln12_fu_263_p2);

assign icmp_ln14_fu_353_p2 = ((add_ln14_fu_341_p2 < 12'd1296) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_189_p2 = ((indvar_flatten17_reg_94 == 12'd2592) ? 1'b1 : 1'b0);

assign ii_mid27_fu_201_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? 4'd0 : ii_reg_127);

assign iii_cast_fu_331_p1 = select_ln10_fu_295_p3;

assign mul7_fu_175_p2 = (p_shl_fu_155_p3 + p_shl1_cast_fu_171_p1);

assign mul7_mid1_fu_235_p2 = (p_shl_mid1_fu_215_p3 + p_shl1_cast_mid1_fu_231_p1);

assign mul7_mid2_fu_241_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? mul7_mid1_fu_235_p2 : mul7_fu_175_p2);

assign not_exitcond_flatten_fu_257_p2 = (icmp_ln10_fu_195_p2 ^ 1'd1);

assign or_ln10_fu_289_p2 = (icmp_ln12_mid216_fu_269_p2 | icmp_ln10_fu_195_p2);

assign p_mid1_fu_303_p3 = {{add_ln10_fu_283_p2}, {5'd0}};

assign p_shl1_cast_fu_171_p1 = p_shl1_fu_163_p3;

assign p_shl1_cast_mid1_fu_231_p1 = p_shl1_mid1_fu_223_p3;

assign p_shl1_fu_163_p3 = {{i_reg_105}, {5'd0}};

assign p_shl1_mid1_fu_223_p3 = {{add_ln8_3_fu_209_p2}, {5'd0}};

assign p_shl_fu_155_p3 = {{i_reg_105}, {8'd0}};

assign p_shl_mid1_fu_215_p3 = {{add_ln8_3_fu_209_p2}, {8'd0}};

assign select_ln10_13_cast_fu_319_p1 = select_ln10_13_fu_311_p3;

assign select_ln10_13_fu_311_p3 = ((icmp_ln12_mid216_fu_269_p2[0:0] == 1'b1) ? p_mid1_fu_303_p3 : zext_ln12_mid214_fu_249_p3);

assign select_ln10_14_fu_323_p3 = ((icmp_ln12_mid216_fu_269_p2[0:0] == 1'b1) ? add_ln10_fu_283_p2 : ii_mid27_fu_201_p3);

assign select_ln10_15_fu_371_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? 10'd1 : add_ln10_3_fu_365_p2);

assign select_ln10_fu_295_p3 = ((or_ln10_fu_289_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_138);

assign select_ln8_fu_275_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? add_ln8_3_fu_209_p2 : i_reg_105);

assign tmp_fu_181_p3 = {{ii_reg_127}, {5'd0}};

assign zext_ln12_mid214_fu_249_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? 9'd0 : tmp_fu_181_p3);

assign zext_ln14_fu_379_p1 = grp_fu_347_p2;

endmodule //infer_set3DFloatArray

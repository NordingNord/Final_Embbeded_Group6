// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_dense_relu_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        input_6_address0,
        input_6_ce0,
        input_6_q0,
        input_7_address0,
        input_7_ce0,
        input_7_q0,
        input_8_address0,
        input_8_ce0,
        input_8_q0,
        input_9_address0,
        input_9_ce0,
        input_9_q0,
        input_10_address0,
        input_10_ce0,
        input_10_q0,
        input_11_address0,
        input_11_ce0,
        input_11_q0,
        input_12_address0,
        input_12_ce0,
        input_12_q0,
        input_13_address0,
        input_13_ce0,
        input_13_q0,
        input_14_address0,
        input_14_ce0,
        input_14_q0,
        input_15_address0,
        input_15_ce0,
        input_15_q0,
        input_16_address0,
        input_16_ce0,
        input_16_q0,
        input_17_address0,
        input_17_ce0,
        input_17_q0,
        input_18_address0,
        input_18_ce0,
        input_18_q0,
        input_19_address0,
        input_19_ce0,
        input_19_q0,
        input_20_address0,
        input_20_ce0,
        input_20_q0,
        input_21_address0,
        input_21_ce0,
        input_21_q0,
        input_22_address0,
        input_22_ce0,
        input_22_q0,
        input_23_address0,
        input_23_ce0,
        input_23_q0,
        input_24_address0,
        input_24_ce0,
        input_24_q0,
        input_25_address0,
        input_25_ce0,
        input_25_q0,
        input_26_address0,
        input_26_ce0,
        input_26_q0,
        input_27_address0,
        input_27_ce0,
        input_27_q0,
        input_28_address0,
        input_28_ce0,
        input_28_q0,
        input_29_address0,
        input_29_ce0,
        input_29_q0,
        input_30_address0,
        input_30_ce0,
        input_30_q0,
        input_31_address0,
        input_31_ce0,
        input_31_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_3337_p_din0,
        grp_fu_3337_p_din1,
        grp_fu_3337_p_opcode,
        grp_fu_3337_p_dout0,
        grp_fu_3337_p_ce,
        grp_fu_3341_p_din0,
        grp_fu_3341_p_din1,
        grp_fu_3341_p_dout0,
        grp_fu_3341_p_ce,
        grp_fu_4439_p_din0,
        grp_fu_4439_p_din1,
        grp_fu_4439_p_opcode,
        grp_fu_4439_p_dout0,
        grp_fu_4439_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_pp0_stage0 = 16'd8;
parameter    ap_ST_fsm_pp0_stage1 = 16'd16;
parameter    ap_ST_fsm_pp0_stage2 = 16'd32;
parameter    ap_ST_fsm_pp0_stage3 = 16'd64;
parameter    ap_ST_fsm_state14 = 16'd128;
parameter    ap_ST_fsm_state15 = 16'd256;
parameter    ap_ST_fsm_state16 = 16'd512;
parameter    ap_ST_fsm_state17 = 16'd1024;
parameter    ap_ST_fsm_state18 = 16'd2048;
parameter    ap_ST_fsm_state19 = 16'd4096;
parameter    ap_ST_fsm_state20 = 16'd8192;
parameter    ap_ST_fsm_state21 = 16'd16384;
parameter    ap_ST_fsm_state22 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [4:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [4:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [4:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [4:0] input_4_address0;
output   input_4_ce0;
input  [31:0] input_4_q0;
output  [4:0] input_5_address0;
output   input_5_ce0;
input  [31:0] input_5_q0;
output  [4:0] input_6_address0;
output   input_6_ce0;
input  [31:0] input_6_q0;
output  [4:0] input_7_address0;
output   input_7_ce0;
input  [31:0] input_7_q0;
output  [4:0] input_8_address0;
output   input_8_ce0;
input  [31:0] input_8_q0;
output  [4:0] input_9_address0;
output   input_9_ce0;
input  [31:0] input_9_q0;
output  [4:0] input_10_address0;
output   input_10_ce0;
input  [31:0] input_10_q0;
output  [4:0] input_11_address0;
output   input_11_ce0;
input  [31:0] input_11_q0;
output  [4:0] input_12_address0;
output   input_12_ce0;
input  [31:0] input_12_q0;
output  [4:0] input_13_address0;
output   input_13_ce0;
input  [31:0] input_13_q0;
output  [4:0] input_14_address0;
output   input_14_ce0;
input  [31:0] input_14_q0;
output  [4:0] input_15_address0;
output   input_15_ce0;
input  [31:0] input_15_q0;
output  [4:0] input_16_address0;
output   input_16_ce0;
input  [31:0] input_16_q0;
output  [4:0] input_17_address0;
output   input_17_ce0;
input  [31:0] input_17_q0;
output  [4:0] input_18_address0;
output   input_18_ce0;
input  [31:0] input_18_q0;
output  [4:0] input_19_address0;
output   input_19_ce0;
input  [31:0] input_19_q0;
output  [4:0] input_20_address0;
output   input_20_ce0;
input  [31:0] input_20_q0;
output  [4:0] input_21_address0;
output   input_21_ce0;
input  [31:0] input_21_q0;
output  [4:0] input_22_address0;
output   input_22_ce0;
input  [31:0] input_22_q0;
output  [4:0] input_23_address0;
output   input_23_ce0;
input  [31:0] input_23_q0;
output  [4:0] input_24_address0;
output   input_24_ce0;
input  [31:0] input_24_q0;
output  [4:0] input_25_address0;
output   input_25_ce0;
input  [31:0] input_25_q0;
output  [4:0] input_26_address0;
output   input_26_ce0;
input  [31:0] input_26_q0;
output  [4:0] input_27_address0;
output   input_27_ce0;
input  [31:0] input_27_q0;
output  [4:0] input_28_address0;
output   input_28_ce0;
input  [31:0] input_28_q0;
output  [4:0] input_29_address0;
output   input_29_ce0;
input  [31:0] input_29_q0;
output  [4:0] input_30_address0;
output   input_30_ce0;
input  [31:0] input_30_q0;
output  [4:0] input_31_address0;
output   input_31_ce0;
input  [31:0] input_31_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_3337_p_din0;
output  [31:0] grp_fu_3337_p_din1;
output  [1:0] grp_fu_3337_p_opcode;
input  [31:0] grp_fu_3337_p_dout0;
output   grp_fu_3337_p_ce;
output  [31:0] grp_fu_3341_p_din0;
output  [31:0] grp_fu_3341_p_din1;
input  [31:0] grp_fu_3341_p_dout0;
output   grp_fu_3341_p_ce;
output  [31:0] grp_fu_4439_p_din0;
output  [31:0] grp_fu_4439_p_din1;
output  [4:0] grp_fu_4439_p_opcode;
input  [0:0] grp_fu_4439_p_dout0;
output   grp_fu_4439_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg input_6_ce0;
reg input_7_ce0;
reg input_8_ce0;
reg input_9_ce0;
reg input_10_ce0;
reg input_11_ce0;
reg input_12_ce0;
reg input_13_ce0;
reg input_14_ce0;
reg input_15_ce0;
reg input_16_ce0;
reg input_17_ce0;
reg input_18_ce0;
reg input_19_ce0;
reg input_20_ce0;
reg input_21_ce0;
reg input_22_ce0;
reg input_23_ce0;
reg input_24_ce0;
reg input_25_ce0;
reg input_26_ce0;
reg input_27_ce0;
reg input_28_ce0;
reg input_29_ce0;
reg input_30_ce0;
reg input_31_ce0;
reg[5:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] layer_9_weights_address0;
reg    layer_9_weights_ce0;
wire   [31:0] layer_9_weights_q0;
wire   [5:0] layer_9_bias_address0;
reg    layer_9_bias_ce0;
wire   [31:0] layer_9_bias_q0;
reg   [9:0] ii_reg_604;
reg   [31:0] add108_reg_615;
reg   [20:0] phi_mul_reg_625;
reg   [9:0] phi_urem_reg_637;
wire   [6:0] add_ln156_fu_663_p2;
reg   [6:0] add_ln156_reg_897;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln156_fu_675_p1;
reg   [63:0] zext_ln156_reg_905;
wire   [0:0] icmp_ln156_fu_669_p2;
reg   [5:0] output_addr_reg_910;
wire   [15:0] zext_ln156_1_fu_680_p1;
reg   [15:0] zext_ln156_1_reg_915;
wire    ap_CS_fsm_state3;
wire   [9:0] add_ln158_fu_684_p2;
reg   [9:0] add_ln158_reg_925;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln158_fu_690_p2;
reg   [0:0] icmp_ln158_reg_930;
reg   [0:0] icmp_ln158_reg_930_pp0_iter1_reg;
reg   [0:0] icmp_ln158_reg_930_pp0_iter2_reg;
wire   [9:0] add_ln158_1_fu_696_p2;
reg   [9:0] add_ln158_1_reg_934;
reg   [5:0] tmp_22_reg_940;
wire   [31:0] tmp_38_fu_769_p34;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [9:0] select_ln158_fu_845_p3;
reg   [9:0] select_ln158_reg_1120;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [20:0] add_ln160_1_fu_852_p2;
reg   [20:0] add_ln160_1_reg_1125;
wire   [31:0] grp_fu_653_p2;
reg   [31:0] mul7_reg_1130;
wire   [31:0] grp_fu_648_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state14;
reg   [31:0] layer_9_bias_load_reg_1145;
wire    ap_CS_fsm_state15;
reg   [31:0] add1_reg_1150;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln49_fu_875_p2;
reg   [0:0] icmp_ln49_reg_1157;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln49_1_fu_881_p2;
reg   [0:0] icmp_ln49_1_reg_1162;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [6:0] i_reg_592;
wire    ap_CS_fsm_state22;
reg   [9:0] ap_phi_mux_ii_phi_fu_608_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_add108_phi_fu_618_p4;
wire    ap_block_pp0_stage1;
reg   [20:0] ap_phi_mux_phi_mul_phi_fu_629_p4;
reg   [9:0] ap_phi_mux_phi_urem_phi_fu_641_p4;
wire   [63:0] zext_ln160_1_fu_712_p1;
wire   [63:0] zext_ln160_2_fu_761_p1;
wire   [0:0] and_ln49_fu_891_p2;
reg   [31:0] grp_fu_648_p0;
reg   [31:0] grp_fu_648_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_653_p0;
wire   [31:0] grp_fu_653_p1;
wire   [31:0] grp_fu_658_p0;
wire   [31:0] grp_fu_658_p1;
wire   [15:0] shl_ln_fu_748_p3;
wire   [15:0] add_ln160_fu_756_p2;
wire   [63:0] tmp_38_fu_769_p33;
wire    ap_block_pp0_stage3;
wire   [0:0] icmp_ln158_1_fu_840_p2;
wire   [31:0] bitcast_ln49_fu_858_p1;
wire   [7:0] tmp_fu_861_p4;
wire   [22:0] trunc_ln49_fu_871_p1;
wire   [0:0] or_ln49_fu_887_p2;
wire   [0:0] grp_fu_658_p2;
wire    grp_fu_648_ce;
wire    grp_fu_653_ce;
wire    grp_fu_658_ce;
wire   [4:0] grp_fu_658_opcode;
reg   [15:0] ap_NS_fsm;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_dense_relu_2_layer_9_weights #(
    .DataWidth( 32 ),
    .AddressRange( 51200 ),
    .AddressWidth( 16 ))
layer_9_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_9_weights_address0),
    .ce0(layer_9_weights_ce0),
    .q0(layer_9_weights_q0)
);

infer_dense_relu_2_layer_9_bias #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
layer_9_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_9_bias_address0),
    .ce0(layer_9_bias_ce0),
    .q0(layer_9_bias_q0)
);

infer_mux_3264_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_3264_32_1_1_U1163(
    .din0(input_0_q0),
    .din1(input_1_q0),
    .din2(input_2_q0),
    .din3(input_3_q0),
    .din4(input_4_q0),
    .din5(input_5_q0),
    .din6(input_6_q0),
    .din7(input_7_q0),
    .din8(input_8_q0),
    .din9(input_9_q0),
    .din10(input_10_q0),
    .din11(input_11_q0),
    .din12(input_12_q0),
    .din13(input_13_q0),
    .din14(input_14_q0),
    .din15(input_15_q0),
    .din16(input_16_q0),
    .din17(input_17_q0),
    .din18(input_18_q0),
    .din19(input_19_q0),
    .din20(input_20_q0),
    .din21(input_21_q0),
    .din22(input_22_q0),
    .din23(input_23_q0),
    .din24(input_24_q0),
    .din25(input_25_q0),
    .din26(input_26_q0),
    .din27(input_27_q0),
    .din28(input_28_q0),
    .din29(input_29_q0),
    .din30(input_30_q0),
    .din31(input_31_q0),
    .din32(tmp_38_fu_769_p33),
    .dout(tmp_38_fu_769_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add108_reg_615 <= output_r_q0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln158_reg_930_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add108_reg_615 <= grp_fu_3337_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_592 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_592 <= add_ln156_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ii_reg_604 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_reg_604 <= add_ln158_reg_925;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_mul_reg_625 <= 21'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_mul_reg_625 <= add_ln160_1_reg_1125;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_urem_reg_637 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_urem_reg_637 <= select_ln158_reg_1120;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add1_reg_1150 <= grp_fu_3337_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln156_reg_897 <= add_ln156_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln158_fu_690_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln158_1_reg_934 <= add_ln158_1_fu_696_p2;
        tmp_22_reg_940 <= {{ap_phi_mux_phi_mul_phi_fu_629_p4[20:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln158_reg_925 <= add_ln158_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln160_1_reg_1125 <= add_ln160_1_fu_852_p2;
        select_ln158_reg_1120 <= select_ln158_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln158_reg_930 <= icmp_ln158_fu_690_p2;
        icmp_ln158_reg_930_pp0_iter1_reg <= icmp_ln158_reg_930;
        icmp_ln158_reg_930_pp0_iter2_reg <= icmp_ln158_reg_930_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        icmp_ln49_1_reg_1162 <= icmp_ln49_1_fu_881_p2;
        icmp_ln49_reg_1157 <= icmp_ln49_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        layer_9_bias_load_reg_1145 <= layer_9_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul7_reg_1130 <= grp_fu_3341_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_669_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        output_addr_reg_910 <= zext_ln156_fu_675_p1;
        zext_ln156_reg_905[6 : 0] <= zext_ln156_fu_675_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln156_1_reg_915[6 : 0] <= zext_ln156_1_fu_680_p1[6 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln158_fu_690_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln156_fu_669_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln158_reg_930_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_add108_phi_fu_618_p4 = grp_fu_3337_p_dout0;
    end else begin
        ap_phi_mux_add108_phi_fu_618_p4 = add108_reg_615;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ii_phi_fu_608_p4 = add_ln158_reg_925;
    end else begin
        ap_phi_mux_ii_phi_fu_608_p4 = ii_reg_604;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_mul_phi_fu_629_p4 = add_ln160_1_reg_1125;
    end else begin
        ap_phi_mux_phi_mul_phi_fu_629_p4 = phi_mul_reg_625;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln158_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_urem_phi_fu_641_p4 = select_ln158_reg_1120;
    end else begin
        ap_phi_mux_phi_urem_phi_fu_641_p4 = phi_urem_reg_637;
    end
end

always @ (*) begin
    if (((icmp_ln156_fu_669_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_648_p0 = add108_reg_615;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_648_p0 = ap_phi_mux_add108_phi_fu_618_p4;
    end else begin
        grp_fu_648_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_648_p1 = layer_9_bias_load_reg_1145;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_648_p1 = mul7_reg_1130;
    end else begin
        grp_fu_648_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_10_ce0 = 1'b1;
    end else begin
        input_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_11_ce0 = 1'b1;
    end else begin
        input_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_12_ce0 = 1'b1;
    end else begin
        input_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_13_ce0 = 1'b1;
    end else begin
        input_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_14_ce0 = 1'b1;
    end else begin
        input_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_15_ce0 = 1'b1;
    end else begin
        input_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_16_ce0 = 1'b1;
    end else begin
        input_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_17_ce0 = 1'b1;
    end else begin
        input_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_18_ce0 = 1'b1;
    end else begin
        input_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_19_ce0 = 1'b1;
    end else begin
        input_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_20_ce0 = 1'b1;
    end else begin
        input_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_21_ce0 = 1'b1;
    end else begin
        input_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_22_ce0 = 1'b1;
    end else begin
        input_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_23_ce0 = 1'b1;
    end else begin
        input_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_24_ce0 = 1'b1;
    end else begin
        input_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_25_ce0 = 1'b1;
    end else begin
        input_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_26_ce0 = 1'b1;
    end else begin
        input_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_27_ce0 = 1'b1;
    end else begin
        input_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_28_ce0 = 1'b1;
    end else begin
        input_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_29_ce0 = 1'b1;
    end else begin
        input_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_30_ce0 = 1'b1;
    end else begin
        input_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_31_ce0 = 1'b1;
    end else begin
        input_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_6_ce0 = 1'b1;
    end else begin
        input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_7_ce0 = 1'b1;
    end else begin
        input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_8_ce0 = 1'b1;
    end else begin
        input_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_9_ce0 = 1'b1;
    end else begin
        input_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        layer_9_bias_ce0 = 1'b1;
    end else begin
        layer_9_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer_9_weights_ce0 = 1'b1;
    end else begin
        layer_9_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        output_r_address0 = output_addr_reg_910;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = zext_ln156_fu_675_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_d0 = add1_reg_1150;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((1'd1 == and_ln49_fu_891_p2) & (1'b1 == ap_CS_fsm_state22)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln156_fu_669_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln158_fu_690_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln158_fu_690_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln156_fu_663_p2 = (i_reg_592 + 7'd1);

assign add_ln158_1_fu_696_p2 = (ap_phi_mux_phi_urem_phi_fu_641_p4 + 10'd1);

assign add_ln158_fu_684_p2 = (ap_phi_mux_ii_phi_fu_608_p4 + 10'd1);

assign add_ln160_1_fu_852_p2 = (phi_mul_reg_625 + 21'd1311);

assign add_ln160_fu_756_p2 = (shl_ln_fu_748_p3 + zext_ln156_1_reg_915);

assign and_ln49_fu_891_p2 = (or_ln49_fu_887_p2 & grp_fu_4439_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_858_p1 = add1_reg_1150;

assign grp_fu_3337_p_ce = 1'b1;

assign grp_fu_3337_p_din0 = grp_fu_648_p0;

assign grp_fu_3337_p_din1 = grp_fu_648_p1;

assign grp_fu_3337_p_opcode = 2'd0;

assign grp_fu_3341_p_ce = 1'b1;

assign grp_fu_3341_p_din0 = tmp_38_fu_769_p34;

assign grp_fu_3341_p_din1 = layer_9_weights_q0;

assign grp_fu_4439_p_ce = 1'b1;

assign grp_fu_4439_p_din0 = add1_reg_1150;

assign grp_fu_4439_p_din1 = 32'd0;

assign grp_fu_4439_p_opcode = 5'd4;

assign grp_fu_648_ce = 1'b1;

assign grp_fu_648_p2 = grp_fu_3337_p_dout0;

assign grp_fu_653_ce = 1'b1;

assign grp_fu_653_p0 = tmp_38_fu_769_p34;

assign grp_fu_653_p1 = layer_9_weights_q0;

assign grp_fu_653_p2 = grp_fu_3341_p_dout0;

assign grp_fu_658_ce = 1'b1;

assign grp_fu_658_opcode = 5'd4;

assign grp_fu_658_p0 = add1_reg_1150;

assign grp_fu_658_p1 = 32'd0;

assign grp_fu_658_p2 = grp_fu_4439_p_dout0;

assign icmp_ln156_fu_669_p2 = ((i_reg_592 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln158_1_fu_840_p2 = ((add_ln158_1_reg_934 < 10'd25) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_690_p2 = ((ap_phi_mux_ii_phi_fu_608_p4 == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_881_p2 = ((trunc_ln49_fu_871_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_875_p2 = ((tmp_fu_861_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln160_1_fu_712_p1;

assign input_10_address0 = zext_ln160_1_fu_712_p1;

assign input_11_address0 = zext_ln160_1_fu_712_p1;

assign input_12_address0 = zext_ln160_1_fu_712_p1;

assign input_13_address0 = zext_ln160_1_fu_712_p1;

assign input_14_address0 = zext_ln160_1_fu_712_p1;

assign input_15_address0 = zext_ln160_1_fu_712_p1;

assign input_16_address0 = zext_ln160_1_fu_712_p1;

assign input_17_address0 = zext_ln160_1_fu_712_p1;

assign input_18_address0 = zext_ln160_1_fu_712_p1;

assign input_19_address0 = zext_ln160_1_fu_712_p1;

assign input_1_address0 = zext_ln160_1_fu_712_p1;

assign input_20_address0 = zext_ln160_1_fu_712_p1;

assign input_21_address0 = zext_ln160_1_fu_712_p1;

assign input_22_address0 = zext_ln160_1_fu_712_p1;

assign input_23_address0 = zext_ln160_1_fu_712_p1;

assign input_24_address0 = zext_ln160_1_fu_712_p1;

assign input_25_address0 = zext_ln160_1_fu_712_p1;

assign input_26_address0 = zext_ln160_1_fu_712_p1;

assign input_27_address0 = zext_ln160_1_fu_712_p1;

assign input_28_address0 = zext_ln160_1_fu_712_p1;

assign input_29_address0 = zext_ln160_1_fu_712_p1;

assign input_2_address0 = zext_ln160_1_fu_712_p1;

assign input_30_address0 = zext_ln160_1_fu_712_p1;

assign input_31_address0 = zext_ln160_1_fu_712_p1;

assign input_3_address0 = zext_ln160_1_fu_712_p1;

assign input_4_address0 = zext_ln160_1_fu_712_p1;

assign input_5_address0 = zext_ln160_1_fu_712_p1;

assign input_6_address0 = zext_ln160_1_fu_712_p1;

assign input_7_address0 = zext_ln160_1_fu_712_p1;

assign input_8_address0 = zext_ln160_1_fu_712_p1;

assign input_9_address0 = zext_ln160_1_fu_712_p1;

assign layer_9_bias_address0 = zext_ln156_reg_905;

assign layer_9_weights_address0 = zext_ln160_2_fu_761_p1;

assign or_ln49_fu_887_p2 = (icmp_ln49_reg_1157 | icmp_ln49_1_reg_1162);

assign select_ln158_fu_845_p3 = ((icmp_ln158_1_fu_840_p2[0:0] == 1'b1) ? add_ln158_1_reg_934 : 10'd0);

assign shl_ln_fu_748_p3 = {{ap_phi_mux_ii_phi_fu_608_p4}, {6'd0}};

assign tmp_38_fu_769_p33 = tmp_22_reg_940;

assign tmp_fu_861_p4 = {{bitcast_ln49_fu_858_p1[30:23]}};

assign trunc_ln49_fu_871_p1 = bitcast_ln49_fu_858_p1[22:0];

assign zext_ln156_1_fu_680_p1 = i_reg_592;

assign zext_ln156_fu_675_p1 = i_reg_592;

assign zext_ln160_1_fu_712_p1 = ap_phi_mux_phi_urem_phi_fu_641_p4;

assign zext_ln160_2_fu_761_p1 = add_ln160_fu_756_p2;

always @ (posedge ap_clk) begin
    zext_ln156_reg_905[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln156_1_reg_915[15:7] <= 9'b000000000;
end

endmodule //infer_dense_relu_2

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_dense_relu_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_852_p_din0,
        grp_fu_852_p_din1,
        grp_fu_852_p_opcode,
        grp_fu_852_p_dout0,
        grp_fu_852_p_ce,
        grp_fu_856_p_din0,
        grp_fu_856_p_din1,
        grp_fu_856_p_dout0,
        grp_fu_856_p_ce,
        grp_fu_1954_p_din0,
        grp_fu_1954_p_din1,
        grp_fu_1954_p_opcode,
        grp_fu_1954_p_dout0,
        grp_fu_1954_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_pp0_stage0 = 16'd8;
parameter    ap_ST_fsm_pp0_stage1 = 16'd16;
parameter    ap_ST_fsm_pp0_stage2 = 16'd32;
parameter    ap_ST_fsm_pp0_stage3 = 16'd64;
parameter    ap_ST_fsm_state14 = 16'd128;
parameter    ap_ST_fsm_state15 = 16'd256;
parameter    ap_ST_fsm_state16 = 16'd512;
parameter    ap_ST_fsm_state17 = 16'd1024;
parameter    ap_ST_fsm_state18 = 16'd2048;
parameter    ap_ST_fsm_state19 = 16'd4096;
parameter    ap_ST_fsm_state20 = 16'd8192;
parameter    ap_ST_fsm_state21 = 16'd16384;
parameter    ap_ST_fsm_state22 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_852_p_din0;
output  [31:0] grp_fu_852_p_din1;
output  [1:0] grp_fu_852_p_opcode;
input  [31:0] grp_fu_852_p_dout0;
output   grp_fu_852_p_ce;
output  [31:0] grp_fu_856_p_din0;
output  [31:0] grp_fu_856_p_din1;
input  [31:0] grp_fu_856_p_dout0;
output   grp_fu_856_p_ce;
output  [31:0] grp_fu_1954_p_din0;
output  [31:0] grp_fu_1954_p_din1;
output  [4:0] grp_fu_1954_p_opcode;
input  [0:0] grp_fu_1954_p_dout0;
output   grp_fu_1954_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[4:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] layer_10_weights_address0;
reg    layer_10_weights_ce0;
wire   [31:0] layer_10_weights_q0;
wire   [4:0] layer_10_bias_address0;
reg    layer_10_bias_ce0;
wire   [31:0] layer_10_bias_q0;
reg   [6:0] ii_reg_125;
reg   [31:0] add108_reg_136;
wire   [5:0] add_ln155_fu_162_p2;
reg   [5:0] add_ln155_reg_261;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln155_fu_174_p1;
reg   [63:0] zext_ln155_reg_269;
wire   [0:0] icmp_ln155_fu_168_p2;
reg   [4:0] output_addr_reg_274;
wire   [10:0] zext_ln155_2_fu_179_p1;
reg   [10:0] zext_ln155_2_reg_279;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln157_fu_183_p2;
reg   [6:0] add_ln157_reg_289;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln157_fu_189_p2;
reg   [0:0] icmp_ln157_reg_294;
reg   [0:0] icmp_ln157_reg_294_pp0_iter1_reg;
reg   [0:0] icmp_ln157_reg_294_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_151_p2;
reg   [31:0] mul7_reg_318;
wire   [31:0] grp_fu_146_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state14;
reg   [31:0] layer_10_bias_load_reg_333;
wire    ap_CS_fsm_state15;
reg   [31:0] add1_reg_338;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln49_fu_239_p2;
reg   [0:0] icmp_ln49_reg_345;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln49_2_fu_245_p2;
reg   [0:0] icmp_ln49_2_reg_350;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage1_subdone;
reg   [5:0] i_reg_113;
wire    ap_CS_fsm_state22;
reg   [6:0] ap_phi_mux_ii_phi_fu_129_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_add108_phi_fu_139_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] ii_cast2_fu_195_p1;
wire   [63:0] zext_ln159_fu_217_p1;
wire   [0:0] and_ln49_fu_255_p2;
reg   [31:0] grp_fu_146_p0;
reg   [31:0] grp_fu_146_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_151_p0;
wire   [31:0] grp_fu_151_p1;
wire   [31:0] grp_fu_157_p0;
wire   [31:0] grp_fu_157_p1;
wire   [5:0] trunc_ln159_fu_200_p1;
wire   [10:0] shl_ln_fu_204_p3;
wire   [10:0] add_ln159_fu_212_p2;
wire   [31:0] bitcast_ln49_fu_222_p1;
wire   [7:0] tmp_fu_225_p4;
wire   [22:0] trunc_ln49_fu_235_p1;
wire   [0:0] or_ln49_fu_251_p2;
wire   [0:0] grp_fu_157_p2;
wire    grp_fu_146_ce;
wire    grp_fu_151_ce;
wire    grp_fu_157_ce;
wire   [4:0] grp_fu_157_opcode;
reg   [15:0] ap_NS_fsm;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_dense_relu_1_layer_10_weights #(
    .DataWidth( 32 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
layer_10_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_10_weights_address0),
    .ce0(layer_10_weights_ce0),
    .q0(layer_10_weights_q0)
);

infer_dense_relu_1_layer_10_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_10_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_10_bias_address0),
    .ce0(layer_10_bias_ce0),
    .q0(layer_10_bias_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add108_reg_136 <= output_r_q0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln157_reg_294_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add108_reg_136 <= grp_fu_852_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_113 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_113 <= add_ln155_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ii_reg_125 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln157_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ii_reg_125 <= add_ln157_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add1_reg_338 <= grp_fu_852_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln155_reg_261 <= add_ln155_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln157_reg_289 <= add_ln157_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln157_reg_294 <= icmp_ln157_fu_189_p2;
        icmp_ln157_reg_294_pp0_iter1_reg <= icmp_ln157_reg_294;
        icmp_ln157_reg_294_pp0_iter2_reg <= icmp_ln157_reg_294_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        icmp_ln49_2_reg_350 <= icmp_ln49_2_fu_245_p2;
        icmp_ln49_reg_345 <= icmp_ln49_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        layer_10_bias_load_reg_333 <= layer_10_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln157_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul7_reg_318 <= grp_fu_856_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln155_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        output_addr_reg_274 <= zext_ln155_fu_174_p1;
        zext_ln155_reg_269[5 : 0] <= zext_ln155_fu_174_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln155_2_reg_279[5 : 0] <= zext_ln155_2_fu_179_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln157_fu_189_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln155_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln157_reg_294_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_add108_phi_fu_139_p4 = grp_fu_852_p_dout0;
    end else begin
        ap_phi_mux_add108_phi_fu_139_p4 = add108_reg_136;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln157_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ii_phi_fu_129_p4 = add_ln157_reg_289;
    end else begin
        ap_phi_mux_ii_phi_fu_129_p4 = ii_reg_125;
    end
end

always @ (*) begin
    if (((icmp_ln155_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_146_p0 = add108_reg_136;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_146_p0 = ap_phi_mux_add108_phi_fu_139_p4;
    end else begin
        grp_fu_146_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_146_p1 = layer_10_bias_load_reg_333;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_146_p1 = mul7_reg_318;
    end else begin
        grp_fu_146_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        layer_10_bias_ce0 = 1'b1;
    end else begin
        layer_10_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer_10_weights_ce0 = 1'b1;
    end else begin
        layer_10_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        output_r_address0 = output_addr_reg_274;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = zext_ln155_fu_174_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_d0 = add1_reg_338;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state22) & (1'd1 == and_ln49_fu_255_p2)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln155_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln157_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln157_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln155_fu_162_p2 = (i_reg_113 + 6'd1);

assign add_ln157_fu_183_p2 = (ap_phi_mux_ii_phi_fu_129_p4 + 7'd1);

assign add_ln159_fu_212_p2 = (shl_ln_fu_204_p3 + zext_ln155_2_reg_279);

assign and_ln49_fu_255_p2 = (or_ln49_fu_251_p2 & grp_fu_1954_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_222_p1 = add1_reg_338;

assign grp_fu_146_ce = 1'b1;

assign grp_fu_146_p2 = grp_fu_852_p_dout0;

assign grp_fu_151_ce = 1'b1;

assign grp_fu_151_p0 = input_r_q0;

assign grp_fu_151_p1 = layer_10_weights_q0;

assign grp_fu_151_p2 = grp_fu_856_p_dout0;

assign grp_fu_157_ce = 1'b1;

assign grp_fu_157_opcode = 5'd4;

assign grp_fu_157_p0 = add1_reg_338;

assign grp_fu_157_p1 = 32'd0;

assign grp_fu_157_p2 = grp_fu_1954_p_dout0;

assign grp_fu_1954_p_ce = 1'b1;

assign grp_fu_1954_p_din0 = add1_reg_338;

assign grp_fu_1954_p_din1 = 32'd0;

assign grp_fu_1954_p_opcode = 5'd4;

assign grp_fu_852_p_ce = 1'b1;

assign grp_fu_852_p_din0 = grp_fu_146_p0;

assign grp_fu_852_p_din1 = grp_fu_146_p1;

assign grp_fu_852_p_opcode = 2'd0;

assign grp_fu_856_p_ce = 1'b1;

assign grp_fu_856_p_din0 = input_r_q0;

assign grp_fu_856_p_din1 = layer_10_weights_q0;

assign icmp_ln155_fu_168_p2 = ((i_reg_113 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_189_p2 = ((ap_phi_mux_ii_phi_fu_129_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_245_p2 = ((trunc_ln49_fu_235_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_239_p2 = ((tmp_fu_225_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ii_cast2_fu_195_p1 = ap_phi_mux_ii_phi_fu_129_p4;

assign input_r_address0 = ii_cast2_fu_195_p1;

assign layer_10_bias_address0 = zext_ln155_reg_269;

assign layer_10_weights_address0 = zext_ln159_fu_217_p1;

assign or_ln49_fu_251_p2 = (icmp_ln49_reg_345 | icmp_ln49_2_reg_350);

assign shl_ln_fu_204_p3 = {{trunc_ln159_fu_200_p1}, {5'd0}};

assign tmp_fu_225_p4 = {{bitcast_ln49_fu_222_p1[30:23]}};

assign trunc_ln159_fu_200_p1 = ap_phi_mux_ii_phi_fu_129_p4[5:0];

assign trunc_ln49_fu_235_p1 = bitcast_ln49_fu_222_p1[22:0];

assign zext_ln155_2_fu_179_p1 = i_reg_113;

assign zext_ln155_fu_174_p1 = i_reg_113;

assign zext_ln159_fu_217_p1 = add_ln159_fu_212_p2;

always @ (posedge ap_clk) begin
    zext_ln155_reg_269[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln155_2_reg_279[10:6] <= 5'b00000;
end

endmodule //infer_dense_relu_1

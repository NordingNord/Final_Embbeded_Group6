// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_1057_p_din0,
        grp_fu_1057_p_din1,
        grp_fu_1057_p_opcode,
        grp_fu_1057_p_dout0,
        grp_fu_1057_p_ce,
        grp_fu_1064_p_din0,
        grp_fu_1064_p_din1,
        grp_fu_1064_p_dout0,
        grp_fu_1064_p_ce,
        grp_fu_1083_p_din0,
        grp_fu_1083_p_din1,
        grp_fu_1083_p_opcode,
        grp_fu_1083_p_dout0,
        grp_fu_1083_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_pp0_stage0 = 16'd8;
parameter    ap_ST_fsm_pp0_stage1 = 16'd16;
parameter    ap_ST_fsm_pp0_stage2 = 16'd32;
parameter    ap_ST_fsm_pp0_stage3 = 16'd64;
parameter    ap_ST_fsm_state14 = 16'd128;
parameter    ap_ST_fsm_state15 = 16'd256;
parameter    ap_ST_fsm_state16 = 16'd512;
parameter    ap_ST_fsm_state17 = 16'd1024;
parameter    ap_ST_fsm_state18 = 16'd2048;
parameter    ap_ST_fsm_state19 = 16'd4096;
parameter    ap_ST_fsm_state20 = 16'd8192;
parameter    ap_ST_fsm_state21 = 16'd16384;
parameter    ap_ST_fsm_state22 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_1057_p_din0;
output  [31:0] grp_fu_1057_p_din1;
output  [1:0] grp_fu_1057_p_opcode;
input  [31:0] grp_fu_1057_p_dout0;
output   grp_fu_1057_p_ce;
output  [31:0] grp_fu_1064_p_din0;
output  [31:0] grp_fu_1064_p_din1;
input  [31:0] grp_fu_1064_p_dout0;
output   grp_fu_1064_p_ce;
output  [31:0] grp_fu_1083_p_din0;
output  [31:0] grp_fu_1083_p_din1;
output  [4:0] grp_fu_1083_p_opcode;
input  [0:0] grp_fu_1083_p_dout0;
output   grp_fu_1083_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[6:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] layer_6_weights_address0;
reg    layer_6_weights_ce0;
wire   [31:0] layer_6_weights_q0;
wire   [4:0] layer_6_bias_address0;
reg    layer_6_bias_ce0;
wire   [31:0] layer_6_bias_q0;
reg   [8:0] indvar_flatten27_reg_212;
reg   [5:0] iv_reg_223;
reg   [3:0] indvar_flatten_reg_234;
reg   [2:0] v_reg_245;
reg   [2:0] vi_reg_256;
reg   [31:0] add4320_reg_267;
wire   [7:0] add_ln71_fu_293_p2;
reg   [7:0] add_ln71_reg_825;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln74_fu_323_p2;
reg   [0:0] icmp_ln74_reg_833;
wire   [0:0] icmp_ln71_fu_317_p2;
wire   [1:0] select_ln71_8_fu_381_p3;
reg   [1:0] select_ln71_8_reg_838;
wire   [5:0] select_ln74_fu_401_p3;
reg   [5:0] select_ln74_reg_844;
wire   [1:0] select_ln74_2_fu_445_p3;
reg   [1:0] select_ln74_2_reg_851;
reg   [6:0] output_addr_reg_857;
wire   [63:0] zext_ln77_fu_468_p1;
reg   [63:0] zext_ln77_reg_862;
wire    ap_CS_fsm_state3;
wire   [13:0] zext_ln77_5_fu_471_p1;
reg   [13:0] zext_ln77_5_reg_867;
wire   [8:0] add_ln83_fu_474_p2;
reg   [8:0] add_ln83_reg_877;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln83_fu_518_p2;
reg   [0:0] icmp_ln83_reg_882;
reg   [0:0] icmp_ln83_reg_882_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_882_pp0_iter2_reg;
wire   [0:0] icmp_ln86_fu_524_p2;
reg   [0:0] icmp_ln86_reg_886;
wire   [5:0] select_ln83_7_fu_544_p3;
reg   [5:0] select_ln83_7_reg_891;
wire   [2:0] select_ln86_fu_606_p3;
reg   [2:0] select_ln86_reg_896;
wire   [2:0] select_ln86_10_fu_673_p3;
reg   [2:0] select_ln86_10_reg_901;
wire   [3:0] add_ln86_4_fu_741_p2;
reg   [3:0] add_ln86_4_reg_916;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] add_ln95_fu_747_p2;
reg   [2:0] add_ln95_reg_931;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [3:0] select_ln86_11_fu_752_p3;
reg   [3:0] select_ln86_11_reg_936;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] mul_reg_941;
wire   [31:0] grp_fu_277_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state14;
wire   [5:0] add_ln77_fu_758_p2;
reg   [5:0] add_ln77_reg_956;
wire   [7:0] select_ln74_3_fu_769_p3;
reg   [7:0] select_ln74_3_reg_961;
reg   [31:0] layer_6_bias_load_reg_966;
wire    ap_CS_fsm_state15;
reg   [31:0] add_reg_971;
wire    ap_CS_fsm_state20;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [7:0] indvar_flatten61_reg_156;
wire    ap_CS_fsm_state22;
reg   [1:0] i_reg_167;
reg   [7:0] indvar_flatten38_reg_178;
reg   [1:0] ii_reg_190;
reg   [5:0] iii_reg_201;
reg   [8:0] ap_phi_mux_indvar_flatten27_phi_fu_216_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_iv_phi_fu_227_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_238_p4;
reg   [2:0] ap_phi_mux_v_phi_fu_249_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_260_p4;
reg   [31:0] ap_phi_mux_add4320_phi_fu_270_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] sum19_cast_fu_463_p1;
wire   [63:0] zext_ln98_fu_726_p1;
wire   [63:0] zext_ln98_3_fu_736_p1;
reg   [31:0] grp_fu_277_p0;
reg   [31:0] grp_fu_277_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_282_p0;
wire   [31:0] grp_fu_282_p1;
wire   [31:0] grp_fu_288_p0;
wire   [31:0] grp_fu_288_p1;
wire    ap_CS_fsm_state21;
wire   [1:0] tmp_fu_305_p2;
wire   [1:0] empty_fu_299_p2;
wire   [1:0] add_ln71_3_fu_337_p2;
wire   [1:0] empty_76_fu_343_p2;
wire   [0:0] icmp_ln77_fu_369_p2;
wire   [0:0] xor_ln71_fu_363_p2;
wire   [1:0] select_ln71_fu_329_p3;
wire   [0:0] and_ln71_fu_375_p2;
wire   [0:0] or_ln74_fu_395_p2;
wire   [1:0] tmp_mid1_fu_409_p2;
wire   [1:0] select_ln71_7_fu_349_p3;
wire   [1:0] p_mid153_fu_357_p2;
wire   [1:0] empty_71_fu_311_p2;
wire   [1:0] p_mid1_fu_415_p2;
wire   [1:0] select_ln71_9_fu_421_p3;
wire   [1:0] select_ln74_1_fu_429_p3;
wire   [1:0] add_ln74_fu_389_p2;
wire   [6:0] zext_ln77_6_fu_453_p1;
wire   [6:0] p_mid2_fu_437_p3;
wire   [6:0] sum19_fu_457_p2;
wire   [2:0] indvars_iv_next34_fu_484_p2;
wire   [1:0] empty_72_fu_494_p1;
wire   [3:0] p_shl_fu_498_p3;
wire   [3:0] indvars_iv_next34_cast_fu_490_p1;
wire   [3:0] sub_ln94_fu_506_p2;
wire   [5:0] add_ln83_2_fu_538_p2;
wire   [1:0] trunc_ln92_fu_480_p1;
wire   [3:0] add_ln95_6_fu_512_p2;
wire   [0:0] icmp_ln89_fu_582_p2;
wire   [0:0] xor_ln83_fu_576_p2;
wire   [2:0] select_ln83_fu_530_p3;
wire   [0:0] and_ln83_fu_588_p2;
wire   [0:0] or_ln86_fu_600_p2;
wire   [2:0] indvars_iv_next34_dup_fu_594_p2;
wire   [1:0] trunc_ln92_1_fu_614_p1;
wire   [1:0] select_ln83_8_fu_560_p3;
wire   [1:0] select_ln86_8_fu_618_p3;
wire   [2:0] indvars_iv_next34_mid1_fu_631_p2;
wire   [1:0] empty_74_fu_641_p1;
wire   [3:0] p_shl_mid1_fu_645_p3;
wire   [3:0] indvars_iv_next34_cast_mid1_fu_637_p1;
wire   [3:0] sub_ln94_3_fu_653_p2;
wire   [3:0] add_ln95_8_fu_659_p2;
wire   [3:0] select_ln83_9_fu_568_p3;
wire  signed [1:0] trunc_ln91_fu_681_p1;
wire   [1:0] add_ln86_fu_626_p2;
wire   [1:0] add_ln91_fu_685_p2;
wire   [3:0] select_ln86_9_fu_665_p3;
wire  signed [3:0] sext_ln94_fu_700_p1;
wire   [3:0] add_ln95_7_fu_704_p2;
wire   [4:0] trunc_ln83_fu_556_p1;
wire   [8:0] shl_ln_fu_690_p4;
wire   [8:0] zext_ln83_fu_552_p1;
wire   [8:0] add_ln98_fu_720_p2;
wire   [13:0] shl_ln2_fu_710_p4;
wire   [13:0] add_ln98_3_fu_731_p2;
wire    ap_block_pp0_stage3;
wire   [7:0] add_ln74_3_fu_763_p2;
wire   [31:0] bitcast_ln49_fu_776_p1;
wire   [7:0] tmp_s_fu_779_p4;
wire   [22:0] trunc_ln49_fu_789_p1;
wire   [0:0] icmp_ln49_8_fu_799_p2;
wire   [0:0] icmp_ln49_fu_793_p2;
wire   [0:0] or_ln49_fu_805_p2;
wire   [0:0] grp_fu_288_p2;
wire   [0:0] and_ln49_fu_811_p2;
wire    grp_fu_277_ce;
wire    grp_fu_282_ce;
wire    grp_fu_288_ce;
wire   [4:0] grp_fu_288_opcode;
reg   [15:0] ap_NS_fsm;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_conv2d_layer_6_weights #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
layer_6_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_6_weights_address0),
    .ce0(layer_6_weights_ce0),
    .q0(layer_6_weights_q0)
);

infer_conv2d_layer_6_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_6_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_6_bias_address0),
    .ce0(layer_6_bias_ce0),
    .q0(layer_6_bias_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln83_reg_882_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add4320_reg_267 <= grp_fu_1057_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        add4320_reg_267 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_167 <= select_ln71_8_reg_838;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_167 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ii_reg_190 <= select_ln74_2_reg_851;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_190 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        iii_reg_201 <= add_ln77_reg_956;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_201 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten27_reg_212 <= add_ln83_reg_877;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten27_reg_212 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten38_reg_178 <= select_ln74_3_reg_961;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten38_reg_178 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten61_reg_156 <= add_ln71_reg_825;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten61_reg_156 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_234 <= select_ln86_11_reg_936;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_234 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iv_reg_223 <= select_ln83_7_reg_891;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_reg_223 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v_reg_245 <= select_ln86_10_reg_901;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_245 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vi_reg_256 <= add_ln95_reg_931;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vi_reg_256 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln71_reg_825 <= add_ln71_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln77_reg_956 <= add_ln77_fu_758_p2;
        select_ln74_3_reg_961 <= select_ln74_3_fu_769_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln83_reg_877 <= add_ln83_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_518_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln86_4_reg_916 <= add_ln86_4_fu_741_p2;
        icmp_ln86_reg_886 <= icmp_ln86_fu_524_p2;
        select_ln86_reg_896 <= select_ln86_fu_606_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln95_reg_931 <= add_ln95_fu_747_p2;
        select_ln86_11_reg_936 <= select_ln86_11_fu_752_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_reg_971 <= grp_fu_1057_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln74_reg_833 <= icmp_ln74_fu_323_p2;
        output_addr_reg_857 <= sum19_cast_fu_463_p1;
        select_ln71_8_reg_838 <= select_ln71_8_fu_381_p3;
        select_ln74_2_reg_851 <= select_ln74_2_fu_445_p3;
        select_ln74_reg_844 <= select_ln74_fu_401_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln83_reg_882 <= icmp_ln83_fu_518_p2;
        icmp_ln83_reg_882_pp0_iter1_reg <= icmp_ln83_reg_882;
        icmp_ln83_reg_882_pp0_iter2_reg <= icmp_ln83_reg_882_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        layer_6_bias_load_reg_966 <= layer_6_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_941 <= grp_fu_1064_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_518_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln83_7_reg_891 <= select_ln83_7_fu_544_p3;
        select_ln86_10_reg_901 <= select_ln86_10_fu_673_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln77_5_reg_867[5 : 0] <= zext_ln77_5_fu_471_p1[5 : 0];
        zext_ln77_reg_862[5 : 0] <= zext_ln77_fu_468_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln83_fu_518_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln71_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln83_reg_882_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_add4320_phi_fu_270_p4 = grp_fu_1057_p_dout0;
    end else begin
        ap_phi_mux_add4320_phi_fu_270_p4 = add4320_reg_267;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten27_phi_fu_216_p4 = add_ln83_reg_877;
    end else begin
        ap_phi_mux_indvar_flatten27_phi_fu_216_p4 = indvar_flatten27_reg_212;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_238_p4 = select_ln86_11_reg_936;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_238_p4 = indvar_flatten_reg_234;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_iv_phi_fu_227_p4 = select_ln83_7_reg_891;
    end else begin
        ap_phi_mux_iv_phi_fu_227_p4 = iv_reg_223;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_v_phi_fu_249_p4 = select_ln86_10_reg_901;
    end else begin
        ap_phi_mux_v_phi_fu_249_p4 = v_reg_245;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_882 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_vi_phi_fu_260_p4 = add_ln95_reg_931;
    end else begin
        ap_phi_mux_vi_phi_fu_260_p4 = vi_reg_256;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_277_p0 = add4320_reg_267;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_277_p0 = ap_phi_mux_add4320_phi_fu_270_p4;
    end else begin
        grp_fu_277_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_277_p1 = layer_6_bias_load_reg_966;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_277_p1 = mul_reg_941;
    end else begin
        grp_fu_277_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        layer_6_bias_ce0 = 1'b1;
    end else begin
        layer_6_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        layer_6_weights_ce0 = 1'b1;
    end else begin
        layer_6_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_address0 = output_addr_reg_857;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = sum19_cast_fu_463_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state22))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln71_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_fu_518_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_fu_518_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_3_fu_337_p2 = (i_reg_167 + 2'd1);

assign add_ln71_fu_293_p2 = (indvar_flatten61_reg_156 + 8'd1);

assign add_ln74_3_fu_763_p2 = (indvar_flatten38_reg_178 + 8'd1);

assign add_ln74_fu_389_p2 = (select_ln71_fu_329_p3 + 2'd1);

assign add_ln77_fu_758_p2 = (select_ln74_reg_844 + 6'd1);

assign add_ln83_2_fu_538_p2 = (ap_phi_mux_iv_phi_fu_227_p4 + 6'd1);

assign add_ln83_fu_474_p2 = (ap_phi_mux_indvar_flatten27_phi_fu_216_p4 + 9'd1);

assign add_ln86_4_fu_741_p2 = (ap_phi_mux_indvar_flatten_phi_fu_238_p4 + 4'd1);

assign add_ln86_fu_626_p2 = (select_ln71_8_reg_838 + select_ln86_8_fu_618_p3);

assign add_ln91_fu_685_p2 = ($signed(select_ln74_2_reg_851) + $signed(trunc_ln91_fu_681_p1));

assign add_ln95_6_fu_512_p2 = (sub_ln94_fu_506_p2 + 4'd1);

assign add_ln95_7_fu_704_p2 = ($signed(select_ln86_9_fu_665_p3) + $signed(sext_ln94_fu_700_p1));

assign add_ln95_8_fu_659_p2 = (sub_ln94_3_fu_653_p2 + 4'd1);

assign add_ln95_fu_747_p2 = (select_ln86_reg_896 + 3'd1);

assign add_ln98_3_fu_731_p2 = (shl_ln2_fu_710_p4 + zext_ln77_5_reg_867);

assign add_ln98_fu_720_p2 = (shl_ln_fu_690_p4 + zext_ln83_fu_552_p1);

assign and_ln49_fu_811_p2 = (or_ln49_fu_805_p2 & grp_fu_1083_p_dout0);

assign and_ln71_fu_375_p2 = (xor_ln71_fu_363_p2 & icmp_ln77_fu_369_p2);

assign and_ln83_fu_588_p2 = (xor_ln83_fu_576_p2 & icmp_ln89_fu_582_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_776_p1 = add_reg_971;

assign empty_71_fu_311_p2 = (tmp_fu_305_p2 + empty_fu_299_p2);

assign empty_72_fu_494_p1 = indvars_iv_next34_fu_484_p2[1:0];

assign empty_74_fu_641_p1 = indvars_iv_next34_mid1_fu_631_p2[1:0];

assign empty_76_fu_343_p2 = add_ln71_3_fu_337_p2 << 2'd1;

assign empty_fu_299_p2 = i_reg_167 << 2'd1;

assign grp_fu_1057_p_ce = 1'b1;

assign grp_fu_1057_p_din0 = grp_fu_277_p0;

assign grp_fu_1057_p_din1 = grp_fu_277_p1;

assign grp_fu_1057_p_opcode = 2'd0;

assign grp_fu_1064_p_ce = 1'b1;

assign grp_fu_1064_p_din0 = input_r_q0;

assign grp_fu_1064_p_din1 = layer_6_weights_q0;

assign grp_fu_1083_p_ce = 1'b1;

assign grp_fu_1083_p_din0 = add_reg_971;

assign grp_fu_1083_p_din1 = 32'd0;

assign grp_fu_1083_p_opcode = 5'd2;

assign grp_fu_277_ce = 1'b1;

assign grp_fu_277_p2 = grp_fu_1057_p_dout0;

assign grp_fu_282_ce = 1'b1;

assign grp_fu_282_p0 = input_r_q0;

assign grp_fu_282_p1 = layer_6_weights_q0;

assign grp_fu_282_p2 = grp_fu_1064_p_dout0;

assign grp_fu_288_ce = 1'b1;

assign grp_fu_288_opcode = 5'd2;

assign grp_fu_288_p0 = add_reg_971;

assign grp_fu_288_p1 = 32'd0;

assign grp_fu_288_p2 = grp_fu_1083_p_dout0;

assign icmp_ln49_8_fu_799_p2 = ((trunc_ln49_fu_789_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_793_p2 = ((tmp_s_fu_779_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_317_p2 = ((indvar_flatten61_reg_156 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_323_p2 = ((indvar_flatten38_reg_178 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_369_p2 = ((iii_reg_201 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_518_p2 = ((ap_phi_mux_indvar_flatten27_phi_fu_216_p4 == 9'd288) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_524_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_238_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_582_p2 = ((ap_phi_mux_vi_phi_fu_260_p4 == 3'd2) ? 1'b1 : 1'b0);

assign indvars_iv_next34_cast_fu_490_p1 = indvars_iv_next34_fu_484_p2;

assign indvars_iv_next34_cast_mid1_fu_637_p1 = indvars_iv_next34_mid1_fu_631_p2;

assign indvars_iv_next34_dup_fu_594_p2 = (select_ln83_fu_530_p3 + 3'd1);

assign indvars_iv_next34_fu_484_p2 = (ap_phi_mux_v_phi_fu_249_p4 + 3'd1);

assign indvars_iv_next34_mid1_fu_631_p2 = (select_ln83_fu_530_p3 + 3'd2);

assign input_r_address0 = zext_ln98_fu_726_p1;

assign layer_6_bias_address0 = zext_ln77_reg_862;

assign layer_6_weights_address0 = zext_ln98_3_fu_736_p1;

assign or_ln49_fu_805_p2 = (icmp_ln49_fu_793_p2 | icmp_ln49_8_fu_799_p2);

assign or_ln74_fu_395_p2 = (icmp_ln74_fu_323_p2 | and_ln71_fu_375_p2);

assign or_ln86_fu_600_p2 = (icmp_ln86_fu_524_p2 | and_ln83_fu_588_p2);

assign output_r_d0 = ((and_ln49_fu_811_p2[0:0] == 1'b1) ? add_reg_971 : 32'd0);

assign p_mid153_fu_357_p2 = (empty_76_fu_343_p2 ^ 2'd2);

assign p_mid1_fu_415_p2 = (tmp_mid1_fu_409_p2 + select_ln71_7_fu_349_p3);

assign p_mid2_fu_437_p3 = {{select_ln74_1_fu_429_p3}, {5'd0}};

assign p_shl_fu_498_p3 = {{empty_72_fu_494_p1}, {2'd0}};

assign p_shl_mid1_fu_645_p3 = {{empty_74_fu_641_p1}, {2'd0}};

assign select_ln71_7_fu_349_p3 = ((icmp_ln74_fu_323_p2[0:0] == 1'b1) ? empty_76_fu_343_p2 : empty_fu_299_p2);

assign select_ln71_8_fu_381_p3 = ((icmp_ln74_fu_323_p2[0:0] == 1'b1) ? add_ln71_3_fu_337_p2 : i_reg_167);

assign select_ln71_9_fu_421_p3 = ((icmp_ln74_fu_323_p2[0:0] == 1'b1) ? p_mid153_fu_357_p2 : empty_71_fu_311_p2);

assign select_ln71_fu_329_p3 = ((icmp_ln74_fu_323_p2[0:0] == 1'b1) ? 2'd1 : ii_reg_190);

assign select_ln74_1_fu_429_p3 = ((and_ln71_fu_375_p2[0:0] == 1'b1) ? p_mid1_fu_415_p2 : select_ln71_9_fu_421_p3);

assign select_ln74_2_fu_445_p3 = ((and_ln71_fu_375_p2[0:0] == 1'b1) ? add_ln74_fu_389_p2 : select_ln71_fu_329_p3);

assign select_ln74_3_fu_769_p3 = ((icmp_ln74_reg_833[0:0] == 1'b1) ? 8'd1 : add_ln74_3_fu_763_p2);

assign select_ln74_fu_401_p3 = ((or_ln74_fu_395_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_201);

assign select_ln83_7_fu_544_p3 = ((icmp_ln86_fu_524_p2[0:0] == 1'b1) ? add_ln83_2_fu_538_p2 : ap_phi_mux_iv_phi_fu_227_p4);

assign select_ln83_8_fu_560_p3 = ((icmp_ln86_fu_524_p2[0:0] == 1'b1) ? 2'd3 : trunc_ln92_fu_480_p1);

assign select_ln83_9_fu_568_p3 = ((icmp_ln86_fu_524_p2[0:0] == 1'b1) ? 4'd1 : add_ln95_6_fu_512_p2);

assign select_ln83_fu_530_p3 = ((icmp_ln86_fu_524_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_249_p4);

assign select_ln86_10_fu_673_p3 = ((and_ln83_fu_588_p2[0:0] == 1'b1) ? indvars_iv_next34_dup_fu_594_p2 : select_ln83_fu_530_p3);

assign select_ln86_11_fu_752_p3 = ((icmp_ln86_reg_886[0:0] == 1'b1) ? 4'd1 : add_ln86_4_reg_916);

assign select_ln86_8_fu_618_p3 = ((and_ln83_fu_588_p2[0:0] == 1'b1) ? trunc_ln92_1_fu_614_p1 : select_ln83_8_fu_560_p3);

assign select_ln86_9_fu_665_p3 = ((and_ln83_fu_588_p2[0:0] == 1'b1) ? add_ln95_8_fu_659_p2 : select_ln83_9_fu_568_p3);

assign select_ln86_fu_606_p3 = ((or_ln86_fu_600_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_260_p4);

assign sext_ln94_fu_700_p1 = trunc_ln91_fu_681_p1;

assign shl_ln2_fu_710_p4 = {{{add_ln95_7_fu_704_p2}, {trunc_ln83_fu_556_p1}}, {5'd0}};

assign shl_ln_fu_690_p4 = {{{add_ln86_fu_626_p2}, {add_ln91_fu_685_p2}}, {5'd0}};

assign sub_ln94_3_fu_653_p2 = (p_shl_mid1_fu_645_p3 - indvars_iv_next34_cast_mid1_fu_637_p1);

assign sub_ln94_fu_506_p2 = (p_shl_fu_498_p3 - indvars_iv_next34_cast_fu_490_p1);

assign sum19_cast_fu_463_p1 = sum19_fu_457_p2;

assign sum19_fu_457_p2 = (zext_ln77_6_fu_453_p1 + p_mid2_fu_437_p3);

assign tmp_fu_305_p2 = (ii_reg_190 + 2'd1);

assign tmp_mid1_fu_409_p2 = (select_ln71_fu_329_p3 ^ 2'd2);

assign tmp_s_fu_779_p4 = {{bitcast_ln49_fu_776_p1[30:23]}};

assign trunc_ln49_fu_789_p1 = bitcast_ln49_fu_776_p1[22:0];

assign trunc_ln83_fu_556_p1 = select_ln83_7_fu_544_p3[4:0];

assign trunc_ln91_fu_681_p1 = select_ln86_fu_606_p3[1:0];

assign trunc_ln92_1_fu_614_p1 = indvars_iv_next34_dup_fu_594_p2[1:0];

assign trunc_ln92_fu_480_p1 = ap_phi_mux_v_phi_fu_249_p4[1:0];

assign xor_ln71_fu_363_p2 = (icmp_ln74_fu_323_p2 ^ 1'd1);

assign xor_ln83_fu_576_p2 = (icmp_ln86_fu_524_p2 ^ 1'd1);

assign zext_ln77_5_fu_471_p1 = select_ln74_reg_844;

assign zext_ln77_6_fu_453_p1 = select_ln74_fu_401_p3;

assign zext_ln77_fu_468_p1 = select_ln74_reg_844;

assign zext_ln83_fu_552_p1 = select_ln83_7_fu_544_p3;

assign zext_ln98_3_fu_736_p1 = add_ln98_3_fu_731_p2;

assign zext_ln98_fu_726_p1 = add_ln98_fu_720_p2;

always @ (posedge ap_clk) begin
    zext_ln77_reg_862[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln77_5_reg_867[13:6] <= 8'b00000000;
end

endmodule //infer_conv2d

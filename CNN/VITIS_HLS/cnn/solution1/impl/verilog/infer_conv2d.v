// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_992_p_din0,
        grp_fu_992_p_din1,
        grp_fu_992_p_opcode,
        grp_fu_992_p_dout0,
        grp_fu_992_p_ce,
        grp_fu_996_p_din0,
        grp_fu_996_p_din1,
        grp_fu_996_p_dout0,
        grp_fu_996_p_ce,
        grp_fu_2244_p_din0,
        grp_fu_2244_p_din1,
        grp_fu_2244_p_opcode,
        grp_fu_2244_p_dout0,
        grp_fu_2244_p_ce
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_pp0_stage1 = 9'd16;
parameter    ap_ST_fsm_pp0_stage2 = 9'd32;
parameter    ap_ST_fsm_pp0_stage3 = 9'd64;
parameter    ap_ST_fsm_state17 = 9'd128;
parameter    ap_ST_fsm_state18 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_992_p_din0;
output  [31:0] grp_fu_992_p_din1;
output  [1:0] grp_fu_992_p_opcode;
input  [31:0] grp_fu_992_p_dout0;
output   grp_fu_992_p_ce;
output  [31:0] grp_fu_996_p_din0;
output  [31:0] grp_fu_996_p_din1;
input  [31:0] grp_fu_996_p_dout0;
output   grp_fu_996_p_ce;
output  [31:0] grp_fu_2244_p_din0;
output  [31:0] grp_fu_2244_p_din1;
output  [4:0] grp_fu_2244_p_opcode;
input  [0:0] grp_fu_2244_p_dout0;
output   grp_fu_2244_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] layer_6_weights_address0;
reg    layer_6_weights_ce0;
wire   [31:0] layer_6_weights_q0;
wire   [4:0] layer_6_bias_address0;
reg    layer_6_bias_ce0;
wire   [31:0] layer_6_bias_q0;
reg   [8:0] indvar_flatten36_reg_218;
reg   [5:0] iv_reg_230;
reg   [3:0] indvar_flatten_reg_241;
reg   [2:0] v_reg_252;
reg   [2:0] vi_reg_263;
reg   [31:0] add4115_reg_274;
wire   [11:0] add_ln66_fu_300_p2;
reg   [11:0] add_ln66_reg_850;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_342_p2;
reg   [0:0] icmp_ln69_reg_858;
wire   [0:0] icmp_ln66_fu_336_p2;
wire   [3:0] select_ln66_8_fu_404_p3;
reg   [3:0] select_ln66_8_reg_863;
wire   [5:0] iii_mid2_fu_424_p3;
reg   [5:0] iii_mid2_reg_869;
wire   [3:0] ii_cast5_mid2_fu_432_p3;
reg   [3:0] ii_cast5_mid2_reg_876;
wire   [6:0] empty_99_fu_468_p3;
reg   [6:0] empty_99_reg_882;
wire   [7:0] ii_cast5_mid2_cast_fu_481_p1;
reg   [7:0] ii_cast5_mid2_cast_reg_892;
wire    ap_CS_fsm_state3;
wire   [11:0] add52_mid2_fu_484_p3;
reg   [11:0] add52_mid2_reg_897;
wire   [13:0] zext_ln72_5_fu_491_p1;
reg   [13:0] zext_ln72_5_reg_902;
wire   [11:0] zext_ln72_6_fu_494_p1;
reg   [11:0] zext_ln72_6_reg_907;
wire   [0:0] icmp_ln77_fu_531_p2;
reg   [0:0] icmp_ln77_reg_917;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln77_reg_917_pp0_iter1_reg;
reg   [0:0] icmp_ln77_reg_917_pp0_iter2_reg;
wire   [0:0] icmp_ln80_fu_537_p2;
reg   [0:0] icmp_ln80_reg_921;
wire   [5:0] select_ln77_7_fu_557_p3;
reg   [5:0] select_ln77_7_reg_926;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln80_fu_607_p3;
reg   [2:0] select_ln80_reg_932;
wire  signed [2:0] select_ln80_8_fu_643_p3;
reg  signed [2:0] select_ln80_8_reg_937;
wire  signed [1:0] trunc_ln87_fu_678_p1;
reg  signed [1:0] trunc_ln87_reg_947;
wire   [3:0] add_ln80_5_fu_712_p2;
reg   [3:0] add_ln80_5_reg_957;
reg   [31:0] layer_6_weights_load_reg_962;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [8:0] add_ln77_fu_718_p2;
reg   [8:0] add_ln77_reg_967;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire   [2:0] add_ln92_fu_754_p2;
reg   [2:0] add_ln92_reg_977;
wire   [3:0] select_ln80_10_fu_759_p3;
reg   [3:0] select_ln80_10_reg_982;
wire   [31:0] grp_fu_289_p2;
reg   [31:0] mul_reg_992;
wire   [31:0] grp_fu_284_p2;
reg    ap_enable_reg_pp0_iter3;
wire   [11:0] add_ln102_fu_765_p2;
reg   [11:0] add_ln102_reg_1002;
wire    ap_CS_fsm_state17;
wire   [5:0] add_ln72_fu_769_p2;
reg   [5:0] add_ln72_reg_1007;
wire   [9:0] select_ln69_fu_780_p3;
reg   [9:0] select_ln69_reg_1012;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state10;
reg   [11:0] indvar_flatten70_reg_162;
wire    ap_CS_fsm_state18;
reg   [3:0] i_reg_173;
reg   [9:0] indvar_flatten44_reg_184;
reg   [3:0] ii_reg_196;
reg   [5:0] iii_reg_207;
reg   [8:0] ap_phi_mux_indvar_flatten36_phi_fu_222_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_iv_phi_fu_234_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_245_p4;
reg   [2:0] ap_phi_mux_v_phi_fu_256_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_267_p4;
reg   [31:0] ap_phi_mux_add4115_phi_fu_277_p4;
wire   [63:0] zext_ln72_fu_476_p1;
wire   [63:0] zext_ln91_fu_707_p1;
wire   [63:0] zext_ln87_fu_749_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln102_fu_838_p1;
wire   [31:0] grp_fu_284_p0;
wire   [31:0] grp_fu_284_p1;
wire   [31:0] grp_fu_289_p0;
wire   [31:0] grp_fu_289_p1;
wire   [31:0] grp_fu_294_p0;
wire   [31:0] grp_fu_294_p1;
wire   [3:0] mul_ln69_fu_310_p0;
wire   [4:0] mul_ln69_fu_310_p1;
wire   [4:0] ii_cast_fu_316_p1;
wire   [4:0] tmp_fu_320_p2;
wire  signed [6:0] tmp_cast_fu_326_p1;
wire   [6:0] mul_ln69_fu_310_p2;
wire   [3:0] add_ln66_3_fu_356_p2;
wire   [3:0] mul_ln69_1_fu_366_p0;
wire   [4:0] mul_ln69_1_fu_366_p1;
wire   [6:0] mul_ln69_1_fu_366_p2;
wire   [0:0] icmp_ln72_fu_392_p2;
wire   [0:0] xor_ln66_fu_386_p2;
wire   [3:0] select_ln66_fu_348_p3;
wire   [0:0] and_ln66_fu_398_p2;
wire   [0:0] empty_98_fu_418_p2;
wire   [3:0] add_ln69_fu_412_p2;
wire   [4:0] ii_cast_mid1_fu_440_p1;
wire   [4:0] tmp_mid1_fu_444_p2;
wire  signed [6:0] tmp_cast_mid1_fu_450_p1;
wire   [6:0] select_ln66_7_fu_372_p3;
wire   [6:0] mul4811_mid162_fu_380_p2;
wire   [6:0] mul4811_fu_330_p2;
wire   [6:0] mul4811_mid1_fu_454_p2;
wire   [6:0] select_ln66_9_fu_460_p3;
wire   [2:0] indvars_iv_next37_fu_497_p2;
wire   [1:0] empty_fu_507_p1;
wire   [3:0] p_shl_fu_511_p3;
wire   [3:0] indvars_iv_next37_cast_fu_503_p1;
wire   [3:0] sub_ln91_fu_519_p2;
wire   [5:0] add_ln77_2_fu_551_p2;
wire   [3:0] add_ln92_6_fu_525_p2;
wire   [0:0] icmp_ln83_fu_583_p2;
wire   [0:0] xor_ln77_fu_577_p2;
wire   [2:0] select_ln77_fu_543_p3;
wire   [0:0] and_ln77_fu_589_p2;
wire   [0:0] or_ln80_fu_601_p2;
wire   [2:0] indvars_iv_next37_mid1_fu_615_p2;
wire   [1:0] empty_96_fu_625_p1;
wire   [3:0] p_shl_mid1_fu_629_p3;
wire   [3:0] indvars_iv_next37_cast_mid1_fu_621_p1;
wire   [2:0] indvars_iv_next37_dup_fu_595_p2;
wire  signed [3:0] sext_ln80_fu_651_p1;
wire   [3:0] add_ln80_fu_655_p2;
wire   [3:0] sub_ln91_3_fu_637_p2;
wire   [3:0] add_ln92_8_fu_664_p2;
wire   [3:0] select_ln77_8_fu_569_p3;
wire   [3:0] select_ln80_9_fu_670_p3;
wire  signed [3:0] sext_ln91_fu_682_p1;
wire   [3:0] add_ln92_7_fu_686_p2;
wire   [4:0] trunc_ln77_fu_565_p1;
wire   [13:0] shl_ln2_fu_692_p4;
wire   [13:0] add_ln91_fu_702_p2;
wire   [7:0] grp_fu_842_p3;
wire  signed [7:0] sext_ln87_fu_727_p1;
(* use_dsp48 = "no" *) wire   [7:0] add_ln87_fu_730_p2;
wire   [12:0] shl_ln_fu_735_p3;
wire   [12:0] zext_ln77_fu_724_p1;
wire   [12:0] add_ln87_3_fu_743_p2;
wire   [9:0] add_ln69_3_fu_774_p2;
wire   [31:0] bitcast_ln49_fu_787_p1;
wire   [7:0] tmp_s_fu_791_p4;
wire   [22:0] trunc_ln49_fu_801_p1;
wire   [0:0] icmp_ln49_6_fu_811_p2;
wire   [0:0] icmp_ln49_fu_805_p2;
wire   [0:0] or_ln49_fu_817_p2;
wire   [0:0] grp_fu_294_p2;
wire   [0:0] and_ln49_fu_823_p2;
wire   [3:0] grp_fu_842_p0;
wire   [4:0] grp_fu_842_p1;
wire   [3:0] grp_fu_842_p2;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    grp_fu_284_ce;
wire    grp_fu_289_ce;
wire    grp_fu_294_ce;
wire   [4:0] grp_fu_294_opcode;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage0_00001;
wire   [7:0] grp_fu_842_p00;
wire   [6:0] mul_ln69_1_fu_366_p00;
wire   [6:0] mul_ln69_fu_310_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

infer_conv2d_layer_6_weights #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
layer_6_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_6_weights_address0),
    .ce0(layer_6_weights_ce0),
    .q0(layer_6_weights_q0)
);

infer_conv2d_layer_6_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_6_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_6_bias_address0),
    .ce0(layer_6_bias_ce0),
    .q0(layer_6_bias_q0)
);

infer_mul_4ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_4ns_5ns_7_1_1_U50(
    .din0(mul_ln69_fu_310_p0),
    .din1(mul_ln69_fu_310_p1),
    .dout(mul_ln69_fu_310_p2)
);

infer_mul_4ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_4ns_5ns_7_1_1_U51(
    .din0(mul_ln69_1_fu_366_p0),
    .din1(mul_ln69_1_fu_366_p1),
    .dout(mul_ln69_1_fu_366_p2)
);

infer_mac_muladd_4ns_5ns_4ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
mac_muladd_4ns_5ns_4ns_8_4_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_842_p0),
    .din1(grp_fu_842_p1),
    .din2(grp_fu_842_p2),
    .ce(1'b1),
    .dout(grp_fu_842_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state10)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln77_reg_917_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add4115_reg_274 <= grp_fu_992_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        add4115_reg_274 <= layer_6_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_173 <= select_ln66_8_reg_863;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_173 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ii_reg_196 <= ii_cast5_mid2_reg_876;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ii_reg_196 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        iii_reg_207 <= add_ln72_reg_1007;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        iii_reg_207 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_917 == 1'd0))) begin
        indvar_flatten36_reg_218 <= add_ln77_reg_967;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten36_reg_218 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten44_reg_184 <= select_ln69_reg_1012;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten44_reg_184 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten70_reg_162 <= add_ln66_reg_850;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten70_reg_162 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_917 == 1'd0))) begin
        indvar_flatten_reg_241 <= select_ln80_10_reg_982;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_241 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_917 == 1'd0))) begin
        iv_reg_230 <= select_ln77_7_reg_926;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_reg_230 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_917 == 1'd0))) begin
        v_reg_252 <= select_ln80_8_reg_937;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_252 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_917 == 1'd0))) begin
        vi_reg_263 <= add_ln92_reg_977;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vi_reg_263 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add52_mid2_reg_897[11 : 5] <= add52_mid2_fu_484_p3[11 : 5];
        ii_cast5_mid2_cast_reg_892[3 : 0] <= ii_cast5_mid2_cast_fu_481_p1[3 : 0];
        zext_ln72_5_reg_902[5 : 0] <= zext_ln72_5_fu_491_p1[5 : 0];
        zext_ln72_6_reg_907[5 : 0] <= zext_ln72_6_fu_494_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln102_reg_1002 <= add_ln102_fu_765_p2;
        add_ln72_reg_1007 <= add_ln72_fu_769_p2;
        select_ln69_reg_1012 <= select_ln69_fu_780_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln66_reg_850 <= add_ln66_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln77_reg_967 <= add_ln77_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_fu_531_p2 == 1'd0))) begin
        add_ln80_5_reg_957 <= add_ln80_5_fu_712_p2;
        icmp_ln80_reg_921 <= icmp_ln80_fu_537_p2;
        select_ln80_reg_932 <= select_ln80_fu_607_p3;
        trunc_ln87_reg_947 <= trunc_ln87_fu_678_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln77_reg_917 == 1'd0))) begin
        add_ln92_reg_977 <= add_ln92_fu_754_p2;
        select_ln80_10_reg_982 <= select_ln80_10_fu_759_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_99_reg_882 <= empty_99_fu_468_p3;
        icmp_ln69_reg_858 <= icmp_ln69_fu_342_p2;
        ii_cast5_mid2_reg_876 <= ii_cast5_mid2_fu_432_p3;
        iii_mid2_reg_869 <= iii_mid2_fu_424_p3;
        select_ln66_8_reg_863 <= select_ln66_8_fu_404_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln77_reg_917 <= icmp_ln77_fu_531_p2;
        icmp_ln77_reg_917_pp0_iter1_reg <= icmp_ln77_reg_917;
        icmp_ln77_reg_917_pp0_iter2_reg <= icmp_ln77_reg_917_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln77_reg_917 == 1'd0))) begin
        layer_6_weights_load_reg_962 <= layer_6_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln77_reg_917_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_reg_992 <= grp_fu_996_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_fu_531_p2 == 1'd0))) begin
        select_ln77_7_reg_926 <= select_ln77_7_fu_557_p3;
        select_ln80_8_reg_937 <= select_ln80_8_fu_643_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln77_reg_917 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln66_fu_336_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln77_reg_917_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_add4115_phi_fu_277_p4 = grp_fu_992_p_dout0;
    end else begin
        ap_phi_mux_add4115_phi_fu_277_p4 = add4115_reg_274;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_917 == 1'd0))) begin
        ap_phi_mux_indvar_flatten36_phi_fu_222_p4 = add_ln77_reg_967;
    end else begin
        ap_phi_mux_indvar_flatten36_phi_fu_222_p4 = indvar_flatten36_reg_218;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_917 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_245_p4 = select_ln80_10_reg_982;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_245_p4 = indvar_flatten_reg_241;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_917 == 1'd0))) begin
        ap_phi_mux_iv_phi_fu_234_p4 = select_ln77_7_reg_926;
    end else begin
        ap_phi_mux_iv_phi_fu_234_p4 = iv_reg_230;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_917 == 1'd0))) begin
        ap_phi_mux_v_phi_fu_256_p4 = select_ln80_8_reg_937;
    end else begin
        ap_phi_mux_v_phi_fu_256_p4 = v_reg_252;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_917 == 1'd0))) begin
        ap_phi_mux_vi_phi_fu_267_p4 = add_ln92_reg_977;
    end else begin
        ap_phi_mux_vi_phi_fu_267_p4 = vi_reg_263;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_336_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_6_bias_ce0 = 1'b1;
    end else begin
        layer_6_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer_6_weights_ce0 = 1'b1;
    end else begin
        layer_6_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_336_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add52_mid2_fu_484_p3 = {{empty_99_reg_882}, {5'd0}};

assign add_ln102_fu_765_p2 = (zext_ln72_6_reg_907 + add52_mid2_reg_897);

assign add_ln66_3_fu_356_p2 = (i_reg_173 + 4'd1);

assign add_ln66_fu_300_p2 = (indvar_flatten70_reg_162 + 12'd1);

assign add_ln69_3_fu_774_p2 = (indvar_flatten44_reg_184 + 10'd1);

assign add_ln69_fu_412_p2 = (select_ln66_fu_348_p3 + 4'd1);

assign add_ln72_fu_769_p2 = (iii_mid2_reg_869 + 6'd1);

assign add_ln77_2_fu_551_p2 = (ap_phi_mux_iv_phi_fu_234_p4 + 6'd1);

assign add_ln77_fu_718_p2 = (indvar_flatten36_reg_218 + 9'd1);

assign add_ln80_5_fu_712_p2 = (ap_phi_mux_indvar_flatten_phi_fu_245_p4 + 4'd1);

assign add_ln80_fu_655_p2 = ($signed(select_ln66_8_reg_863) + $signed(sext_ln80_fu_651_p1));

assign add_ln87_3_fu_743_p2 = (shl_ln_fu_735_p3 + zext_ln77_fu_724_p1);

assign add_ln87_fu_730_p2 = ($signed(grp_fu_842_p3) + $signed(sext_ln87_fu_727_p1));

assign add_ln91_fu_702_p2 = (shl_ln2_fu_692_p4 + zext_ln72_5_reg_902);

assign add_ln92_6_fu_525_p2 = (sub_ln91_fu_519_p2 + 4'd1);

assign add_ln92_7_fu_686_p2 = ($signed(select_ln80_9_fu_670_p3) + $signed(sext_ln91_fu_682_p1));

assign add_ln92_8_fu_664_p2 = (sub_ln91_3_fu_637_p2 + 4'd1);

assign add_ln92_fu_754_p2 = (select_ln80_reg_932 + 3'd1);

assign and_ln49_fu_823_p2 = (or_ln49_fu_817_p2 & grp_fu_2244_p_dout0);

assign and_ln66_fu_398_p2 = (xor_ln66_fu_386_p2 & icmp_ln72_fu_392_p2);

assign and_ln77_fu_589_p2 = (xor_ln77_fu_577_p2 & icmp_ln83_fu_583_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_787_p1 = add4115_reg_274;

assign empty_96_fu_625_p1 = indvars_iv_next37_mid1_fu_615_p2[1:0];

assign empty_98_fu_418_p2 = (icmp_ln69_fu_342_p2 | and_ln66_fu_398_p2);

assign empty_99_fu_468_p3 = ((and_ln66_fu_398_p2[0:0] == 1'b1) ? mul4811_mid1_fu_454_p2 : select_ln66_9_fu_460_p3);

assign empty_fu_507_p1 = indvars_iv_next37_fu_497_p2[1:0];

assign grp_fu_2244_p_ce = 1'b1;

assign grp_fu_2244_p_din0 = add4115_reg_274;

assign grp_fu_2244_p_din1 = 32'd0;

assign grp_fu_2244_p_opcode = 5'd4;

assign grp_fu_284_ce = 1'b1;

assign grp_fu_284_p0 = ap_phi_mux_add4115_phi_fu_277_p4;

assign grp_fu_284_p1 = mul_reg_992;

assign grp_fu_284_p2 = grp_fu_992_p_dout0;

assign grp_fu_289_ce = 1'b1;

assign grp_fu_289_p0 = input_r_q0;

assign grp_fu_289_p1 = layer_6_weights_load_reg_962;

assign grp_fu_289_p2 = grp_fu_996_p_dout0;

assign grp_fu_294_ce = 1'b1;

assign grp_fu_294_opcode = 5'd4;

assign grp_fu_294_p0 = add4115_reg_274;

assign grp_fu_294_p1 = 32'd0;

assign grp_fu_294_p2 = grp_fu_2244_p_dout0;

assign grp_fu_842_p0 = grp_fu_842_p00;

assign grp_fu_842_p00 = add_ln80_fu_655_p2;

assign grp_fu_842_p1 = 8'd13;

assign grp_fu_842_p2 = ii_cast5_mid2_cast_reg_892;

assign grp_fu_992_p_ce = 1'b1;

assign grp_fu_992_p_din0 = ap_phi_mux_add4115_phi_fu_277_p4;

assign grp_fu_992_p_din1 = mul_reg_992;

assign grp_fu_992_p_opcode = 2'd0;

assign grp_fu_996_p_ce = 1'b1;

assign grp_fu_996_p_din0 = input_r_q0;

assign grp_fu_996_p_din1 = layer_6_weights_load_reg_962;

assign icmp_ln49_6_fu_811_p2 = ((trunc_ln49_fu_801_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_805_p2 = ((tmp_s_fu_791_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_336_p2 = ((indvar_flatten70_reg_162 == 12'd3872) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_342_p2 = ((indvar_flatten44_reg_184 == 10'd352) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_392_p2 = ((iii_reg_207 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_531_p2 = ((ap_phi_mux_indvar_flatten36_phi_fu_222_p4 == 9'd288) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_537_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_245_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_583_p2 = ((ap_phi_mux_vi_phi_fu_267_p4 == 3'd2) ? 1'b1 : 1'b0);

assign ii_cast5_mid2_cast_fu_481_p1 = ii_cast5_mid2_reg_876;

assign ii_cast5_mid2_fu_432_p3 = ((and_ln66_fu_398_p2[0:0] == 1'b1) ? add_ln69_fu_412_p2 : select_ln66_fu_348_p3);

assign ii_cast_fu_316_p1 = ii_reg_196;

assign ii_cast_mid1_fu_440_p1 = add_ln69_fu_412_p2;

assign iii_mid2_fu_424_p3 = ((empty_98_fu_418_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_207);

assign indvars_iv_next37_cast_fu_503_p1 = indvars_iv_next37_fu_497_p2;

assign indvars_iv_next37_cast_mid1_fu_621_p1 = indvars_iv_next37_mid1_fu_615_p2;

assign indvars_iv_next37_dup_fu_595_p2 = (select_ln77_fu_543_p3 + 3'd1);

assign indvars_iv_next37_fu_497_p2 = (ap_phi_mux_v_phi_fu_256_p4 + 3'd1);

assign indvars_iv_next37_mid1_fu_615_p2 = (select_ln77_fu_543_p3 + 3'd2);

assign input_r_address0 = zext_ln87_fu_749_p1;

assign layer_6_bias_address0 = zext_ln72_fu_476_p1;

assign layer_6_weights_address0 = zext_ln91_fu_707_p1;

assign mul4811_fu_330_p2 = ($signed(tmp_cast_fu_326_p1) + $signed(mul_ln69_fu_310_p2));

assign mul4811_mid162_fu_380_p2 = ($signed(mul_ln69_1_fu_366_p2) + $signed(7'd117));

assign mul4811_mid1_fu_454_p2 = ($signed(tmp_cast_mid1_fu_450_p1) + $signed(select_ln66_7_fu_372_p3));

assign mul_ln69_1_fu_366_p0 = mul_ln69_1_fu_366_p00;

assign mul_ln69_1_fu_366_p00 = add_ln66_3_fu_356_p2;

assign mul_ln69_1_fu_366_p1 = 7'd11;

assign mul_ln69_fu_310_p0 = mul_ln69_fu_310_p00;

assign mul_ln69_fu_310_p00 = i_reg_173;

assign mul_ln69_fu_310_p1 = 7'd11;

assign or_ln49_fu_817_p2 = (icmp_ln49_fu_805_p2 | icmp_ln49_6_fu_811_p2);

assign or_ln80_fu_601_p2 = (icmp_ln80_fu_537_p2 | and_ln77_fu_589_p2);

assign output_r_address0 = zext_ln102_fu_838_p1;

assign output_r_d0 = ((and_ln49_fu_823_p2[0:0] == 1'b1) ? 32'd0 : add4115_reg_274);

assign p_shl_fu_511_p3 = {{empty_fu_507_p1}, {2'd0}};

assign p_shl_mid1_fu_629_p3 = {{empty_96_fu_625_p1}, {2'd0}};

assign select_ln66_7_fu_372_p3 = ((icmp_ln69_fu_342_p2[0:0] == 1'b1) ? mul_ln69_1_fu_366_p2 : mul_ln69_fu_310_p2);

assign select_ln66_8_fu_404_p3 = ((icmp_ln69_fu_342_p2[0:0] == 1'b1) ? add_ln66_3_fu_356_p2 : i_reg_173);

assign select_ln66_9_fu_460_p3 = ((icmp_ln69_fu_342_p2[0:0] == 1'b1) ? mul4811_mid162_fu_380_p2 : mul4811_fu_330_p2);

assign select_ln66_fu_348_p3 = ((icmp_ln69_fu_342_p2[0:0] == 1'b1) ? 4'd1 : ii_reg_196);

assign select_ln69_fu_780_p3 = ((icmp_ln69_reg_858[0:0] == 1'b1) ? 10'd1 : add_ln69_3_fu_774_p2);

assign select_ln77_7_fu_557_p3 = ((icmp_ln80_fu_537_p2[0:0] == 1'b1) ? add_ln77_2_fu_551_p2 : ap_phi_mux_iv_phi_fu_234_p4);

assign select_ln77_8_fu_569_p3 = ((icmp_ln80_fu_537_p2[0:0] == 1'b1) ? 4'd1 : add_ln92_6_fu_525_p2);

assign select_ln77_fu_543_p3 = ((icmp_ln80_fu_537_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_256_p4);

assign select_ln80_10_fu_759_p3 = ((icmp_ln80_reg_921[0:0] == 1'b1) ? 4'd1 : add_ln80_5_reg_957);

assign select_ln80_8_fu_643_p3 = ((and_ln77_fu_589_p2[0:0] == 1'b1) ? indvars_iv_next37_dup_fu_595_p2 : select_ln77_fu_543_p3);

assign select_ln80_9_fu_670_p3 = ((and_ln77_fu_589_p2[0:0] == 1'b1) ? add_ln92_8_fu_664_p2 : select_ln77_8_fu_569_p3);

assign select_ln80_fu_607_p3 = ((or_ln80_fu_601_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_267_p4);

assign sext_ln80_fu_651_p1 = select_ln80_8_fu_643_p3;

assign sext_ln87_fu_727_p1 = trunc_ln87_reg_947;

assign sext_ln91_fu_682_p1 = trunc_ln87_fu_678_p1;

assign shl_ln2_fu_692_p4 = {{{add_ln92_7_fu_686_p2}, {trunc_ln77_fu_565_p1}}, {5'd0}};

assign shl_ln_fu_735_p3 = {{add_ln87_fu_730_p2}, {5'd0}};

assign sub_ln91_3_fu_637_p2 = (p_shl_mid1_fu_629_p3 - indvars_iv_next37_cast_mid1_fu_621_p1);

assign sub_ln91_fu_519_p2 = (p_shl_fu_511_p3 - indvars_iv_next37_cast_fu_503_p1);

assign tmp_cast_fu_326_p1 = $signed(tmp_fu_320_p2);

assign tmp_cast_mid1_fu_450_p1 = $signed(tmp_mid1_fu_444_p2);

assign tmp_fu_320_p2 = ($signed(ii_cast_fu_316_p1) + $signed(5'd20));

assign tmp_mid1_fu_444_p2 = ($signed(ii_cast_mid1_fu_440_p1) + $signed(5'd20));

assign tmp_s_fu_791_p4 = {{bitcast_ln49_fu_787_p1[30:23]}};

assign trunc_ln49_fu_801_p1 = bitcast_ln49_fu_787_p1[22:0];

assign trunc_ln77_fu_565_p1 = select_ln77_7_fu_557_p3[4:0];

assign trunc_ln87_fu_678_p1 = select_ln80_fu_607_p3[1:0];

assign xor_ln66_fu_386_p2 = (icmp_ln69_fu_342_p2 ^ 1'd1);

assign xor_ln77_fu_577_p2 = (icmp_ln80_fu_537_p2 ^ 1'd1);

assign zext_ln102_fu_838_p1 = add_ln102_reg_1002;

assign zext_ln72_5_fu_491_p1 = iii_mid2_reg_869;

assign zext_ln72_6_fu_494_p1 = iii_mid2_reg_869;

assign zext_ln72_fu_476_p1 = iii_mid2_fu_424_p3;

assign zext_ln77_fu_724_p1 = select_ln77_7_reg_926;

assign zext_ln87_fu_749_p1 = add_ln87_3_fu_743_p2;

assign zext_ln91_fu_707_p1 = add_ln91_fu_702_p2;

always @ (posedge ap_clk) begin
    ii_cast5_mid2_cast_reg_892[7:4] <= 4'b0000;
    add52_mid2_reg_897[4:0] <= 5'b00000;
    zext_ln72_5_reg_902[13:6] <= 8'b00000000;
    zext_ln72_6_reg_907[11:6] <= 6'b000000;
end

endmodule //infer_conv2d

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_0_q0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_1_q0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_2_q0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_3_q0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_4_q0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_5_q0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_6_q0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0,
        output_7_q0,
        output_8_address0,
        output_8_ce0,
        output_8_we0,
        output_8_d0,
        output_8_q0,
        output_9_address0,
        output_9_ce0,
        output_9_we0,
        output_9_d0,
        output_9_q0,
        grp_fu_3097_p_din0,
        grp_fu_3097_p_din1,
        grp_fu_3097_p_opcode,
        grp_fu_3097_p_dout0,
        grp_fu_3097_p_ce,
        grp_fu_3101_p_din0,
        grp_fu_3101_p_din1,
        grp_fu_3101_p_dout0,
        grp_fu_3101_p_ce,
        grp_fu_866_p_din0,
        grp_fu_866_p_din1,
        grp_fu_866_p_opcode,
        grp_fu_866_p_dout0,
        grp_fu_866_p_ce
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_pp0_stage0 = 34'd1048576;
parameter    ap_ST_fsm_pp0_stage1 = 34'd2097152;
parameter    ap_ST_fsm_pp0_stage2 = 34'd4194304;
parameter    ap_ST_fsm_pp0_stage3 = 34'd8388608;
parameter    ap_ST_fsm_state31 = 34'd16777216;
parameter    ap_ST_fsm_state32 = 34'd33554432;
parameter    ap_ST_fsm_state33 = 34'd67108864;
parameter    ap_ST_fsm_state34 = 34'd134217728;
parameter    ap_ST_fsm_state35 = 34'd268435456;
parameter    ap_ST_fsm_state36 = 34'd536870912;
parameter    ap_ST_fsm_state37 = 34'd1073741824;
parameter    ap_ST_fsm_state38 = 34'd2147483648;
parameter    ap_ST_fsm_state39 = 34'd4294967296;
parameter    ap_ST_fsm_state40 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;
input  [31:0] output_0_q0;
output  [10:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [31:0] output_1_d0;
input  [31:0] output_1_q0;
output  [10:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [31:0] output_2_d0;
input  [31:0] output_2_q0;
output  [10:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [31:0] output_3_d0;
input  [31:0] output_3_q0;
output  [10:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [31:0] output_4_d0;
input  [31:0] output_4_q0;
output  [10:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [31:0] output_5_d0;
input  [31:0] output_5_q0;
output  [10:0] output_6_address0;
output   output_6_ce0;
output   output_6_we0;
output  [31:0] output_6_d0;
input  [31:0] output_6_q0;
output  [10:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [31:0] output_7_d0;
input  [31:0] output_7_q0;
output  [10:0] output_8_address0;
output   output_8_ce0;
output   output_8_we0;
output  [31:0] output_8_d0;
input  [31:0] output_8_q0;
output  [10:0] output_9_address0;
output   output_9_ce0;
output   output_9_we0;
output  [31:0] output_9_d0;
input  [31:0] output_9_q0;
output  [31:0] grp_fu_3097_p_din0;
output  [31:0] grp_fu_3097_p_din1;
output  [1:0] grp_fu_3097_p_opcode;
input  [31:0] grp_fu_3097_p_dout0;
output   grp_fu_3097_p_ce;
output  [31:0] grp_fu_3101_p_din0;
output  [31:0] grp_fu_3101_p_din1;
input  [31:0] grp_fu_3101_p_dout0;
output   grp_fu_3101_p_ce;
output  [31:0] grp_fu_866_p_din0;
output  [31:0] grp_fu_866_p_din1;
output  [4:0] grp_fu_866_p_opcode;
input  [0:0] grp_fu_866_p_dout0;
output   grp_fu_866_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[10:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[31:0] output_0_d0;
reg[10:0] output_1_address0;
reg output_1_ce0;
reg output_1_we0;
reg[31:0] output_1_d0;
reg[10:0] output_2_address0;
reg output_2_ce0;
reg output_2_we0;
reg[31:0] output_2_d0;
reg[10:0] output_3_address0;
reg output_3_ce0;
reg output_3_we0;
reg[31:0] output_3_d0;
reg[10:0] output_4_address0;
reg output_4_ce0;
reg output_4_we0;
reg[31:0] output_4_d0;
reg[10:0] output_5_address0;
reg output_5_ce0;
reg output_5_we0;
reg[31:0] output_5_d0;
reg[10:0] output_6_address0;
reg output_6_ce0;
reg output_6_we0;
reg[31:0] output_6_d0;
reg[10:0] output_7_address0;
reg output_7_ce0;
reg output_7_we0;
reg[31:0] output_7_d0;
reg[10:0] output_8_address0;
reg output_8_ce0;
reg output_8_we0;
reg[31:0] output_8_d0;
reg[10:0] output_9_address0;
reg output_9_ce0;
reg output_9_we0;
reg[31:0] output_9_d0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] layer_2_weights_address0;
reg    layer_2_weights_ce0;
wire   [31:0] layer_2_weights_q0;
wire   [4:0] layer_2_bias_address0;
reg    layer_2_bias_ce0;
wire   [31:0] layer_2_bias_q0;
reg   [3:0] indvar_flatten42_reg_415;
reg   [63:0] iv_reg_426;
reg   [3:0] indvar_flatten_reg_437;
reg  signed [2:0] v_reg_448;
reg   [2:0] vi_reg_459;
reg   [31:0] add4320_reg_470;
wire   [13:0] add_ln71_fu_534_p2;
reg   [13:0] add_ln71_reg_1222;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln74_fu_576_p2;
reg   [0:0] icmp_ln74_reg_1230;
wire   [0:0] icmp_ln71_fu_570_p2;
wire   [4:0] select_ln71_2_fu_638_p3;
reg   [4:0] select_ln71_2_reg_1235;
wire   [5:0] iii_mid2_fu_658_p3;
reg   [5:0] iii_mid2_reg_1243;
wire   [4:0] ii_cast8_mid2_fu_666_p3;
reg   [4:0] ii_cast8_mid2_reg_1250;
wire   [13:0] sum19_fu_722_p2;
reg   [3:0] arrayNo_cast_reg_1266;
wire    ap_CS_fsm_state5;
wire   [9:0] ii_cast8_mid2_cast_fu_747_p1;
reg   [9:0] ii_cast8_mid2_cast_reg_1270;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln77_fu_750_p1;
reg   [63:0] zext_ln77_reg_1275;
wire   [8:0] zext_ln77_1_fu_753_p1;
reg   [8:0] zext_ln77_1_reg_1280;
reg   [10:0] output_0_addr_reg_1285;
reg   [10:0] output_1_addr_reg_1290;
reg   [10:0] output_2_addr_reg_1295;
reg   [10:0] output_3_addr_reg_1300;
reg   [10:0] output_4_addr_reg_1305;
reg   [10:0] output_5_addr_reg_1310;
reg   [10:0] output_6_addr_reg_1315;
reg   [10:0] output_7_addr_reg_1320;
reg   [10:0] output_8_addr_reg_1325;
reg   [10:0] output_9_addr_reg_1330;
wire   [9:0] p_mid128_fu_795_p2;
reg   [9:0] p_mid128_reg_1335;
wire    ap_CS_fsm_state20;
wire   [3:0] add_ln83_fu_801_p2;
reg   [3:0] add_ln83_reg_1340;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state21_pp0_stage0_iter0;
wire    ap_block_state25_pp0_stage0_iter1;
wire    ap_block_state29_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln83_fu_870_p2;
reg   [0:0] icmp_ln83_reg_1345;
reg   [0:0] icmp_ln83_reg_1345_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_1345_pp0_iter2_reg;
wire   [0:0] icmp_ln86_fu_876_p2;
reg   [0:0] icmp_ln86_reg_1349;
wire   [63:0] select_ln83_1_fu_896_p3;
reg   [63:0] select_ln83_1_reg_1354;
wire  signed [2:0] select_ln86_fu_963_p3;
reg  signed [2:0] select_ln86_reg_1359;
wire   [2:0] select_ln86_3_fu_1055_p3;
reg   [2:0] select_ln86_3_reg_1364;
wire   [3:0] add_ln86_1_fu_1122_p2;
reg   [3:0] add_ln86_1_reg_1379;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state22_pp0_stage1_iter0;
wire    ap_block_state26_pp0_stage1_iter1;
wire    ap_block_state30_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] add_ln95_fu_1128_p2;
reg   [2:0] add_ln95_reg_1394;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state24_pp0_stage3_iter0;
wire    ap_block_state28_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [3:0] select_ln86_4_fu_1133_p3;
reg   [3:0] select_ln86_4_reg_1399;
wire   [31:0] grp_fu_523_p2;
reg   [31:0] mul_reg_1404;
wire   [31:0] grp_fu_517_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state31;
reg   [31:0] layer_2_bias_load_reg_1419;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
reg   [31:0] add_reg_1474;
wire    ap_CS_fsm_state38;
wire   [5:0] add_ln77_fu_1197_p2;
wire    ap_CS_fsm_state40;
wire   [10:0] select_ln74_fu_1208_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state21;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [13:0] indvar_flatten82_reg_323;
reg   [4:0] i_reg_334;
reg   [10:0] indvar_flatten56_reg_345;
reg   [4:0] ii_reg_357;
reg   [5:0] iii_reg_368;
reg   [31:0] ap_phi_mux_add4320_ph_phi_fu_382_p20;
reg   [3:0] ap_phi_mux_indvar_flatten42_phi_fu_419_p4;
wire    ap_block_pp0_stage0;
reg   [63:0] ap_phi_mux_iv_phi_fu_430_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_441_p4;
reg  signed [2:0] ap_phi_mux_v_phi_fu_452_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_463_p4;
reg   [31:0] ap_phi_mux_add4320_phi_fu_483_p4;
wire    ap_block_pp0_stage1;
reg   [31:0] phi_ln105_reg_491;
wire   [63:0] newIndex_cast_fu_756_p1;
wire   [63:0] zext_ln98_fu_1107_p1;
wire   [63:0] zext_ln98_1_fu_1117_p1;
wire   [31:0] select_ln49_fu_1180_p3;
reg   [31:0] grp_fu_517_p0;
reg   [31:0] grp_fu_517_p1;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_523_p0;
wire   [31:0] grp_fu_523_p1;
wire   [31:0] grp_fu_529_p0;
wire   [31:0] grp_fu_529_p1;
wire    ap_CS_fsm_state39;
wire   [4:0] mul_ln74_fu_544_p0;
wire   [5:0] mul_ln74_fu_544_p1;
wire   [5:0] ii_cast_fu_550_p1;
wire   [5:0] tmp_fu_554_p2;
wire  signed [8:0] tmp_cast_fu_560_p1;
wire   [8:0] mul_ln74_fu_544_p2;
wire   [4:0] add_ln71_1_fu_590_p2;
wire   [4:0] mul_ln74_1_fu_600_p0;
wire   [5:0] mul_ln74_1_fu_600_p1;
wire   [8:0] mul_ln74_1_fu_600_p2;
wire   [0:0] icmp_ln77_fu_626_p2;
wire   [0:0] xor_ln71_fu_620_p2;
wire   [4:0] select_ln71_fu_582_p3;
wire   [0:0] and_ln71_fu_632_p2;
wire   [0:0] empty_34_fu_652_p2;
wire   [4:0] add_ln74_fu_646_p2;
wire   [5:0] ii_cast_mid1_fu_674_p1;
wire   [5:0] tmp_mid1_fu_678_p2;
wire  signed [8:0] tmp_cast_mid1_fu_684_p1;
wire   [8:0] select_ln71_1_fu_606_p3;
wire   [8:0] p_mid174_fu_614_p2;
wire   [8:0] empty_fu_564_p2;
wire   [8:0] p_mid152_fu_688_p2;
wire   [8:0] select_ln71_3_fu_694_p3;
wire   [8:0] empty_35_fu_702_p3;
wire   [13:0] zext_ln77_2_fu_718_p1;
wire   [13:0] p_mid_fu_710_p3;
wire   [11:0] grp_fu_732_p1;
wire   [28:0] grp_fu_1215_p2;
wire   [13:0] grp_fu_732_p2;
wire   [4:0] p_mid116_fu_770_p2;
wire   [7:0] p_shl2_mid_fu_783_p3;
wire   [9:0] p_shl1_mid_fu_775_p3;
wire   [9:0] p_shl2_cast_mid126_fu_791_p1;
wire  signed [4:0] sext_ln86_fu_807_p1;
wire   [4:0] empty_28_fu_811_p2;
wire   [7:0] p_shl2_fu_824_p3;
wire   [9:0] p_shl1_fu_816_p3;
wire   [9:0] p_shl2_cast_fu_832_p1;
wire   [2:0] indvars_iv_next34_fu_842_p2;
wire   [1:0] empty_30_fu_852_p1;
wire   [3:0] p_shl_fu_856_p3;
wire   [3:0] indvars_iv_next34_cast_fu_848_p1;
wire   [63:0] add_ln83_2_fu_890_p2;
wire   [3:0] trunc_ln83_1_fu_908_p1;
wire   [3:0] sub_ln94_fu_864_p2;
wire   [9:0] empty_29_fu_836_p2;
wire   [0:0] icmp_ln89_fu_939_p2;
wire   [0:0] xor_ln83_fu_933_p2;
wire   [2:0] select_ln83_fu_882_p3;
wire   [0:0] and_ln83_fu_945_p2;
wire   [0:0] or_ln86_fu_957_p2;
wire  signed [2:0] indvars_iv_next34_dup_fu_951_p2;
wire  signed [4:0] sext_ln86_1_fu_971_p1;
wire   [4:0] p_mid1_fu_975_p2;
wire   [7:0] p_shl2_mid1_fu_988_p3;
wire   [9:0] p_shl1_mid1_fu_980_p3;
wire   [9:0] p_shl2_cast_mid1_fu_996_p1;
wire   [2:0] indvars_iv_next34_mid1_fu_1006_p2;
wire   [1:0] empty_32_fu_1016_p1;
wire   [3:0] p_shl_mid1_fu_1020_p3;
wire   [3:0] indvars_iv_next34_cast_mid1_fu_1012_p1;
wire   [3:0] sub_ln94_1_fu_1028_p2;
wire   [3:0] select_ln83_2_fu_918_p3;
wire   [9:0] p_mid13_fu_1000_p2;
wire   [9:0] select_ln83_3_fu_926_p3;
wire   [9:0] select_ln86_2_fu_1042_p3;
wire   [1:0] trunc_ln95_fu_1067_p1;
wire  signed [3:0] sext_ln95_fu_1071_p1;
wire   [3:0] select_ln86_1_fu_1034_p3;
wire   [3:0] add_ln83_1_fu_912_p2;
wire   [3:0] add_ln95_1_fu_1075_p2;
wire   [3:0] add_ln95_2_fu_1081_p2;
wire  signed [9:0] vi_cast_fu_1063_p1;
wire   [9:0] trunc_ln83_fu_904_p1;
wire   [9:0] add_ln98_2_fu_1095_p2;
wire   [9:0] add_ln86_fu_1050_p2;
wire   [9:0] add_ln98_fu_1101_p2;
wire   [8:0] shl_ln_fu_1087_p3;
wire   [8:0] add_ln98_1_fu_1112_p2;
wire    ap_block_pp0_stage3;
wire   [31:0] bitcast_ln49_fu_1139_p1;
wire   [7:0] tmp_s_fu_1142_p4;
wire   [22:0] trunc_ln49_fu_1152_p1;
wire   [0:0] icmp_ln49_1_fu_1162_p2;
wire   [0:0] icmp_ln49_fu_1156_p2;
wire   [0:0] or_ln49_fu_1168_p2;
wire   [0:0] grp_fu_529_p2;
wire   [0:0] and_ln49_fu_1174_p2;
wire   [10:0] add_ln74_1_fu_1202_p2;
wire   [13:0] grp_fu_1215_p0;
wire   [15:0] grp_fu_1215_p1;
wire    grp_fu_517_ce;
wire    grp_fu_523_ce;
wire    grp_fu_529_ce;
wire   [4:0] grp_fu_529_opcode;
reg    grp_fu_732_ap_start;
wire    grp_fu_732_ap_done;
reg   [33:0] ap_NS_fsm;
wire    ap_block_state23_pp0_stage2_iter0;
wire    ap_block_state27_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire   [28:0] grp_fu_1215_p00;
wire   [8:0] mul_ln74_1_fu_600_p00;
wire   [8:0] mul_ln74_fu_544_p00;
reg    ap_condition_395;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_conv2d_1_layer_2_weights #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
layer_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_weights_address0),
    .ce0(layer_2_weights_ce0),
    .q0(layer_2_weights_q0)
);

infer_conv2d_1_layer_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_bias_address0),
    .ce0(layer_2_bias_ce0),
    .q0(layer_2_bias_q0)
);

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U20(
    .din0(mul_ln74_fu_544_p0),
    .din1(mul_ln74_fu_544_p1),
    .dout(mul_ln74_fu_544_p2)
);

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U21(
    .din0(mul_ln74_1_fu_600_p0),
    .din1(mul_ln74_1_fu_600_p1),
    .dout(mul_ln74_1_fu_600_p2)
);

infer_urem_14ns_12ns_14_18_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 14 ))
urem_14ns_12ns_14_18_seq_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_732_ap_start),
    .done(grp_fu_732_ap_done),
    .din0(sum19_fu_722_p2),
    .din1(grp_fu_732_p1),
    .ce(1'b1),
    .dout(grp_fu_732_p2)
);

infer_mul_mul_14ns_16ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_mul_14ns_16ns_29_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1215_p0),
    .din1(grp_fu_1215_p1),
    .ce(1'b1),
    .dout(grp_fu_1215_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add4320_reg_470 <= ap_phi_mux_add4320_ph_phi_fu_382_p20;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln83_reg_1345_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add4320_reg_470 <= grp_fu_3097_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_reg_334 <= select_ln71_2_reg_1235;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_334 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ii_reg_357 <= ii_cast8_mid2_reg_1250;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_357 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        iii_reg_368 <= add_ln77_fu_1197_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_368 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten42_reg_415 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten42_reg_415 <= add_ln83_reg_1340;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        indvar_flatten56_reg_345 <= select_ln74_fu_1208_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten56_reg_345 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        indvar_flatten82_reg_323 <= add_ln71_reg_1222;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten82_reg_323 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten_reg_437 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_437 <= select_ln86_4_reg_1399;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        iv_reg_426 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iv_reg_426 <= select_ln83_1_reg_1354;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        if ((1'b1 == ap_condition_395)) begin
            phi_ln105_reg_491 <= output_9_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd8)) begin
            phi_ln105_reg_491 <= output_8_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd7)) begin
            phi_ln105_reg_491 <= output_7_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd6)) begin
            phi_ln105_reg_491 <= output_6_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd5)) begin
            phi_ln105_reg_491 <= output_5_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd4)) begin
            phi_ln105_reg_491 <= output_4_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd3)) begin
            phi_ln105_reg_491 <= output_3_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd2)) begin
            phi_ln105_reg_491 <= output_2_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd1)) begin
            phi_ln105_reg_491 <= output_1_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd0)) begin
            phi_ln105_reg_491 <= output_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        v_reg_448 <= 3'd7;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_reg_448 <= select_ln86_3_reg_1364;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        vi_reg_459 <= 3'd7;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vi_reg_459 <= add_ln95_reg_1394;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln71_reg_1222 <= add_ln71_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln83_reg_1340 <= add_ln83_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_870_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln86_1_reg_1379 <= add_ln86_1_fu_1122_p2;
        icmp_ln86_reg_1349 <= icmp_ln86_fu_876_p2;
        select_ln86_reg_1359 <= select_ln86_fu_963_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln95_reg_1394 <= add_ln95_fu_1128_p2;
        select_ln86_4_reg_1399 <= select_ln86_4_fu_1133_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        add_reg_1474 <= grp_fu_3097_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        arrayNo_cast_reg_1266 <= {{grp_fu_1215_p2[28:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln71_fu_570_p2 == 1'd0))) begin
        icmp_ln74_reg_1230 <= icmp_ln74_fu_576_p2;
        ii_cast8_mid2_reg_1250 <= ii_cast8_mid2_fu_666_p3;
        iii_mid2_reg_1243 <= iii_mid2_fu_658_p3;
        select_ln71_2_reg_1235 <= select_ln71_2_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_reg_1345 <= icmp_ln83_fu_870_p2;
        icmp_ln83_reg_1345_pp0_iter1_reg <= icmp_ln83_reg_1345;
        icmp_ln83_reg_1345_pp0_iter2_reg <= icmp_ln83_reg_1345_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ii_cast8_mid2_cast_reg_1270[4 : 0] <= ii_cast8_mid2_cast_fu_747_p1[4 : 0];
        output_0_addr_reg_1285 <= newIndex_cast_fu_756_p1;
        output_1_addr_reg_1290 <= newIndex_cast_fu_756_p1;
        output_2_addr_reg_1295 <= newIndex_cast_fu_756_p1;
        output_3_addr_reg_1300 <= newIndex_cast_fu_756_p1;
        output_4_addr_reg_1305 <= newIndex_cast_fu_756_p1;
        output_5_addr_reg_1310 <= newIndex_cast_fu_756_p1;
        output_6_addr_reg_1315 <= newIndex_cast_fu_756_p1;
        output_7_addr_reg_1320 <= newIndex_cast_fu_756_p1;
        output_8_addr_reg_1325 <= newIndex_cast_fu_756_p1;
        output_9_addr_reg_1330 <= newIndex_cast_fu_756_p1;
        zext_ln77_1_reg_1280[5 : 0] <= zext_ln77_1_fu_753_p1[5 : 0];
        zext_ln77_reg_1275[5 : 0] <= zext_ln77_fu_750_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        layer_2_bias_load_reg_1419 <= layer_2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_reg_1404 <= grp_fu_3101_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_mid128_reg_1335[9 : 3] <= p_mid128_fu_795_p2[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_870_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln83_1_reg_1354 <= select_ln83_1_fu_896_p3;
        select_ln86_3_reg_1364 <= select_ln86_3_fu_1055_p3;
    end
end

always @ (*) begin
    if ((icmp_ln83_fu_870_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln71_fu_570_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        if ((1'b1 == ap_condition_395)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_9_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd8)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_8_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd7)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_7_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd6)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_6_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd5)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_5_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd4)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_4_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd3)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_3_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd2)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_2_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd1)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_1_q0;
        end else if ((arrayNo_cast_reg_1266 == 4'd0)) begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = output_0_q0;
        end else begin
            ap_phi_mux_add4320_ph_phi_fu_382_p20 = 'bx;
        end
    end else begin
        ap_phi_mux_add4320_ph_phi_fu_382_p20 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln83_reg_1345_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_add4320_phi_fu_483_p4 = grp_fu_3097_p_dout0;
    end else begin
        ap_phi_mux_add4320_phi_fu_483_p4 = add4320_reg_470;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten42_phi_fu_419_p4 = add_ln83_reg_1340;
    end else begin
        ap_phi_mux_indvar_flatten42_phi_fu_419_p4 = indvar_flatten42_reg_415;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_441_p4 = select_ln86_4_reg_1399;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_441_p4 = indvar_flatten_reg_437;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_iv_phi_fu_430_p4 = select_ln83_1_reg_1354;
    end else begin
        ap_phi_mux_iv_phi_fu_430_p4 = iv_reg_426;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_v_phi_fu_452_p4 = select_ln86_3_reg_1364;
    end else begin
        ap_phi_mux_v_phi_fu_452_p4 = v_reg_448;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln83_reg_1345 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_vi_phi_fu_463_p4 = add_ln95_reg_1394;
    end else begin
        ap_phi_mux_vi_phi_fu_463_p4 = vi_reg_459;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln71_fu_570_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_517_p0 = phi_ln105_reg_491;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_517_p0 = ap_phi_mux_add4320_phi_fu_483_p4;
    end else begin
        grp_fu_517_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_517_p1 = layer_2_bias_load_reg_1419;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_517_p1 = mul_reg_1404;
    end else begin
        grp_fu_517_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln71_fu_570_p2 == 1'd0))) begin
        grp_fu_732_ap_start = 1'b1;
    end else begin
        grp_fu_732_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        layer_2_bias_ce0 = 1'b1;
    end else begin
        layer_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer_2_weights_ce0 = 1'b1;
    end else begin
        layer_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_0_address0 = output_0_addr_reg_1285;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_0_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_0_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_0_d0 = add4320_reg_470;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd0)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd0)))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_1_address0 = output_1_addr_reg_1290;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_1_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_1_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_1_d0 = add4320_reg_470;
    end else begin
        output_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd1)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd1)))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_2_address0 = output_2_addr_reg_1295;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_2_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_2_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_2_d0 = add4320_reg_470;
    end else begin
        output_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd2)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd2)))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_3_address0 = output_3_addr_reg_1300;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_3_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_3_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_3_d0 = add4320_reg_470;
    end else begin
        output_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd3)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd3)))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_4_address0 = output_4_addr_reg_1305;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_4_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_4_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_4_d0 = add4320_reg_470;
    end else begin
        output_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd4)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd4)))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_5_address0 = output_5_addr_reg_1310;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_5_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_5_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_5_d0 = add4320_reg_470;
    end else begin
        output_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd5)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd5)))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_6_address0 = output_6_addr_reg_1315;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_6_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_6_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_6_d0 = add4320_reg_470;
    end else begin
        output_6_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd6)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd6)))) begin
        output_6_we0 = 1'b1;
    end else begin
        output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_7_address0 = output_7_addr_reg_1320;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_7_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_7_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_7_d0 = add4320_reg_470;
    end else begin
        output_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd7)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd7)))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_8_address0 = output_8_addr_reg_1325;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_8_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_8_ce0 = 1'b1;
    end else begin
        output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_8_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_8_d0 = add4320_reg_470;
    end else begin
        output_8_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (arrayNo_cast_reg_1266 == 4'd8)) | ((1'b1 == ap_CS_fsm_state31) & (arrayNo_cast_reg_1266 == 4'd8)))) begin
        output_8_we0 = 1'b1;
    end else begin
        output_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        output_9_address0 = output_9_addr_reg_1330;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_9_address0 = newIndex_cast_fu_756_p1;
    end else begin
        output_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_9_ce0 = 1'b1;
    end else begin
        output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_9_d0 = select_ln49_fu_1180_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_9_d0 = add4320_reg_470;
    end else begin
        output_9_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & ((arrayNo_cast_reg_1266 == 4'd9) | ((arrayNo_cast_reg_1266 == 4'd10) | ((arrayNo_cast_reg_1266 == 4'd11) | ((arrayNo_cast_reg_1266 == 4'd12) | ((arrayNo_cast_reg_1266 == 4'd13) | ((arrayNo_cast_reg_1266 == 4'd14) | (arrayNo_cast_reg_1266 == 4'd15)))))))) | ((1'b1 == ap_CS_fsm_state31) & ((arrayNo_cast_reg_1266 == 4'd9) | ((arrayNo_cast_reg_1266 == 4'd10) | ((arrayNo_cast_reg_1266 == 4'd11) | ((arrayNo_cast_reg_1266 == 4'd12) | ((arrayNo_cast_reg_1266 == 4'd13) | ((arrayNo_cast_reg_1266 == 4'd14) | (arrayNo_cast_reg_1266 == 4'd15)))))))))) begin
        output_9_we0 = 1'b1;
    end else begin
        output_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln71_fu_570_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_fu_870_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_fu_870_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_1_fu_590_p2 = (i_reg_334 + 5'd1);

assign add_ln71_fu_534_p2 = (indvar_flatten82_reg_323 + 14'd1);

assign add_ln74_1_fu_1202_p2 = (indvar_flatten56_reg_345 + 11'd1);

assign add_ln74_fu_646_p2 = (select_ln71_fu_582_p3 + 5'd1);

assign add_ln77_fu_1197_p2 = (iii_mid2_reg_1243 + 6'd1);

assign add_ln83_1_fu_912_p2 = (trunc_ln83_1_fu_908_p1 + 4'd1);

assign add_ln83_2_fu_890_p2 = (ap_phi_mux_iv_phi_fu_430_p4 + 64'd1);

assign add_ln83_fu_801_p2 = (ap_phi_mux_indvar_flatten42_phi_fu_419_p4 + 4'd1);

assign add_ln86_1_fu_1122_p2 = (ap_phi_mux_indvar_flatten_phi_fu_441_p4 + 4'd1);

assign add_ln86_fu_1050_p2 = (select_ln86_2_fu_1042_p3 + ii_cast8_mid2_cast_reg_1270);

assign add_ln95_1_fu_1075_p2 = ($signed(sext_ln95_fu_1071_p1) + $signed(select_ln86_1_fu_1034_p3));

assign add_ln95_2_fu_1081_p2 = (add_ln83_1_fu_912_p2 + add_ln95_1_fu_1075_p2);

assign add_ln95_fu_1128_p2 = ($signed(select_ln86_reg_1359) + $signed(3'd1));

assign add_ln98_1_fu_1112_p2 = (shl_ln_fu_1087_p3 + zext_ln77_1_reg_1280);

assign add_ln98_2_fu_1095_p2 = ($signed(vi_cast_fu_1063_p1) + $signed(trunc_ln83_fu_904_p1));

assign add_ln98_fu_1101_p2 = (add_ln98_2_fu_1095_p2 + add_ln86_fu_1050_p2);

assign and_ln49_fu_1174_p2 = (or_ln49_fu_1168_p2 & grp_fu_866_p_dout0);

assign and_ln71_fu_632_p2 = (xor_ln71_fu_620_p2 & icmp_ln77_fu_626_p2);

assign and_ln83_fu_945_p2 = (xor_ln83_fu_933_p2 & icmp_ln89_fu_939_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_395 = ((arrayNo_cast_reg_1266 == 4'd9) | ((arrayNo_cast_reg_1266 == 4'd10) | ((arrayNo_cast_reg_1266 == 4'd11) | ((arrayNo_cast_reg_1266 == 4'd12) | ((arrayNo_cast_reg_1266 == 4'd13) | ((arrayNo_cast_reg_1266 == 4'd14) | (arrayNo_cast_reg_1266 == 4'd15)))))));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_1139_p1 = add_reg_1474;

assign empty_28_fu_811_p2 = ($signed(sext_ln86_fu_807_p1) + $signed(select_ln71_2_reg_1235));

assign empty_29_fu_836_p2 = (p_shl1_fu_816_p3 - p_shl2_cast_fu_832_p1);

assign empty_30_fu_852_p1 = indvars_iv_next34_fu_842_p2[1:0];

assign empty_32_fu_1016_p1 = indvars_iv_next34_mid1_fu_1006_p2[1:0];

assign empty_34_fu_652_p2 = (icmp_ln74_fu_576_p2 | and_ln71_fu_632_p2);

assign empty_35_fu_702_p3 = ((and_ln71_fu_632_p2[0:0] == 1'b1) ? p_mid152_fu_688_p2 : select_ln71_3_fu_694_p3);

assign empty_fu_564_p2 = ($signed(tmp_cast_fu_560_p1) + $signed(mul_ln74_fu_544_p2));

assign grp_fu_1215_p0 = grp_fu_1215_p00;

assign grp_fu_1215_p00 = sum19_fu_722_p2;

assign grp_fu_1215_p1 = 29'd21662;

assign grp_fu_3097_p_ce = 1'b1;

assign grp_fu_3097_p_din0 = grp_fu_517_p0;

assign grp_fu_3097_p_din1 = grp_fu_517_p1;

assign grp_fu_3097_p_opcode = 2'd0;

assign grp_fu_3101_p_ce = 1'b1;

assign grp_fu_3101_p_din0 = input_r_q0;

assign grp_fu_3101_p_din1 = layer_2_weights_q0;

assign grp_fu_517_ce = 1'b1;

assign grp_fu_517_p2 = grp_fu_3097_p_dout0;

assign grp_fu_523_ce = 1'b1;

assign grp_fu_523_p0 = input_r_q0;

assign grp_fu_523_p1 = layer_2_weights_q0;

assign grp_fu_523_p2 = grp_fu_3101_p_dout0;

assign grp_fu_529_ce = 1'b1;

assign grp_fu_529_opcode = 5'd2;

assign grp_fu_529_p0 = add_reg_1474;

assign grp_fu_529_p1 = 32'd0;

assign grp_fu_529_p2 = grp_fu_866_p_dout0;

assign grp_fu_732_p1 = 14'd1549;

assign grp_fu_866_p_ce = 1'b1;

assign grp_fu_866_p_din0 = add_reg_1474;

assign grp_fu_866_p_din1 = 32'd0;

assign grp_fu_866_p_opcode = 5'd2;

assign icmp_ln49_1_fu_1162_p2 = ((trunc_ln49_fu_1152_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1156_p2 = ((tmp_s_fu_1142_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_570_p2 = ((indvar_flatten82_reg_323 == 14'd15488) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_576_p2 = ((indvar_flatten56_reg_345 == 11'd704) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_626_p2 = ((iii_reg_368 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_870_p2 = ((ap_phi_mux_indvar_flatten42_phi_fu_419_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_876_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_441_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_939_p2 = ((ap_phi_mux_vi_phi_fu_463_p4 == 3'd2) ? 1'b1 : 1'b0);

assign ii_cast8_mid2_cast_fu_747_p1 = ii_cast8_mid2_reg_1250;

assign ii_cast8_mid2_fu_666_p3 = ((and_ln71_fu_632_p2[0:0] == 1'b1) ? add_ln74_fu_646_p2 : select_ln71_fu_582_p3);

assign ii_cast_fu_550_p1 = ii_reg_357;

assign ii_cast_mid1_fu_674_p1 = add_ln74_fu_646_p2;

assign iii_mid2_fu_658_p3 = ((empty_34_fu_652_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_368);

assign indvars_iv_next34_cast_fu_848_p1 = indvars_iv_next34_fu_842_p2;

assign indvars_iv_next34_cast_mid1_fu_1012_p1 = indvars_iv_next34_mid1_fu_1006_p2;

assign indvars_iv_next34_dup_fu_951_p2 = (select_ln83_fu_882_p3 + 3'd1);

assign indvars_iv_next34_fu_842_p2 = ($signed(ap_phi_mux_v_phi_fu_452_p4) + $signed(3'd1));

assign indvars_iv_next34_mid1_fu_1006_p2 = (select_ln83_fu_882_p3 + 3'd2);

assign input_r_address0 = zext_ln98_fu_1107_p1;

assign layer_2_bias_address0 = zext_ln77_reg_1275;

assign layer_2_weights_address0 = zext_ln98_1_fu_1117_p1;

assign mul_ln74_1_fu_600_p0 = mul_ln74_1_fu_600_p00;

assign mul_ln74_1_fu_600_p00 = add_ln71_1_fu_590_p2;

assign mul_ln74_1_fu_600_p1 = 9'd22;

assign mul_ln74_fu_544_p0 = mul_ln74_fu_544_p00;

assign mul_ln74_fu_544_p00 = i_reg_334;

assign mul_ln74_fu_544_p1 = 9'd22;

assign newIndex_cast_fu_756_p1 = grp_fu_732_p2;

assign or_ln49_fu_1168_p2 = (icmp_ln49_fu_1156_p2 | icmp_ln49_1_fu_1162_p2);

assign or_ln86_fu_957_p2 = (icmp_ln86_fu_876_p2 | and_ln83_fu_945_p2);

assign p_mid116_fu_770_p2 = ($signed(select_ln71_2_reg_1235) + $signed(5'd31));

assign p_mid128_fu_795_p2 = (p_shl1_mid_fu_775_p3 - p_shl2_cast_mid126_fu_791_p1);

assign p_mid13_fu_1000_p2 = (p_shl1_mid1_fu_980_p3 - p_shl2_cast_mid1_fu_996_p1);

assign p_mid152_fu_688_p2 = ($signed(tmp_cast_mid1_fu_684_p1) + $signed(select_ln71_1_fu_606_p3));

assign p_mid174_fu_614_p2 = ($signed(mul_ln74_1_fu_600_p2) + $signed(9'd490));

assign p_mid1_fu_975_p2 = ($signed(sext_ln86_1_fu_971_p1) + $signed(select_ln71_2_reg_1235));

assign p_mid_fu_710_p3 = {{empty_35_fu_702_p3}, {5'd0}};

assign p_shl1_fu_816_p3 = {{empty_28_fu_811_p2}, {5'd0}};

assign p_shl1_mid1_fu_980_p3 = {{p_mid1_fu_975_p2}, {5'd0}};

assign p_shl1_mid_fu_775_p3 = {{p_mid116_fu_770_p2}, {5'd0}};

assign p_shl2_cast_fu_832_p1 = p_shl2_fu_824_p3;

assign p_shl2_cast_mid126_fu_791_p1 = p_shl2_mid_fu_783_p3;

assign p_shl2_cast_mid1_fu_996_p1 = p_shl2_mid1_fu_988_p3;

assign p_shl2_fu_824_p3 = {{empty_28_fu_811_p2}, {3'd0}};

assign p_shl2_mid1_fu_988_p3 = {{p_mid1_fu_975_p2}, {3'd0}};

assign p_shl2_mid_fu_783_p3 = {{p_mid116_fu_770_p2}, {3'd0}};

assign p_shl_fu_856_p3 = {{empty_30_fu_852_p1}, {2'd0}};

assign p_shl_mid1_fu_1020_p3 = {{empty_32_fu_1016_p1}, {2'd0}};

assign select_ln49_fu_1180_p3 = ((and_ln49_fu_1174_p2[0:0] == 1'b1) ? add_reg_1474 : 32'd0);

assign select_ln71_1_fu_606_p3 = ((icmp_ln74_fu_576_p2[0:0] == 1'b1) ? mul_ln74_1_fu_600_p2 : mul_ln74_fu_544_p2);

assign select_ln71_2_fu_638_p3 = ((icmp_ln74_fu_576_p2[0:0] == 1'b1) ? add_ln71_1_fu_590_p2 : i_reg_334);

assign select_ln71_3_fu_694_p3 = ((icmp_ln74_fu_576_p2[0:0] == 1'b1) ? p_mid174_fu_614_p2 : empty_fu_564_p2);

assign select_ln71_fu_582_p3 = ((icmp_ln74_fu_576_p2[0:0] == 1'b1) ? 5'd1 : ii_reg_357);

assign select_ln74_fu_1208_p3 = ((icmp_ln74_reg_1230[0:0] == 1'b1) ? 11'd1 : add_ln74_1_fu_1202_p2);

assign select_ln83_1_fu_896_p3 = ((icmp_ln86_fu_876_p2[0:0] == 1'b1) ? add_ln83_2_fu_890_p2 : ap_phi_mux_iv_phi_fu_430_p4);

assign select_ln83_2_fu_918_p3 = ((icmp_ln86_fu_876_p2[0:0] == 1'b1) ? 4'd0 : sub_ln94_fu_864_p2);

assign select_ln83_3_fu_926_p3 = ((icmp_ln86_fu_876_p2[0:0] == 1'b1) ? p_mid128_reg_1335 : empty_29_fu_836_p2);

assign select_ln83_fu_882_p3 = ((icmp_ln86_fu_876_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_452_p4);

assign select_ln86_1_fu_1034_p3 = ((and_ln83_fu_945_p2[0:0] == 1'b1) ? sub_ln94_1_fu_1028_p2 : select_ln83_2_fu_918_p3);

assign select_ln86_2_fu_1042_p3 = ((and_ln83_fu_945_p2[0:0] == 1'b1) ? p_mid13_fu_1000_p2 : select_ln83_3_fu_926_p3);

assign select_ln86_3_fu_1055_p3 = ((and_ln83_fu_945_p2[0:0] == 1'b1) ? indvars_iv_next34_dup_fu_951_p2 : select_ln83_fu_882_p3);

assign select_ln86_4_fu_1133_p3 = ((icmp_ln86_reg_1349[0:0] == 1'b1) ? 4'd1 : add_ln86_1_reg_1379);

assign select_ln86_fu_963_p3 = ((or_ln86_fu_957_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_463_p4);

assign sext_ln86_1_fu_971_p1 = indvars_iv_next34_dup_fu_951_p2;

assign sext_ln86_fu_807_p1 = ap_phi_mux_v_phi_fu_452_p4;

assign sext_ln95_fu_1071_p1 = $signed(trunc_ln95_fu_1067_p1);

assign shl_ln_fu_1087_p3 = {{add_ln95_2_fu_1081_p2}, {5'd0}};

assign sub_ln94_1_fu_1028_p2 = (p_shl_mid1_fu_1020_p3 - indvars_iv_next34_cast_mid1_fu_1012_p1);

assign sub_ln94_fu_864_p2 = (p_shl_fu_856_p3 - indvars_iv_next34_cast_fu_848_p1);

assign sum19_fu_722_p2 = (zext_ln77_2_fu_718_p1 + p_mid_fu_710_p3);

assign tmp_cast_fu_560_p1 = $signed(tmp_fu_554_p2);

assign tmp_cast_mid1_fu_684_p1 = $signed(tmp_mid1_fu_678_p2);

assign tmp_fu_554_p2 = ($signed(ii_cast_fu_550_p1) + $signed(6'd41));

assign tmp_mid1_fu_678_p2 = ($signed(ii_cast_mid1_fu_674_p1) + $signed(6'd41));

assign tmp_s_fu_1142_p4 = {{bitcast_ln49_fu_1139_p1[30:23]}};

assign trunc_ln49_fu_1152_p1 = bitcast_ln49_fu_1139_p1[22:0];

assign trunc_ln83_1_fu_908_p1 = select_ln83_1_fu_896_p3[3:0];

assign trunc_ln83_fu_904_p1 = select_ln83_1_fu_896_p3[9:0];

assign trunc_ln95_fu_1067_p1 = select_ln86_fu_963_p3[1:0];

assign vi_cast_fu_1063_p1 = select_ln86_fu_963_p3;

assign xor_ln71_fu_620_p2 = (icmp_ln74_fu_576_p2 ^ 1'd1);

assign xor_ln83_fu_933_p2 = (icmp_ln86_fu_876_p2 ^ 1'd1);

assign zext_ln77_1_fu_753_p1 = iii_mid2_reg_1243;

assign zext_ln77_2_fu_718_p1 = iii_mid2_fu_658_p3;

assign zext_ln77_fu_750_p1 = iii_mid2_reg_1243;

assign zext_ln98_1_fu_1117_p1 = add_ln98_1_fu_1112_p2;

assign zext_ln98_fu_1107_p1 = add_ln98_fu_1101_p2;

always @ (posedge ap_clk) begin
    ii_cast8_mid2_cast_reg_1270[9:5] <= 5'b00000;
    zext_ln77_reg_1275[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln77_1_reg_1280[8:6] <= 3'b000;
    p_mid128_reg_1335[2:0] <= 3'b000;
end

endmodule //infer_conv2d_1

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_max_pooling2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_788_p_din0,
        grp_fu_788_p_din1,
        grp_fu_788_p_opcode,
        grp_fu_788_p_dout0,
        grp_fu_788_p_ce,
        grp_fu_1839_p_din0,
        grp_fu_1839_p_din1,
        grp_fu_1839_p_opcode,
        grp_fu_1839_p_dout0,
        grp_fu_1839_p_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [6:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_788_p_din0;
output  [31:0] grp_fu_788_p_din1;
output  [4:0] grp_fu_788_p_opcode;
input  [0:0] grp_fu_788_p_dout0;
output   grp_fu_788_p_ce;
output  [31:0] grp_fu_1839_p_din0;
output  [31:0] grp_fu_1839_p_din1;
output  [4:0] grp_fu_1839_p_opcode;
input  [0:0] grp_fu_1839_p_dout0;
output   grp_fu_1839_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] input_r_address0;
reg input_r_ce0;
reg[6:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] indvar_flatten23_reg_126;
reg   [6:0] indvar_flatten_reg_138;
reg   [5:0] iii_reg_149;
reg   [1:0] ii_reg_160;
reg   [31:0] reg_182;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln121_reg_754;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln121_reg_754_pp0_iter1_reg;
wire   [0:0] icmp_ln121_fu_188_p2;
reg   [0:0] icmp_ln121_reg_754_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_754_pp0_iter3_reg;
wire   [0:0] icmp_ln124_fu_194_p2;
reg   [0:0] icmp_ln124_reg_758;
reg   [0:0] icmp_ln124_reg_758_pp0_iter1_reg;
wire   [0:0] and_ln121_fu_212_p2;
reg   [0:0] and_ln121_reg_767;
reg   [0:0] and_ln121_reg_767_pp0_iter1_reg;
wire   [5:0] select_ln124_fu_224_p3;
reg   [5:0] select_ln124_reg_775;
reg   [5:0] select_ln124_reg_775_pp0_iter1_reg;
wire   [63:0] iii_cast3_fu_232_p1;
reg   [63:0] iii_cast3_reg_782;
reg   [63:0] iii_cast3_reg_782_pp0_iter1_reg;
reg   [63:0] iii_cast3_reg_782_pp0_iter2_reg;
reg   [63:0] iii_cast3_reg_782_pp0_iter3_reg;
wire   [6:0] add_ln124_fu_248_p2;
reg   [6:0] add_ln124_reg_797;
wire   [5:0] add_ln121_fu_254_p2;
reg   [5:0] add_ln121_reg_802;
reg   [31:0] input_load_7_reg_807;
wire   [5:0] add_ln127_fu_260_p2;
reg   [5:0] add_ln127_reg_814;
wire   [6:0] select_ln124_17_fu_265_p3;
reg   [6:0] select_ln124_17_reg_819;
wire   [31:0] select_ln136_fu_313_p3;
reg   [31:0] select_ln136_reg_824;
wire   [1:0] select_ln124_15_fu_421_p3;
reg   [1:0] select_ln124_15_reg_831;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] select_ln136_7_fu_513_p3;
reg   [31:0] select_ln136_7_reg_836;
wire   [6:0] add_ln136_fu_565_p2;
reg   [6:0] add_ln136_reg_848;
wire   [31:0] select_ln136_8_fu_654_p3;
reg   [31:0] select_ln136_8_reg_853;
reg   [31:0] select_ln136_8_reg_853_pp0_iter3_reg;
reg   [31:0] input_load_9_reg_865;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter1_state5;
reg    ap_enable_reg_pp0_iter4;
reg   [5:0] ap_phi_mux_indvar_flatten23_phi_fu_130_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_142_p4;
reg   [5:0] ap_phi_mux_iii_phi_fu_153_p4;
reg   [1:0] ap_phi_mux_ii_phi_fu_164_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_fu_243_p1;
wire   [63:0] zext_ln136_10_fu_560_p1;
wire   [63:0] zext_ln136_11_fu_661_p1;
reg   [31:0] grp_fu_171_p0;
reg   [31:0] grp_fu_171_p1;
reg   [31:0] grp_fu_177_p0;
reg   [31:0] grp_fu_177_p1;
wire   [0:0] icmp_ln127_fu_206_p2;
wire   [0:0] xor_ln121_fu_200_p2;
wire   [0:0] or_ln124_fu_218_p2;
wire   [5:0] xor_ln136_1_fu_237_p2;
wire   [31:0] bitcast_ln136_fu_271_p1;
wire   [7:0] tmp_fu_275_p4;
wire   [22:0] trunc_ln136_14_fu_285_p1;
wire   [0:0] icmp_ln136_27_fu_295_p2;
wire   [0:0] icmp_ln136_fu_289_p2;
wire   [0:0] or_ln136_fu_301_p2;
wire   [0:0] grp_fu_171_p2;
wire   [0:0] and_ln136_fu_307_p2;
wire   [1:0] xor_ln136_fu_322_p2;
wire   [0:0] trunc_ln136_fu_328_p1;
wire   [1:0] or_ln136_3_fu_340_p2;
wire   [5:0] shl_ln_fu_332_p3;
wire   [6:0] shl_ln136_5_fu_346_p3;
wire   [1:0] select_ln121_fu_354_p3;
wire   [0:0] trunc_ln136_13_fu_381_p1;
wire   [5:0] shl_ln136_mid1_fu_385_p3;
wire   [5:0] select_ln121_16_fu_361_p3;
wire   [1:0] or_ln136_14_fu_400_p2;
wire   [6:0] shl_ln136_5_mid1_fu_406_p3;
wire   [6:0] select_ln121_17_fu_368_p3;
wire   [1:0] ii_5_fu_375_p2;
wire   [31:0] bitcast_ln136_13_fu_431_p1;
wire   [31:0] bitcast_ln136_14_fu_448_p1;
wire   [7:0] tmp_29_fu_434_p4;
wire   [22:0] trunc_ln136_15_fu_444_p1;
wire   [0:0] icmp_ln136_29_fu_471_p2;
wire   [0:0] icmp_ln136_28_fu_465_p2;
wire   [7:0] tmp_30_fu_451_p4;
wire   [22:0] trunc_ln136_16_fu_461_p1;
wire   [0:0] icmp_ln136_31_fu_489_p2;
wire   [0:0] icmp_ln136_30_fu_483_p2;
wire   [0:0] or_ln136_15_fu_477_p2;
wire   [0:0] or_ln136_16_fu_495_p2;
wire   [0:0] and_ln136_13_fu_501_p2;
wire   [0:0] and_ln136_14_fu_507_p2;
wire   [5:0] select_ln124_13_fu_393_p3;
wire   [0:0] tmp_2_fu_532_p3;
wire   [0:0] tmp_1_fu_524_p3;
wire   [0:0] or_ln121_fu_540_p2;
wire   [0:0] select_ln124_16_fu_545_p3;
wire   [5:0] or_ln136_17_fu_519_p2;
wire   [6:0] add_ln136_s_fu_552_p3;
wire   [6:0] select_ln124_14_fu_414_p3;
wire   [6:0] iii_cast_fu_428_p1;
wire   [31:0] bitcast_ln136_15_fu_571_p1;
wire   [31:0] bitcast_ln136_16_fu_589_p1;
wire   [7:0] tmp_32_fu_575_p4;
wire   [22:0] trunc_ln136_17_fu_585_p1;
wire   [0:0] icmp_ln136_33_fu_612_p2;
wire   [0:0] icmp_ln136_32_fu_606_p2;
wire   [7:0] tmp_33_fu_592_p4;
wire   [22:0] trunc_ln136_18_fu_602_p1;
wire   [0:0] icmp_ln136_35_fu_630_p2;
wire   [0:0] icmp_ln136_34_fu_624_p2;
wire   [0:0] or_ln136_18_fu_618_p2;
wire   [0:0] or_ln136_19_fu_636_p2;
wire   [0:0] and_ln136_15_fu_642_p2;
wire   [0:0] grp_fu_177_p2;
wire   [0:0] and_ln136_16_fu_648_p2;
wire   [31:0] bitcast_ln136_17_fu_665_p1;
wire   [31:0] bitcast_ln136_18_fu_682_p1;
wire   [7:0] tmp_35_fu_668_p4;
wire   [22:0] trunc_ln136_19_fu_678_p1;
wire   [0:0] icmp_ln136_37_fu_705_p2;
wire   [0:0] icmp_ln136_36_fu_699_p2;
wire   [7:0] tmp_36_fu_685_p4;
wire   [22:0] trunc_ln136_20_fu_695_p1;
wire   [0:0] icmp_ln136_39_fu_723_p2;
wire   [0:0] icmp_ln136_38_fu_717_p2;
wire   [0:0] or_ln136_20_fu_711_p2;
wire   [0:0] or_ln136_21_fu_729_p2;
wire   [0:0] and_ln136_17_fu_735_p2;
wire   [0:0] and_ln136_18_fu_741_p2;
wire    grp_fu_171_ce;
wire   [4:0] grp_fu_171_opcode;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    grp_fu_177_ce;
wire   [4:0] grp_fu_177_opcode;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state5)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ii_reg_160 <= select_ln124_15_reg_831;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_160 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        iii_reg_149 <= add_ln127_reg_814;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_149 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten23_reg_126 <= add_ln121_reg_802;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_126 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_138 <= select_ln124_17_reg_819;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_138 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln121_reg_802 <= add_ln121_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln124_reg_797 <= add_ln124_fu_248_p2;
        and_ln121_reg_767 <= and_ln121_fu_212_p2;
        icmp_ln124_reg_758 <= icmp_ln124_fu_194_p2;
        iii_cast3_reg_782[5 : 0] <= iii_cast3_fu_232_p1[5 : 0];
        select_ln124_reg_775 <= select_ln124_fu_224_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln127_reg_814 <= add_ln127_fu_260_p2;
        input_load_7_reg_807 <= input_r_q0;
        select_ln124_17_reg_819 <= select_ln124_17_fu_265_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln136_reg_848 <= add_ln136_fu_565_p2;
        select_ln136_7_reg_836 <= select_ln136_7_fu_513_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln121_reg_767_pp0_iter1_reg <= and_ln121_reg_767;
        icmp_ln121_reg_754 <= icmp_ln121_fu_188_p2;
        icmp_ln121_reg_754_pp0_iter1_reg <= icmp_ln121_reg_754;
        icmp_ln121_reg_754_pp0_iter2_reg <= icmp_ln121_reg_754_pp0_iter1_reg;
        icmp_ln121_reg_754_pp0_iter3_reg <= icmp_ln121_reg_754_pp0_iter2_reg;
        icmp_ln124_reg_758_pp0_iter1_reg <= icmp_ln124_reg_758;
        iii_cast3_reg_782_pp0_iter1_reg[5 : 0] <= iii_cast3_reg_782[5 : 0];
        iii_cast3_reg_782_pp0_iter2_reg[5 : 0] <= iii_cast3_reg_782_pp0_iter1_reg[5 : 0];
        iii_cast3_reg_782_pp0_iter3_reg[5 : 0] <= iii_cast3_reg_782_pp0_iter2_reg[5 : 0];
        select_ln124_reg_775_pp0_iter1_reg <= select_ln124_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_load_9_reg_865 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln121_reg_754_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_182 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln124_15_reg_831 <= select_ln124_15_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln136_8_reg_853 <= select_ln136_8_fu_654_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln136_8_reg_853_pp0_iter3_reg <= select_ln136_8_reg_853;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln136_reg_824 <= select_ln136_fu_313_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_754 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_754_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_ii_phi_fu_164_p4 = select_ln124_15_reg_831;
    end else begin
        ap_phi_mux_ii_phi_fu_164_p4 = ii_reg_160;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_iii_phi_fu_153_p4 = add_ln127_reg_814;
    end else begin
        ap_phi_mux_iii_phi_fu_153_p4 = iii_reg_149;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten23_phi_fu_130_p4 = add_ln121_reg_802;
    end else begin
        ap_phi_mux_indvar_flatten23_phi_fu_130_p4 = indvar_flatten23_reg_126;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_754 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_142_p4 = select_ln124_17_reg_819;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_142_p4 = indvar_flatten_reg_138;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_171_p0 = input_load_7_reg_807;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_171_p0 = input_r_q1;
    end else begin
        grp_fu_171_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_171_p1 = select_ln136_fu_313_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_171_p1 = 32'd0;
    end else begin
        grp_fu_171_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_177_p0 = input_load_9_reg_865;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_177_p0 = input_r_q1;
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_177_p1 = select_ln136_8_reg_853;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_177_p1 = select_ln136_7_reg_836;
    end else begin
        grp_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln136_11_fu_661_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln136_fu_243_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address1 = zext_ln136_10_fu_560_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = iii_cast3_fu_232_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_754_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_fu_254_p2 = (indvar_flatten23_reg_126 + 6'd1);

assign add_ln124_fu_248_p2 = (ap_phi_mux_indvar_flatten_phi_fu_142_p4 + 7'd1);

assign add_ln127_fu_260_p2 = (select_ln124_reg_775 + 6'd1);

assign add_ln136_fu_565_p2 = (select_ln124_14_fu_414_p3 + iii_cast_fu_428_p1);

assign add_ln136_s_fu_552_p3 = {{select_ln124_16_fu_545_p3}, {or_ln136_17_fu_519_p2}};

assign and_ln121_fu_212_p2 = (xor_ln121_fu_200_p2 & icmp_ln127_fu_206_p2);

assign and_ln136_13_fu_501_p2 = (or_ln136_16_fu_495_p2 & or_ln136_15_fu_477_p2);

assign and_ln136_14_fu_507_p2 = (grp_fu_788_p_dout0 & and_ln136_13_fu_501_p2);

assign and_ln136_15_fu_642_p2 = (or_ln136_19_fu_636_p2 & or_ln136_18_fu_618_p2);

assign and_ln136_16_fu_648_p2 = (grp_fu_1839_p_dout0 & and_ln136_15_fu_642_p2);

assign and_ln136_17_fu_735_p2 = (or_ln136_21_fu_729_p2 & or_ln136_20_fu_711_p2);

assign and_ln136_18_fu_741_p2 = (grp_fu_1839_p_dout0 & and_ln136_17_fu_735_p2);

assign and_ln136_fu_307_p2 = (or_ln136_fu_301_p2 & grp_fu_788_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln136_13_fu_431_p1 = input_load_7_reg_807;

assign bitcast_ln136_14_fu_448_p1 = select_ln136_reg_824;

assign bitcast_ln136_15_fu_571_p1 = reg_182;

assign bitcast_ln136_16_fu_589_p1 = select_ln136_7_reg_836;

assign bitcast_ln136_17_fu_665_p1 = input_load_9_reg_865;

assign bitcast_ln136_18_fu_682_p1 = select_ln136_8_reg_853_pp0_iter3_reg;

assign bitcast_ln136_fu_271_p1 = reg_182;

assign grp_fu_171_ce = 1'b1;

assign grp_fu_171_opcode = 5'd2;

assign grp_fu_171_p2 = grp_fu_788_p_dout0;

assign grp_fu_177_ce = 1'b1;

assign grp_fu_177_opcode = 5'd2;

assign grp_fu_177_p2 = grp_fu_1839_p_dout0;

assign grp_fu_1839_p_ce = 1'b1;

assign grp_fu_1839_p_din0 = grp_fu_177_p0;

assign grp_fu_1839_p_din1 = grp_fu_177_p1;

assign grp_fu_1839_p_opcode = 5'd2;

assign grp_fu_788_p_ce = 1'b1;

assign grp_fu_788_p_din0 = grp_fu_171_p0;

assign grp_fu_788_p_din1 = grp_fu_171_p1;

assign grp_fu_788_p_opcode = 5'd2;

assign icmp_ln121_fu_188_p2 = ((ap_phi_mux_indvar_flatten23_phi_fu_130_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_194_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_142_p4 == 7'd32) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_206_p2 = ((ap_phi_mux_iii_phi_fu_153_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln136_27_fu_295_p2 = ((trunc_ln136_14_fu_285_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_28_fu_465_p2 = ((tmp_29_fu_434_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_29_fu_471_p2 = ((trunc_ln136_15_fu_444_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_30_fu_483_p2 = ((tmp_30_fu_451_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_31_fu_489_p2 = ((trunc_ln136_16_fu_461_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_32_fu_606_p2 = ((tmp_32_fu_575_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_33_fu_612_p2 = ((trunc_ln136_17_fu_585_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_34_fu_624_p2 = ((tmp_33_fu_592_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_35_fu_630_p2 = ((trunc_ln136_18_fu_602_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_36_fu_699_p2 = ((tmp_35_fu_668_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_37_fu_705_p2 = ((trunc_ln136_19_fu_678_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_38_fu_717_p2 = ((tmp_36_fu_685_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_39_fu_723_p2 = ((trunc_ln136_20_fu_695_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_289_p2 = ((tmp_fu_275_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ii_5_fu_375_p2 = (select_ln121_fu_354_p3 ^ 2'd2);

assign iii_cast3_fu_232_p1 = select_ln124_fu_224_p3;

assign iii_cast_fu_428_p1 = select_ln124_reg_775_pp0_iter1_reg;

assign or_ln121_fu_540_p2 = (tmp_2_fu_532_p3 | icmp_ln124_reg_758_pp0_iter1_reg);

assign or_ln124_fu_218_p2 = (icmp_ln124_fu_194_p2 | and_ln121_fu_212_p2);

assign or_ln136_14_fu_400_p2 = (select_ln121_fu_354_p3 | 2'd1);

assign or_ln136_15_fu_477_p2 = (icmp_ln136_29_fu_471_p2 | icmp_ln136_28_fu_465_p2);

assign or_ln136_16_fu_495_p2 = (icmp_ln136_31_fu_489_p2 | icmp_ln136_30_fu_483_p2);

assign or_ln136_17_fu_519_p2 = (select_ln124_reg_775_pp0_iter1_reg | select_ln124_13_fu_393_p3);

assign or_ln136_18_fu_618_p2 = (icmp_ln136_33_fu_612_p2 | icmp_ln136_32_fu_606_p2);

assign or_ln136_19_fu_636_p2 = (icmp_ln136_35_fu_630_p2 | icmp_ln136_34_fu_624_p2);

assign or_ln136_20_fu_711_p2 = (icmp_ln136_37_fu_705_p2 | icmp_ln136_36_fu_699_p2);

assign or_ln136_21_fu_729_p2 = (icmp_ln136_39_fu_723_p2 | icmp_ln136_38_fu_717_p2);

assign or_ln136_3_fu_340_p2 = (xor_ln136_fu_322_p2 | 2'd1);

assign or_ln136_fu_301_p2 = (icmp_ln136_fu_289_p2 | icmp_ln136_27_fu_295_p2);

assign output_r_address0 = iii_cast3_reg_782_pp0_iter3_reg;

assign output_r_d0 = ((and_ln136_18_fu_741_p2[0:0] == 1'b1) ? input_load_9_reg_865 : select_ln136_8_reg_853_pp0_iter3_reg);

assign select_ln121_16_fu_361_p3 = ((icmp_ln124_reg_758_pp0_iter1_reg[0:0] == 1'b1) ? 6'd0 : shl_ln_fu_332_p3);

assign select_ln121_17_fu_368_p3 = ((icmp_ln124_reg_758_pp0_iter1_reg[0:0] == 1'b1) ? 7'd96 : shl_ln136_5_fu_346_p3);

assign select_ln121_fu_354_p3 = ((icmp_ln124_reg_758_pp0_iter1_reg[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_ii_phi_fu_164_p4);

assign select_ln124_13_fu_393_p3 = ((and_ln121_reg_767_pp0_iter1_reg[0:0] == 1'b1) ? shl_ln136_mid1_fu_385_p3 : select_ln121_16_fu_361_p3);

assign select_ln124_14_fu_414_p3 = ((and_ln121_reg_767_pp0_iter1_reg[0:0] == 1'b1) ? shl_ln136_5_mid1_fu_406_p3 : select_ln121_17_fu_368_p3);

assign select_ln124_15_fu_421_p3 = ((and_ln121_reg_767_pp0_iter1_reg[0:0] == 1'b1) ? ii_5_fu_375_p2 : select_ln121_fu_354_p3);

assign select_ln124_16_fu_545_p3 = ((and_ln121_reg_767_pp0_iter1_reg[0:0] == 1'b1) ? tmp_1_fu_524_p3 : or_ln121_fu_540_p2);

assign select_ln124_17_fu_265_p3 = ((icmp_ln124_reg_758[0:0] == 1'b1) ? 7'd1 : add_ln124_reg_797);

assign select_ln124_fu_224_p3 = ((or_ln124_fu_218_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_iii_phi_fu_153_p4);

assign select_ln136_7_fu_513_p3 = ((and_ln136_14_fu_507_p2[0:0] == 1'b1) ? input_load_7_reg_807 : select_ln136_reg_824);

assign select_ln136_8_fu_654_p3 = ((and_ln136_16_fu_648_p2[0:0] == 1'b1) ? reg_182 : select_ln136_7_reg_836);

assign select_ln136_fu_313_p3 = ((and_ln136_fu_307_p2[0:0] == 1'b1) ? reg_182 : 32'd0);

assign shl_ln136_5_fu_346_p3 = {{or_ln136_3_fu_340_p2}, {5'd0}};

assign shl_ln136_5_mid1_fu_406_p3 = {{or_ln136_14_fu_400_p2}, {5'd0}};

assign shl_ln136_mid1_fu_385_p3 = {{trunc_ln136_13_fu_381_p1}, {5'd0}};

assign shl_ln_fu_332_p3 = {{trunc_ln136_fu_328_p1}, {5'd0}};

assign tmp_1_fu_524_p3 = select_ln121_fu_354_p3[32'd1];

assign tmp_29_fu_434_p4 = {{bitcast_ln136_13_fu_431_p1[30:23]}};

assign tmp_2_fu_532_p3 = xor_ln136_fu_322_p2[32'd1];

assign tmp_30_fu_451_p4 = {{bitcast_ln136_14_fu_448_p1[30:23]}};

assign tmp_32_fu_575_p4 = {{bitcast_ln136_15_fu_571_p1[30:23]}};

assign tmp_33_fu_592_p4 = {{bitcast_ln136_16_fu_589_p1[30:23]}};

assign tmp_35_fu_668_p4 = {{bitcast_ln136_17_fu_665_p1[30:23]}};

assign tmp_36_fu_685_p4 = {{bitcast_ln136_18_fu_682_p1[30:23]}};

assign tmp_fu_275_p4 = {{bitcast_ln136_fu_271_p1[30:23]}};

assign trunc_ln136_13_fu_381_p1 = select_ln121_fu_354_p3[0:0];

assign trunc_ln136_14_fu_285_p1 = bitcast_ln136_fu_271_p1[22:0];

assign trunc_ln136_15_fu_444_p1 = bitcast_ln136_13_fu_431_p1[22:0];

assign trunc_ln136_16_fu_461_p1 = bitcast_ln136_14_fu_448_p1[22:0];

assign trunc_ln136_17_fu_585_p1 = bitcast_ln136_15_fu_571_p1[22:0];

assign trunc_ln136_18_fu_602_p1 = bitcast_ln136_16_fu_589_p1[22:0];

assign trunc_ln136_19_fu_678_p1 = bitcast_ln136_17_fu_665_p1[22:0];

assign trunc_ln136_20_fu_695_p1 = bitcast_ln136_18_fu_682_p1[22:0];

assign trunc_ln136_fu_328_p1 = xor_ln136_fu_322_p2[0:0];

assign xor_ln121_fu_200_p2 = (icmp_ln124_fu_194_p2 ^ 1'd1);

assign xor_ln136_1_fu_237_p2 = (select_ln124_fu_224_p3 ^ 6'd32);

assign xor_ln136_fu_322_p2 = (ap_phi_mux_ii_phi_fu_164_p4 ^ 2'd2);

assign zext_ln136_10_fu_560_p1 = add_ln136_s_fu_552_p3;

assign zext_ln136_11_fu_661_p1 = add_ln136_reg_848;

assign zext_ln136_fu_243_p1 = xor_ln136_1_fu_237_p2;

always @ (posedge ap_clk) begin
    iii_cast3_reg_782[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    iii_cast3_reg_782_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    iii_cast3_reg_782_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    iii_cast3_reg_782_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //infer_max_pooling2d

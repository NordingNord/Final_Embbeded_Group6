// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_exp_40_32_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [12:0] x;
output  [38:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] f_x_msb_2_table_V_address0;
reg    f_x_msb_2_table_V_ce0;
wire   [63:0] f_x_msb_2_table_V_q0;
wire   [7:0] exp_x_msb_1_table_V_address0;
reg    exp_x_msb_1_table_V_ce0;
wire   [67:0] exp_x_msb_1_table_V_q0;
wire   [0:0] p_Result_s_fu_114_p3;
reg   [0:0] p_Result_s_reg_342;
reg   [0:0] p_Result_s_reg_342_pp0_iter1_reg;
reg   [0:0] p_Result_s_reg_342_pp0_iter2_reg;
wire   [0:0] icmp_ln1494_fu_152_p2;
reg   [0:0] icmp_ln1494_reg_347;
reg   [0:0] icmp_ln1494_reg_347_pp0_iter1_reg;
reg   [0:0] icmp_ln1494_reg_347_pp0_iter2_reg;
wire   [0:0] icmp_ln1498_fu_158_p2;
reg   [0:0] icmp_ln1498_reg_352;
reg   [0:0] icmp_ln1498_reg_352_pp0_iter1_reg;
reg   [0:0] icmp_ln1498_reg_352_pp0_iter2_reg;
wire   [0:0] icmp_ln1496_fu_164_p2;
reg   [0:0] icmp_ln1496_reg_357;
reg   [0:0] icmp_ln1496_reg_357_pp0_iter1_reg;
reg   [0:0] icmp_ln1496_reg_357_pp0_iter2_reg;
wire   [7:0] tmp_144_fu_192_p3;
reg   [7:0] tmp_144_reg_362;
wire   [8:0] ret_V_fu_227_p2;
reg   [8:0] ret_V_reg_377;
wire   [57:0] trunc_ln640_1_fu_233_p1;
reg   [57:0] trunc_ln640_1_reg_382;
reg   [67:0] exp_x_msb_1_V_reg_387;
reg   [67:0] exp_x_msb_1_V_reg_387_pp0_iter2_reg;
reg   [66:0] tmp_142_reg_393;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln534_fu_200_p1;
wire   [63:0] zext_ln534_1_fu_205_p1;
wire   [4:0] tmp_139_fu_122_p4;
wire   [7:0] trunc_ln340_fu_140_p1;
wire   [5:0] p_Result_14_fu_132_p3;
wire   [31:0] p_Result_15_fu_144_p3;
wire   [6:0] tmp_140_fu_170_p4;
wire   [5:0] trunc_ln640_fu_188_p1;
wire   [7:0] p_Result_16_fu_180_p3;
wire   [5:0] p_Result_17_fu_210_p4;
wire   [8:0] zext_ln703_1_fu_224_p1;
wire   [8:0] zext_ln703_fu_220_p1;
wire   [70:0] rhs_fu_237_p4;
wire   [70:0] r_V_fu_252_p0;
wire   [67:0] r_V_fu_252_p1;
wire   [138:0] r_V_fu_252_p2;
wire   [0:0] xor_ln849_fu_272_p2;
wire   [67:0] y_lo_s_V_fu_285_p1;
wire   [67:0] y_l_V_fu_288_p2;
wire   [0:0] and_ln571_fu_268_p2;
wire   [0:0] or_ln571_fu_303_p2;
wire   [63:0] select_ln414_fu_277_p3;
wire   [63:0] y_V_fu_293_p4;
wire   [63:0] p_Val2_6_fu_308_p3;
wire   [0:0] p_Result_18_fu_316_p3;
wire   [38:0] tmp_fu_324_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [138:0] r_V_fu_252_p00;
wire   [138:0] r_V_fu_252_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

infer_exp_40_32_s_f_x_msb_2_table_V #(
    .DataWidth( 64 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
f_x_msb_2_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_2_table_V_address0),
    .ce0(f_x_msb_2_table_V_ce0),
    .q0(f_x_msb_2_table_V_q0)
);

infer_exp_40_32_s_exp_x_msb_1_table_V #(
    .DataWidth( 68 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
exp_x_msb_1_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_V_address0),
    .ce0(exp_x_msb_1_table_V_ce0),
    .q0(exp_x_msb_1_table_V_q0)
);

infer_mul_71ns_68ns_139_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 71 ),
    .din1_WIDTH( 68 ),
    .dout_WIDTH( 139 ))
mul_71ns_68ns_139_1_1_U979(
    .din0(r_V_fu_252_p0),
    .din1(r_V_fu_252_p1),
    .dout(r_V_fu_252_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_1_V_reg_387 <= exp_x_msb_1_table_V_q0;
        icmp_ln1494_reg_347 <= icmp_ln1494_fu_152_p2;
        icmp_ln1494_reg_347_pp0_iter1_reg <= icmp_ln1494_reg_347;
        icmp_ln1496_reg_357 <= icmp_ln1496_fu_164_p2;
        icmp_ln1496_reg_357_pp0_iter1_reg <= icmp_ln1496_reg_357;
        icmp_ln1498_reg_352 <= icmp_ln1498_fu_158_p2;
        icmp_ln1498_reg_352_pp0_iter1_reg <= icmp_ln1498_reg_352;
        p_Result_s_reg_342 <= x[32'd12];
        p_Result_s_reg_342_pp0_iter1_reg <= p_Result_s_reg_342;
        ret_V_reg_377 <= ret_V_fu_227_p2;
        tmp_144_reg_362[7 : 2] <= tmp_144_fu_192_p3[7 : 2];
        trunc_ln640_1_reg_382 <= trunc_ln640_1_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_x_msb_1_V_reg_387_pp0_iter2_reg <= exp_x_msb_1_V_reg_387;
        icmp_ln1494_reg_347_pp0_iter2_reg <= icmp_ln1494_reg_347_pp0_iter1_reg;
        icmp_ln1496_reg_357_pp0_iter2_reg <= icmp_ln1496_reg_357_pp0_iter1_reg;
        icmp_ln1498_reg_352_pp0_iter2_reg <= icmp_ln1498_reg_352_pp0_iter1_reg;
        p_Result_s_reg_342_pp0_iter2_reg <= p_Result_s_reg_342_pp0_iter1_reg;
        tmp_142_reg_393 <= {{r_V_fu_252_p2[138:72]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_x_msb_1_table_V_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_x_msb_2_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_2_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln571_fu_268_p2 = (icmp_ln1498_reg_352_pp0_iter2_reg & icmp_ln1496_reg_357_pp0_iter2_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((p_Result_18_fu_316_p3[0:0] == 1'b1) ? 39'd549755813887 : tmp_fu_324_p4);

assign exp_x_msb_1_table_V_address0 = zext_ln534_1_fu_205_p1;

assign f_x_msb_2_table_V_address0 = zext_ln534_fu_200_p1;

assign icmp_ln1494_fu_152_p2 = (($signed(p_Result_14_fu_132_p3) > $signed(6'd22)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_164_p2 = ((p_Result_15_fu_144_p3 > 32'd776142585) ? 1'b1 : 1'b0);

assign icmp_ln1498_fu_158_p2 = ((p_Result_14_fu_132_p3 == 6'd22) ? 1'b1 : 1'b0);

assign or_ln571_fu_303_p2 = (icmp_ln1494_reg_347_pp0_iter2_reg | and_ln571_fu_268_p2);

assign p_Result_14_fu_132_p3 = {{p_Result_s_fu_114_p3}, {tmp_139_fu_122_p4}};

assign p_Result_15_fu_144_p3 = {{trunc_ln340_fu_140_p1}, {24'd0}};

assign p_Result_16_fu_180_p3 = {{p_Result_s_fu_114_p3}, {tmp_140_fu_170_p4}};

assign p_Result_17_fu_210_p4 = {{f_x_msb_2_table_V_q0[63:58]}};

assign p_Result_18_fu_316_p3 = p_Val2_6_fu_308_p3[32'd63];

assign p_Result_s_fu_114_p3 = x[32'd12];

assign p_Val2_6_fu_308_p3 = ((or_ln571_fu_303_p2[0:0] == 1'b1) ? select_ln414_fu_277_p3 : y_V_fu_293_p4);

assign r_V_fu_252_p0 = r_V_fu_252_p00;

assign r_V_fu_252_p00 = rhs_fu_237_p4;

assign r_V_fu_252_p1 = r_V_fu_252_p10;

assign r_V_fu_252_p10 = exp_x_msb_1_V_reg_387;

assign ret_V_fu_227_p2 = (zext_ln703_1_fu_224_p1 + zext_ln703_fu_220_p1);

assign rhs_fu_237_p4 = {{{ret_V_reg_377}, {trunc_ln640_1_reg_382}}, {4'd0}};

assign select_ln414_fu_277_p3 = ((xor_ln849_fu_272_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign tmp_139_fu_122_p4 = {{x[12:8]}};

assign tmp_140_fu_170_p4 = {{x[12:6]}};

assign tmp_144_fu_192_p3 = {{trunc_ln640_fu_188_p1}, {2'd0}};

assign tmp_fu_324_p4 = {{p_Val2_6_fu_308_p3[62:24]}};

assign trunc_ln340_fu_140_p1 = x[7:0];

assign trunc_ln640_1_fu_233_p1 = f_x_msb_2_table_V_q0[57:0];

assign trunc_ln640_fu_188_p1 = x[5:0];

assign xor_ln849_fu_272_p2 = (p_Result_s_reg_342_pp0_iter2_reg ^ 1'd1);

assign y_V_fu_293_p4 = {{y_l_V_fu_288_p2[67:4]}};

assign y_l_V_fu_288_p2 = (exp_x_msb_1_V_reg_387_pp0_iter2_reg + y_lo_s_V_fu_285_p1);

assign y_lo_s_V_fu_285_p1 = tmp_142_reg_393;

assign zext_ln534_1_fu_205_p1 = p_Result_16_fu_180_p3;

assign zext_ln534_fu_200_p1 = tmp_144_fu_192_p3;

assign zext_ln703_1_fu_224_p1 = tmp_144_reg_362;

assign zext_ln703_fu_220_p1 = p_Result_17_fu_210_p4;

always @ (posedge ap_clk) begin
    tmp_144_reg_362[1:0] <= 2'b00;
end

endmodule //infer_exp_40_32_s

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_set3DFloatArray_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_we0,
        array_r_d0,
        array1_address0,
        array1_ce0,
        array1_we0,
        array1_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state21 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] array_r_address0;
output   array_r_ce0;
output   array_r_we0;
output  [31:0] array_r_d0;
output  [10:0] array1_address0;
output   array1_ce0;
output   array1_we0;
output  [31:0] array1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_r_ce0;
reg array_r_we0;
reg array1_ce0;
reg array1_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten17_reg_92;
reg   [3:0] i_reg_103;
reg   [9:0] indvar_flatten_reg_114;
reg   [5:0] iii_reg_125;
reg   [3:0] ii_reg_136;
wire   [11:0] add_ln8_fu_147_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln8_fu_153_p2;
reg   [0:0] icmp_ln8_reg_328;
reg   [0:0] icmp_ln8_reg_328_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_328_pp0_iter2_reg;
wire   [0:0] icmp_ln10_fu_159_p2;
reg   [0:0] icmp_ln10_reg_332;
reg   [0:0] icmp_ln10_reg_332_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_332_pp0_iter2_reg;
wire   [3:0] select_ln10_7_fu_171_p3;
reg   [3:0] select_ln10_7_reg_340;
wire   [9:0] select_ln10_12_fu_189_p3;
wire   [0:0] and_ln10_fu_208_p2;
reg   [0:0] and_ln10_reg_355;
wire   [5:0] add_ln12_fu_231_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] select_ln10_11_fu_284_p3;
reg    ap_enable_reg_pp0_iter3;
(* use_dsp48 = "no" *) wire   [11:0] add_ln14_fu_291_p2;
wire   [0:0] icmp_ln14_fu_302_p2;
reg   [0:0] icmp_ln14_reg_381;
reg   [0:0] icmp_ln14_reg_381_pp0_iter4_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter5_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter6_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter7_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter8_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter9_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter10_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter11_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter12_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter13_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter14_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter15_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter16_reg;
reg   [0:0] icmp_ln14_reg_381_pp0_iter17_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter3_state5;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg   [3:0] ap_phi_mux_i_phi_fu_107_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln14_fu_308_p1;
wire   [3:0] add_ln8_2_fu_165_p2;
wire   [9:0] add_ln10_2_fu_183_p2;
wire   [0:0] icmp_ln12_fu_202_p2;
wire   [0:0] xor_ln10_fu_197_p2;
wire   [0:0] or_ln10_fu_214_p2;
wire   [5:0] select_ln10_9_fu_219_p3;
wire   [8:0] tmp_fu_237_p3;
wire   [3:0] select_ln10_fu_245_p3;
wire   [3:0] add_ln10_fu_259_p2;
wire   [8:0] p_mid1_fu_265_p3;
wire   [8:0] select_ln10_8_fu_252_p3;
wire   [8:0] select_ln10_10_fu_273_p3;
wire   [11:0] grp_fu_314_p3;
wire   [11:0] select_ln10_10_cast_fu_280_p1;
wire   [11:0] grp_fu_296_p2;
wire   [3:0] grp_fu_314_p0;
wire   [9:0] grp_fu_314_p1;
wire   [5:0] grp_fu_314_p2;
wire    ap_CS_fsm_state21;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_314_p00;
wire   [11:0] grp_fu_314_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
end

infer_urem_12ns_12ns_12_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
urem_12ns_12ns_12_16_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln14_fu_291_p2),
    .din1(12'd1936),
    .ce(1'b1),
    .dout(grp_fu_296_p2)
);

infer_mac_muladd_4ns_10ns_6ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
mac_muladd_4ns_10ns_6ns_12_4_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .din2(grp_fu_314_p2),
    .ce(1'b1),
    .dout(grp_fu_314_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter3_state5)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_328 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_103 <= select_ln10_7_reg_340;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_103 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_328_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ii_reg_136 <= select_ln10_11_fu_284_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_136 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_328_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iii_reg_125 <= add_ln12_fu_231_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_125 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_153_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten17_reg_92 <= add_ln8_fu_147_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_92 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_153_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_114 <= select_ln10_12_fu_189_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_114 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_328_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln10_reg_355 <= and_ln10_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_153_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_332 <= icmp_ln10_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_332_pp0_iter1_reg <= icmp_ln10_reg_332;
        icmp_ln8_reg_328 <= icmp_ln8_fu_153_p2;
        icmp_ln8_reg_328_pp0_iter1_reg <= icmp_ln8_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln10_reg_332_pp0_iter2_reg <= icmp_ln10_reg_332_pp0_iter1_reg;
        icmp_ln14_reg_381_pp0_iter10_reg <= icmp_ln14_reg_381_pp0_iter9_reg;
        icmp_ln14_reg_381_pp0_iter11_reg <= icmp_ln14_reg_381_pp0_iter10_reg;
        icmp_ln14_reg_381_pp0_iter12_reg <= icmp_ln14_reg_381_pp0_iter11_reg;
        icmp_ln14_reg_381_pp0_iter13_reg <= icmp_ln14_reg_381_pp0_iter12_reg;
        icmp_ln14_reg_381_pp0_iter14_reg <= icmp_ln14_reg_381_pp0_iter13_reg;
        icmp_ln14_reg_381_pp0_iter15_reg <= icmp_ln14_reg_381_pp0_iter14_reg;
        icmp_ln14_reg_381_pp0_iter16_reg <= icmp_ln14_reg_381_pp0_iter15_reg;
        icmp_ln14_reg_381_pp0_iter17_reg <= icmp_ln14_reg_381_pp0_iter16_reg;
        icmp_ln14_reg_381_pp0_iter4_reg <= icmp_ln14_reg_381;
        icmp_ln14_reg_381_pp0_iter5_reg <= icmp_ln14_reg_381_pp0_iter4_reg;
        icmp_ln14_reg_381_pp0_iter6_reg <= icmp_ln14_reg_381_pp0_iter5_reg;
        icmp_ln14_reg_381_pp0_iter7_reg <= icmp_ln14_reg_381_pp0_iter6_reg;
        icmp_ln14_reg_381_pp0_iter8_reg <= icmp_ln14_reg_381_pp0_iter7_reg;
        icmp_ln14_reg_381_pp0_iter9_reg <= icmp_ln14_reg_381_pp0_iter8_reg;
        icmp_ln8_reg_328_pp0_iter2_reg <= icmp_ln8_reg_328_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_328_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln14_reg_381 <= icmp_ln14_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_153_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln10_7_reg_340 <= select_ln10_7_fu_171_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_condition_pp0_exit_iter3_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_153_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_328 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_107_p4 = select_ln10_7_reg_340;
    end else begin
        ap_phi_mux_i_phi_fu_107_p4 = i_reg_103;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        array1_ce0 = 1'b1;
    end else begin
        array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (icmp_ln14_reg_381_pp0_iter17_reg == 1'd0))) begin
        array1_we0 = 1'b1;
    end else begin
        array1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (icmp_ln14_reg_381_pp0_iter17_reg == 1'd1))) begin
        array_r_we0 = 1'b1;
    end else begin
        array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter18 == 1'b1) & (ap_enable_reg_pp0_iter17 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter18 == 1'b1) & (ap_enable_reg_pp0_iter17 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_2_fu_183_p2 = (indvar_flatten_reg_114 + 10'd1);

assign add_ln10_fu_259_p2 = (select_ln10_fu_245_p3 + 4'd1);

assign add_ln12_fu_231_p2 = (select_ln10_9_fu_219_p3 + 6'd1);

assign add_ln14_fu_291_p2 = (grp_fu_314_p3 + select_ln10_10_cast_fu_280_p1);

assign add_ln8_2_fu_165_p2 = (ap_phi_mux_i_phi_fu_107_p4 + 4'd1);

assign add_ln8_fu_147_p2 = (indvar_flatten17_reg_92 + 12'd1);

assign and_ln10_fu_208_p2 = (xor_ln10_fu_197_p2 & icmp_ln12_fu_202_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign array1_address0 = zext_ln14_fu_308_p1;

assign array1_d0 = 32'd0;

assign array_r_address0 = zext_ln14_fu_308_p1;

assign array_r_d0 = 32'd0;

assign grp_fu_314_p0 = grp_fu_314_p00;

assign grp_fu_314_p00 = select_ln10_7_fu_171_p3;

assign grp_fu_314_p1 = 12'd352;

assign grp_fu_314_p2 = grp_fu_314_p20;

assign grp_fu_314_p20 = select_ln10_9_fu_219_p3;

assign icmp_ln10_fu_159_p2 = ((indvar_flatten_reg_114 == 10'd352) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_202_p2 = ((iii_reg_125 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_302_p2 = ((add_ln14_fu_291_p2 < 12'd1936) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_153_p2 = ((indvar_flatten17_reg_92 == 12'd3872) ? 1'b1 : 1'b0);

assign or_ln10_fu_214_p2 = (icmp_ln10_reg_332_pp0_iter1_reg | and_ln10_fu_208_p2);

assign p_mid1_fu_265_p3 = {{add_ln10_fu_259_p2}, {5'd0}};

assign select_ln10_10_cast_fu_280_p1 = select_ln10_10_fu_273_p3;

assign select_ln10_10_fu_273_p3 = ((and_ln10_reg_355[0:0] == 1'b1) ? p_mid1_fu_265_p3 : select_ln10_8_fu_252_p3);

assign select_ln10_11_fu_284_p3 = ((and_ln10_reg_355[0:0] == 1'b1) ? add_ln10_fu_259_p2 : select_ln10_fu_245_p3);

assign select_ln10_12_fu_189_p3 = ((icmp_ln10_fu_159_p2[0:0] == 1'b1) ? 10'd1 : add_ln10_2_fu_183_p2);

assign select_ln10_7_fu_171_p3 = ((icmp_ln10_fu_159_p2[0:0] == 1'b1) ? add_ln8_2_fu_165_p2 : ap_phi_mux_i_phi_fu_107_p4);

assign select_ln10_8_fu_252_p3 = ((icmp_ln10_reg_332_pp0_iter2_reg[0:0] == 1'b1) ? 9'd0 : tmp_fu_237_p3);

assign select_ln10_9_fu_219_p3 = ((or_ln10_fu_214_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_125);

assign select_ln10_fu_245_p3 = ((icmp_ln10_reg_332_pp0_iter2_reg[0:0] == 1'b1) ? 4'd0 : ii_reg_136);

assign tmp_fu_237_p3 = {{ii_reg_136}, {5'd0}};

assign xor_ln10_fu_197_p2 = (icmp_ln10_reg_332_pp0_iter1_reg ^ 1'd1);

assign zext_ln14_fu_308_p1 = grp_fu_296_p2;

endmodule //infer_set3DFloatArray_1

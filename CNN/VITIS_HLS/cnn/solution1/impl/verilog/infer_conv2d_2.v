// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_852_p_din0,
        grp_fu_852_p_din1,
        grp_fu_852_p_opcode,
        grp_fu_852_p_dout0,
        grp_fu_852_p_ce,
        grp_fu_856_p_din0,
        grp_fu_856_p_din1,
        grp_fu_856_p_dout0,
        grp_fu_856_p_ce,
        grp_fu_1954_p_din0,
        grp_fu_1954_p_din1,
        grp_fu_1954_p_opcode,
        grp_fu_1954_p_dout0,
        grp_fu_1954_p_ce
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_pp0_stage1 = 9'd16;
parameter    ap_ST_fsm_pp0_stage2 = 9'd32;
parameter    ap_ST_fsm_pp0_stage3 = 9'd64;
parameter    ap_ST_fsm_state14 = 9'd128;
parameter    ap_ST_fsm_state15 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [16:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_852_p_din0;
output  [31:0] grp_fu_852_p_din1;
output  [1:0] grp_fu_852_p_opcode;
input  [31:0] grp_fu_852_p_dout0;
output   grp_fu_852_p_ce;
output  [31:0] grp_fu_856_p_din0;
output  [31:0] grp_fu_856_p_din1;
input  [31:0] grp_fu_856_p_dout0;
output   grp_fu_856_p_ce;
output  [31:0] grp_fu_1954_p_din0;
output  [31:0] grp_fu_1954_p_din1;
output  [4:0] grp_fu_1954_p_opcode;
input  [0:0] grp_fu_1954_p_dout0;
output   grp_fu_1954_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] layer_2_weights_address0;
reg    layer_2_weights_ce0;
wire   [31:0] layer_2_weights_q0;
wire   [4:0] layer_2_bias_address0;
reg    layer_2_bias_ce0;
wire   [31:0] layer_2_bias_q0;
reg   [3:0] indvar_flatten42_reg_216;
reg   [0:0] iv_reg_228;
reg   [3:0] indvar_flatten_reg_239;
reg  signed [2:0] v_reg_250;
reg   [2:0] vi_reg_261;
reg   [31:0] add4115_reg_272;
wire   [16:0] add_ln66_fu_299_p2;
reg   [16:0] add_ln66_reg_944;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_341_p2;
reg   [0:0] icmp_ln69_reg_952;
wire   [0:0] icmp_ln66_fu_335_p2;
wire   [5:0] select_ln66_2_fu_403_p3;
reg   [5:0] select_ln66_2_reg_957;
wire   [5:0] iii_mid2_fu_423_p3;
reg   [5:0] iii_mid2_reg_965;
wire   [5:0] ii_cast6_mid2_fu_431_p3;
reg   [5:0] ii_cast6_mid2_reg_972;
wire   [11:0] empty_65_fu_467_p3;
reg   [11:0] empty_65_reg_978;
wire   [11:0] ii_cast6_mid2_cast_fu_480_p1;
reg   [11:0] ii_cast6_mid2_cast_reg_988;
wire    ap_CS_fsm_state3;
wire   [16:0] add52_mid2_fu_483_p3;
reg   [16:0] add52_mid2_reg_993;
wire   [8:0] zext_ln72_1_fu_490_p1;
reg   [8:0] zext_ln72_1_reg_998;
wire   [16:0] zext_ln72_2_fu_493_p1;
reg   [16:0] zext_ln72_2_reg_1003;
wire   [11:0] p_mid132_fu_521_p2;
reg   [11:0] p_mid132_reg_1013;
wire   [0:0] icmp_ln77_fu_590_p2;
reg   [0:0] icmp_ln77_reg_1018;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln77_reg_1018_pp0_iter1_reg;
reg   [0:0] icmp_ln77_reg_1018_pp0_iter2_reg;
wire   [0:0] icmp_ln80_fu_596_p2;
reg   [0:0] icmp_ln80_reg_1022;
wire   [0:0] select_ln77_1_fu_616_p3;
reg   [0:0] select_ln77_1_reg_1027;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln80_fu_685_p3;
reg   [2:0] select_ln80_reg_1032;
wire   [2:0] select_ln80_3_fu_777_p3;
reg   [2:0] select_ln80_3_reg_1037;
wire   [3:0] add_ln80_1_fu_844_p2;
reg   [3:0] add_ln80_1_reg_1052;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] add_ln77_fu_850_p2;
reg   [3:0] add_ln77_reg_1067;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [2:0] add_ln92_fu_856_p2;
reg   [2:0] add_ln92_reg_1072;
wire   [3:0] select_ln80_4_fu_861_p3;
reg   [3:0] select_ln80_4_reg_1077;
wire   [31:0] grp_fu_287_p2;
reg   [31:0] mul_reg_1082;
wire   [31:0] grp_fu_282_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [16:0] add_ln102_fu_867_p2;
reg   [16:0] add_ln102_reg_1092;
wire    ap_CS_fsm_state14;
wire   [5:0] add_ln72_fu_871_p2;
reg   [5:0] add_ln72_reg_1097;
wire   [11:0] select_ln69_fu_882_p3;
reg   [11:0] select_ln69_reg_1102;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [16:0] indvar_flatten79_reg_160;
wire    ap_CS_fsm_state15;
reg   [5:0] i_reg_171;
reg   [11:0] indvar_flatten50_reg_182;
reg   [5:0] ii_reg_194;
reg   [5:0] iii_reg_205;
reg   [3:0] ap_phi_mux_indvar_flatten42_phi_fu_220_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_iv_phi_fu_232_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_243_p4;
reg  signed [2:0] ap_phi_mux_v_phi_fu_254_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_265_p4;
reg   [31:0] ap_phi_mux_add4115_phi_fu_275_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln72_fu_475_p1;
wire   [63:0] zext_ln87_fu_805_p1;
wire   [63:0] zext_ln91_fu_839_p1;
wire   [63:0] zext_ln102_fu_940_p1;
wire   [31:0] grp_fu_282_p0;
wire   [31:0] grp_fu_282_p1;
wire   [31:0] grp_fu_287_p0;
wire   [31:0] grp_fu_287_p1;
wire   [31:0] grp_fu_293_p0;
wire   [31:0] grp_fu_293_p1;
wire   [5:0] empty_fu_309_p0;
wire   [6:0] empty_fu_309_p1;
wire   [6:0] ii_cast_fu_315_p1;
wire   [6:0] tmp_fu_319_p2;
wire  signed [11:0] tmp_cast_fu_325_p1;
wire   [11:0] empty_fu_309_p2;
wire   [5:0] add_ln66_1_fu_355_p2;
wire   [5:0] p_mid161_fu_365_p0;
wire   [6:0] p_mid161_fu_365_p1;
wire   [11:0] p_mid161_fu_365_p2;
wire   [0:0] icmp_ln72_fu_391_p2;
wire   [0:0] xor_ln66_fu_385_p2;
wire   [5:0] select_ln66_fu_347_p3;
wire   [0:0] and_ln66_fu_397_p2;
wire   [0:0] empty_64_fu_417_p2;
wire   [5:0] add_ln69_fu_411_p2;
wire   [6:0] ii_cast_mid1_fu_439_p1;
wire   [6:0] tmp_mid1_fu_443_p2;
wire  signed [11:0] tmp_cast_mid1_fu_449_p1;
wire   [11:0] select_ln66_1_fu_371_p3;
wire   [11:0] mul4811_mid171_fu_379_p2;
wire   [11:0] mul4811_fu_329_p2;
wire   [11:0] mul4811_mid1_fu_453_p2;
wire   [11:0] select_ln66_3_fu_459_p3;
wire   [5:0] p_mid116_fu_496_p2;
wire   [7:0] p_shl4_mid_fu_509_p3;
wire   [11:0] p_shl3_mid_fu_501_p3;
wire   [11:0] p_shl4_cast_mid130_fu_517_p1;
wire  signed [5:0] sext_ln80_fu_527_p1;
wire   [2:0] indvars_iv_next37_fu_536_p2;
wire   [5:0] empty_57_fu_531_p2;
wire   [7:0] p_shl4_fu_554_p3;
wire   [11:0] p_shl3_fu_546_p3;
wire   [11:0] p_shl4_cast_fu_562_p1;
wire   [1:0] empty_59_fu_572_p1;
wire   [3:0] p_shl_fu_576_p3;
wire   [3:0] indvars_iv_next37_cast_fu_542_p1;
wire   [0:0] xor_ln92_fu_610_p2;
wire   [0:0] select_ln77_2_fu_628_p3;
wire   [3:0] sub_ln91_fu_584_p2;
wire   [11:0] empty_58_fu_566_p2;
wire   [0:0] icmp_ln83_fu_661_p2;
wire   [0:0] xor_ln77_fu_655_p2;
wire   [2:0] select_ln77_fu_602_p3;
wire   [0:0] and_ln77_fu_667_p2;
wire   [0:0] or_ln80_fu_679_p2;
wire  signed [2:0] indvars_iv_next37_dup_fu_673_p2;
wire  signed [5:0] sext_ln80_1_fu_693_p1;
wire   [2:0] indvars_iv_next37_mid1_fu_702_p2;
wire   [5:0] p_mid1_fu_697_p2;
wire   [7:0] p_shl4_mid1_fu_720_p3;
wire   [11:0] p_shl3_mid1_fu_712_p3;
wire   [11:0] p_shl4_cast_mid1_fu_728_p1;
wire   [1:0] empty_61_fu_738_p1;
wire   [3:0] p_shl_mid1_fu_742_p3;
wire   [3:0] indvars_iv_next37_cast_mid1_fu_708_p1;
wire   [3:0] sub_ln91_1_fu_750_p2;
wire   [3:0] select_ln77_3_fu_640_p3;
wire   [11:0] p_mid13_fu_732_p2;
wire   [11:0] select_ln77_4_fu_648_p3;
wire   [11:0] select_ln80_2_fu_764_p3;
wire  signed [1:0] empty_62_fu_785_p1;
wire   [1:0] zext_ln77_fu_624_p1;
wire   [1:0] add_ln87_fu_789_p2;
wire  signed [11:0] sext_ln87_fu_795_p1;
wire   [11:0] add_ln80_fu_772_p2;
wire   [11:0] add_ln87_1_fu_799_p2;
wire  signed [3:0] sext_ln92_fu_810_p1;
wire   [3:0] select_ln80_1_fu_756_p3;
wire   [3:0] zext_ln77_1_fu_636_p1;
wire   [3:0] add_ln92_1_fu_814_p2;
wire   [3:0] add_ln92_2_fu_820_p2;
wire   [8:0] shl_ln_fu_826_p3;
wire   [8:0] add_ln91_fu_834_p2;
wire    ap_block_pp0_stage3;
wire   [11:0] add_ln69_1_fu_876_p2;
wire   [31:0] bitcast_ln49_fu_889_p1;
wire   [7:0] tmp_s_fu_893_p4;
wire   [22:0] trunc_ln49_fu_903_p1;
wire   [0:0] icmp_ln49_4_fu_913_p2;
wire   [0:0] icmp_ln49_fu_907_p2;
wire   [0:0] or_ln49_fu_919_p2;
wire   [0:0] grp_fu_293_p2;
wire   [0:0] and_ln49_fu_925_p2;
wire    grp_fu_282_ce;
wire    grp_fu_287_ce;
wire    grp_fu_293_ce;
wire   [4:0] grp_fu_293_opcode;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire   [11:0] empty_fu_309_p00;
wire   [11:0] p_mid161_fu_365_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_conv2d_2_layer_2_weights #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
layer_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_weights_address0),
    .ce0(layer_2_weights_ce0),
    .q0(layer_2_weights_q0)
);

infer_conv2d_2_layer_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_bias_address0),
    .ce0(layer_2_bias_ce0),
    .q0(layer_2_bias_q0)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U7(
    .din0(empty_fu_309_p0),
    .din1(empty_fu_309_p1),
    .dout(empty_fu_309_p2)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U8(
    .din0(p_mid161_fu_365_p0),
    .din1(p_mid161_fu_365_p1),
    .dout(p_mid161_fu_365_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln77_reg_1018_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add4115_reg_272 <= grp_fu_852_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        add4115_reg_272 <= layer_2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_171 <= select_ln66_2_reg_957;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_171 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ii_reg_194 <= ii_cast6_mid2_reg_972;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ii_reg_194 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        iii_reg_205 <= add_ln72_reg_1097;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        iii_reg_205 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_1018 == 1'd0))) begin
        indvar_flatten42_reg_216 <= add_ln77_reg_1067;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten42_reg_216 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten50_reg_182 <= select_ln69_reg_1102;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten50_reg_182 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten79_reg_160 <= add_ln66_reg_944;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten79_reg_160 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_1018 == 1'd0))) begin
        indvar_flatten_reg_239 <= select_ln80_4_reg_1077;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_239 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_1018 == 1'd0))) begin
        iv_reg_228 <= select_ln77_1_reg_1027;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_reg_228 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_1018 == 1'd0))) begin
        v_reg_250 <= select_ln80_3_reg_1037;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_250 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_1018 == 1'd0))) begin
        vi_reg_261 <= add_ln92_reg_1072;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vi_reg_261 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add52_mid2_reg_993[16 : 5] <= add52_mid2_fu_483_p3[16 : 5];
        ii_cast6_mid2_cast_reg_988[5 : 0] <= ii_cast6_mid2_cast_fu_480_p1[5 : 0];
        p_mid132_reg_1013[11 : 2] <= p_mid132_fu_521_p2[11 : 2];
        zext_ln72_1_reg_998[5 : 0] <= zext_ln72_1_fu_490_p1[5 : 0];
        zext_ln72_2_reg_1003[5 : 0] <= zext_ln72_2_fu_493_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln102_reg_1092 <= add_ln102_fu_867_p2;
        add_ln72_reg_1097 <= add_ln72_fu_871_p2;
        select_ln69_reg_1102 <= select_ln69_fu_882_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln66_reg_944 <= add_ln66_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln77_reg_1067 <= add_ln77_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_fu_590_p2 == 1'd0))) begin
        add_ln80_1_reg_1052 <= add_ln80_1_fu_844_p2;
        icmp_ln80_reg_1022 <= icmp_ln80_fu_596_p2;
        select_ln80_reg_1032 <= select_ln80_fu_685_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln77_reg_1018 == 1'd0))) begin
        add_ln92_reg_1072 <= add_ln92_fu_856_p2;
        select_ln80_4_reg_1077 <= select_ln80_4_fu_861_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_65_reg_978 <= empty_65_fu_467_p3;
        icmp_ln69_reg_952 <= icmp_ln69_fu_341_p2;
        ii_cast6_mid2_reg_972 <= ii_cast6_mid2_fu_431_p3;
        iii_mid2_reg_965 <= iii_mid2_fu_423_p3;
        select_ln66_2_reg_957 <= select_ln66_2_fu_403_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln77_reg_1018 <= icmp_ln77_fu_590_p2;
        icmp_ln77_reg_1018_pp0_iter1_reg <= icmp_ln77_reg_1018;
        icmp_ln77_reg_1018_pp0_iter2_reg <= icmp_ln77_reg_1018_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_reg_1018 == 1'd0))) begin
        mul_reg_1082 <= grp_fu_856_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln77_fu_590_p2 == 1'd0))) begin
        select_ln77_1_reg_1027 <= select_ln77_1_fu_616_p3;
        select_ln80_3_reg_1037 <= select_ln80_3_fu_777_p3;
    end
end

always @ (*) begin
    if ((icmp_ln77_reg_1018 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln66_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln77_reg_1018_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_add4115_phi_fu_275_p4 = grp_fu_852_p_dout0;
    end else begin
        ap_phi_mux_add4115_phi_fu_275_p4 = add4115_reg_272;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_1018 == 1'd0))) begin
        ap_phi_mux_indvar_flatten42_phi_fu_220_p4 = add_ln77_reg_1067;
    end else begin
        ap_phi_mux_indvar_flatten42_phi_fu_220_p4 = indvar_flatten42_reg_216;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_1018 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_243_p4 = select_ln80_4_reg_1077;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_243_p4 = indvar_flatten_reg_239;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_1018 == 1'd0))) begin
        ap_phi_mux_iv_phi_fu_232_p4 = select_ln77_1_reg_1027;
    end else begin
        ap_phi_mux_iv_phi_fu_232_p4 = iv_reg_228;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_1018 == 1'd0))) begin
        ap_phi_mux_v_phi_fu_254_p4 = select_ln80_3_reg_1037;
    end else begin
        ap_phi_mux_v_phi_fu_254_p4 = v_reg_250;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln77_reg_1018 == 1'd0))) begin
        ap_phi_mux_vi_phi_fu_265_p4 = add_ln92_reg_1072;
    end else begin
        ap_phi_mux_vi_phi_fu_265_p4 = vi_reg_261;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_2_bias_ce0 = 1'b1;
    end else begin
        layer_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer_2_weights_ce0 = 1'b1;
    end else begin
        layer_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln77_reg_1018 == 1'd1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln77_reg_1018 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add52_mid2_fu_483_p3 = {{empty_65_reg_978}, {5'd0}};

assign add_ln102_fu_867_p2 = (zext_ln72_2_reg_1003 + add52_mid2_reg_993);

assign add_ln66_1_fu_355_p2 = (i_reg_171 + 6'd1);

assign add_ln66_fu_299_p2 = (indvar_flatten79_reg_160 + 17'd1);

assign add_ln69_1_fu_876_p2 = (indvar_flatten50_reg_182 + 12'd1);

assign add_ln69_fu_411_p2 = (select_ln66_fu_347_p3 + 6'd1);

assign add_ln72_fu_871_p2 = (iii_mid2_reg_965 + 6'd1);

assign add_ln77_fu_850_p2 = (indvar_flatten42_reg_216 + 4'd1);

assign add_ln80_1_fu_844_p2 = (ap_phi_mux_indvar_flatten_phi_fu_243_p4 + 4'd1);

assign add_ln80_fu_772_p2 = (select_ln80_2_fu_764_p3 + ii_cast6_mid2_cast_reg_988);

assign add_ln87_1_fu_799_p2 = ($signed(sext_ln87_fu_795_p1) + $signed(add_ln80_fu_772_p2));

assign add_ln87_fu_789_p2 = ($signed(empty_62_fu_785_p1) + $signed(zext_ln77_fu_624_p1));

assign add_ln91_fu_834_p2 = (shl_ln_fu_826_p3 + zext_ln72_1_reg_998);

assign add_ln92_1_fu_814_p2 = ($signed(sext_ln92_fu_810_p1) + $signed(select_ln80_1_fu_756_p3));

assign add_ln92_2_fu_820_p2 = (zext_ln77_1_fu_636_p1 + add_ln92_1_fu_814_p2);

assign add_ln92_fu_856_p2 = (select_ln80_reg_1032 + 3'd1);

assign and_ln49_fu_925_p2 = (or_ln49_fu_919_p2 & grp_fu_1954_p_dout0);

assign and_ln66_fu_397_p2 = (xor_ln66_fu_385_p2 & icmp_ln72_fu_391_p2);

assign and_ln77_fu_667_p2 = (xor_ln77_fu_655_p2 & icmp_ln83_fu_661_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_889_p1 = add4115_reg_272;

assign empty_57_fu_531_p2 = ($signed(sext_ln80_fu_527_p1) + $signed(select_ln66_2_reg_957));

assign empty_58_fu_566_p2 = (p_shl3_fu_546_p3 - p_shl4_cast_fu_562_p1);

assign empty_59_fu_572_p1 = indvars_iv_next37_fu_536_p2[1:0];

assign empty_61_fu_738_p1 = indvars_iv_next37_mid1_fu_702_p2[1:0];

assign empty_62_fu_785_p1 = select_ln80_fu_685_p3[1:0];

assign empty_64_fu_417_p2 = (icmp_ln69_fu_341_p2 | and_ln66_fu_397_p2);

assign empty_65_fu_467_p3 = ((and_ln66_fu_397_p2[0:0] == 1'b1) ? mul4811_mid1_fu_453_p2 : select_ln66_3_fu_459_p3);

assign empty_fu_309_p0 = empty_fu_309_p00;

assign empty_fu_309_p00 = i_reg_171;

assign empty_fu_309_p1 = 12'd58;

assign grp_fu_1954_p_ce = 1'b1;

assign grp_fu_1954_p_din0 = add4115_reg_272;

assign grp_fu_1954_p_din1 = 32'd0;

assign grp_fu_1954_p_opcode = 5'd4;

assign grp_fu_282_ce = 1'b1;

assign grp_fu_282_p0 = ap_phi_mux_add4115_phi_fu_275_p4;

assign grp_fu_282_p1 = mul_reg_1082;

assign grp_fu_282_p2 = grp_fu_852_p_dout0;

assign grp_fu_287_ce = 1'b1;

assign grp_fu_287_p0 = input_r_q0;

assign grp_fu_287_p1 = layer_2_weights_q0;

assign grp_fu_287_p2 = grp_fu_856_p_dout0;

assign grp_fu_293_ce = 1'b1;

assign grp_fu_293_opcode = 5'd4;

assign grp_fu_293_p0 = add4115_reg_272;

assign grp_fu_293_p1 = 32'd0;

assign grp_fu_293_p2 = grp_fu_1954_p_dout0;

assign grp_fu_852_p_ce = 1'b1;

assign grp_fu_852_p_din0 = ap_phi_mux_add4115_phi_fu_275_p4;

assign grp_fu_852_p_din1 = mul_reg_1082;

assign grp_fu_852_p_opcode = 2'd0;

assign grp_fu_856_p_ce = 1'b1;

assign grp_fu_856_p_din0 = input_r_q0;

assign grp_fu_856_p_din1 = layer_2_weights_q0;

assign icmp_ln49_4_fu_913_p2 = ((trunc_ln49_fu_903_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_907_p2 = ((tmp_s_fu_893_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_335_p2 = ((indvar_flatten79_reg_160 == 17'd107648) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_341_p2 = ((indvar_flatten50_reg_182 == 12'd1856) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_391_p2 = ((iii_reg_205 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_590_p2 = ((ap_phi_mux_indvar_flatten42_phi_fu_220_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_596_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_243_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_661_p2 = ((ap_phi_mux_vi_phi_fu_265_p4 == 3'd2) ? 1'b1 : 1'b0);

assign ii_cast6_mid2_cast_fu_480_p1 = ii_cast6_mid2_reg_972;

assign ii_cast6_mid2_fu_431_p3 = ((and_ln66_fu_397_p2[0:0] == 1'b1) ? add_ln69_fu_411_p2 : select_ln66_fu_347_p3);

assign ii_cast_fu_315_p1 = ii_reg_194;

assign ii_cast_mid1_fu_439_p1 = add_ln69_fu_411_p2;

assign iii_mid2_fu_423_p3 = ((empty_64_fu_417_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_205);

assign indvars_iv_next37_cast_fu_542_p1 = indvars_iv_next37_fu_536_p2;

assign indvars_iv_next37_cast_mid1_fu_708_p1 = indvars_iv_next37_mid1_fu_702_p2;

assign indvars_iv_next37_dup_fu_673_p2 = (select_ln77_fu_602_p3 + 3'd1);

assign indvars_iv_next37_fu_536_p2 = ($signed(ap_phi_mux_v_phi_fu_254_p4) + $signed(3'd1));

assign indvars_iv_next37_mid1_fu_702_p2 = (select_ln77_fu_602_p3 + 3'd2);

assign input_r_address0 = zext_ln87_fu_805_p1;

assign layer_2_bias_address0 = zext_ln72_fu_475_p1;

assign layer_2_weights_address0 = zext_ln91_fu_839_p1;

assign mul4811_fu_329_p2 = ($signed(tmp_cast_fu_325_p1) + $signed(empty_fu_309_p2));

assign mul4811_mid171_fu_379_p2 = ($signed(p_mid161_fu_365_p2) + $signed(12'd4038));

assign mul4811_mid1_fu_453_p2 = ($signed(tmp_cast_mid1_fu_449_p1) + $signed(select_ln66_1_fu_371_p3));

assign or_ln49_fu_919_p2 = (icmp_ln49_fu_907_p2 | icmp_ln49_4_fu_913_p2);

assign or_ln80_fu_679_p2 = (icmp_ln80_fu_596_p2 | and_ln77_fu_667_p2);

assign output_r_address0 = zext_ln102_fu_940_p1;

assign output_r_d0 = ((and_ln49_fu_925_p2[0:0] == 1'b1) ? 32'd0 : add4115_reg_272);

assign p_mid116_fu_496_p2 = ($signed(select_ln66_2_reg_957) + $signed(6'd63));

assign p_mid132_fu_521_p2 = (p_shl3_mid_fu_501_p3 - p_shl4_cast_mid130_fu_517_p1);

assign p_mid13_fu_732_p2 = (p_shl3_mid1_fu_712_p3 - p_shl4_cast_mid1_fu_728_p1);

assign p_mid161_fu_365_p0 = p_mid161_fu_365_p00;

assign p_mid161_fu_365_p00 = add_ln66_1_fu_355_p2;

assign p_mid161_fu_365_p1 = 12'd58;

assign p_mid1_fu_697_p2 = ($signed(sext_ln80_1_fu_693_p1) + $signed(select_ln66_2_reg_957));

assign p_shl3_fu_546_p3 = {{empty_57_fu_531_p2}, {6'd0}};

assign p_shl3_mid1_fu_712_p3 = {{p_mid1_fu_697_p2}, {6'd0}};

assign p_shl3_mid_fu_501_p3 = {{p_mid116_fu_496_p2}, {6'd0}};

assign p_shl4_cast_fu_562_p1 = p_shl4_fu_554_p3;

assign p_shl4_cast_mid130_fu_517_p1 = p_shl4_mid_fu_509_p3;

assign p_shl4_cast_mid1_fu_728_p1 = p_shl4_mid1_fu_720_p3;

assign p_shl4_fu_554_p3 = {{empty_57_fu_531_p2}, {2'd0}};

assign p_shl4_mid1_fu_720_p3 = {{p_mid1_fu_697_p2}, {2'd0}};

assign p_shl4_mid_fu_509_p3 = {{p_mid116_fu_496_p2}, {2'd0}};

assign p_shl_fu_576_p3 = {{empty_59_fu_572_p1}, {2'd0}};

assign p_shl_mid1_fu_742_p3 = {{empty_61_fu_738_p1}, {2'd0}};

assign select_ln66_1_fu_371_p3 = ((icmp_ln69_fu_341_p2[0:0] == 1'b1) ? p_mid161_fu_365_p2 : empty_fu_309_p2);

assign select_ln66_2_fu_403_p3 = ((icmp_ln69_fu_341_p2[0:0] == 1'b1) ? add_ln66_1_fu_355_p2 : i_reg_171);

assign select_ln66_3_fu_459_p3 = ((icmp_ln69_fu_341_p2[0:0] == 1'b1) ? mul4811_mid171_fu_379_p2 : mul4811_fu_329_p2);

assign select_ln66_fu_347_p3 = ((icmp_ln69_fu_341_p2[0:0] == 1'b1) ? 6'd1 : ii_reg_194);

assign select_ln69_fu_882_p3 = ((icmp_ln69_reg_952[0:0] == 1'b1) ? 12'd1 : add_ln69_1_fu_876_p2);

assign select_ln77_1_fu_616_p3 = ((icmp_ln80_fu_596_p2[0:0] == 1'b1) ? xor_ln92_fu_610_p2 : ap_phi_mux_iv_phi_fu_232_p4);

assign select_ln77_2_fu_628_p3 = ((icmp_ln80_fu_596_p2[0:0] == 1'b1) ? ap_phi_mux_iv_phi_fu_232_p4 : xor_ln92_fu_610_p2);

assign select_ln77_3_fu_640_p3 = ((icmp_ln80_fu_596_p2[0:0] == 1'b1) ? 4'd0 : sub_ln91_fu_584_p2);

assign select_ln77_4_fu_648_p3 = ((icmp_ln80_fu_596_p2[0:0] == 1'b1) ? p_mid132_reg_1013 : empty_58_fu_566_p2);

assign select_ln77_fu_602_p3 = ((icmp_ln80_fu_596_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_254_p4);

assign select_ln80_1_fu_756_p3 = ((and_ln77_fu_667_p2[0:0] == 1'b1) ? sub_ln91_1_fu_750_p2 : select_ln77_3_fu_640_p3);

assign select_ln80_2_fu_764_p3 = ((and_ln77_fu_667_p2[0:0] == 1'b1) ? p_mid13_fu_732_p2 : select_ln77_4_fu_648_p3);

assign select_ln80_3_fu_777_p3 = ((and_ln77_fu_667_p2[0:0] == 1'b1) ? indvars_iv_next37_dup_fu_673_p2 : select_ln77_fu_602_p3);

assign select_ln80_4_fu_861_p3 = ((icmp_ln80_reg_1022[0:0] == 1'b1) ? 4'd1 : add_ln80_1_reg_1052);

assign select_ln80_fu_685_p3 = ((or_ln80_fu_679_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_265_p4);

assign sext_ln80_1_fu_693_p1 = indvars_iv_next37_dup_fu_673_p2;

assign sext_ln80_fu_527_p1 = ap_phi_mux_v_phi_fu_254_p4;

assign sext_ln87_fu_795_p1 = $signed(add_ln87_fu_789_p2);

assign sext_ln92_fu_810_p1 = empty_62_fu_785_p1;

assign shl_ln_fu_826_p3 = {{add_ln92_2_fu_820_p2}, {5'd0}};

assign sub_ln91_1_fu_750_p2 = (p_shl_mid1_fu_742_p3 - indvars_iv_next37_cast_mid1_fu_708_p1);

assign sub_ln91_fu_584_p2 = (p_shl_fu_576_p3 - indvars_iv_next37_cast_fu_542_p1);

assign tmp_cast_fu_325_p1 = $signed(tmp_fu_319_p2);

assign tmp_cast_mid1_fu_449_p1 = $signed(tmp_mid1_fu_443_p2);

assign tmp_fu_319_p2 = ($signed(ii_cast_fu_315_p1) + $signed(7'd69));

assign tmp_mid1_fu_443_p2 = ($signed(ii_cast_mid1_fu_439_p1) + $signed(7'd69));

assign tmp_s_fu_893_p4 = {{bitcast_ln49_fu_889_p1[30:23]}};

assign trunc_ln49_fu_903_p1 = bitcast_ln49_fu_889_p1[22:0];

assign xor_ln66_fu_385_p2 = (icmp_ln69_fu_341_p2 ^ 1'd1);

assign xor_ln77_fu_655_p2 = (icmp_ln80_fu_596_p2 ^ 1'd1);

assign xor_ln92_fu_610_p2 = (ap_phi_mux_iv_phi_fu_232_p4 ^ 1'd1);

assign zext_ln102_fu_940_p1 = add_ln102_reg_1092;

assign zext_ln72_1_fu_490_p1 = iii_mid2_reg_965;

assign zext_ln72_2_fu_493_p1 = iii_mid2_reg_965;

assign zext_ln72_fu_475_p1 = iii_mid2_fu_423_p3;

assign zext_ln77_1_fu_636_p1 = select_ln77_2_fu_628_p3;

assign zext_ln77_fu_624_p1 = select_ln77_1_fu_616_p3;

assign zext_ln87_fu_805_p1 = add_ln87_1_fu_799_p2;

assign zext_ln91_fu_839_p1 = add_ln91_fu_834_p2;

always @ (posedge ap_clk) begin
    ii_cast6_mid2_cast_reg_988[11:6] <= 6'b000000;
    add52_mid2_reg_993[4:0] <= 5'b00000;
    zext_ln72_1_reg_998[8:6] <= 3'b000;
    zext_ln72_2_reg_1003[16:6] <= 11'b00000000000;
    p_mid132_reg_1013[1:0] <= 2'b00;
end

endmodule //infer_conv2d_2

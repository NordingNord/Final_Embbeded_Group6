// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_763_p_din0,
        grp_fu_763_p_din1,
        grp_fu_763_p_opcode,
        grp_fu_763_p_dout0,
        grp_fu_763_p_ce,
        grp_fu_770_p_din0,
        grp_fu_770_p_din1,
        grp_fu_770_p_dout0,
        grp_fu_770_p_ce,
        grp_fu_788_p_din0,
        grp_fu_788_p_din1,
        grp_fu_788_p_opcode,
        grp_fu_788_p_dout0,
        grp_fu_788_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_pp0_stage0 = 16'd8;
parameter    ap_ST_fsm_pp0_stage1 = 16'd16;
parameter    ap_ST_fsm_pp0_stage2 = 16'd32;
parameter    ap_ST_fsm_pp0_stage3 = 16'd64;
parameter    ap_ST_fsm_state14 = 16'd128;
parameter    ap_ST_fsm_state15 = 16'd256;
parameter    ap_ST_fsm_state16 = 16'd512;
parameter    ap_ST_fsm_state17 = 16'd1024;
parameter    ap_ST_fsm_state18 = 16'd2048;
parameter    ap_ST_fsm_state19 = 16'd4096;
parameter    ap_ST_fsm_state20 = 16'd8192;
parameter    ap_ST_fsm_state21 = 16'd16384;
parameter    ap_ST_fsm_state22 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_763_p_din0;
output  [31:0] grp_fu_763_p_din1;
output  [1:0] grp_fu_763_p_opcode;
input  [31:0] grp_fu_763_p_dout0;
output   grp_fu_763_p_ce;
output  [31:0] grp_fu_770_p_din0;
output  [31:0] grp_fu_770_p_din1;
input  [31:0] grp_fu_770_p_dout0;
output   grp_fu_770_p_ce;
output  [31:0] grp_fu_788_p_din0;
output  [31:0] grp_fu_788_p_din1;
output  [4:0] grp_fu_788_p_opcode;
input  [0:0] grp_fu_788_p_dout0;
output   grp_fu_788_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] layer_2_weights_address0;
reg    layer_2_weights_ce0;
wire   [31:0] layer_2_weights_q0;
wire   [4:0] layer_2_bias_address0;
reg    layer_2_bias_ce0;
wire   [31:0] layer_2_bias_q0;
reg   [3:0] indvar_flatten42_reg_220;
reg   [0:0] iv_reg_231;
reg   [3:0] indvar_flatten_reg_242;
reg  signed [2:0] v_reg_253;
reg   [2:0] vi_reg_264;
reg   [31:0] add4320_reg_275;
wire   [13:0] add_ln71_fu_301_p2;
reg   [13:0] add_ln71_reg_947;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln74_fu_343_p2;
reg   [0:0] icmp_ln74_reg_955;
wire   [0:0] icmp_ln71_fu_337_p2;
wire   [4:0] select_ln71_2_fu_405_p3;
reg   [4:0] select_ln71_2_reg_960;
wire   [5:0] iii_mid2_fu_425_p3;
reg   [5:0] iii_mid2_reg_968;
wire   [4:0] ii_cast8_mid2_fu_433_p3;
reg   [4:0] ii_cast8_mid2_reg_975;
reg   [13:0] output_addr_reg_981;
wire   [9:0] ii_cast8_mid2_cast_fu_500_p1;
reg   [9:0] ii_cast8_mid2_cast_reg_986;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln77_fu_503_p1;
reg   [63:0] zext_ln77_reg_991;
wire   [8:0] zext_ln77_1_fu_506_p1;
reg   [8:0] zext_ln77_1_reg_996;
wire   [9:0] p_mid128_fu_534_p2;
reg   [9:0] p_mid128_reg_1006;
wire   [3:0] add_ln83_fu_540_p2;
reg   [3:0] add_ln83_reg_1011;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln83_fu_609_p2;
reg   [0:0] icmp_ln83_reg_1016;
reg   [0:0] icmp_ln83_reg_1016_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_1016_pp0_iter2_reg;
wire   [0:0] icmp_ln86_fu_615_p2;
reg   [0:0] icmp_ln86_reg_1020;
wire   [0:0] select_ln83_1_fu_635_p3;
reg   [0:0] select_ln83_1_reg_1025;
wire   [2:0] select_ln86_fu_704_p3;
reg   [2:0] select_ln86_reg_1030;
wire   [2:0] select_ln86_3_fu_796_p3;
reg   [2:0] select_ln86_3_reg_1035;
wire   [3:0] add_ln86_1_fu_863_p2;
reg   [3:0] add_ln86_1_reg_1050;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] add_ln95_fu_869_p2;
reg   [2:0] add_ln95_reg_1065;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [3:0] select_ln86_4_fu_874_p3;
reg   [3:0] select_ln86_4_reg_1070;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] mul_reg_1075;
wire   [31:0] grp_fu_285_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state14;
wire   [5:0] add_ln77_fu_880_p2;
reg   [5:0] add_ln77_reg_1090;
wire   [10:0] select_ln74_fu_891_p3;
reg   [10:0] select_ln74_reg_1095;
reg   [31:0] layer_2_bias_load_reg_1100;
wire    ap_CS_fsm_state15;
reg   [31:0] add_reg_1105;
wire    ap_CS_fsm_state20;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [13:0] indvar_flatten82_reg_164;
wire    ap_CS_fsm_state22;
reg   [4:0] i_reg_175;
reg   [10:0] indvar_flatten56_reg_186;
reg   [4:0] ii_reg_198;
reg   [5:0] iii_reg_209;
reg   [3:0] ap_phi_mux_indvar_flatten42_phi_fu_224_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_iv_phi_fu_235_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_246_p4;
reg  signed [2:0] ap_phi_mux_v_phi_fu_257_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_268_p4;
reg   [31:0] ap_phi_mux_add4320_phi_fu_278_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] sum19_cast_fu_495_p1;
wire   [63:0] zext_ln98_fu_848_p1;
wire   [63:0] zext_ln98_1_fu_858_p1;
reg   [31:0] grp_fu_285_p0;
reg   [31:0] grp_fu_285_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_290_p0;
wire   [31:0] grp_fu_290_p1;
wire   [31:0] grp_fu_296_p0;
wire   [31:0] grp_fu_296_p1;
wire    ap_CS_fsm_state21;
wire   [4:0] mul_ln74_fu_311_p0;
wire   [5:0] mul_ln74_fu_311_p1;
wire   [5:0] ii_cast_fu_317_p1;
wire   [5:0] tmp_fu_321_p2;
wire  signed [8:0] tmp_cast_fu_327_p1;
wire   [8:0] mul_ln74_fu_311_p2;
wire   [4:0] add_ln71_1_fu_357_p2;
wire   [4:0] mul_ln74_1_fu_367_p0;
wire   [5:0] mul_ln74_1_fu_367_p1;
wire   [8:0] mul_ln74_1_fu_367_p2;
wire   [0:0] icmp_ln77_fu_393_p2;
wire   [0:0] xor_ln71_fu_387_p2;
wire   [4:0] select_ln71_fu_349_p3;
wire   [0:0] and_ln71_fu_399_p2;
wire   [0:0] empty_65_fu_419_p2;
wire   [4:0] add_ln74_fu_413_p2;
wire   [5:0] ii_cast_mid1_fu_441_p1;
wire   [5:0] tmp_mid1_fu_445_p2;
wire  signed [8:0] tmp_cast_mid1_fu_451_p1;
wire   [8:0] select_ln71_1_fu_373_p3;
wire   [8:0] p_mid174_fu_381_p2;
wire   [8:0] empty_fu_331_p2;
wire   [8:0] p_mid152_fu_455_p2;
wire   [8:0] select_ln71_3_fu_461_p3;
wire   [8:0] empty_66_fu_469_p3;
wire   [13:0] zext_ln77_2_fu_485_p1;
wire   [13:0] p_mid_fu_477_p3;
wire   [13:0] sum19_fu_489_p2;
wire   [4:0] p_mid116_fu_509_p2;
wire   [7:0] p_shl2_mid_fu_522_p3;
wire   [9:0] p_shl1_mid_fu_514_p3;
wire   [9:0] p_shl2_cast_mid126_fu_530_p1;
wire  signed [4:0] sext_ln86_fu_546_p1;
wire   [4:0] empty_58_fu_550_p2;
wire   [7:0] p_shl2_fu_563_p3;
wire   [9:0] p_shl1_fu_555_p3;
wire   [9:0] p_shl2_cast_fu_571_p1;
wire   [2:0] indvars_iv_next34_fu_581_p2;
wire   [1:0] empty_60_fu_591_p1;
wire   [3:0] p_shl_fu_595_p3;
wire   [3:0] indvars_iv_next34_cast_fu_587_p1;
wire   [0:0] xor_ln95_fu_629_p2;
wire   [0:0] select_ln83_2_fu_647_p3;
wire   [3:0] sub_ln94_fu_603_p2;
wire   [9:0] empty_59_fu_575_p2;
wire   [0:0] icmp_ln89_fu_680_p2;
wire   [0:0] xor_ln83_fu_674_p2;
wire   [2:0] select_ln83_fu_621_p3;
wire   [0:0] and_ln83_fu_686_p2;
wire   [0:0] or_ln86_fu_698_p2;
wire  signed [2:0] indvars_iv_next34_dup_fu_692_p2;
wire  signed [4:0] sext_ln86_1_fu_712_p1;
wire   [4:0] p_mid1_fu_716_p2;
wire   [7:0] p_shl2_mid1_fu_729_p3;
wire   [9:0] p_shl1_mid1_fu_721_p3;
wire   [9:0] p_shl2_cast_mid1_fu_737_p1;
wire   [2:0] indvars_iv_next34_mid1_fu_747_p2;
wire   [1:0] empty_62_fu_757_p1;
wire   [3:0] p_shl_mid1_fu_761_p3;
wire   [3:0] indvars_iv_next34_cast_mid1_fu_753_p1;
wire   [3:0] sub_ln94_1_fu_769_p2;
wire   [3:0] select_ln83_3_fu_659_p3;
wire   [9:0] p_mid13_fu_741_p2;
wire   [9:0] select_ln83_4_fu_667_p3;
wire   [9:0] select_ln86_2_fu_783_p3;
wire  signed [1:0] empty_63_fu_804_p1;
wire  signed [3:0] sext_ln95_fu_808_p1;
wire   [3:0] select_ln86_1_fu_775_p3;
wire   [3:0] zext_ln83_1_fu_655_p1;
wire   [3:0] add_ln95_1_fu_812_p2;
wire   [3:0] add_ln95_2_fu_818_p2;
wire   [1:0] zext_ln83_fu_643_p1;
wire   [1:0] add_ln98_2_fu_832_p2;
wire  signed [9:0] sext_ln98_fu_838_p1;
wire   [9:0] add_ln86_fu_791_p2;
wire   [9:0] add_ln98_fu_842_p2;
wire   [8:0] shl_ln_fu_824_p3;
wire   [8:0] add_ln98_1_fu_853_p2;
wire    ap_block_pp0_stage3;
wire   [10:0] add_ln74_1_fu_885_p2;
wire   [31:0] bitcast_ln49_fu_898_p1;
wire   [7:0] tmp_s_fu_901_p4;
wire   [22:0] trunc_ln49_fu_911_p1;
wire   [0:0] icmp_ln49_7_fu_921_p2;
wire   [0:0] icmp_ln49_fu_915_p2;
wire   [0:0] or_ln49_fu_927_p2;
wire   [0:0] grp_fu_296_p2;
wire   [0:0] and_ln49_fu_933_p2;
wire    grp_fu_285_ce;
wire    grp_fu_290_ce;
wire    grp_fu_296_ce;
wire   [4:0] grp_fu_296_opcode;
reg   [15:0] ap_NS_fsm;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire   [8:0] mul_ln74_1_fu_367_p00;
wire   [8:0] mul_ln74_fu_311_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_conv2d_2_layer_2_weights #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
layer_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_weights_address0),
    .ce0(layer_2_weights_ce0),
    .q0(layer_2_weights_q0)
);

infer_conv2d_2_layer_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_bias_address0),
    .ce0(layer_2_bias_ce0),
    .q0(layer_2_bias_q0)
);

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U7(
    .din0(mul_ln74_fu_311_p0),
    .din1(mul_ln74_fu_311_p1),
    .dout(mul_ln74_fu_311_p2)
);

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U8(
    .din0(mul_ln74_1_fu_367_p0),
    .din1(mul_ln74_1_fu_367_p1),
    .dout(mul_ln74_1_fu_367_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln83_reg_1016_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add4320_reg_275 <= grp_fu_763_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        add4320_reg_275 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_175 <= select_ln71_2_reg_960;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_175 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ii_reg_198 <= ii_cast8_mid2_reg_975;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_198 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        iii_reg_209 <= add_ln77_reg_1090;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_209 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten42_reg_220 <= add_ln83_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten42_reg_220 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten56_reg_186 <= select_ln74_reg_1095;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten56_reg_186 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten82_reg_164 <= add_ln71_reg_947;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten82_reg_164 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_242 <= select_ln86_4_reg_1070;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_242 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iv_reg_231 <= select_ln83_1_reg_1025;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_reg_231 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v_reg_253 <= select_ln86_3_reg_1035;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_253 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vi_reg_264 <= add_ln95_reg_1065;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vi_reg_264 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln71_reg_947 <= add_ln71_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln77_reg_1090 <= add_ln77_fu_880_p2;
        select_ln74_reg_1095 <= select_ln74_fu_891_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln83_reg_1011 <= add_ln83_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_609_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln86_1_reg_1050 <= add_ln86_1_fu_863_p2;
        icmp_ln86_reg_1020 <= icmp_ln86_fu_615_p2;
        select_ln86_reg_1030 <= select_ln86_fu_704_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln95_reg_1065 <= add_ln95_fu_869_p2;
        select_ln86_4_reg_1070 <= select_ln86_4_fu_874_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_reg_1105 <= grp_fu_763_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln74_reg_955 <= icmp_ln74_fu_343_p2;
        ii_cast8_mid2_reg_975 <= ii_cast8_mid2_fu_433_p3;
        iii_mid2_reg_968 <= iii_mid2_fu_425_p3;
        output_addr_reg_981 <= sum19_cast_fu_495_p1;
        select_ln71_2_reg_960 <= select_ln71_2_fu_405_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln83_reg_1016 <= icmp_ln83_fu_609_p2;
        icmp_ln83_reg_1016_pp0_iter1_reg <= icmp_ln83_reg_1016;
        icmp_ln83_reg_1016_pp0_iter2_reg <= icmp_ln83_reg_1016_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ii_cast8_mid2_cast_reg_986[4 : 0] <= ii_cast8_mid2_cast_fu_500_p1[4 : 0];
        p_mid128_reg_1006[9 : 3] <= p_mid128_fu_534_p2[9 : 3];
        zext_ln77_1_reg_996[5 : 0] <= zext_ln77_1_fu_506_p1[5 : 0];
        zext_ln77_reg_991[5 : 0] <= zext_ln77_fu_503_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        layer_2_bias_load_reg_1100 <= layer_2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_1075 <= grp_fu_770_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_609_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln83_1_reg_1025 <= select_ln83_1_fu_635_p3;
        select_ln86_3_reg_1035 <= select_ln86_3_fu_796_p3;
    end
end

always @ (*) begin
    if ((icmp_ln83_fu_609_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln71_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln83_reg_1016_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_add4320_phi_fu_278_p4 = grp_fu_763_p_dout0;
    end else begin
        ap_phi_mux_add4320_phi_fu_278_p4 = add4320_reg_275;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten42_phi_fu_224_p4 = add_ln83_reg_1011;
    end else begin
        ap_phi_mux_indvar_flatten42_phi_fu_224_p4 = indvar_flatten42_reg_220;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_246_p4 = select_ln86_4_reg_1070;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_246_p4 = indvar_flatten_reg_242;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_iv_phi_fu_235_p4 = select_ln83_1_reg_1025;
    end else begin
        ap_phi_mux_iv_phi_fu_235_p4 = iv_reg_231;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_v_phi_fu_257_p4 = select_ln86_3_reg_1035;
    end else begin
        ap_phi_mux_v_phi_fu_257_p4 = v_reg_253;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_1016 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_vi_phi_fu_268_p4 = add_ln95_reg_1065;
    end else begin
        ap_phi_mux_vi_phi_fu_268_p4 = vi_reg_264;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_285_p0 = add4320_reg_275;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_285_p0 = ap_phi_mux_add4320_phi_fu_278_p4;
    end else begin
        grp_fu_285_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_285_p1 = layer_2_bias_load_reg_1100;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_285_p1 = mul_reg_1075;
    end else begin
        grp_fu_285_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        layer_2_bias_ce0 = 1'b1;
    end else begin
        layer_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        layer_2_weights_ce0 = 1'b1;
    end else begin
        layer_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_address0 = output_addr_reg_981;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = sum19_cast_fu_495_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state22))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln71_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_fu_609_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_fu_609_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_1_fu_357_p2 = (i_reg_175 + 5'd1);

assign add_ln71_fu_301_p2 = (indvar_flatten82_reg_164 + 14'd1);

assign add_ln74_1_fu_885_p2 = (indvar_flatten56_reg_186 + 11'd1);

assign add_ln74_fu_413_p2 = (select_ln71_fu_349_p3 + 5'd1);

assign add_ln77_fu_880_p2 = (iii_mid2_reg_968 + 6'd1);

assign add_ln83_fu_540_p2 = (ap_phi_mux_indvar_flatten42_phi_fu_224_p4 + 4'd1);

assign add_ln86_1_fu_863_p2 = (ap_phi_mux_indvar_flatten_phi_fu_246_p4 + 4'd1);

assign add_ln86_fu_791_p2 = (select_ln86_2_fu_783_p3 + ii_cast8_mid2_cast_reg_986);

assign add_ln95_1_fu_812_p2 = ($signed(sext_ln95_fu_808_p1) + $signed(select_ln86_1_fu_775_p3));

assign add_ln95_2_fu_818_p2 = (zext_ln83_1_fu_655_p1 + add_ln95_1_fu_812_p2);

assign add_ln95_fu_869_p2 = (select_ln86_reg_1030 + 3'd1);

assign add_ln98_1_fu_853_p2 = (shl_ln_fu_824_p3 + zext_ln77_1_reg_996);

assign add_ln98_2_fu_832_p2 = ($signed(empty_63_fu_804_p1) + $signed(zext_ln83_fu_643_p1));

assign add_ln98_fu_842_p2 = ($signed(sext_ln98_fu_838_p1) + $signed(add_ln86_fu_791_p2));

assign and_ln49_fu_933_p2 = (or_ln49_fu_927_p2 & grp_fu_788_p_dout0);

assign and_ln71_fu_399_p2 = (xor_ln71_fu_387_p2 & icmp_ln77_fu_393_p2);

assign and_ln83_fu_686_p2 = (xor_ln83_fu_674_p2 & icmp_ln89_fu_680_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_898_p1 = add_reg_1105;

assign empty_58_fu_550_p2 = ($signed(sext_ln86_fu_546_p1) + $signed(select_ln71_2_reg_960));

assign empty_59_fu_575_p2 = (p_shl1_fu_555_p3 - p_shl2_cast_fu_571_p1);

assign empty_60_fu_591_p1 = indvars_iv_next34_fu_581_p2[1:0];

assign empty_62_fu_757_p1 = indvars_iv_next34_mid1_fu_747_p2[1:0];

assign empty_63_fu_804_p1 = select_ln86_fu_704_p3[1:0];

assign empty_65_fu_419_p2 = (icmp_ln74_fu_343_p2 | and_ln71_fu_399_p2);

assign empty_66_fu_469_p3 = ((and_ln71_fu_399_p2[0:0] == 1'b1) ? p_mid152_fu_455_p2 : select_ln71_3_fu_461_p3);

assign empty_fu_331_p2 = ($signed(tmp_cast_fu_327_p1) + $signed(mul_ln74_fu_311_p2));

assign grp_fu_285_ce = 1'b1;

assign grp_fu_285_p2 = grp_fu_763_p_dout0;

assign grp_fu_290_ce = 1'b1;

assign grp_fu_290_p0 = input_r_q0;

assign grp_fu_290_p1 = layer_2_weights_q0;

assign grp_fu_290_p2 = grp_fu_770_p_dout0;

assign grp_fu_296_ce = 1'b1;

assign grp_fu_296_opcode = 5'd2;

assign grp_fu_296_p0 = add_reg_1105;

assign grp_fu_296_p1 = 32'd0;

assign grp_fu_296_p2 = grp_fu_788_p_dout0;

assign grp_fu_763_p_ce = 1'b1;

assign grp_fu_763_p_din0 = grp_fu_285_p0;

assign grp_fu_763_p_din1 = grp_fu_285_p1;

assign grp_fu_763_p_opcode = 2'd0;

assign grp_fu_770_p_ce = 1'b1;

assign grp_fu_770_p_din0 = input_r_q0;

assign grp_fu_770_p_din1 = layer_2_weights_q0;

assign grp_fu_788_p_ce = 1'b1;

assign grp_fu_788_p_din0 = add_reg_1105;

assign grp_fu_788_p_din1 = 32'd0;

assign grp_fu_788_p_opcode = 5'd2;

assign icmp_ln49_7_fu_921_p2 = ((trunc_ln49_fu_911_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_915_p2 = ((tmp_s_fu_901_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_337_p2 = ((indvar_flatten82_reg_164 == 14'd15488) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_343_p2 = ((indvar_flatten56_reg_186 == 11'd704) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_393_p2 = ((iii_reg_209 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_609_p2 = ((ap_phi_mux_indvar_flatten42_phi_fu_224_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_615_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_246_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_680_p2 = ((ap_phi_mux_vi_phi_fu_268_p4 == 3'd2) ? 1'b1 : 1'b0);

assign ii_cast8_mid2_cast_fu_500_p1 = ii_cast8_mid2_reg_975;

assign ii_cast8_mid2_fu_433_p3 = ((and_ln71_fu_399_p2[0:0] == 1'b1) ? add_ln74_fu_413_p2 : select_ln71_fu_349_p3);

assign ii_cast_fu_317_p1 = ii_reg_198;

assign ii_cast_mid1_fu_441_p1 = add_ln74_fu_413_p2;

assign iii_mid2_fu_425_p3 = ((empty_65_fu_419_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_209);

assign indvars_iv_next34_cast_fu_587_p1 = indvars_iv_next34_fu_581_p2;

assign indvars_iv_next34_cast_mid1_fu_753_p1 = indvars_iv_next34_mid1_fu_747_p2;

assign indvars_iv_next34_dup_fu_692_p2 = (select_ln83_fu_621_p3 + 3'd1);

assign indvars_iv_next34_fu_581_p2 = ($signed(ap_phi_mux_v_phi_fu_257_p4) + $signed(3'd1));

assign indvars_iv_next34_mid1_fu_747_p2 = (select_ln83_fu_621_p3 + 3'd2);

assign input_r_address0 = zext_ln98_fu_848_p1;

assign layer_2_bias_address0 = zext_ln77_reg_991;

assign layer_2_weights_address0 = zext_ln98_1_fu_858_p1;

assign mul_ln74_1_fu_367_p0 = mul_ln74_1_fu_367_p00;

assign mul_ln74_1_fu_367_p00 = add_ln71_1_fu_357_p2;

assign mul_ln74_1_fu_367_p1 = 9'd22;

assign mul_ln74_fu_311_p0 = mul_ln74_fu_311_p00;

assign mul_ln74_fu_311_p00 = i_reg_175;

assign mul_ln74_fu_311_p1 = 9'd22;

assign or_ln49_fu_927_p2 = (icmp_ln49_fu_915_p2 | icmp_ln49_7_fu_921_p2);

assign or_ln86_fu_698_p2 = (icmp_ln86_fu_615_p2 | and_ln83_fu_686_p2);

assign output_r_d0 = ((and_ln49_fu_933_p2[0:0] == 1'b1) ? add_reg_1105 : 32'd0);

assign p_mid116_fu_509_p2 = ($signed(select_ln71_2_reg_960) + $signed(5'd31));

assign p_mid128_fu_534_p2 = (p_shl1_mid_fu_514_p3 - p_shl2_cast_mid126_fu_530_p1);

assign p_mid13_fu_741_p2 = (p_shl1_mid1_fu_721_p3 - p_shl2_cast_mid1_fu_737_p1);

assign p_mid152_fu_455_p2 = ($signed(tmp_cast_mid1_fu_451_p1) + $signed(select_ln71_1_fu_373_p3));

assign p_mid174_fu_381_p2 = ($signed(mul_ln74_1_fu_367_p2) + $signed(9'd490));

assign p_mid1_fu_716_p2 = ($signed(sext_ln86_1_fu_712_p1) + $signed(select_ln71_2_reg_960));

assign p_mid_fu_477_p3 = {{empty_66_fu_469_p3}, {5'd0}};

assign p_shl1_fu_555_p3 = {{empty_58_fu_550_p2}, {5'd0}};

assign p_shl1_mid1_fu_721_p3 = {{p_mid1_fu_716_p2}, {5'd0}};

assign p_shl1_mid_fu_514_p3 = {{p_mid116_fu_509_p2}, {5'd0}};

assign p_shl2_cast_fu_571_p1 = p_shl2_fu_563_p3;

assign p_shl2_cast_mid126_fu_530_p1 = p_shl2_mid_fu_522_p3;

assign p_shl2_cast_mid1_fu_737_p1 = p_shl2_mid1_fu_729_p3;

assign p_shl2_fu_563_p3 = {{empty_58_fu_550_p2}, {3'd0}};

assign p_shl2_mid1_fu_729_p3 = {{p_mid1_fu_716_p2}, {3'd0}};

assign p_shl2_mid_fu_522_p3 = {{p_mid116_fu_509_p2}, {3'd0}};

assign p_shl_fu_595_p3 = {{empty_60_fu_591_p1}, {2'd0}};

assign p_shl_mid1_fu_761_p3 = {{empty_62_fu_757_p1}, {2'd0}};

assign select_ln71_1_fu_373_p3 = ((icmp_ln74_fu_343_p2[0:0] == 1'b1) ? mul_ln74_1_fu_367_p2 : mul_ln74_fu_311_p2);

assign select_ln71_2_fu_405_p3 = ((icmp_ln74_fu_343_p2[0:0] == 1'b1) ? add_ln71_1_fu_357_p2 : i_reg_175);

assign select_ln71_3_fu_461_p3 = ((icmp_ln74_fu_343_p2[0:0] == 1'b1) ? p_mid174_fu_381_p2 : empty_fu_331_p2);

assign select_ln71_fu_349_p3 = ((icmp_ln74_fu_343_p2[0:0] == 1'b1) ? 5'd1 : ii_reg_198);

assign select_ln74_fu_891_p3 = ((icmp_ln74_reg_955[0:0] == 1'b1) ? 11'd1 : add_ln74_1_fu_885_p2);

assign select_ln83_1_fu_635_p3 = ((icmp_ln86_fu_615_p2[0:0] == 1'b1) ? xor_ln95_fu_629_p2 : ap_phi_mux_iv_phi_fu_235_p4);

assign select_ln83_2_fu_647_p3 = ((icmp_ln86_fu_615_p2[0:0] == 1'b1) ? ap_phi_mux_iv_phi_fu_235_p4 : xor_ln95_fu_629_p2);

assign select_ln83_3_fu_659_p3 = ((icmp_ln86_fu_615_p2[0:0] == 1'b1) ? 4'd0 : sub_ln94_fu_603_p2);

assign select_ln83_4_fu_667_p3 = ((icmp_ln86_fu_615_p2[0:0] == 1'b1) ? p_mid128_reg_1006 : empty_59_fu_575_p2);

assign select_ln83_fu_621_p3 = ((icmp_ln86_fu_615_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_257_p4);

assign select_ln86_1_fu_775_p3 = ((and_ln83_fu_686_p2[0:0] == 1'b1) ? sub_ln94_1_fu_769_p2 : select_ln83_3_fu_659_p3);

assign select_ln86_2_fu_783_p3 = ((and_ln83_fu_686_p2[0:0] == 1'b1) ? p_mid13_fu_741_p2 : select_ln83_4_fu_667_p3);

assign select_ln86_3_fu_796_p3 = ((and_ln83_fu_686_p2[0:0] == 1'b1) ? indvars_iv_next34_dup_fu_692_p2 : select_ln83_fu_621_p3);

assign select_ln86_4_fu_874_p3 = ((icmp_ln86_reg_1020[0:0] == 1'b1) ? 4'd1 : add_ln86_1_reg_1050);

assign select_ln86_fu_704_p3 = ((or_ln86_fu_698_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_268_p4);

assign sext_ln86_1_fu_712_p1 = indvars_iv_next34_dup_fu_692_p2;

assign sext_ln86_fu_546_p1 = ap_phi_mux_v_phi_fu_257_p4;

assign sext_ln95_fu_808_p1 = empty_63_fu_804_p1;

assign sext_ln98_fu_838_p1 = $signed(add_ln98_2_fu_832_p2);

assign shl_ln_fu_824_p3 = {{add_ln95_2_fu_818_p2}, {5'd0}};

assign sub_ln94_1_fu_769_p2 = (p_shl_mid1_fu_761_p3 - indvars_iv_next34_cast_mid1_fu_753_p1);

assign sub_ln94_fu_603_p2 = (p_shl_fu_595_p3 - indvars_iv_next34_cast_fu_587_p1);

assign sum19_cast_fu_495_p1 = sum19_fu_489_p2;

assign sum19_fu_489_p2 = (zext_ln77_2_fu_485_p1 + p_mid_fu_477_p3);

assign tmp_cast_fu_327_p1 = $signed(tmp_fu_321_p2);

assign tmp_cast_mid1_fu_451_p1 = $signed(tmp_mid1_fu_445_p2);

assign tmp_fu_321_p2 = ($signed(ii_cast_fu_317_p1) + $signed(6'd41));

assign tmp_mid1_fu_445_p2 = ($signed(ii_cast_mid1_fu_441_p1) + $signed(6'd41));

assign tmp_s_fu_901_p4 = {{bitcast_ln49_fu_898_p1[30:23]}};

assign trunc_ln49_fu_911_p1 = bitcast_ln49_fu_898_p1[22:0];

assign xor_ln71_fu_387_p2 = (icmp_ln74_fu_343_p2 ^ 1'd1);

assign xor_ln83_fu_674_p2 = (icmp_ln86_fu_615_p2 ^ 1'd1);

assign xor_ln95_fu_629_p2 = (ap_phi_mux_iv_phi_fu_235_p4 ^ 1'd1);

assign zext_ln77_1_fu_506_p1 = iii_mid2_reg_968;

assign zext_ln77_2_fu_485_p1 = iii_mid2_fu_425_p3;

assign zext_ln77_fu_503_p1 = iii_mid2_reg_968;

assign zext_ln83_1_fu_655_p1 = select_ln83_2_fu_647_p3;

assign zext_ln83_fu_643_p1 = select_ln83_1_fu_635_p3;

assign zext_ln98_1_fu_858_p1 = add_ln98_1_fu_853_p2;

assign zext_ln98_fu_848_p1 = add_ln98_fu_842_p2;

always @ (posedge ap_clk) begin
    ii_cast8_mid2_cast_reg_986[9:5] <= 5'b00000;
    zext_ln77_reg_991[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln77_1_reg_996[8:6] <= 3'b000;
    p_mid128_reg_1006[2:0] <= 3'b000;
end

endmodule //infer_conv2d_2

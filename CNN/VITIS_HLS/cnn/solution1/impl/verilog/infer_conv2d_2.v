// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0,
        output_8_address0,
        output_8_ce0,
        output_8_we0,
        output_8_d0,
        output_9_address0,
        output_9_ce0,
        output_9_we0,
        output_9_d0,
        output_10_address0,
        output_10_ce0,
        output_10_we0,
        output_10_d0,
        output_11_address0,
        output_11_ce0,
        output_11_we0,
        output_11_d0,
        output_12_address0,
        output_12_ce0,
        output_12_we0,
        output_12_d0,
        output_13_address0,
        output_13_ce0,
        output_13_we0,
        output_13_d0,
        output_14_address0,
        output_14_ce0,
        output_14_we0,
        output_14_d0,
        output_15_address0,
        output_15_ce0,
        output_15_we0,
        output_15_d0,
        output_16_address0,
        output_16_ce0,
        output_16_we0,
        output_16_d0,
        output_17_address0,
        output_17_ce0,
        output_17_we0,
        output_17_d0,
        output_18_address0,
        output_18_ce0,
        output_18_we0,
        output_18_d0,
        output_19_address0,
        output_19_ce0,
        output_19_we0,
        output_19_d0,
        output_20_address0,
        output_20_ce0,
        output_20_we0,
        output_20_d0,
        output_21_address0,
        output_21_ce0,
        output_21_we0,
        output_21_d0,
        output_22_address0,
        output_22_ce0,
        output_22_we0,
        output_22_d0,
        output_23_address0,
        output_23_ce0,
        output_23_we0,
        output_23_d0,
        output_24_address0,
        output_24_ce0,
        output_24_we0,
        output_24_d0,
        output_25_address0,
        output_25_ce0,
        output_25_we0,
        output_25_d0,
        output_26_address0,
        output_26_ce0,
        output_26_we0,
        output_26_d0,
        output_27_address0,
        output_27_ce0,
        output_27_we0,
        output_27_d0,
        output_28_address0,
        output_28_ce0,
        output_28_we0,
        output_28_d0,
        output_29_address0,
        output_29_ce0,
        output_29_we0,
        output_29_d0,
        output_30_address0,
        output_30_ce0,
        output_30_we0,
        output_30_d0,
        output_31_address0,
        output_31_ce0,
        output_31_we0,
        output_31_d0,
        output_32_address0,
        output_32_ce0,
        output_32_we0,
        output_32_d0,
        output_33_address0,
        output_33_ce0,
        output_33_we0,
        output_33_d0,
        output_34_address0,
        output_34_ce0,
        output_34_we0,
        output_34_d0,
        output_35_address0,
        output_35_ce0,
        output_35_we0,
        output_35_d0,
        output_36_address0,
        output_36_ce0,
        output_36_we0,
        output_36_d0,
        output_37_address0,
        output_37_ce0,
        output_37_we0,
        output_37_d0,
        output_38_address0,
        output_38_ce0,
        output_38_we0,
        output_38_d0,
        output_39_address0,
        output_39_ce0,
        output_39_we0,
        output_39_d0,
        output_40_address0,
        output_40_ce0,
        output_40_we0,
        output_40_d0,
        output_41_address0,
        output_41_ce0,
        output_41_we0,
        output_41_d0,
        output_42_address0,
        output_42_ce0,
        output_42_we0,
        output_42_d0,
        output_43_address0,
        output_43_ce0,
        output_43_we0,
        output_43_d0,
        output_44_address0,
        output_44_ce0,
        output_44_we0,
        output_44_d0,
        output_45_address0,
        output_45_ce0,
        output_45_we0,
        output_45_d0,
        output_46_address0,
        output_46_ce0,
        output_46_we0,
        output_46_d0,
        output_47_address0,
        output_47_ce0,
        output_47_we0,
        output_47_d0,
        output_48_address0,
        output_48_ce0,
        output_48_we0,
        output_48_d0,
        output_49_address0,
        output_49_ce0,
        output_49_we0,
        output_49_d0,
        output_50_address0,
        output_50_ce0,
        output_50_we0,
        output_50_d0,
        output_51_address0,
        output_51_ce0,
        output_51_we0,
        output_51_d0,
        output_52_address0,
        output_52_ce0,
        output_52_we0,
        output_52_d0,
        output_53_address0,
        output_53_ce0,
        output_53_we0,
        output_53_d0,
        output_54_address0,
        output_54_ce0,
        output_54_we0,
        output_54_d0,
        output_55_address0,
        output_55_ce0,
        output_55_we0,
        output_55_d0,
        output_56_address0,
        output_56_ce0,
        output_56_we0,
        output_56_d0,
        output_57_address0,
        output_57_ce0,
        output_57_we0,
        output_57_d0,
        output_58_address0,
        output_58_ce0,
        output_58_we0,
        output_58_d0,
        output_59_address0,
        output_59_ce0,
        output_59_we0,
        output_59_d0,
        output_60_address0,
        output_60_ce0,
        output_60_we0,
        output_60_d0,
        output_61_address0,
        output_61_ce0,
        output_61_we0,
        output_61_d0,
        output_62_address0,
        output_62_ce0,
        output_62_we0,
        output_62_d0,
        output_63_address0,
        output_63_ce0,
        output_63_we0,
        output_63_d0,
        grp_fu_3337_p_din0,
        grp_fu_3337_p_din1,
        grp_fu_3337_p_opcode,
        grp_fu_3337_p_dout0,
        grp_fu_3337_p_ce,
        grp_fu_3341_p_din0,
        grp_fu_3341_p_din1,
        grp_fu_3341_p_dout0,
        grp_fu_3341_p_ce,
        grp_fu_4439_p_din0,
        grp_fu_4439_p_din1,
        grp_fu_4439_p_opcode,
        grp_fu_4439_p_dout0,
        grp_fu_4439_p_ce
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_pp0_stage0 = 28'd8;
parameter    ap_ST_fsm_pp0_stage1 = 28'd16;
parameter    ap_ST_fsm_pp0_stage2 = 28'd32;
parameter    ap_ST_fsm_pp0_stage3 = 28'd64;
parameter    ap_ST_fsm_state14 = 28'd128;
parameter    ap_ST_fsm_state15 = 28'd256;
parameter    ap_ST_fsm_state16 = 28'd512;
parameter    ap_ST_fsm_state17 = 28'd1024;
parameter    ap_ST_fsm_state18 = 28'd2048;
parameter    ap_ST_fsm_state19 = 28'd4096;
parameter    ap_ST_fsm_state20 = 28'd8192;
parameter    ap_ST_fsm_state21 = 28'd16384;
parameter    ap_ST_fsm_state22 = 28'd32768;
parameter    ap_ST_fsm_state23 = 28'd65536;
parameter    ap_ST_fsm_state24 = 28'd131072;
parameter    ap_ST_fsm_state25 = 28'd262144;
parameter    ap_ST_fsm_state26 = 28'd524288;
parameter    ap_ST_fsm_state27 = 28'd1048576;
parameter    ap_ST_fsm_state28 = 28'd2097152;
parameter    ap_ST_fsm_state29 = 28'd4194304;
parameter    ap_ST_fsm_state30 = 28'd8388608;
parameter    ap_ST_fsm_state31 = 28'd16777216;
parameter    ap_ST_fsm_state32 = 28'd33554432;
parameter    ap_ST_fsm_state33 = 28'd67108864;
parameter    ap_ST_fsm_state34 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;
output  [10:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [31:0] output_1_d0;
output  [10:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [31:0] output_2_d0;
output  [10:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [31:0] output_3_d0;
output  [10:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [31:0] output_4_d0;
output  [10:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [31:0] output_5_d0;
output  [10:0] output_6_address0;
output   output_6_ce0;
output   output_6_we0;
output  [31:0] output_6_d0;
output  [10:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [31:0] output_7_d0;
output  [10:0] output_8_address0;
output   output_8_ce0;
output   output_8_we0;
output  [31:0] output_8_d0;
output  [10:0] output_9_address0;
output   output_9_ce0;
output   output_9_we0;
output  [31:0] output_9_d0;
output  [10:0] output_10_address0;
output   output_10_ce0;
output   output_10_we0;
output  [31:0] output_10_d0;
output  [10:0] output_11_address0;
output   output_11_ce0;
output   output_11_we0;
output  [31:0] output_11_d0;
output  [10:0] output_12_address0;
output   output_12_ce0;
output   output_12_we0;
output  [31:0] output_12_d0;
output  [10:0] output_13_address0;
output   output_13_ce0;
output   output_13_we0;
output  [31:0] output_13_d0;
output  [10:0] output_14_address0;
output   output_14_ce0;
output   output_14_we0;
output  [31:0] output_14_d0;
output  [10:0] output_15_address0;
output   output_15_ce0;
output   output_15_we0;
output  [31:0] output_15_d0;
output  [10:0] output_16_address0;
output   output_16_ce0;
output   output_16_we0;
output  [31:0] output_16_d0;
output  [10:0] output_17_address0;
output   output_17_ce0;
output   output_17_we0;
output  [31:0] output_17_d0;
output  [10:0] output_18_address0;
output   output_18_ce0;
output   output_18_we0;
output  [31:0] output_18_d0;
output  [10:0] output_19_address0;
output   output_19_ce0;
output   output_19_we0;
output  [31:0] output_19_d0;
output  [10:0] output_20_address0;
output   output_20_ce0;
output   output_20_we0;
output  [31:0] output_20_d0;
output  [10:0] output_21_address0;
output   output_21_ce0;
output   output_21_we0;
output  [31:0] output_21_d0;
output  [10:0] output_22_address0;
output   output_22_ce0;
output   output_22_we0;
output  [31:0] output_22_d0;
output  [10:0] output_23_address0;
output   output_23_ce0;
output   output_23_we0;
output  [31:0] output_23_d0;
output  [10:0] output_24_address0;
output   output_24_ce0;
output   output_24_we0;
output  [31:0] output_24_d0;
output  [10:0] output_25_address0;
output   output_25_ce0;
output   output_25_we0;
output  [31:0] output_25_d0;
output  [10:0] output_26_address0;
output   output_26_ce0;
output   output_26_we0;
output  [31:0] output_26_d0;
output  [10:0] output_27_address0;
output   output_27_ce0;
output   output_27_we0;
output  [31:0] output_27_d0;
output  [10:0] output_28_address0;
output   output_28_ce0;
output   output_28_we0;
output  [31:0] output_28_d0;
output  [10:0] output_29_address0;
output   output_29_ce0;
output   output_29_we0;
output  [31:0] output_29_d0;
output  [10:0] output_30_address0;
output   output_30_ce0;
output   output_30_we0;
output  [31:0] output_30_d0;
output  [10:0] output_31_address0;
output   output_31_ce0;
output   output_31_we0;
output  [31:0] output_31_d0;
output  [10:0] output_32_address0;
output   output_32_ce0;
output   output_32_we0;
output  [31:0] output_32_d0;
output  [10:0] output_33_address0;
output   output_33_ce0;
output   output_33_we0;
output  [31:0] output_33_d0;
output  [10:0] output_34_address0;
output   output_34_ce0;
output   output_34_we0;
output  [31:0] output_34_d0;
output  [10:0] output_35_address0;
output   output_35_ce0;
output   output_35_we0;
output  [31:0] output_35_d0;
output  [10:0] output_36_address0;
output   output_36_ce0;
output   output_36_we0;
output  [31:0] output_36_d0;
output  [10:0] output_37_address0;
output   output_37_ce0;
output   output_37_we0;
output  [31:0] output_37_d0;
output  [10:0] output_38_address0;
output   output_38_ce0;
output   output_38_we0;
output  [31:0] output_38_d0;
output  [10:0] output_39_address0;
output   output_39_ce0;
output   output_39_we0;
output  [31:0] output_39_d0;
output  [10:0] output_40_address0;
output   output_40_ce0;
output   output_40_we0;
output  [31:0] output_40_d0;
output  [10:0] output_41_address0;
output   output_41_ce0;
output   output_41_we0;
output  [31:0] output_41_d0;
output  [10:0] output_42_address0;
output   output_42_ce0;
output   output_42_we0;
output  [31:0] output_42_d0;
output  [10:0] output_43_address0;
output   output_43_ce0;
output   output_43_we0;
output  [31:0] output_43_d0;
output  [10:0] output_44_address0;
output   output_44_ce0;
output   output_44_we0;
output  [31:0] output_44_d0;
output  [10:0] output_45_address0;
output   output_45_ce0;
output   output_45_we0;
output  [31:0] output_45_d0;
output  [10:0] output_46_address0;
output   output_46_ce0;
output   output_46_we0;
output  [31:0] output_46_d0;
output  [10:0] output_47_address0;
output   output_47_ce0;
output   output_47_we0;
output  [31:0] output_47_d0;
output  [10:0] output_48_address0;
output   output_48_ce0;
output   output_48_we0;
output  [31:0] output_48_d0;
output  [10:0] output_49_address0;
output   output_49_ce0;
output   output_49_we0;
output  [31:0] output_49_d0;
output  [10:0] output_50_address0;
output   output_50_ce0;
output   output_50_we0;
output  [31:0] output_50_d0;
output  [10:0] output_51_address0;
output   output_51_ce0;
output   output_51_we0;
output  [31:0] output_51_d0;
output  [10:0] output_52_address0;
output   output_52_ce0;
output   output_52_we0;
output  [31:0] output_52_d0;
output  [10:0] output_53_address0;
output   output_53_ce0;
output   output_53_we0;
output  [31:0] output_53_d0;
output  [10:0] output_54_address0;
output   output_54_ce0;
output   output_54_we0;
output  [31:0] output_54_d0;
output  [10:0] output_55_address0;
output   output_55_ce0;
output   output_55_we0;
output  [31:0] output_55_d0;
output  [10:0] output_56_address0;
output   output_56_ce0;
output   output_56_we0;
output  [31:0] output_56_d0;
output  [10:0] output_57_address0;
output   output_57_ce0;
output   output_57_we0;
output  [31:0] output_57_d0;
output  [10:0] output_58_address0;
output   output_58_ce0;
output   output_58_we0;
output  [31:0] output_58_d0;
output  [10:0] output_59_address0;
output   output_59_ce0;
output   output_59_we0;
output  [31:0] output_59_d0;
output  [10:0] output_60_address0;
output   output_60_ce0;
output   output_60_we0;
output  [31:0] output_60_d0;
output  [10:0] output_61_address0;
output   output_61_ce0;
output   output_61_we0;
output  [31:0] output_61_d0;
output  [10:0] output_62_address0;
output   output_62_ce0;
output   output_62_we0;
output  [31:0] output_62_d0;
output  [10:0] output_63_address0;
output   output_63_ce0;
output   output_63_we0;
output  [31:0] output_63_d0;
output  [31:0] grp_fu_3337_p_din0;
output  [31:0] grp_fu_3337_p_din1;
output  [1:0] grp_fu_3337_p_opcode;
input  [31:0] grp_fu_3337_p_dout0;
output   grp_fu_3337_p_ce;
output  [31:0] grp_fu_3341_p_din0;
output  [31:0] grp_fu_3341_p_din1;
input  [31:0] grp_fu_3341_p_dout0;
output   grp_fu_3341_p_ce;
output  [31:0] grp_fu_4439_p_din0;
output  [31:0] grp_fu_4439_p_din1;
output  [4:0] grp_fu_4439_p_opcode;
input  [0:0] grp_fu_4439_p_dout0;
output   grp_fu_4439_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_0_ce0;
reg output_0_we0;
reg output_1_ce0;
reg output_1_we0;
reg output_2_ce0;
reg output_2_we0;
reg output_3_ce0;
reg output_3_we0;
reg output_4_ce0;
reg output_4_we0;
reg output_5_ce0;
reg output_5_we0;
reg output_6_ce0;
reg output_6_we0;
reg output_7_ce0;
reg output_7_we0;
reg output_8_ce0;
reg output_8_we0;
reg output_9_ce0;
reg output_9_we0;
reg output_10_ce0;
reg output_10_we0;
reg output_11_ce0;
reg output_11_we0;
reg output_12_ce0;
reg output_12_we0;
reg output_13_ce0;
reg output_13_we0;
reg output_14_ce0;
reg output_14_we0;
reg output_15_ce0;
reg output_15_we0;
reg output_16_ce0;
reg output_16_we0;
reg output_17_ce0;
reg output_17_we0;
reg output_18_ce0;
reg output_18_we0;
reg output_19_ce0;
reg output_19_we0;
reg output_20_ce0;
reg output_20_we0;
reg output_21_ce0;
reg output_21_we0;
reg output_22_ce0;
reg output_22_we0;
reg output_23_ce0;
reg output_23_we0;
reg output_24_ce0;
reg output_24_we0;
reg output_25_ce0;
reg output_25_we0;
reg output_26_ce0;
reg output_26_we0;
reg output_27_ce0;
reg output_27_we0;
reg output_28_ce0;
reg output_28_we0;
reg output_29_ce0;
reg output_29_we0;
reg output_30_ce0;
reg output_30_we0;
reg output_31_ce0;
reg output_31_we0;
reg output_32_ce0;
reg output_32_we0;
reg output_33_ce0;
reg output_33_we0;
reg output_34_ce0;
reg output_34_we0;
reg output_35_ce0;
reg output_35_we0;
reg output_36_ce0;
reg output_36_we0;
reg output_37_ce0;
reg output_37_we0;
reg output_38_ce0;
reg output_38_we0;
reg output_39_ce0;
reg output_39_we0;
reg output_40_ce0;
reg output_40_we0;
reg output_41_ce0;
reg output_41_we0;
reg output_42_ce0;
reg output_42_we0;
reg output_43_ce0;
reg output_43_we0;
reg output_44_ce0;
reg output_44_we0;
reg output_45_ce0;
reg output_45_we0;
reg output_46_ce0;
reg output_46_we0;
reg output_47_ce0;
reg output_47_we0;
reg output_48_ce0;
reg output_48_we0;
reg output_49_ce0;
reg output_49_we0;
reg output_50_ce0;
reg output_50_we0;
reg output_51_ce0;
reg output_51_we0;
reg output_52_ce0;
reg output_52_we0;
reg output_53_ce0;
reg output_53_we0;
reg output_54_ce0;
reg output_54_we0;
reg output_55_ce0;
reg output_55_we0;
reg output_56_ce0;
reg output_56_we0;
reg output_57_ce0;
reg output_57_we0;
reg output_58_ce0;
reg output_58_we0;
reg output_59_ce0;
reg output_59_we0;
reg output_60_ce0;
reg output_60_we0;
reg output_61_ce0;
reg output_61_we0;
reg output_62_ce0;
reg output_62_we0;
reg output_63_ce0;
reg output_63_we0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] layer_2_weights_address0;
reg    layer_2_weights_ce0;
wire   [31:0] layer_2_weights_q0;
wire   [4:0] layer_2_bias_address0;
reg    layer_2_bias_ce0;
wire   [31:0] layer_2_bias_q0;
reg   [3:0] indvar_flatten42_reg_1291;
reg   [0:0] iv_reg_1302;
reg   [3:0] indvar_flatten_reg_1313;
reg  signed [2:0] v_reg_1324;
reg   [2:0] vi_reg_1335;
reg   [31:0] add4115_reg_1346;
wire   [16:0] add_ln67_fu_1373_p2;
reg   [16:0] add_ln67_reg_2107;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln70_fu_1415_p2;
reg   [0:0] icmp_ln70_reg_2115;
wire   [0:0] icmp_ln67_fu_1409_p2;
wire   [5:0] select_ln67_2_fu_1477_p3;
reg   [5:0] select_ln67_2_reg_2120;
wire   [5:0] iii_mid2_fu_1497_p3;
reg   [5:0] iii_mid2_reg_2128;
wire   [5:0] ii_cast6_mid2_fu_1505_p3;
reg   [5:0] ii_cast6_mid2_reg_2135;
wire   [11:0] empty_76_fu_1541_p3;
reg   [11:0] empty_76_reg_2141;
wire   [11:0] ii_cast6_mid2_cast_fu_1554_p1;
reg   [11:0] ii_cast6_mid2_cast_reg_2151;
wire    ap_CS_fsm_state3;
wire   [16:0] add52_mid2_fu_1557_p3;
reg   [16:0] add52_mid2_reg_2156;
wire   [8:0] zext_ln73_1_fu_1564_p1;
reg   [8:0] zext_ln73_1_reg_2161;
wire   [16:0] zext_ln73_2_fu_1567_p1;
reg   [16:0] zext_ln73_2_reg_2166;
wire   [11:0] p_mid132_fu_1595_p2;
reg   [11:0] p_mid132_reg_2176;
wire   [3:0] add_ln78_fu_1601_p2;
reg   [3:0] add_ln78_reg_2181;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_1670_p2;
reg   [0:0] icmp_ln78_reg_2186;
reg   [0:0] icmp_ln78_reg_2186_pp0_iter1_reg;
reg   [0:0] icmp_ln78_reg_2186_pp0_iter2_reg;
wire   [0:0] icmp_ln81_fu_1676_p2;
reg   [0:0] icmp_ln81_reg_2190;
wire   [0:0] select_ln78_1_fu_1696_p3;
reg   [0:0] select_ln78_1_reg_2195;
wire   [2:0] select_ln81_fu_1765_p3;
reg   [2:0] select_ln81_reg_2200;
wire   [2:0] select_ln81_3_fu_1857_p3;
reg   [2:0] select_ln81_3_reg_2205;
wire   [3:0] add_ln81_1_fu_1924_p2;
reg   [3:0] add_ln81_1_reg_2220;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] add_ln93_fu_1930_p2;
reg   [2:0] add_ln93_reg_2235;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [3:0] select_ln81_4_fu_1935_p3;
reg   [3:0] select_ln81_4_reg_2240;
wire   [31:0] grp_fu_1361_p2;
reg   [31:0] mul_reg_2245;
wire   [31:0] grp_fu_1356_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [16:0] add_ln103_fu_1941_p2;
wire    ap_CS_fsm_state14;
reg   [5:0] trunc_ln7_reg_2265;
wire    ap_CS_fsm_state17;
wire   [31:0] output_sum_1_fu_2006_p3;
reg   [31:0] output_sum_1_reg_2269;
wire    ap_CS_fsm_state18;
wire   [5:0] add_ln73_fu_2082_p2;
wire    ap_CS_fsm_state34;
wire   [11:0] select_ln70_fu_2093_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [16:0] indvar_flatten79_reg_1235;
reg   [5:0] i_reg_1246;
reg   [11:0] indvar_flatten50_reg_1257;
reg   [5:0] ii_reg_1269;
reg   [5:0] iii_reg_1280;
reg   [3:0] ap_phi_mux_indvar_flatten42_phi_fu_1295_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_iv_phi_fu_1306_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_1317_p4;
reg  signed [2:0] ap_phi_mux_v_phi_fu_1328_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_1339_p4;
reg   [31:0] ap_phi_mux_add4115_phi_fu_1349_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln73_fu_1549_p1;
wire   [63:0] zext_ln88_fu_1885_p1;
wire   [63:0] zext_ln92_fu_1919_p1;
wire   [63:0] zext_ln103_fu_2014_p1;
wire   [31:0] grp_fu_1356_p0;
wire   [31:0] grp_fu_1356_p1;
wire   [31:0] grp_fu_1361_p0;
wire   [31:0] grp_fu_1361_p1;
wire   [31:0] grp_fu_1367_p0;
wire   [31:0] grp_fu_1367_p1;
wire   [5:0] empty_fu_1383_p0;
wire   [6:0] empty_fu_1383_p1;
wire   [6:0] ii_cast_fu_1389_p1;
wire   [6:0] tmp_fu_1393_p2;
wire  signed [11:0] tmp_cast_fu_1399_p1;
wire   [11:0] empty_fu_1383_p2;
wire   [5:0] add_ln67_1_fu_1429_p2;
wire   [5:0] p_mid161_fu_1439_p0;
wire   [6:0] p_mid161_fu_1439_p1;
wire   [11:0] p_mid161_fu_1439_p2;
wire   [0:0] icmp_ln73_fu_1465_p2;
wire   [0:0] xor_ln67_fu_1459_p2;
wire   [5:0] select_ln67_fu_1421_p3;
wire   [0:0] and_ln67_fu_1471_p2;
wire   [0:0] empty_75_fu_1491_p2;
wire   [5:0] add_ln70_fu_1485_p2;
wire   [6:0] ii_cast_mid1_fu_1513_p1;
wire   [6:0] tmp_mid1_fu_1517_p2;
wire  signed [11:0] tmp_cast_mid1_fu_1523_p1;
wire   [11:0] select_ln67_1_fu_1445_p3;
wire   [11:0] mul4811_mid171_fu_1453_p2;
wire   [11:0] mul4811_fu_1403_p2;
wire   [11:0] mul4811_mid1_fu_1527_p2;
wire   [11:0] select_ln67_3_fu_1533_p3;
wire   [5:0] p_mid116_fu_1570_p2;
wire   [7:0] p_shl4_mid_fu_1583_p3;
wire   [11:0] p_shl3_mid_fu_1575_p3;
wire   [11:0] p_shl4_cast_mid130_fu_1591_p1;
wire  signed [5:0] sext_ln81_fu_1607_p1;
wire   [2:0] indvars_iv_next37_fu_1616_p2;
wire   [5:0] empty_68_fu_1611_p2;
wire   [7:0] p_shl4_fu_1634_p3;
wire   [11:0] p_shl3_fu_1626_p3;
wire   [11:0] p_shl4_cast_fu_1642_p1;
wire   [1:0] empty_70_fu_1652_p1;
wire   [3:0] p_shl_fu_1656_p3;
wire   [3:0] indvars_iv_next37_cast_fu_1622_p1;
wire   [0:0] xor_ln93_fu_1690_p2;
wire   [0:0] select_ln78_2_fu_1708_p3;
wire   [3:0] sub_ln92_fu_1664_p2;
wire   [11:0] empty_69_fu_1646_p2;
wire   [0:0] icmp_ln84_fu_1741_p2;
wire   [0:0] xor_ln78_fu_1735_p2;
wire   [2:0] select_ln78_fu_1682_p3;
wire   [0:0] and_ln78_fu_1747_p2;
wire   [0:0] or_ln81_fu_1759_p2;
wire  signed [2:0] indvars_iv_next37_dup_fu_1753_p2;
wire  signed [5:0] sext_ln81_1_fu_1773_p1;
wire   [2:0] indvars_iv_next37_mid1_fu_1782_p2;
wire   [5:0] p_mid1_fu_1777_p2;
wire   [7:0] p_shl4_mid1_fu_1800_p3;
wire   [11:0] p_shl3_mid1_fu_1792_p3;
wire   [11:0] p_shl4_cast_mid1_fu_1808_p1;
wire   [1:0] empty_72_fu_1818_p1;
wire   [3:0] p_shl_mid1_fu_1822_p3;
wire   [3:0] indvars_iv_next37_cast_mid1_fu_1788_p1;
wire   [3:0] sub_ln92_1_fu_1830_p2;
wire   [3:0] select_ln78_3_fu_1720_p3;
wire   [11:0] p_mid13_fu_1812_p2;
wire   [11:0] select_ln78_4_fu_1728_p3;
wire   [11:0] select_ln81_2_fu_1844_p3;
wire  signed [1:0] empty_73_fu_1865_p1;
wire   [1:0] zext_ln78_fu_1704_p1;
wire   [1:0] add_ln88_fu_1869_p2;
wire  signed [11:0] sext_ln88_fu_1875_p1;
wire   [11:0] add_ln81_fu_1852_p2;
wire   [11:0] add_ln88_1_fu_1879_p2;
wire  signed [3:0] sext_ln93_fu_1890_p1;
wire   [3:0] select_ln81_1_fu_1836_p3;
wire   [3:0] zext_ln78_1_fu_1716_p1;
wire   [3:0] add_ln93_1_fu_1894_p2;
wire   [3:0] add_ln93_2_fu_1900_p2;
wire   [8:0] shl_ln_fu_1906_p3;
wire   [8:0] add_ln92_fu_1914_p2;
wire    ap_block_pp0_stage3;
wire   [11:0] grp_fu_1949_p1;
wire   [34:0] grp_fu_2100_p2;
wire   [31:0] bitcast_ln49_fu_1964_p1;
wire   [7:0] tmp_s_fu_1968_p4;
wire   [22:0] trunc_ln49_fu_1978_p1;
wire   [0:0] icmp_ln49_4_fu_1988_p2;
wire   [0:0] icmp_ln49_fu_1982_p2;
wire   [0:0] or_ln49_fu_1994_p2;
wire   [0:0] grp_fu_1367_p2;
wire   [0:0] and_ln49_fu_2000_p2;
wire   [16:0] grp_fu_1949_p2;
wire   [11:0] add_ln70_1_fu_2087_p2;
wire   [16:0] grp_fu_2100_p0;
wire   [18:0] grp_fu_2100_p1;
wire    grp_fu_1356_ce;
wire    grp_fu_1361_ce;
wire    grp_fu_1367_ce;
wire   [4:0] grp_fu_1367_opcode;
reg    grp_fu_1949_ap_start;
wire    grp_fu_1949_ap_done;
reg   [27:0] ap_NS_fsm;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire   [11:0] empty_fu_1383_p00;
wire   [34:0] grp_fu_2100_p00;
wire   [11:0] p_mid161_fu_1439_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_conv2d_2_layer_2_weights #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
layer_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_weights_address0),
    .ce0(layer_2_weights_ce0),
    .q0(layer_2_weights_q0)
);

infer_conv2d_2_layer_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_2_bias_address0),
    .ce0(layer_2_bias_ce0),
    .q0(layer_2_bias_q0)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U74(
    .din0(empty_fu_1383_p0),
    .din1(empty_fu_1383_p1),
    .dout(empty_fu_1383_p2)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U75(
    .din0(p_mid161_fu_1439_p0),
    .din1(p_mid161_fu_1439_p1),
    .dout(p_mid161_fu_1439_p2)
);

infer_urem_17ns_12ns_17_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 17 ))
urem_17ns_12ns_17_21_seq_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1949_ap_start),
    .done(grp_fu_1949_ap_done),
    .din0(add_ln103_fu_1941_p2),
    .din1(grp_fu_1949_p1),
    .ce(1'b1),
    .dout(grp_fu_1949_p2)
);

infer_mul_mul_17ns_19ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_mul_17ns_19ns_35_4_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2100_p0),
    .din1(grp_fu_2100_p1),
    .ce(1'b1),
    .dout(grp_fu_2100_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln78_reg_2186_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add4115_reg_1346 <= grp_fu_3337_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        add4115_reg_1346 <= layer_2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        i_reg_1246 <= select_ln67_2_reg_2120;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_1246 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ii_reg_1269 <= ii_cast6_mid2_reg_2135;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_1269 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        iii_reg_1280 <= add_ln73_fu_2082_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_1280 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten42_reg_1291 <= add_ln78_reg_2181;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten42_reg_1291 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        indvar_flatten50_reg_1257 <= select_ln70_fu_2093_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten50_reg_1257 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        indvar_flatten79_reg_1235 <= add_ln67_reg_2107;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten79_reg_1235 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_1313 <= select_ln81_4_reg_2240;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_1313 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iv_reg_1302 <= select_ln78_1_reg_2195;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_reg_1302 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_reg_1324 <= select_ln81_3_reg_2205;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_1324 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vi_reg_1335 <= add_ln93_reg_2235;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vi_reg_1335 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add52_mid2_reg_2156[16 : 5] <= add52_mid2_fu_1557_p3[16 : 5];
        ii_cast6_mid2_cast_reg_2151[5 : 0] <= ii_cast6_mid2_cast_fu_1554_p1[5 : 0];
        p_mid132_reg_2176[11 : 2] <= p_mid132_fu_1595_p2[11 : 2];
        zext_ln73_1_reg_2161[5 : 0] <= zext_ln73_1_fu_1564_p1[5 : 0];
        zext_ln73_2_reg_2166[5 : 0] <= zext_ln73_2_fu_1567_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln67_reg_2107 <= add_ln67_fu_1373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln78_reg_2181 <= add_ln78_fu_1601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_1670_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln81_1_reg_2220 <= add_ln81_1_fu_1924_p2;
        icmp_ln81_reg_2190 <= icmp_ln81_fu_1676_p2;
        select_ln81_reg_2200 <= select_ln81_fu_1765_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln93_reg_2235 <= add_ln93_fu_1930_p2;
        select_ln81_4_reg_2240 <= select_ln81_4_fu_1935_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_1409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_76_reg_2141 <= empty_76_fu_1541_p3;
        icmp_ln70_reg_2115 <= icmp_ln70_fu_1415_p2;
        ii_cast6_mid2_reg_2135 <= ii_cast6_mid2_fu_1505_p3;
        iii_mid2_reg_2128 <= iii_mid2_fu_1497_p3;
        select_ln67_2_reg_2120 <= select_ln67_2_fu_1477_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_2186 <= icmp_ln78_fu_1670_p2;
        icmp_ln78_reg_2186_pp0_iter1_reg <= icmp_ln78_reg_2186;
        icmp_ln78_reg_2186_pp0_iter2_reg <= icmp_ln78_reg_2186_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_reg_2245 <= grp_fu_3341_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_sum_1_reg_2269 <= output_sum_1_fu_2006_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_1670_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln78_1_reg_2195 <= select_ln78_1_fu_1696_p3;
        select_ln81_3_reg_2205 <= select_ln81_3_fu_1857_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        trunc_ln7_reg_2265 <= {{grp_fu_2100_p2[33:28]}};
    end
end

always @ (*) begin
    if ((icmp_ln78_fu_1670_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln67_fu_1409_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln78_reg_2186_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_add4115_phi_fu_1349_p4 = grp_fu_3337_p_dout0;
    end else begin
        ap_phi_mux_add4115_phi_fu_1349_p4 = add4115_reg_1346;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten42_phi_fu_1295_p4 = add_ln78_reg_2181;
    end else begin
        ap_phi_mux_indvar_flatten42_phi_fu_1295_p4 = indvar_flatten42_reg_1291;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_1317_p4 = select_ln81_4_reg_2240;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_1317_p4 = indvar_flatten_reg_1313;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_iv_phi_fu_1306_p4 = select_ln78_1_reg_2195;
    end else begin
        ap_phi_mux_iv_phi_fu_1306_p4 = iv_reg_1302;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_v_phi_fu_1328_p4 = select_ln81_3_reg_2205;
    end else begin
        ap_phi_mux_v_phi_fu_1328_p4 = v_reg_1324;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln78_reg_2186 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_vi_phi_fu_1339_p4 = add_ln93_reg_2235;
    end else begin
        ap_phi_mux_vi_phi_fu_1339_p4 = vi_reg_1335;
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_1409_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_1949_ap_start = 1'b1;
    end else begin
        grp_fu_1949_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_2_bias_ce0 = 1'b1;
    end else begin
        layer_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer_2_weights_ce0 = 1'b1;
    end else begin
        layer_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_10_ce0 = 1'b1;
    end else begin
        output_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd10) & (1'b1 == ap_CS_fsm_state34))) begin
        output_10_we0 = 1'b1;
    end else begin
        output_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_11_ce0 = 1'b1;
    end else begin
        output_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd11) & (1'b1 == ap_CS_fsm_state34))) begin
        output_11_we0 = 1'b1;
    end else begin
        output_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_12_ce0 = 1'b1;
    end else begin
        output_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd12) & (1'b1 == ap_CS_fsm_state34))) begin
        output_12_we0 = 1'b1;
    end else begin
        output_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_13_ce0 = 1'b1;
    end else begin
        output_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd13) & (1'b1 == ap_CS_fsm_state34))) begin
        output_13_we0 = 1'b1;
    end else begin
        output_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_14_ce0 = 1'b1;
    end else begin
        output_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd14) & (1'b1 == ap_CS_fsm_state34))) begin
        output_14_we0 = 1'b1;
    end else begin
        output_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_15_ce0 = 1'b1;
    end else begin
        output_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd15) & (1'b1 == ap_CS_fsm_state34))) begin
        output_15_we0 = 1'b1;
    end else begin
        output_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_16_ce0 = 1'b1;
    end else begin
        output_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd16) & (1'b1 == ap_CS_fsm_state34))) begin
        output_16_we0 = 1'b1;
    end else begin
        output_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_17_ce0 = 1'b1;
    end else begin
        output_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd17) & (1'b1 == ap_CS_fsm_state34))) begin
        output_17_we0 = 1'b1;
    end else begin
        output_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_18_ce0 = 1'b1;
    end else begin
        output_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd18) & (1'b1 == ap_CS_fsm_state34))) begin
        output_18_we0 = 1'b1;
    end else begin
        output_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_19_ce0 = 1'b1;
    end else begin
        output_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd19) & (1'b1 == ap_CS_fsm_state34))) begin
        output_19_we0 = 1'b1;
    end else begin
        output_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_20_ce0 = 1'b1;
    end else begin
        output_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd20) & (1'b1 == ap_CS_fsm_state34))) begin
        output_20_we0 = 1'b1;
    end else begin
        output_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_21_ce0 = 1'b1;
    end else begin
        output_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd21) & (1'b1 == ap_CS_fsm_state34))) begin
        output_21_we0 = 1'b1;
    end else begin
        output_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_22_ce0 = 1'b1;
    end else begin
        output_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd22) & (1'b1 == ap_CS_fsm_state34))) begin
        output_22_we0 = 1'b1;
    end else begin
        output_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_23_ce0 = 1'b1;
    end else begin
        output_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd23) & (1'b1 == ap_CS_fsm_state34))) begin
        output_23_we0 = 1'b1;
    end else begin
        output_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_24_ce0 = 1'b1;
    end else begin
        output_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd24) & (1'b1 == ap_CS_fsm_state34))) begin
        output_24_we0 = 1'b1;
    end else begin
        output_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_25_ce0 = 1'b1;
    end else begin
        output_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd25) & (1'b1 == ap_CS_fsm_state34))) begin
        output_25_we0 = 1'b1;
    end else begin
        output_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_26_ce0 = 1'b1;
    end else begin
        output_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd26) & (1'b1 == ap_CS_fsm_state34))) begin
        output_26_we0 = 1'b1;
    end else begin
        output_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_27_ce0 = 1'b1;
    end else begin
        output_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd27) & (1'b1 == ap_CS_fsm_state34))) begin
        output_27_we0 = 1'b1;
    end else begin
        output_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_28_ce0 = 1'b1;
    end else begin
        output_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd28) & (1'b1 == ap_CS_fsm_state34))) begin
        output_28_we0 = 1'b1;
    end else begin
        output_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_29_ce0 = 1'b1;
    end else begin
        output_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd29) & (1'b1 == ap_CS_fsm_state34))) begin
        output_29_we0 = 1'b1;
    end else begin
        output_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd2) & (1'b1 == ap_CS_fsm_state34))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_30_ce0 = 1'b1;
    end else begin
        output_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd30) & (1'b1 == ap_CS_fsm_state34))) begin
        output_30_we0 = 1'b1;
    end else begin
        output_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_31_ce0 = 1'b1;
    end else begin
        output_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd31) & (1'b1 == ap_CS_fsm_state34))) begin
        output_31_we0 = 1'b1;
    end else begin
        output_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_32_ce0 = 1'b1;
    end else begin
        output_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd32) & (1'b1 == ap_CS_fsm_state34))) begin
        output_32_we0 = 1'b1;
    end else begin
        output_32_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_33_ce0 = 1'b1;
    end else begin
        output_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd33) & (1'b1 == ap_CS_fsm_state34))) begin
        output_33_we0 = 1'b1;
    end else begin
        output_33_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_34_ce0 = 1'b1;
    end else begin
        output_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd34) & (1'b1 == ap_CS_fsm_state34))) begin
        output_34_we0 = 1'b1;
    end else begin
        output_34_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_35_ce0 = 1'b1;
    end else begin
        output_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd35) & (1'b1 == ap_CS_fsm_state34))) begin
        output_35_we0 = 1'b1;
    end else begin
        output_35_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_36_ce0 = 1'b1;
    end else begin
        output_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd36) & (1'b1 == ap_CS_fsm_state34))) begin
        output_36_we0 = 1'b1;
    end else begin
        output_36_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_37_ce0 = 1'b1;
    end else begin
        output_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd37) & (1'b1 == ap_CS_fsm_state34))) begin
        output_37_we0 = 1'b1;
    end else begin
        output_37_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_38_ce0 = 1'b1;
    end else begin
        output_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd38) & (1'b1 == ap_CS_fsm_state34))) begin
        output_38_we0 = 1'b1;
    end else begin
        output_38_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_39_ce0 = 1'b1;
    end else begin
        output_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd39) & (1'b1 == ap_CS_fsm_state34))) begin
        output_39_we0 = 1'b1;
    end else begin
        output_39_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd3) & (1'b1 == ap_CS_fsm_state34))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_40_ce0 = 1'b1;
    end else begin
        output_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd40) & (1'b1 == ap_CS_fsm_state34))) begin
        output_40_we0 = 1'b1;
    end else begin
        output_40_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_41_ce0 = 1'b1;
    end else begin
        output_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd41) & (1'b1 == ap_CS_fsm_state34))) begin
        output_41_we0 = 1'b1;
    end else begin
        output_41_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_42_ce0 = 1'b1;
    end else begin
        output_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd42) & (1'b1 == ap_CS_fsm_state34))) begin
        output_42_we0 = 1'b1;
    end else begin
        output_42_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_43_ce0 = 1'b1;
    end else begin
        output_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd43) & (1'b1 == ap_CS_fsm_state34))) begin
        output_43_we0 = 1'b1;
    end else begin
        output_43_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_44_ce0 = 1'b1;
    end else begin
        output_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd44) & (1'b1 == ap_CS_fsm_state34))) begin
        output_44_we0 = 1'b1;
    end else begin
        output_44_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_45_ce0 = 1'b1;
    end else begin
        output_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd45) & (1'b1 == ap_CS_fsm_state34))) begin
        output_45_we0 = 1'b1;
    end else begin
        output_45_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_46_ce0 = 1'b1;
    end else begin
        output_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd46) & (1'b1 == ap_CS_fsm_state34))) begin
        output_46_we0 = 1'b1;
    end else begin
        output_46_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_47_ce0 = 1'b1;
    end else begin
        output_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd47) & (1'b1 == ap_CS_fsm_state34))) begin
        output_47_we0 = 1'b1;
    end else begin
        output_47_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_48_ce0 = 1'b1;
    end else begin
        output_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd48) & (1'b1 == ap_CS_fsm_state34))) begin
        output_48_we0 = 1'b1;
    end else begin
        output_48_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_49_ce0 = 1'b1;
    end else begin
        output_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd49) & (1'b1 == ap_CS_fsm_state34))) begin
        output_49_we0 = 1'b1;
    end else begin
        output_49_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd4) & (1'b1 == ap_CS_fsm_state34))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_50_ce0 = 1'b1;
    end else begin
        output_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd50) & (1'b1 == ap_CS_fsm_state34))) begin
        output_50_we0 = 1'b1;
    end else begin
        output_50_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_51_ce0 = 1'b1;
    end else begin
        output_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd51) & (1'b1 == ap_CS_fsm_state34))) begin
        output_51_we0 = 1'b1;
    end else begin
        output_51_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_52_ce0 = 1'b1;
    end else begin
        output_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd52) & (1'b1 == ap_CS_fsm_state34))) begin
        output_52_we0 = 1'b1;
    end else begin
        output_52_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_53_ce0 = 1'b1;
    end else begin
        output_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd53) & (1'b1 == ap_CS_fsm_state34))) begin
        output_53_we0 = 1'b1;
    end else begin
        output_53_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_54_ce0 = 1'b1;
    end else begin
        output_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd54) & (1'b1 == ap_CS_fsm_state34))) begin
        output_54_we0 = 1'b1;
    end else begin
        output_54_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_55_ce0 = 1'b1;
    end else begin
        output_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd55) & (1'b1 == ap_CS_fsm_state34))) begin
        output_55_we0 = 1'b1;
    end else begin
        output_55_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_56_ce0 = 1'b1;
    end else begin
        output_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd56) & (1'b1 == ap_CS_fsm_state34))) begin
        output_56_we0 = 1'b1;
    end else begin
        output_56_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_57_ce0 = 1'b1;
    end else begin
        output_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd57) & (1'b1 == ap_CS_fsm_state34))) begin
        output_57_we0 = 1'b1;
    end else begin
        output_57_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_58_ce0 = 1'b1;
    end else begin
        output_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd58) & (1'b1 == ap_CS_fsm_state34))) begin
        output_58_we0 = 1'b1;
    end else begin
        output_58_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_59_ce0 = 1'b1;
    end else begin
        output_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd59) & (1'b1 == ap_CS_fsm_state34))) begin
        output_59_we0 = 1'b1;
    end else begin
        output_59_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd5) & (1'b1 == ap_CS_fsm_state34))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_60_ce0 = 1'b1;
    end else begin
        output_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd60) & (1'b1 == ap_CS_fsm_state34))) begin
        output_60_we0 = 1'b1;
    end else begin
        output_60_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_61_ce0 = 1'b1;
    end else begin
        output_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd61) & (1'b1 == ap_CS_fsm_state34))) begin
        output_61_we0 = 1'b1;
    end else begin
        output_61_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_62_ce0 = 1'b1;
    end else begin
        output_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd62) & (1'b1 == ap_CS_fsm_state34))) begin
        output_62_we0 = 1'b1;
    end else begin
        output_62_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_63_ce0 = 1'b1;
    end else begin
        output_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd63) & (1'b1 == ap_CS_fsm_state34))) begin
        output_63_we0 = 1'b1;
    end else begin
        output_63_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd6) & (1'b1 == ap_CS_fsm_state34))) begin
        output_6_we0 = 1'b1;
    end else begin
        output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd7) & (1'b1 == ap_CS_fsm_state34))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_8_ce0 = 1'b1;
    end else begin
        output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd8) & (1'b1 == ap_CS_fsm_state34))) begin
        output_8_we0 = 1'b1;
    end else begin
        output_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_9_ce0 = 1'b1;
    end else begin
        output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln7_reg_2265 == 6'd9) & (1'b1 == ap_CS_fsm_state34))) begin
        output_9_we0 = 1'b1;
    end else begin
        output_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln67_fu_1409_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln78_fu_1670_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln78_fu_1670_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add52_mid2_fu_1557_p3 = {{empty_76_reg_2141}, {5'd0}};

assign add_ln103_fu_1941_p2 = (zext_ln73_2_reg_2166 + add52_mid2_reg_2156);

assign add_ln67_1_fu_1429_p2 = (i_reg_1246 + 6'd1);

assign add_ln67_fu_1373_p2 = (indvar_flatten79_reg_1235 + 17'd1);

assign add_ln70_1_fu_2087_p2 = (indvar_flatten50_reg_1257 + 12'd1);

assign add_ln70_fu_1485_p2 = (select_ln67_fu_1421_p3 + 6'd1);

assign add_ln73_fu_2082_p2 = (iii_mid2_reg_2128 + 6'd1);

assign add_ln78_fu_1601_p2 = (ap_phi_mux_indvar_flatten42_phi_fu_1295_p4 + 4'd1);

assign add_ln81_1_fu_1924_p2 = (ap_phi_mux_indvar_flatten_phi_fu_1317_p4 + 4'd1);

assign add_ln81_fu_1852_p2 = (select_ln81_2_fu_1844_p3 + ii_cast6_mid2_cast_reg_2151);

assign add_ln88_1_fu_1879_p2 = ($signed(sext_ln88_fu_1875_p1) + $signed(add_ln81_fu_1852_p2));

assign add_ln88_fu_1869_p2 = ($signed(empty_73_fu_1865_p1) + $signed(zext_ln78_fu_1704_p1));

assign add_ln92_fu_1914_p2 = (shl_ln_fu_1906_p3 + zext_ln73_1_reg_2161);

assign add_ln93_1_fu_1894_p2 = ($signed(sext_ln93_fu_1890_p1) + $signed(select_ln81_1_fu_1836_p3));

assign add_ln93_2_fu_1900_p2 = (zext_ln78_1_fu_1716_p1 + add_ln93_1_fu_1894_p2);

assign add_ln93_fu_1930_p2 = (select_ln81_reg_2200 + 3'd1);

assign and_ln49_fu_2000_p2 = (or_ln49_fu_1994_p2 & grp_fu_4439_p_dout0);

assign and_ln67_fu_1471_p2 = (xor_ln67_fu_1459_p2 & icmp_ln73_fu_1465_p2);

assign and_ln78_fu_1747_p2 = (xor_ln78_fu_1735_p2 & icmp_ln84_fu_1741_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd27];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_1964_p1 = add4115_reg_1346;

assign empty_68_fu_1611_p2 = ($signed(sext_ln81_fu_1607_p1) + $signed(select_ln67_2_reg_2120));

assign empty_69_fu_1646_p2 = (p_shl3_fu_1626_p3 - p_shl4_cast_fu_1642_p1);

assign empty_70_fu_1652_p1 = indvars_iv_next37_fu_1616_p2[1:0];

assign empty_72_fu_1818_p1 = indvars_iv_next37_mid1_fu_1782_p2[1:0];

assign empty_73_fu_1865_p1 = select_ln81_fu_1765_p3[1:0];

assign empty_75_fu_1491_p2 = (icmp_ln70_fu_1415_p2 | and_ln67_fu_1471_p2);

assign empty_76_fu_1541_p3 = ((and_ln67_fu_1471_p2[0:0] == 1'b1) ? mul4811_mid1_fu_1527_p2 : select_ln67_3_fu_1533_p3);

assign empty_fu_1383_p0 = empty_fu_1383_p00;

assign empty_fu_1383_p00 = i_reg_1246;

assign empty_fu_1383_p1 = 12'd58;

assign grp_fu_1356_ce = 1'b1;

assign grp_fu_1356_p0 = ap_phi_mux_add4115_phi_fu_1349_p4;

assign grp_fu_1356_p1 = mul_reg_2245;

assign grp_fu_1356_p2 = grp_fu_3337_p_dout0;

assign grp_fu_1361_ce = 1'b1;

assign grp_fu_1361_p0 = input_r_q0;

assign grp_fu_1361_p1 = layer_2_weights_q0;

assign grp_fu_1361_p2 = grp_fu_3341_p_dout0;

assign grp_fu_1367_ce = 1'b1;

assign grp_fu_1367_opcode = 5'd4;

assign grp_fu_1367_p0 = add4115_reg_1346;

assign grp_fu_1367_p1 = 32'd0;

assign grp_fu_1367_p2 = grp_fu_4439_p_dout0;

assign grp_fu_1949_p1 = 17'd1682;

assign grp_fu_2100_p0 = grp_fu_2100_p00;

assign grp_fu_2100_p00 = add_ln103_fu_1941_p2;

assign grp_fu_2100_p1 = 35'd159594;

assign grp_fu_3337_p_ce = 1'b1;

assign grp_fu_3337_p_din0 = ap_phi_mux_add4115_phi_fu_1349_p4;

assign grp_fu_3337_p_din1 = mul_reg_2245;

assign grp_fu_3337_p_opcode = 2'd0;

assign grp_fu_3341_p_ce = 1'b1;

assign grp_fu_3341_p_din0 = input_r_q0;

assign grp_fu_3341_p_din1 = layer_2_weights_q0;

assign grp_fu_4439_p_ce = 1'b1;

assign grp_fu_4439_p_din0 = add4115_reg_1346;

assign grp_fu_4439_p_din1 = 32'd0;

assign grp_fu_4439_p_opcode = 5'd4;

assign icmp_ln49_4_fu_1988_p2 = ((trunc_ln49_fu_1978_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1982_p2 = ((tmp_s_fu_1968_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_1409_p2 = ((indvar_flatten79_reg_1235 == 17'd107648) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_1415_p2 = ((indvar_flatten50_reg_1257 == 12'd1856) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_1465_p2 = ((iii_reg_1280 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1670_p2 = ((ap_phi_mux_indvar_flatten42_phi_fu_1295_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_1676_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_1317_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_1741_p2 = ((ap_phi_mux_vi_phi_fu_1339_p4 == 3'd2) ? 1'b1 : 1'b0);

assign ii_cast6_mid2_cast_fu_1554_p1 = ii_cast6_mid2_reg_2135;

assign ii_cast6_mid2_fu_1505_p3 = ((and_ln67_fu_1471_p2[0:0] == 1'b1) ? add_ln70_fu_1485_p2 : select_ln67_fu_1421_p3);

assign ii_cast_fu_1389_p1 = ii_reg_1269;

assign ii_cast_mid1_fu_1513_p1 = add_ln70_fu_1485_p2;

assign iii_mid2_fu_1497_p3 = ((empty_75_fu_1491_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_1280);

assign indvars_iv_next37_cast_fu_1622_p1 = indvars_iv_next37_fu_1616_p2;

assign indvars_iv_next37_cast_mid1_fu_1788_p1 = indvars_iv_next37_mid1_fu_1782_p2;

assign indvars_iv_next37_dup_fu_1753_p2 = (select_ln78_fu_1682_p3 + 3'd1);

assign indvars_iv_next37_fu_1616_p2 = ($signed(ap_phi_mux_v_phi_fu_1328_p4) + $signed(3'd1));

assign indvars_iv_next37_mid1_fu_1782_p2 = (select_ln78_fu_1682_p3 + 3'd2);

assign input_r_address0 = zext_ln88_fu_1885_p1;

assign layer_2_bias_address0 = zext_ln73_fu_1549_p1;

assign layer_2_weights_address0 = zext_ln92_fu_1919_p1;

assign mul4811_fu_1403_p2 = ($signed(tmp_cast_fu_1399_p1) + $signed(empty_fu_1383_p2));

assign mul4811_mid171_fu_1453_p2 = ($signed(p_mid161_fu_1439_p2) + $signed(12'd4038));

assign mul4811_mid1_fu_1527_p2 = ($signed(tmp_cast_mid1_fu_1523_p1) + $signed(select_ln67_1_fu_1445_p3));

assign or_ln49_fu_1994_p2 = (icmp_ln49_fu_1982_p2 | icmp_ln49_4_fu_1988_p2);

assign or_ln81_fu_1759_p2 = (icmp_ln81_fu_1676_p2 | and_ln78_fu_1747_p2);

assign output_0_address0 = zext_ln103_fu_2014_p1;

assign output_0_d0 = output_sum_1_reg_2269;

assign output_10_address0 = zext_ln103_fu_2014_p1;

assign output_10_d0 = output_sum_1_reg_2269;

assign output_11_address0 = zext_ln103_fu_2014_p1;

assign output_11_d0 = output_sum_1_reg_2269;

assign output_12_address0 = zext_ln103_fu_2014_p1;

assign output_12_d0 = output_sum_1_reg_2269;

assign output_13_address0 = zext_ln103_fu_2014_p1;

assign output_13_d0 = output_sum_1_reg_2269;

assign output_14_address0 = zext_ln103_fu_2014_p1;

assign output_14_d0 = output_sum_1_reg_2269;

assign output_15_address0 = zext_ln103_fu_2014_p1;

assign output_15_d0 = output_sum_1_reg_2269;

assign output_16_address0 = zext_ln103_fu_2014_p1;

assign output_16_d0 = output_sum_1_reg_2269;

assign output_17_address0 = zext_ln103_fu_2014_p1;

assign output_17_d0 = output_sum_1_reg_2269;

assign output_18_address0 = zext_ln103_fu_2014_p1;

assign output_18_d0 = output_sum_1_reg_2269;

assign output_19_address0 = zext_ln103_fu_2014_p1;

assign output_19_d0 = output_sum_1_reg_2269;

assign output_1_address0 = zext_ln103_fu_2014_p1;

assign output_1_d0 = output_sum_1_reg_2269;

assign output_20_address0 = zext_ln103_fu_2014_p1;

assign output_20_d0 = output_sum_1_reg_2269;

assign output_21_address0 = zext_ln103_fu_2014_p1;

assign output_21_d0 = output_sum_1_reg_2269;

assign output_22_address0 = zext_ln103_fu_2014_p1;

assign output_22_d0 = output_sum_1_reg_2269;

assign output_23_address0 = zext_ln103_fu_2014_p1;

assign output_23_d0 = output_sum_1_reg_2269;

assign output_24_address0 = zext_ln103_fu_2014_p1;

assign output_24_d0 = output_sum_1_reg_2269;

assign output_25_address0 = zext_ln103_fu_2014_p1;

assign output_25_d0 = output_sum_1_reg_2269;

assign output_26_address0 = zext_ln103_fu_2014_p1;

assign output_26_d0 = output_sum_1_reg_2269;

assign output_27_address0 = zext_ln103_fu_2014_p1;

assign output_27_d0 = output_sum_1_reg_2269;

assign output_28_address0 = zext_ln103_fu_2014_p1;

assign output_28_d0 = output_sum_1_reg_2269;

assign output_29_address0 = zext_ln103_fu_2014_p1;

assign output_29_d0 = output_sum_1_reg_2269;

assign output_2_address0 = zext_ln103_fu_2014_p1;

assign output_2_d0 = output_sum_1_reg_2269;

assign output_30_address0 = zext_ln103_fu_2014_p1;

assign output_30_d0 = output_sum_1_reg_2269;

assign output_31_address0 = zext_ln103_fu_2014_p1;

assign output_31_d0 = output_sum_1_reg_2269;

assign output_32_address0 = zext_ln103_fu_2014_p1;

assign output_32_d0 = output_sum_1_reg_2269;

assign output_33_address0 = zext_ln103_fu_2014_p1;

assign output_33_d0 = output_sum_1_reg_2269;

assign output_34_address0 = zext_ln103_fu_2014_p1;

assign output_34_d0 = output_sum_1_reg_2269;

assign output_35_address0 = zext_ln103_fu_2014_p1;

assign output_35_d0 = output_sum_1_reg_2269;

assign output_36_address0 = zext_ln103_fu_2014_p1;

assign output_36_d0 = output_sum_1_reg_2269;

assign output_37_address0 = zext_ln103_fu_2014_p1;

assign output_37_d0 = output_sum_1_reg_2269;

assign output_38_address0 = zext_ln103_fu_2014_p1;

assign output_38_d0 = output_sum_1_reg_2269;

assign output_39_address0 = zext_ln103_fu_2014_p1;

assign output_39_d0 = output_sum_1_reg_2269;

assign output_3_address0 = zext_ln103_fu_2014_p1;

assign output_3_d0 = output_sum_1_reg_2269;

assign output_40_address0 = zext_ln103_fu_2014_p1;

assign output_40_d0 = output_sum_1_reg_2269;

assign output_41_address0 = zext_ln103_fu_2014_p1;

assign output_41_d0 = output_sum_1_reg_2269;

assign output_42_address0 = zext_ln103_fu_2014_p1;

assign output_42_d0 = output_sum_1_reg_2269;

assign output_43_address0 = zext_ln103_fu_2014_p1;

assign output_43_d0 = output_sum_1_reg_2269;

assign output_44_address0 = zext_ln103_fu_2014_p1;

assign output_44_d0 = output_sum_1_reg_2269;

assign output_45_address0 = zext_ln103_fu_2014_p1;

assign output_45_d0 = output_sum_1_reg_2269;

assign output_46_address0 = zext_ln103_fu_2014_p1;

assign output_46_d0 = output_sum_1_reg_2269;

assign output_47_address0 = zext_ln103_fu_2014_p1;

assign output_47_d0 = output_sum_1_reg_2269;

assign output_48_address0 = zext_ln103_fu_2014_p1;

assign output_48_d0 = output_sum_1_reg_2269;

assign output_49_address0 = zext_ln103_fu_2014_p1;

assign output_49_d0 = output_sum_1_reg_2269;

assign output_4_address0 = zext_ln103_fu_2014_p1;

assign output_4_d0 = output_sum_1_reg_2269;

assign output_50_address0 = zext_ln103_fu_2014_p1;

assign output_50_d0 = output_sum_1_reg_2269;

assign output_51_address0 = zext_ln103_fu_2014_p1;

assign output_51_d0 = output_sum_1_reg_2269;

assign output_52_address0 = zext_ln103_fu_2014_p1;

assign output_52_d0 = output_sum_1_reg_2269;

assign output_53_address0 = zext_ln103_fu_2014_p1;

assign output_53_d0 = output_sum_1_reg_2269;

assign output_54_address0 = zext_ln103_fu_2014_p1;

assign output_54_d0 = output_sum_1_reg_2269;

assign output_55_address0 = zext_ln103_fu_2014_p1;

assign output_55_d0 = output_sum_1_reg_2269;

assign output_56_address0 = zext_ln103_fu_2014_p1;

assign output_56_d0 = output_sum_1_reg_2269;

assign output_57_address0 = zext_ln103_fu_2014_p1;

assign output_57_d0 = output_sum_1_reg_2269;

assign output_58_address0 = zext_ln103_fu_2014_p1;

assign output_58_d0 = output_sum_1_reg_2269;

assign output_59_address0 = zext_ln103_fu_2014_p1;

assign output_59_d0 = output_sum_1_reg_2269;

assign output_5_address0 = zext_ln103_fu_2014_p1;

assign output_5_d0 = output_sum_1_reg_2269;

assign output_60_address0 = zext_ln103_fu_2014_p1;

assign output_60_d0 = output_sum_1_reg_2269;

assign output_61_address0 = zext_ln103_fu_2014_p1;

assign output_61_d0 = output_sum_1_reg_2269;

assign output_62_address0 = zext_ln103_fu_2014_p1;

assign output_62_d0 = output_sum_1_reg_2269;

assign output_63_address0 = zext_ln103_fu_2014_p1;

assign output_63_d0 = output_sum_1_reg_2269;

assign output_6_address0 = zext_ln103_fu_2014_p1;

assign output_6_d0 = output_sum_1_reg_2269;

assign output_7_address0 = zext_ln103_fu_2014_p1;

assign output_7_d0 = output_sum_1_reg_2269;

assign output_8_address0 = zext_ln103_fu_2014_p1;

assign output_8_d0 = output_sum_1_reg_2269;

assign output_9_address0 = zext_ln103_fu_2014_p1;

assign output_9_d0 = output_sum_1_reg_2269;

assign output_sum_1_fu_2006_p3 = ((and_ln49_fu_2000_p2[0:0] == 1'b1) ? 32'd0 : add4115_reg_1346);

assign p_mid116_fu_1570_p2 = (select_ln67_2_reg_2120 + 6'd63);

assign p_mid132_fu_1595_p2 = (p_shl3_mid_fu_1575_p3 - p_shl4_cast_mid130_fu_1591_p1);

assign p_mid13_fu_1812_p2 = (p_shl3_mid1_fu_1792_p3 - p_shl4_cast_mid1_fu_1808_p1);

assign p_mid161_fu_1439_p0 = p_mid161_fu_1439_p00;

assign p_mid161_fu_1439_p00 = add_ln67_1_fu_1429_p2;

assign p_mid161_fu_1439_p1 = 12'd58;

assign p_mid1_fu_1777_p2 = ($signed(sext_ln81_1_fu_1773_p1) + $signed(select_ln67_2_reg_2120));

assign p_shl3_fu_1626_p3 = {{empty_68_fu_1611_p2}, {6'd0}};

assign p_shl3_mid1_fu_1792_p3 = {{p_mid1_fu_1777_p2}, {6'd0}};

assign p_shl3_mid_fu_1575_p3 = {{p_mid116_fu_1570_p2}, {6'd0}};

assign p_shl4_cast_fu_1642_p1 = p_shl4_fu_1634_p3;

assign p_shl4_cast_mid130_fu_1591_p1 = p_shl4_mid_fu_1583_p3;

assign p_shl4_cast_mid1_fu_1808_p1 = p_shl4_mid1_fu_1800_p3;

assign p_shl4_fu_1634_p3 = {{empty_68_fu_1611_p2}, {2'd0}};

assign p_shl4_mid1_fu_1800_p3 = {{p_mid1_fu_1777_p2}, {2'd0}};

assign p_shl4_mid_fu_1583_p3 = {{p_mid116_fu_1570_p2}, {2'd0}};

assign p_shl_fu_1656_p3 = {{empty_70_fu_1652_p1}, {2'd0}};

assign p_shl_mid1_fu_1822_p3 = {{empty_72_fu_1818_p1}, {2'd0}};

assign select_ln67_1_fu_1445_p3 = ((icmp_ln70_fu_1415_p2[0:0] == 1'b1) ? p_mid161_fu_1439_p2 : empty_fu_1383_p2);

assign select_ln67_2_fu_1477_p3 = ((icmp_ln70_fu_1415_p2[0:0] == 1'b1) ? add_ln67_1_fu_1429_p2 : i_reg_1246);

assign select_ln67_3_fu_1533_p3 = ((icmp_ln70_fu_1415_p2[0:0] == 1'b1) ? mul4811_mid171_fu_1453_p2 : mul4811_fu_1403_p2);

assign select_ln67_fu_1421_p3 = ((icmp_ln70_fu_1415_p2[0:0] == 1'b1) ? 6'd1 : ii_reg_1269);

assign select_ln70_fu_2093_p3 = ((icmp_ln70_reg_2115[0:0] == 1'b1) ? 12'd1 : add_ln70_1_fu_2087_p2);

assign select_ln78_1_fu_1696_p3 = ((icmp_ln81_fu_1676_p2[0:0] == 1'b1) ? xor_ln93_fu_1690_p2 : ap_phi_mux_iv_phi_fu_1306_p4);

assign select_ln78_2_fu_1708_p3 = ((icmp_ln81_fu_1676_p2[0:0] == 1'b1) ? ap_phi_mux_iv_phi_fu_1306_p4 : xor_ln93_fu_1690_p2);

assign select_ln78_3_fu_1720_p3 = ((icmp_ln81_fu_1676_p2[0:0] == 1'b1) ? 4'd0 : sub_ln92_fu_1664_p2);

assign select_ln78_4_fu_1728_p3 = ((icmp_ln81_fu_1676_p2[0:0] == 1'b1) ? p_mid132_reg_2176 : empty_69_fu_1646_p2);

assign select_ln78_fu_1682_p3 = ((icmp_ln81_fu_1676_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_1328_p4);

assign select_ln81_1_fu_1836_p3 = ((and_ln78_fu_1747_p2[0:0] == 1'b1) ? sub_ln92_1_fu_1830_p2 : select_ln78_3_fu_1720_p3);

assign select_ln81_2_fu_1844_p3 = ((and_ln78_fu_1747_p2[0:0] == 1'b1) ? p_mid13_fu_1812_p2 : select_ln78_4_fu_1728_p3);

assign select_ln81_3_fu_1857_p3 = ((and_ln78_fu_1747_p2[0:0] == 1'b1) ? indvars_iv_next37_dup_fu_1753_p2 : select_ln78_fu_1682_p3);

assign select_ln81_4_fu_1935_p3 = ((icmp_ln81_reg_2190[0:0] == 1'b1) ? 4'd1 : add_ln81_1_reg_2220);

assign select_ln81_fu_1765_p3 = ((or_ln81_fu_1759_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_1339_p4);

assign sext_ln81_1_fu_1773_p1 = indvars_iv_next37_dup_fu_1753_p2;

assign sext_ln81_fu_1607_p1 = ap_phi_mux_v_phi_fu_1328_p4;

assign sext_ln88_fu_1875_p1 = $signed(add_ln88_fu_1869_p2);

assign sext_ln93_fu_1890_p1 = empty_73_fu_1865_p1;

assign shl_ln_fu_1906_p3 = {{add_ln93_2_fu_1900_p2}, {5'd0}};

assign sub_ln92_1_fu_1830_p2 = (p_shl_mid1_fu_1822_p3 - indvars_iv_next37_cast_mid1_fu_1788_p1);

assign sub_ln92_fu_1664_p2 = (p_shl_fu_1656_p3 - indvars_iv_next37_cast_fu_1622_p1);

assign tmp_cast_fu_1399_p1 = $signed(tmp_fu_1393_p2);

assign tmp_cast_mid1_fu_1523_p1 = $signed(tmp_mid1_fu_1517_p2);

assign tmp_fu_1393_p2 = ($signed(ii_cast_fu_1389_p1) + $signed(7'd69));

assign tmp_mid1_fu_1517_p2 = ($signed(ii_cast_mid1_fu_1513_p1) + $signed(7'd69));

assign tmp_s_fu_1968_p4 = {{bitcast_ln49_fu_1964_p1[30:23]}};

assign trunc_ln49_fu_1978_p1 = bitcast_ln49_fu_1964_p1[22:0];

assign xor_ln67_fu_1459_p2 = (icmp_ln70_fu_1415_p2 ^ 1'd1);

assign xor_ln78_fu_1735_p2 = (icmp_ln81_fu_1676_p2 ^ 1'd1);

assign xor_ln93_fu_1690_p2 = (ap_phi_mux_iv_phi_fu_1306_p4 ^ 1'd1);

assign zext_ln103_fu_2014_p1 = grp_fu_1949_p2;

assign zext_ln73_1_fu_1564_p1 = iii_mid2_reg_2128;

assign zext_ln73_2_fu_1567_p1 = iii_mid2_reg_2128;

assign zext_ln73_fu_1549_p1 = iii_mid2_fu_1497_p3;

assign zext_ln78_1_fu_1716_p1 = select_ln78_2_fu_1708_p3;

assign zext_ln78_fu_1704_p1 = select_ln78_1_fu_1696_p3;

assign zext_ln88_fu_1885_p1 = add_ln88_1_fu_1879_p2;

assign zext_ln92_fu_1919_p1 = add_ln92_fu_1914_p2;

always @ (posedge ap_clk) begin
    ii_cast6_mid2_cast_reg_2151[11:6] <= 6'b000000;
    add52_mid2_reg_2156[4:0] <= 5'b00000;
    zext_ln73_1_reg_2161[8:6] <= 3'b000;
    zext_ln73_2_reg_2166[16:6] <= 11'b00000000000;
    p_mid132_reg_2176[1:0] <= 2'b00;
end

endmodule //infer_conv2d_2

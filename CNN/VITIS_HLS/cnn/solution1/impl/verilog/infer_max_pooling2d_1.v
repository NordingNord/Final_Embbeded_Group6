// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_max_pooling2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_2244_p_din0,
        grp_fu_2244_p_din1,
        grp_fu_2244_p_opcode,
        grp_fu_2244_p_dout0,
        grp_fu_2244_p_ce,
        grp_fu_2248_p_din0,
        grp_fu_2248_p_din1,
        grp_fu_2248_p_opcode,
        grp_fu_2248_p_dout0,
        grp_fu_2248_p_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [14:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_2244_p_din0;
output  [31:0] grp_fu_2244_p_din1;
output  [4:0] grp_fu_2244_p_opcode;
input  [0:0] grp_fu_2244_p_dout0;
output   grp_fu_2244_p_ce;
output  [31:0] grp_fu_2248_p_din0;
output  [31:0] grp_fu_2248_p_din1;
output  [4:0] grp_fu_2248_p_opcode;
input  [0:0] grp_fu_2248_p_dout0;
output   grp_fu_2248_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] input_r_address0;
reg input_r_ce0;
reg[14:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten55_reg_138;
reg   [4:0] i_reg_150;
reg   [9:0] indvar_flatten_reg_162;
reg   [4:0] ii_reg_174;
reg   [5:0] iii_reg_185;
reg   [31:0] reg_207;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln118_reg_979;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln118_reg_979_pp0_iter1_reg;
reg   [3:0] tmp_22_reg_964;
reg   [3:0] tmp_22_reg_964_pp0_iter1_reg;
reg   [3:0] tmp_22_reg_964_pp0_iter2_reg;
reg   [3:0] tmp_22_reg_964_pp0_iter3_reg;
wire   [9:0] zext_ln121_fu_233_p1;
reg   [9:0] zext_ln121_reg_969;
reg   [9:0] zext_ln121_reg_969_pp0_iter1_reg;
reg   [3:0] tmp_23_reg_974;
reg   [3:0] tmp_23_reg_974_pp0_iter1_reg;
reg   [3:0] tmp_23_reg_974_pp0_iter2_reg;
reg   [3:0] tmp_23_reg_974_pp0_iter3_reg;
wire   [0:0] icmp_ln118_fu_253_p2;
reg   [0:0] icmp_ln118_reg_979_pp0_iter2_reg;
reg   [0:0] icmp_ln118_reg_979_pp0_iter3_reg;
wire   [0:0] icmp_ln121_fu_259_p2;
reg   [0:0] icmp_ln121_reg_983;
reg   [0:0] icmp_ln121_reg_983_pp0_iter1_reg;
reg   [0:0] icmp_ln121_reg_983_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_983_pp0_iter3_reg;
wire   [4:0] select_ln118_fu_265_p3;
reg   [4:0] select_ln118_reg_993;
wire   [4:0] add_ln11861_fu_273_p2;
reg   [4:0] add_ln11861_reg_998;
reg   [4:0] add_ln11861_reg_998_pp0_iter1_reg;
reg   [3:0] p_mid_reg_1004;
reg   [3:0] p_mid_reg_1004_pp0_iter1_reg;
reg   [3:0] p_mid_reg_1004_pp0_iter2_reg;
reg   [3:0] p_mid_reg_1004_pp0_iter3_reg;
wire   [0:0] and_ln118_fu_327_p2;
reg   [0:0] and_ln118_reg_1009;
reg   [0:0] and_ln118_reg_1009_pp0_iter1_reg;
reg   [0:0] and_ln118_reg_1009_pp0_iter2_reg;
reg   [0:0] and_ln118_reg_1009_pp0_iter3_reg;
wire   [4:0] add_ln121_fu_333_p2;
reg   [4:0] add_ln121_reg_1016;
reg   [4:0] add_ln121_reg_1016_pp0_iter1_reg;
reg   [4:0] add_ln121_reg_1016_pp0_iter2_reg;
reg   [4:0] add_ln121_reg_1016_pp0_iter3_reg;
wire   [5:0] select_ln121_fu_345_p3;
reg   [5:0] select_ln121_reg_1022;
reg   [5:0] select_ln121_reg_1022_pp0_iter1_reg;
reg   [5:0] select_ln121_reg_1022_pp0_iter2_reg;
reg   [5:0] select_ln121_reg_1022_pp0_iter3_reg;
wire   [9:0] zext_ln121_2_fu_353_p1;
reg   [9:0] zext_ln121_2_reg_1028;
reg   [9:0] zext_ln121_2_reg_1028_pp0_iter1_reg;
wire   [14:0] iii_cast_fu_385_p1;
reg   [14:0] iii_cast_reg_1033;
reg   [14:0] iii_cast_reg_1033_pp0_iter1_reg;
wire   [12:0] add_ln118_fu_423_p2;
reg   [12:0] add_ln118_reg_1049;
wire   [4:0] empty_34_fu_429_p2;
reg   [4:0] empty_34_reg_1054;
wire   [4:0] select_ln118_13_fu_435_p3;
reg   [4:0] select_ln118_13_reg_1059;
wire   [4:0] select_ln121_9_fu_441_p3;
reg   [4:0] select_ln121_9_reg_1064;
reg   [31:0] input_load_4_reg_1069;
wire   [5:0] add_ln124_fu_446_p2;
reg   [5:0] add_ln124_reg_1076;
wire   [9:0] select_ln121_10_fu_457_p3;
reg   [9:0] select_ln121_10_reg_1081;
wire   [9:0] empty_35_fu_467_p2;
reg   [9:0] empty_35_reg_1086;
wire   [31:0] select_ln134_fu_515_p3;
reg   [31:0] select_ln134_reg_1092;
wire   [31:0] select_ln134_4_fu_672_p3;
reg   [31:0] select_ln134_4_reg_1099;
wire   [14:0] add_ln133_11_fu_688_p2;
reg   [14:0] add_ln133_11_reg_1111;
wire   [31:0] select_ln134_5_fu_776_p3;
reg   [31:0] select_ln134_5_reg_1116;
reg   [31:0] select_ln134_5_reg_1116_pp0_iter3_reg;
reg   [31:0] input_load_6_reg_1128;
reg    ap_enable_reg_pp0_iter3;
wire   [12:0] add_ln140_fu_865_p2;
reg   [12:0] add_ln140_reg_1135;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter3_state9;
reg    ap_enable_reg_pp0_iter4;
reg   [12:0] ap_phi_mux_indvar_flatten55_phi_fu_142_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_i_phi_fu_154_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_166_p4;
reg   [4:0] ap_phi_mux_ii_phi_fu_178_p4;
reg   [5:0] ap_phi_mux_iii_phi_fu_189_p4;
wire   [63:0] zext_ln133_fu_407_p1;
wire   [63:0] zext_ln133_4_fu_418_p1;
wire   [63:0] zext_ln133_5_fu_683_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln133_6_fu_783_p1;
wire   [63:0] zext_ln140_fu_960_p1;
reg   [31:0] grp_fu_196_p0;
reg   [31:0] grp_fu_196_p1;
reg   [31:0] grp_fu_202_p0;
reg   [31:0] grp_fu_202_p1;
wire   [4:0] empty_fu_227_p0;
wire   [5:0] empty_fu_227_p1;
wire   [9:0] empty_fu_227_p2;
wire   [4:0] p_mid115_fu_293_p0;
wire   [5:0] p_mid115_fu_293_p1;
wire   [9:0] p_mid115_fu_293_p2;
wire   [9:0] add_ln133_fu_247_p2;
wire   [0:0] icmp_ln124_fu_321_p2;
wire   [0:0] xor_ln118_fu_315_p2;
wire   [0:0] or_ln121_fu_339_p2;
wire   [9:0] select_ln118_9_fu_299_p3;
wire   [9:0] add_ln133_9_fu_357_p2;
wire   [9:0] select_ln118_11_fu_307_p3;
wire   [9:0] select_ln121_7_fu_363_p3;
wire   [9:0] or_ln121_3_fu_371_p2;
wire   [8:0] tmp_fu_389_p4;
wire   [14:0] add_ln133_7_fu_399_p3;
wire   [14:0] shl_ln133_mid2_fu_377_p3;
wire   [14:0] add_ln133_8_fu_412_p2;
wire   [9:0] add_ln121_3_fu_451_p2;
wire   [4:0] empty_35_fu_467_p0;
wire   [5:0] empty_35_fu_467_p1;
wire   [31:0] bitcast_ln134_fu_473_p1;
wire   [7:0] tmp_s_fu_477_p4;
wire   [22:0] trunc_ln134_fu_487_p1;
wire   [0:0] icmp_ln134_14_fu_497_p2;
wire   [0:0] icmp_ln134_fu_491_p2;
wire   [0:0] or_ln134_fu_503_p2;
wire   [0:0] grp_fu_196_p2;
wire   [0:0] and_ln134_fu_509_p2;
wire   [4:0] p_mid117_fu_528_p2;
wire   [4:0] p_mid119_fu_537_p0;
wire   [5:0] p_mid119_fu_537_p1;
wire   [9:0] p_mid119_fu_537_p2;
wire   [9:0] add_ln133_6_fu_524_p2;
wire   [9:0] select_ln118_10_fu_543_p3;
wire   [9:0] add_ln133_12_fu_556_p2;
wire   [9:0] select_ln118_12_fu_549_p3;
wire   [9:0] select_ln121_8_fu_561_p3;
wire   [9:0] add_ln121_2_fu_576_p2;
wire   [31:0] bitcast_ln134_7_fu_590_p1;
wire   [31:0] bitcast_ln134_8_fu_607_p1;
wire   [7:0] tmp_13_fu_593_p4;
wire   [22:0] trunc_ln134_7_fu_603_p1;
wire   [0:0] icmp_ln134_16_fu_630_p2;
wire   [0:0] icmp_ln134_15_fu_624_p2;
wire   [7:0] tmp_14_fu_610_p4;
wire   [22:0] trunc_ln134_8_fu_620_p1;
wire   [0:0] icmp_ln134_18_fu_648_p2;
wire   [0:0] icmp_ln134_17_fu_642_p2;
wire   [0:0] or_ln134_7_fu_636_p2;
wire   [0:0] or_ln134_8_fu_654_p2;
wire   [0:0] and_ln134_7_fu_660_p2;
wire   [0:0] and_ln134_8_fu_666_p2;
wire   [14:0] shl_ln133_2_mid2_fu_568_p3;
wire   [14:0] add_ln133_10_fu_678_p2;
wire   [14:0] shl_ln133_3_mid2_fu_582_p3;
wire   [31:0] bitcast_ln134_9_fu_693_p1;
wire   [31:0] bitcast_ln134_10_fu_711_p1;
wire   [7:0] tmp_16_fu_697_p4;
wire   [22:0] trunc_ln134_9_fu_707_p1;
wire   [0:0] icmp_ln134_20_fu_734_p2;
wire   [0:0] icmp_ln134_19_fu_728_p2;
wire   [7:0] tmp_17_fu_714_p4;
wire   [22:0] trunc_ln134_10_fu_724_p1;
wire   [0:0] icmp_ln134_22_fu_752_p2;
wire   [0:0] icmp_ln134_21_fu_746_p2;
wire   [0:0] or_ln134_9_fu_740_p2;
wire   [0:0] or_ln134_10_fu_758_p2;
wire   [0:0] and_ln134_9_fu_764_p2;
wire   [0:0] grp_fu_202_p2;
wire   [0:0] and_ln134_10_fu_770_p2;
wire   [3:0] mul20_fu_790_p0;
wire   [4:0] mul20_fu_790_p1;
wire   [7:0] p_cast3_cast_fu_796_p1;
wire   [7:0] mul20_fu_790_p2;
wire   [3:0] mul20_mid1_fu_808_p0;
wire   [4:0] mul20_mid1_fu_808_p1;
wire   [7:0] mul20_mid1_fu_808_p2;
wire   [3:0] p_mid1_fu_821_p4;
wire   [7:0] p_cast3_cast_mid1_fu_830_p1;
wire   [7:0] select_ln118_8_fu_814_p3;
wire   [7:0] mul221_fu_799_p2;
wire   [7:0] mul221_mid1_fu_834_p2;
wire   [7:0] select_ln118_14_fu_840_p3;
wire   [7:0] select_ln121_6_fu_847_p3;
wire   [12:0] iii_cast5_fu_862_p1;
wire   [12:0] add26_mid2_fu_854_p3;
wire   [31:0] bitcast_ln134_11_fu_871_p1;
wire   [31:0] bitcast_ln134_12_fu_888_p1;
wire   [7:0] tmp_19_fu_874_p4;
wire   [22:0] trunc_ln134_11_fu_884_p1;
wire   [0:0] icmp_ln134_24_fu_911_p2;
wire   [0:0] icmp_ln134_23_fu_905_p2;
wire   [7:0] tmp_20_fu_891_p4;
wire   [22:0] trunc_ln134_12_fu_901_p1;
wire   [0:0] icmp_ln134_26_fu_929_p2;
wire   [0:0] icmp_ln134_25_fu_923_p2;
wire   [0:0] or_ln134_11_fu_917_p2;
wire   [0:0] or_ln134_12_fu_935_p2;
wire   [0:0] and_ln134_11_fu_941_p2;
wire   [0:0] and_ln134_12_fu_947_p2;
wire    grp_fu_196_ce;
wire   [4:0] grp_fu_196_opcode;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    grp_fu_202_ce;
wire   [4:0] grp_fu_202_opcode;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] empty_35_fu_467_p00;
wire   [9:0] empty_fu_227_p00;
wire   [7:0] mul20_fu_790_p00;
wire   [7:0] mul20_mid1_fu_808_p00;
wire   [9:0] p_mid115_fu_293_p00;
wire   [9:0] p_mid119_fu_537_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

infer_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U38(
    .din0(empty_fu_227_p0),
    .din1(empty_fu_227_p1),
    .dout(empty_fu_227_p2)
);

infer_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U39(
    .din0(p_mid115_fu_293_p0),
    .din1(p_mid115_fu_293_p1),
    .dout(p_mid115_fu_293_p2)
);

infer_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U40(
    .din0(empty_35_fu_467_p0),
    .din1(empty_35_fu_467_p1),
    .dout(empty_35_fu_467_p2)
);

infer_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U41(
    .din0(p_mid119_fu_537_p0),
    .din1(p_mid119_fu_537_p1),
    .dout(p_mid119_fu_537_p2)
);

infer_mul_4ns_5ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mul_4ns_5ns_8_1_1_U42(
    .din0(mul20_fu_790_p0),
    .din1(mul20_fu_790_p1),
    .dout(mul20_fu_790_p2)
);

infer_mul_4ns_5ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mul_4ns_5ns_8_1_1_U43(
    .din0(mul20_mid1_fu_808_p0),
    .din1(mul20_mid1_fu_808_p1),
    .dout(mul20_mid1_fu_808_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter3_state9)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter3_state9))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_150 <= select_ln118_13_reg_1059;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_150 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_reg_174 <= select_ln121_9_reg_1064;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_174 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iii_reg_185 <= add_ln124_reg_1076;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_185 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten55_reg_138 <= add_ln118_reg_1049;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten55_reg_138 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_162 <= select_ln121_10_reg_1081;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_162 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_fu_253_p2 == 1'd0))) begin
        add_ln11861_reg_998 <= add_ln11861_fu_273_p2;
        add_ln121_reg_1016 <= add_ln121_fu_333_p2;
        and_ln118_reg_1009 <= and_ln118_fu_327_p2;
        icmp_ln121_reg_983 <= icmp_ln121_fu_259_p2;
        iii_cast_reg_1033[5 : 0] <= iii_cast_fu_385_p1[5 : 0];
        p_mid_reg_1004 <= {{add_ln11861_fu_273_p2[4:1]}};
        select_ln118_reg_993 <= select_ln118_fu_265_p3;
        select_ln121_reg_1022 <= select_ln121_fu_345_p3;
        zext_ln121_2_reg_1028[4 : 0] <= zext_ln121_2_fu_353_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln11861_reg_998_pp0_iter1_reg <= add_ln11861_reg_998;
        add_ln121_reg_1016_pp0_iter1_reg <= add_ln121_reg_1016;
        add_ln121_reg_1016_pp0_iter2_reg <= add_ln121_reg_1016_pp0_iter1_reg;
        add_ln121_reg_1016_pp0_iter3_reg <= add_ln121_reg_1016_pp0_iter2_reg;
        and_ln118_reg_1009_pp0_iter1_reg <= and_ln118_reg_1009;
        and_ln118_reg_1009_pp0_iter2_reg <= and_ln118_reg_1009_pp0_iter1_reg;
        and_ln118_reg_1009_pp0_iter3_reg <= and_ln118_reg_1009_pp0_iter2_reg;
        empty_35_reg_1086 <= empty_35_fu_467_p2;
        icmp_ln118_reg_979 <= icmp_ln118_fu_253_p2;
        icmp_ln118_reg_979_pp0_iter1_reg <= icmp_ln118_reg_979;
        icmp_ln118_reg_979_pp0_iter2_reg <= icmp_ln118_reg_979_pp0_iter1_reg;
        icmp_ln118_reg_979_pp0_iter3_reg <= icmp_ln118_reg_979_pp0_iter2_reg;
        icmp_ln121_reg_983_pp0_iter1_reg <= icmp_ln121_reg_983;
        icmp_ln121_reg_983_pp0_iter2_reg <= icmp_ln121_reg_983_pp0_iter1_reg;
        icmp_ln121_reg_983_pp0_iter3_reg <= icmp_ln121_reg_983_pp0_iter2_reg;
        iii_cast_reg_1033_pp0_iter1_reg[5 : 0] <= iii_cast_reg_1033[5 : 0];
        p_mid_reg_1004_pp0_iter1_reg <= p_mid_reg_1004;
        p_mid_reg_1004_pp0_iter2_reg <= p_mid_reg_1004_pp0_iter1_reg;
        p_mid_reg_1004_pp0_iter3_reg <= p_mid_reg_1004_pp0_iter2_reg;
        select_ln121_reg_1022_pp0_iter1_reg <= select_ln121_reg_1022;
        select_ln121_reg_1022_pp0_iter2_reg <= select_ln121_reg_1022_pp0_iter1_reg;
        select_ln121_reg_1022_pp0_iter3_reg <= select_ln121_reg_1022_pp0_iter2_reg;
        tmp_22_reg_964 <= {{ap_phi_mux_i_phi_fu_154_p4[4:1]}};
        tmp_22_reg_964_pp0_iter1_reg <= tmp_22_reg_964;
        tmp_22_reg_964_pp0_iter2_reg <= tmp_22_reg_964_pp0_iter1_reg;
        tmp_22_reg_964_pp0_iter3_reg <= tmp_22_reg_964_pp0_iter2_reg;
        tmp_23_reg_974 <= {{ap_phi_mux_ii_phi_fu_178_p4[4:1]}};
        tmp_23_reg_974_pp0_iter1_reg <= tmp_23_reg_974;
        tmp_23_reg_974_pp0_iter2_reg <= tmp_23_reg_974_pp0_iter1_reg;
        tmp_23_reg_974_pp0_iter3_reg <= tmp_23_reg_974_pp0_iter2_reg;
        zext_ln121_2_reg_1028_pp0_iter1_reg[4 : 0] <= zext_ln121_2_reg_1028[4 : 0];
        zext_ln121_reg_969[4 : 0] <= zext_ln121_fu_233_p1[4 : 0];
        zext_ln121_reg_969_pp0_iter1_reg[4 : 0] <= zext_ln121_reg_969[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln118_reg_1049 <= add_ln118_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln124_reg_1076 <= add_ln124_fu_446_p2;
        input_load_4_reg_1069 <= input_r_q0;
        select_ln118_13_reg_1059 <= select_ln118_13_fu_435_p3;
        select_ln121_10_reg_1081 <= select_ln121_10_fu_457_p3;
        select_ln121_9_reg_1064 <= select_ln121_9_fu_441_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln133_11_reg_1111 <= add_ln133_11_fu_688_p2;
        select_ln134_4_reg_1099 <= select_ln134_4_fu_672_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln118_reg_979_pp0_iter3_reg == 1'd0))) begin
        add_ln140_reg_1135 <= add_ln140_fu_865_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_34_reg_1054[4 : 1] <= empty_34_fu_429_p2[4 : 1];
        select_ln134_5_reg_1116_pp0_iter3_reg <= select_ln134_5_reg_1116;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_979_pp0_iter2_reg == 1'd0))) begin
        input_load_6_reg_1128 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln118_reg_979_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_207 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln118_reg_979_pp0_iter2_reg == 1'd0))) begin
        select_ln134_5_reg_1116 <= select_ln134_5_fu_776_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln134_reg_1092 <= select_ln134_fu_515_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_pp0_exit_iter3_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_979 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_154_p4 = select_ln118_13_reg_1059;
    end else begin
        ap_phi_mux_i_phi_fu_154_p4 = i_reg_150;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ii_phi_fu_178_p4 = select_ln121_9_reg_1064;
    end else begin
        ap_phi_mux_ii_phi_fu_178_p4 = ii_reg_174;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_iii_phi_fu_189_p4 = add_ln124_reg_1076;
    end else begin
        ap_phi_mux_iii_phi_fu_189_p4 = iii_reg_185;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten55_phi_fu_142_p4 = add_ln118_reg_1049;
    end else begin
        ap_phi_mux_indvar_flatten55_phi_fu_142_p4 = indvar_flatten55_reg_138;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_979 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = select_ln121_10_reg_1081;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = indvar_flatten_reg_162;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_196_p0 = input_load_4_reg_1069;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_196_p0 = input_r_q1;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_196_p1 = select_ln134_fu_515_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_196_p1 = 32'd0;
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_202_p0 = input_load_6_reg_1128;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_202_p0 = input_r_q1;
    end else begin
        grp_fu_202_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_202_p1 = select_ln134_5_reg_1116;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_202_p1 = select_ln134_4_reg_1099;
    end else begin
        grp_fu_202_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln133_6_fu_783_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln133_4_fu_418_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address1 = zext_ln133_5_fu_683_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln133_fu_407_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_reg_979_pp0_iter3_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add26_mid2_fu_854_p3 = {{select_ln121_6_fu_847_p3}, {5'd0}};

assign add_ln11861_fu_273_p2 = (ap_phi_mux_i_phi_fu_154_p4 + 5'd2);

assign add_ln118_fu_423_p2 = (indvar_flatten55_reg_138 + 13'd1);

assign add_ln121_2_fu_576_p2 = (select_ln121_8_fu_561_p3 + 10'd1);

assign add_ln121_3_fu_451_p2 = (indvar_flatten_reg_162 + 10'd1);

assign add_ln121_fu_333_p2 = (select_ln118_fu_265_p3 + 5'd2);

assign add_ln124_fu_446_p2 = (select_ln121_reg_1022 + 6'd1);

assign add_ln133_10_fu_678_p2 = (shl_ln133_2_mid2_fu_568_p3 + iii_cast_reg_1033_pp0_iter1_reg);

assign add_ln133_11_fu_688_p2 = (shl_ln133_3_mid2_fu_582_p3 + iii_cast_reg_1033_pp0_iter1_reg);

assign add_ln133_12_fu_556_p2 = (select_ln118_10_fu_543_p3 + zext_ln121_2_reg_1028_pp0_iter1_reg);

assign add_ln133_6_fu_524_p2 = (empty_35_reg_1086 + zext_ln121_reg_969_pp0_iter1_reg);

assign add_ln133_7_fu_399_p3 = {{tmp_fu_389_p4}, {select_ln121_fu_345_p3}};

assign add_ln133_8_fu_412_p2 = (shl_ln133_mid2_fu_377_p3 + iii_cast_fu_385_p1);

assign add_ln133_9_fu_357_p2 = (select_ln118_9_fu_299_p3 + zext_ln121_2_fu_353_p1);

assign add_ln133_fu_247_p2 = (empty_fu_227_p2 + zext_ln121_fu_233_p1);

assign add_ln140_fu_865_p2 = (iii_cast5_fu_862_p1 + add26_mid2_fu_854_p3);

assign and_ln118_fu_327_p2 = (xor_ln118_fu_315_p2 & icmp_ln124_fu_321_p2);

assign and_ln134_10_fu_770_p2 = (grp_fu_2248_p_dout0 & and_ln134_9_fu_764_p2);

assign and_ln134_11_fu_941_p2 = (or_ln134_12_fu_935_p2 & or_ln134_11_fu_917_p2);

assign and_ln134_12_fu_947_p2 = (grp_fu_2248_p_dout0 & and_ln134_11_fu_941_p2);

assign and_ln134_7_fu_660_p2 = (or_ln134_8_fu_654_p2 & or_ln134_7_fu_636_p2);

assign and_ln134_8_fu_666_p2 = (grp_fu_2244_p_dout0 & and_ln134_7_fu_660_p2);

assign and_ln134_9_fu_764_p2 = (or_ln134_9_fu_740_p2 & or_ln134_10_fu_758_p2);

assign and_ln134_fu_509_p2 = (or_ln134_fu_503_p2 & grp_fu_2244_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln134_10_fu_711_p1 = select_ln134_4_reg_1099;

assign bitcast_ln134_11_fu_871_p1 = input_load_6_reg_1128;

assign bitcast_ln134_12_fu_888_p1 = select_ln134_5_reg_1116_pp0_iter3_reg;

assign bitcast_ln134_7_fu_590_p1 = input_load_4_reg_1069;

assign bitcast_ln134_8_fu_607_p1 = select_ln134_reg_1092;

assign bitcast_ln134_9_fu_693_p1 = reg_207;

assign bitcast_ln134_fu_473_p1 = reg_207;

assign empty_34_fu_429_p2 = (i_reg_150 | 5'd1);

assign empty_35_fu_467_p0 = empty_35_fu_467_p00;

assign empty_35_fu_467_p00 = empty_34_reg_1054;

assign empty_35_fu_467_p1 = 10'd27;

assign empty_fu_227_p0 = empty_fu_227_p00;

assign empty_fu_227_p00 = ap_phi_mux_i_phi_fu_154_p4;

assign empty_fu_227_p1 = 10'd27;

assign grp_fu_196_ce = 1'b1;

assign grp_fu_196_opcode = 5'd2;

assign grp_fu_196_p2 = grp_fu_2244_p_dout0;

assign grp_fu_202_ce = 1'b1;

assign grp_fu_202_opcode = 5'd2;

assign grp_fu_202_p2 = grp_fu_2248_p_dout0;

assign grp_fu_2244_p_ce = 1'b1;

assign grp_fu_2244_p_din0 = grp_fu_196_p0;

assign grp_fu_2244_p_din1 = grp_fu_196_p1;

assign grp_fu_2244_p_opcode = 5'd2;

assign grp_fu_2248_p_ce = 1'b1;

assign grp_fu_2248_p_din0 = grp_fu_202_p0;

assign grp_fu_2248_p_din1 = grp_fu_202_p1;

assign grp_fu_2248_p_opcode = 5'd2;

assign icmp_ln118_fu_253_p2 = ((ap_phi_mux_indvar_flatten55_phi_fu_142_p4 == 13'd5408) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_259_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_166_p4 == 10'd416) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_321_p2 = ((ap_phi_mux_iii_phi_fu_189_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln134_14_fu_497_p2 = ((trunc_ln134_fu_487_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_15_fu_624_p2 = ((tmp_13_fu_593_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_16_fu_630_p2 = ((trunc_ln134_7_fu_603_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_17_fu_642_p2 = ((tmp_14_fu_610_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_18_fu_648_p2 = ((trunc_ln134_8_fu_620_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_19_fu_728_p2 = ((tmp_16_fu_697_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_20_fu_734_p2 = ((trunc_ln134_9_fu_707_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_21_fu_746_p2 = ((tmp_17_fu_714_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_22_fu_752_p2 = ((trunc_ln134_10_fu_724_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_23_fu_905_p2 = ((tmp_19_fu_874_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_24_fu_911_p2 = ((trunc_ln134_11_fu_884_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_25_fu_923_p2 = ((tmp_20_fu_891_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln134_26_fu_929_p2 = ((trunc_ln134_12_fu_901_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_491_p2 = ((tmp_s_fu_477_p4 != 8'd255) ? 1'b1 : 1'b0);

assign iii_cast5_fu_862_p1 = select_ln121_reg_1022_pp0_iter3_reg;

assign iii_cast_fu_385_p1 = select_ln121_fu_345_p3;

assign mul20_fu_790_p0 = mul20_fu_790_p00;

assign mul20_fu_790_p00 = tmp_22_reg_964_pp0_iter3_reg;

assign mul20_fu_790_p1 = 8'd13;

assign mul20_mid1_fu_808_p0 = mul20_mid1_fu_808_p00;

assign mul20_mid1_fu_808_p00 = p_mid_reg_1004_pp0_iter3_reg;

assign mul20_mid1_fu_808_p1 = 8'd13;

assign mul221_fu_799_p2 = (p_cast3_cast_fu_796_p1 + mul20_fu_790_p2);

assign mul221_mid1_fu_834_p2 = (p_cast3_cast_mid1_fu_830_p1 + select_ln118_8_fu_814_p3);

assign or_ln121_3_fu_371_p2 = (select_ln121_7_fu_363_p3 | 10'd1);

assign or_ln121_fu_339_p2 = (icmp_ln121_fu_259_p2 | and_ln118_fu_327_p2);

assign or_ln134_10_fu_758_p2 = (icmp_ln134_22_fu_752_p2 | icmp_ln134_21_fu_746_p2);

assign or_ln134_11_fu_917_p2 = (icmp_ln134_24_fu_911_p2 | icmp_ln134_23_fu_905_p2);

assign or_ln134_12_fu_935_p2 = (icmp_ln134_26_fu_929_p2 | icmp_ln134_25_fu_923_p2);

assign or_ln134_7_fu_636_p2 = (icmp_ln134_16_fu_630_p2 | icmp_ln134_15_fu_624_p2);

assign or_ln134_8_fu_654_p2 = (icmp_ln134_18_fu_648_p2 | icmp_ln134_17_fu_642_p2);

assign or_ln134_9_fu_740_p2 = (icmp_ln134_20_fu_734_p2 | icmp_ln134_19_fu_728_p2);

assign or_ln134_fu_503_p2 = (icmp_ln134_fu_491_p2 | icmp_ln134_14_fu_497_p2);

assign output_r_address0 = zext_ln140_fu_960_p1;

assign output_r_d0 = ((and_ln134_12_fu_947_p2[0:0] == 1'b1) ? input_load_6_reg_1128 : select_ln134_5_reg_1116_pp0_iter3_reg);

assign p_cast3_cast_fu_796_p1 = tmp_23_reg_974_pp0_iter3_reg;

assign p_cast3_cast_mid1_fu_830_p1 = p_mid1_fu_821_p4;

assign p_mid115_fu_293_p0 = p_mid115_fu_293_p00;

assign p_mid115_fu_293_p00 = add_ln11861_fu_273_p2;

assign p_mid115_fu_293_p1 = 10'd27;

assign p_mid117_fu_528_p2 = (5'd1 | add_ln11861_reg_998_pp0_iter1_reg);

assign p_mid119_fu_537_p0 = p_mid119_fu_537_p00;

assign p_mid119_fu_537_p00 = p_mid117_fu_528_p2;

assign p_mid119_fu_537_p1 = 10'd27;

assign p_mid1_fu_821_p4 = {{add_ln121_reg_1016_pp0_iter3_reg[4:1]}};

assign select_ln118_10_fu_543_p3 = ((icmp_ln121_reg_983_pp0_iter1_reg[0:0] == 1'b1) ? p_mid119_fu_537_p2 : empty_35_reg_1086);

assign select_ln118_11_fu_307_p3 = ((icmp_ln121_fu_259_p2[0:0] == 1'b1) ? p_mid115_fu_293_p2 : add_ln133_fu_247_p2);

assign select_ln118_12_fu_549_p3 = ((icmp_ln121_reg_983_pp0_iter1_reg[0:0] == 1'b1) ? p_mid119_fu_537_p2 : add_ln133_6_fu_524_p2);

assign select_ln118_13_fu_435_p3 = ((icmp_ln121_reg_983[0:0] == 1'b1) ? add_ln11861_reg_998 : i_reg_150);

assign select_ln118_14_fu_840_p3 = ((icmp_ln121_reg_983_pp0_iter3_reg[0:0] == 1'b1) ? mul20_mid1_fu_808_p2 : mul221_fu_799_p2);

assign select_ln118_8_fu_814_p3 = ((icmp_ln121_reg_983_pp0_iter3_reg[0:0] == 1'b1) ? mul20_mid1_fu_808_p2 : mul20_fu_790_p2);

assign select_ln118_9_fu_299_p3 = ((icmp_ln121_fu_259_p2[0:0] == 1'b1) ? p_mid115_fu_293_p2 : empty_fu_227_p2);

assign select_ln118_fu_265_p3 = ((icmp_ln121_fu_259_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_ii_phi_fu_178_p4);

assign select_ln121_10_fu_457_p3 = ((icmp_ln121_reg_983[0:0] == 1'b1) ? 10'd1 : add_ln121_3_fu_451_p2);

assign select_ln121_6_fu_847_p3 = ((and_ln118_reg_1009_pp0_iter3_reg[0:0] == 1'b1) ? mul221_mid1_fu_834_p2 : select_ln118_14_fu_840_p3);

assign select_ln121_7_fu_363_p3 = ((and_ln118_fu_327_p2[0:0] == 1'b1) ? add_ln133_9_fu_357_p2 : select_ln118_11_fu_307_p3);

assign select_ln121_8_fu_561_p3 = ((and_ln118_reg_1009_pp0_iter1_reg[0:0] == 1'b1) ? add_ln133_12_fu_556_p2 : select_ln118_12_fu_549_p3);

assign select_ln121_9_fu_441_p3 = ((and_ln118_reg_1009[0:0] == 1'b1) ? add_ln121_reg_1016 : select_ln118_reg_993);

assign select_ln121_fu_345_p3 = ((or_ln121_fu_339_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_iii_phi_fu_189_p4);

assign select_ln134_4_fu_672_p3 = ((and_ln134_8_fu_666_p2[0:0] == 1'b1) ? input_load_4_reg_1069 : select_ln134_reg_1092);

assign select_ln134_5_fu_776_p3 = ((and_ln134_10_fu_770_p2[0:0] == 1'b1) ? reg_207 : select_ln134_4_reg_1099);

assign select_ln134_fu_515_p3 = ((and_ln134_fu_509_p2[0:0] == 1'b1) ? reg_207 : 32'd0);

assign shl_ln133_2_mid2_fu_568_p3 = {{select_ln121_8_fu_561_p3}, {5'd0}};

assign shl_ln133_3_mid2_fu_582_p3 = {{add_ln121_2_fu_576_p2}, {5'd0}};

assign shl_ln133_mid2_fu_377_p3 = {{or_ln121_3_fu_371_p2}, {5'd0}};

assign tmp_13_fu_593_p4 = {{bitcast_ln134_7_fu_590_p1[30:23]}};

assign tmp_14_fu_610_p4 = {{bitcast_ln134_8_fu_607_p1[30:23]}};

assign tmp_16_fu_697_p4 = {{bitcast_ln134_9_fu_693_p1[30:23]}};

assign tmp_17_fu_714_p4 = {{bitcast_ln134_10_fu_711_p1[30:23]}};

assign tmp_19_fu_874_p4 = {{bitcast_ln134_11_fu_871_p1[30:23]}};

assign tmp_20_fu_891_p4 = {{bitcast_ln134_12_fu_888_p1[30:23]}};

assign tmp_fu_389_p4 = {{select_ln121_7_fu_363_p3[9:1]}};

assign tmp_s_fu_477_p4 = {{bitcast_ln134_fu_473_p1[30:23]}};

assign trunc_ln134_10_fu_724_p1 = bitcast_ln134_10_fu_711_p1[22:0];

assign trunc_ln134_11_fu_884_p1 = bitcast_ln134_11_fu_871_p1[22:0];

assign trunc_ln134_12_fu_901_p1 = bitcast_ln134_12_fu_888_p1[22:0];

assign trunc_ln134_7_fu_603_p1 = bitcast_ln134_7_fu_590_p1[22:0];

assign trunc_ln134_8_fu_620_p1 = bitcast_ln134_8_fu_607_p1[22:0];

assign trunc_ln134_9_fu_707_p1 = bitcast_ln134_9_fu_693_p1[22:0];

assign trunc_ln134_fu_487_p1 = bitcast_ln134_fu_473_p1[22:0];

assign xor_ln118_fu_315_p2 = (icmp_ln121_fu_259_p2 ^ 1'd1);

assign zext_ln121_2_fu_353_p1 = add_ln121_fu_333_p2;

assign zext_ln121_fu_233_p1 = ap_phi_mux_ii_phi_fu_178_p4;

assign zext_ln133_4_fu_418_p1 = add_ln133_8_fu_412_p2;

assign zext_ln133_5_fu_683_p1 = add_ln133_10_fu_678_p2;

assign zext_ln133_6_fu_783_p1 = add_ln133_11_reg_1111;

assign zext_ln133_fu_407_p1 = add_ln133_7_fu_399_p3;

assign zext_ln140_fu_960_p1 = add_ln140_reg_1135;

always @ (posedge ap_clk) begin
    zext_ln121_reg_969[9:5] <= 5'b00000;
    zext_ln121_reg_969_pp0_iter1_reg[9:5] <= 5'b00000;
    zext_ln121_2_reg_1028[9:5] <= 5'b00000;
    zext_ln121_2_reg_1028_pp0_iter1_reg[9:5] <= 5'b00000;
    iii_cast_reg_1033[14:6] <= 9'b000000000;
    iii_cast_reg_1033_pp0_iter1_reg[14:6] <= 9'b000000000;
    empty_34_reg_1054[0] <= 1'b1;
end

endmodule //infer_max_pooling2d_1

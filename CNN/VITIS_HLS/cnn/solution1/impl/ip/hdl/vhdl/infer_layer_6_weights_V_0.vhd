-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_0_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111011001000", 1 => "1111100100101000", 2 => "0001000001011111", 
    3 => "0000101001111111", 4 => "1111100011000110", 5 => "0000001110010011", 
    6 => "0000011010111100", 7 => "0001011111000001", 8 => "0001010010010011", 
    9 => "1111110101011000", 10 => "1110110110001100", 11 => "1111000000000110", 
    12 => "1111010000001111", 13 => "0000001110101010", 14 => "1111110111011001", 
    15 => "1110100110101111", 16 => "1111000100000100", 17 => "0000111111101111", 
    18 => "1110011101100010", 19 => "0000011111010110", 20 => "1111000111111110", 
    21 => "0000100110000001", 22 => "0001011111100000", 23 => "0001010010011100", 
    24 => "0000111111101101", 25 => "0000110101011100", 26 => "1110101001110100", 
    27 => "1110100011100010", 28 => "0001001100011100", 29 => "1111100110011000", 
    30 => "1110111010000010", 31 => "1111010111101000", 32 => "1111100001001000", 
    33 => "0001000101000010", 34 => "0001000001010100", 35 => "0000111010010101", 
    36 => "1110110101011110", 37 => "0000001001001111", 38 => "0000000101100111", 
    39 => "1111010111011010", 40 => "1111011100111100", 41 => "1110101100000000", 
    42 => "0000010010011110", 43 => "0001000100100111", 44 => "0000000111101010", 
    45 => "1111100110101100", 46 => "1110110110101101", 47 => "1110100011010110", 
    48 => "1111110011010011", 49 => "1110111000000011", 50 => "1111110001010110", 
    51 => "1111000011110000", 52 => "1111001111011110", 53 => "0000000011110111", 
    54 => "0001001011110110", 55 => "1111000101011110", 56 => "0000001100011000", 
    57 => "1111011110010011", 58 => "0000010001011100", 59 => "1111111011111000", 
    60 => "1111011010010001", 61 => "1111101110110110", 62 => "0001010001010101", 
    63 => "1111110101110011", 64 => "0001010111100110", 65 => "0000110111010101", 
    66 => "0000011100100011", 67 => "1111110010111001", 68 => "1111101001111001", 
    69 => "1110101101000011", 70 => "1111110010101011", 71 => "0001011111100001", 
    72 => "0000010010101001", 73 => "1111110010100001", 74 => "0001010001100010", 
    75 => "1111111110001010", 76 => "0001001101101001", 77 => "1110111011101001", 
    78 => "0001010111001000", 79 => "1111111110001010", 80 => "1111011000110010", 
    81 => "0001010010101010", 82 => "0000001000110100", 83 => "1111001101000000", 
    84 => "0000000111100101", 85 => "1110011110101111", 86 => "1111011100000101", 
    87 => "1111111000110111", 88 => "1111100100011001", 89 => "0000000101000011", 
    90 => "0000111111100101", 91 => "0001011111000110", 92 => "0000101111000100", 
    93 => "0000011100101010", 94 => "0000101010011100", 95 => "1111000011010101", 
    96 => "1110110110111011", 97 => "0000111110100100", 98 => "0000011110111111", 
    99 => "1110100100100011", 100 => "1111111100100001", 101 => "0000001010101111", 
    102 => "0001001100110000", 103 => "0000011010101110", 104 => "1111010011000011", 
    105 => "0000100100111000", 106 => "1110101011011010", 107 => "0001010011101100", 
    108 => "0000000010010111", 109 => "1111101100101010", 110 => "1110010111100011", 
    111 => "1111011001100001", 112 => "1110101001101001", 113 => "1110111100010111", 
    114 => "1111100000001000", 115 => "1110100101111100", 116 => "0001011111100100", 
    117 => "0000000101010010", 118 => "1110110000100100", 119 => "0000111001000111", 
    120 => "0001001100110001", 121 => "1111110111010011", 122 => "1111101101100001", 
    123 => "0001100110011101", 124 => "1111001011000000", 125 => "0001011011011010", 
    126 => "0000110001111010", 127 => "1110111011100110", 128 => "1110111001001111", 
    129 => "0000101011010101", 130 => "1111110100100110", 131 => "0000110111101100", 
    132 => "1111101001101011", 133 => "1111110011101010", 134 => "1111001010000000", 
    135 => "1111111100001101", 136 => "0001000101001110", 137 => "0000000110111010", 
    138 => "1110101000101010", 139 => "0000011000011101", 140 => "1110100011110010", 
    141 => "0001010000110100", 142 => "0001011000000001", 143 => "0000011111000010", 
    144 => "0000101111100011", 145 => "1111001110111001", 146 => "0001000010001011", 
    147 => "1111101010011110", 148 => "0001011111110010", 149 => "0000101101000011", 
    150 => "0001011100111110", 151 => "0001000000000011", 152 => "1111101110100100", 
    153 => "0000011101001011", 154 => "1111001001001100", 155 => "0001100110111000", 
    156 => "1111111010010001", 157 => "0000001000100111", 158 => "1110100100110001", 
    159 => "1111101101100010", 160 => "0000101111110110", 161 => "0000111001000011", 
    162 => "0001011101010101", 163 => "0001100100011000", 164 => "0000101111011110", 
    165 => "0000100011101110", 166 => "1111111100101110", 167 => "0000100111001000", 
    168 => "1111111000011111", 169 => "1110100111010100", 170 => "1111111000100110", 
    171 => "1110111111000010", 172 => "1110011110101100", 173 => "0000100010110101", 
    174 => "1111001110010111", 175 => "1111111011010101", 176 => "1111110100101000", 
    177 => "0001000001000100", 178 => "0001001011010011", 179 => "1111011000110011", 
    180 => "1111101101000000", 181 => "1110011011110001", 182 => "0000001000100010", 
    183 => "1111000111000101", 184 => "1111110001000011", 185 => "1111000010111000", 
    186 => "0000100100011110", 187 => "0000010000000100", 188 => "0001001001110100", 
    189 => "0001001010100000", 190 => "0001011101110001", 191 => "1111010010110000", 
    192 => "1111000110110001", 193 => "1111100010100111", 194 => "1111011010111000", 
    195 => "0000100010110101", 196 => "1110101001100100", 197 => "1111011000100110", 
    198 => "1111100101100011", 199 => "0001001010110000", 200 => "0000010111000011", 
    201 => "0000101111001101", 202 => "1111101111001100", 203 => "1110111110101110", 
    204 => "0000100011101101", 205 => "1111010111011001", 206 => "1110101110100011", 
    207 => "1111110000011011", 208 => "1111110011101001", 209 => "0001001110000100", 
    210 => "0001011000101111", 211 => "0000110000011000", 212 => "1111011101001010", 
    213 => "1111000101101010", 214 => "1111110111111111", 215 => "0000010000001000", 
    216 => "0000001011001000", 217 => "0000111110010010", 218 => "0000011110010000", 
    219 => "1111010111110100", 220 => "0000101001101010", 221 => "1111001010000100", 
    222 => "1111111010011101", 223 => "1111011100110110", 224 => "1110011100010110", 
    225 => "1111101010011111", 226 => "1110100101010001", 227 => "1110110000010010", 
    228 => "0000100101110000", 229 => "0000110110111110", 230 => "1110101010100001", 
    231 => "0001001001100100", 232 => "0001010100111110", 233 => "0000100010011001", 
    234 => "0001011111000000", 235 => "1111011101001110", 236 => "1110100001010010", 
    237 => "1111001011100110", 238 => "0001011011000011", 239 => "0000010110110100", 
    240 => "1111010111010101", 241 => "1111101100111001", 242 => "0000101001001111", 
    243 => "1111000011100111", 244 => "0001010001101100", 245 => "1110111111010000", 
    246 => "1111111100000010", 247 => "1111100000000111", 248 => "0000110001001010", 
    249 => "1111100000001101", 250 => "1110011101011001", 251 => "0000001101001111", 
    252 => "0001000110011010", 253 => "0001000010100110", 254 => "1111110110010011", 
    255 => "0000001010011101", 256 => "0000011100111001", 257 => "1111010110000011", 
    258 => "1110111000011110", 259 => "0001010110010111", 260 => "0001100010001101", 
    261 => "1111011010111010", 262 => "0000011100100110", 263 => "1111001111010011", 
    264 => "0001010110000111", 265 => "0001000111010101", 266 => "1110011111111111", 
    267 => "1111001100111010", 268 => "0001010111001000", 269 => "1110100011100001", 
    270 => "1111110110101100", 271 => "0000011001001101", 272 => "1111000000110101", 
    273 => "0001100001100101", 274 => "0000111100000001", 275 => "0001100110000101", 
    276 => "1111100001101001", 277 => "0000101110000111", 278 => "1111001001101001", 
    279 => "1111000111011110", 280 => "1111110100000100", 281 => "1111001101111111", 
    282 => "1110111010001001", 283 => "0000010000100000", 284 => "1110110010101011", 
    285 => "0000101101010101", 286 => "0000001011010110", 287 => "1110011011101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_0 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_0 is
    component infer_layer_6_weights_V_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_0_rom_U :  component infer_layer_6_weights_V_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



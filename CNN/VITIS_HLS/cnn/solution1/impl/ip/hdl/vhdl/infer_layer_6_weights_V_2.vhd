-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_2_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000010011000101", 1 => "00001100000000110", 
    2 => "00010100110000110", 3 => "11111001110111000", 
    4 => "11110110100110110", 5 => "11110110101011000", 
    6 => "00001000001110010", 7 => "00000000001010011", 
    8 => "11110011101000000", 9 => "11111000010110101", 
    10 => "00001010001111101", 11 => "11111100100011101", 
    12 => "11111000001110001", 13 => "11111100100001100", 
    14 => "11110110010011101", 15 => "00000011000110011", 
    16 => "11110110010100110", 17 => "00000010100101110", 
    18 => "11111010100100110", 19 => "11111010111100011", 
    20 => "11110101011000011", 21 => "11111111100010111", 
    22 => "00001001000010011", 23 => "00000101010101110", 
    24 => "00000001110010101", 25 => "00001100001110001", 
    26 => "00000100000010110", 27 => "11110101110101111", 
    28 => "11111100011010101", 29 => "11111011000100001", 
    30 => "00001000110001000", 31 => "00001000011110110", 
    32 => "00000110110010101", 33 => "00000110100111001", 
    34 => "00010110110001011", 35 => "11110101011101111", 
    36 => "11111101000101001", 37 => "11111010011111001", 
    38 => "00010001010100000", 39 => "00000011101011001", 
    40 => "11111100110001001", 41 => "11111001101110000", 
    42 => "00000100001010001", 43 => "00001011000011110", 
    44 => "00010010111000000", 45 => "00000010011100011", 
    46 => "00000000111001111", 47 => "11110111001101111", 
    48 => "11111111100000011", 49 => "11111011011001001", 
    50 => "11111000100000100", 51 => "00001011100000100", 
    52 => "00001000100010100", 53 => "00001010010001010", 
    54 => "00000000000100011", 55 => "00001110001110010", 
    56 => "11111111100110100", 57 => "11110111000111011", 
    58 => "00000011010001101", 59 => "00000000001010111", 
    60 => "00000110110001111", 61 => "00000011101101010", 
    62 => "11111010000100001", 63 => "00000011001010111", 
    64 => "00000001110001010", 65 => "00001100011101010", 
    66 => "00000100010000101", 67 => "11111000010001100", 
    68 => "00000110111001110", 69 => "11111110010101011", 
    70 => "00001011010110100", 71 => "11111001011110111", 
    72 => "11110101101100111", 73 => "11110010101010000", 
    74 => "11110110101101100", 75 => "11111111011001100", 
    76 => "00010100100000011", 77 => "00001010111011000", 
    78 => "11110100100000100", 79 => "11110110001110000", 
    80 => "00000010010100001", 81 => "00000011100011110", 
    82 => "11110011010011011", 83 => "00000110111001001", 
    84 => "11110010101000000", 85 => "00000001000010101", 
    86 => "11111101100111001", 87 => "11111101100010001", 
    88 => "00000010100011101", 89 => "00000011011011001", 
    90 => "00000111111110010", 91 => "00000010001100100", 
    92 => "00000000000010111", 93 => "00000110011010011", 
    94 => "11111101110101010", 95 => "11111010000110100", 
    96 => "11110010100000100", 97 => "11110100010010000", 
    98 => "11111100110110101", 99 => "11110110101001100", 
    100 => "11111000010100110", 101 => "00000000011111100", 
    102 => "00000011000001100", 103 => "00001011010100010", 
    104 => "00000000111000000", 105 => "11110100101100001", 
    106 => "00000011100101101", 107 => "11111001001111110", 
    108 => "00010001000010011", 109 => "00000011001110101", 
    110 => "11111101101101100", 111 => "00000111001001001", 
    112 => "11110111010101101", 113 => "11111000101110001", 
    114 => "00001100110110000", 115 => "00000111011100010", 
    116 => "00000111001110110", 117 => "00001001001101000", 
    118 => "00001000100000000", 119 => "00000101111110000", 
    120 => "11100011100000101", 121 => "11111011100000110", 
    122 => "11110110110110001", 123 => "00001100000000111", 
    124 => "00000111110111010", 125 => "00001000100110100", 
    126 => "11110101000111011", 127 => "11111110010010011", 
    128 => "11111100001100000", 129 => "11111110111101001", 
    130 => "00001111111111111", 131 => "11110110010111010", 
    132 => "00000111110111000", 133 => "00000011100011110", 
    134 => "11111101111111001", 135 => "00000001110110001", 
    136 => "11111011100010100", 137 => "00000110110000001", 
    138 => "00001100101100010", 139 => "00001011100101001", 
    140 => "00010011001101000", 141 => "00000001001011000", 
    142 => "00001011100111010", 143 => "11110110010011001", 
    144 => "00000001110101011", 145 => "11111011100010101", 
    146 => "11111100001011101", 147 => "11110110100101111", 
    148 => "11111000110011001", 149 => "00000101101011010", 
    150 => "00001010010110110", 151 => "00001100101101101", 
    152 => "11011100111001011", 153 => "11111110011100111", 
    154 => "11110010111001011", 155 => "11111111011100000", 
    156 => "11110011011110110", 157 => "11111101101011101", 
    158 => "00000100100100011", 159 => "11111110000100001", 
    160 => "00001011110111101", 161 => "11110011101101001", 
    162 => "11110111110111100", 163 => "00001100001010110", 
    164 => "11110011100010000", 165 => "00001011110011111", 
    166 => "11111100011011111", 167 => "11111001110010100", 
    168 => "11110111100111111", 169 => "11111111011001000", 
    170 => "11111011111011110", 171 => "11111011101000110", 
    172 => "00010011001010110", 173 => "00010010010111100", 
    174 => "00001001110011011", 175 => "00001000000000110", 
    176 => "00001010000011000", 177 => "00001100010111011", 
    178 => "00000101011100100", 179 => "11111000011001011", 
    180 => "11111110100100101", 181 => "00001001110101111", 
    182 => "11111010010001000", 183 => "11111100100101000", 
    184 => "11111000101111011", 185 => "00001100010010000", 
    186 => "11100111001011010", 187 => "11111101011001100", 
    188 => "00001011100000001", 189 => "11110110111010111", 
    190 => "00001100011001011", 191 => "11110101011010001", 
    192 => "11111100101011100", 193 => "11111001100001101", 
    194 => "11110110110011000", 195 => "11110011111101110", 
    196 => "00001011111100001", 197 => "11110111011001101", 
    198 => "11110100101011001", 199 => "11110101001101100", 
    200 => "11110111011001001", 201 => "11111001110001000", 
    202 => "11111001001011010", 203 => "00001011001001000", 
    204 => "00000000110001110", 205 => "11110100111110011", 
    206 => "00000001010101010", 207 => "00000000101100110", 
    208 => "00001100111000011", 209 => "11111111001101000", 
    210 => "00000100011001110", 211 => "00000101110110101", 
    212 => "00000100110111100", 213 => "00001001011011001", 
    214 => "11101011001010101", 215 => "00001000110010100", 
    216 => "00001001101001110", 217 => "11111011101010100", 
    218 => "11111011101101110", 219 => "00001010011000100", 
    220 => "11110011010000111", 221 => "00001011010001010", 
    222 => "00001100001011000", 223 => "11111001100101010", 
    224 => "11111011100001111", 225 => "11110101100000011", 
    226 => "11100110101001100", 227 => "00000011000001100", 
    228 => "00001011000101001", 229 => "00001010111001100", 
    230 => "11101110101110111", 231 => "11110101100110110", 
    232 => "00001001000101000", 233 => "00001000101001000", 
    234 => "11111001000000000", 235 => "11111010000111011", 
    236 => "11110001011110101", 237 => "11111110010001011", 
    238 => "11111011110110111", 239 => "11111111100101011", 
    240 => "00001101011011110", 241 => "11111010100010101", 
    242 => "11111010101111101", 243 => "11110101111000010", 
    244 => "00000001110011001", 245 => "11110101000001011", 
    246 => "11110100001110101", 247 => "11101000010010011", 
    248 => "11110100011101100", 249 => "11110101010010001", 
    250 => "11101011010011011", 251 => "11111110111100111", 
    252 => "00001010010011100", 253 => "11111100011001011", 
    254 => "00000011110001110", 255 => "00001000011011101", 
    256 => "00001001101110110", 257 => "00000110110110010", 
    258 => "11110000100101100", 259 => "11111011000101110", 
    260 => "00000101111001101", 261 => "00001011110000110", 
    262 => "11110101101111010", 263 => "00000011000010111", 
    264 => "00000001011011111", 265 => "11110101000011101", 
    266 => "00000000101111010", 267 => "00001011010100100", 
    268 => "11101100011010110", 269 => "11110000111011010", 
    270 => "00000100000110011", 271 => "11110110001000110", 
    272 => "00001101011000100", 273 => "00000100101111111", 
    274 => "00000010011110100", 275 => "11111111001001000", 
    276 => "00000110101100010", 277 => "00000010100100001", 
    278 => "11110110110010110", 279 => "11101101001101101", 
    280 => "00001000000110110", 281 => "11110110000000111", 
    282 => "11110100000111000", 283 => "00000000110100001", 
    284 => "11111011110100110", 285 => "00001011000000111", 
    286 => "11111100000000010", 287 => "00001010001101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_2 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_2 is
    component infer_layer_6_weights_V_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_2_rom_U :  component infer_layer_6_weights_V_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



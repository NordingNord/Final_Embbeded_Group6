-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_21_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_21_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11100100111010", 1 => "00000001010000", 2 => "00101001101000", 
    3 => "11000000111010", 4 => "00011101111001", 5 => "01100000001110", 
    6 => "10101100000000", 7 => "00100101111000", 8 => "00101001001001", 
    9 => "11001011110110", 10 => "00101110111100", 11 => "11110010101011", 
    12 => "11101011011100", 13 => "10111001011000", 14 => "00001100011101", 
    15 => "11100110011111", 16 => "10001111000011", 17 => "11110001011100", 
    18 => "00010101101000", 19 => "00001111000110", 20 => "01010111100110", 
    21 => "00111100110100", 22 => "00001010000100", 23 => "00010111011101", 
    24 => "11111001000100", 25 => "11000101100000", 26 => "01010000010110", 
    27 => "10111010011001", 28 => "01001111101001", 29 => "00111011111001", 
    30 => "01000001010001", 31 => "00000101111011", 32 => "00010101110001", 
    33 => "10110111011100", 34 => "11111110001011", 35 => "01001001100011", 
    36 => "00000001101111", 37 => "10111111100100", 38 => "00101110110010", 
    39 => "11001001111111", 40 => "11000011000100", 41 => "00100001010011", 
    42 => "01100001000011", 43 => "01001101100111", 44 => "10111111000001", 
    45 => "11111000000001", 46 => "11010101011100", 47 => "00010000110101", 
    48 => "10001101111000", 49 => "00001011000111", 50 => "11010011001010", 
    51 => "00111101111111", 52 => "11100011011101", 53 => "01000000011101", 
    54 => "11011011000110", 55 => "01001011101011", 56 => "10100101011001", 
    57 => "11011011011111", 58 => "11011000000010", 59 => "00110100000011", 
    60 => "11001011100100", 61 => "11111110001110", 62 => "11111111110001", 
    63 => "11000011010101", 64 => "10011000100000", 65 => "01010000001011", 
    66 => "10010010111011", 67 => "00011111010001", 68 => "11101001001010", 
    69 => "11010011001001", 70 => "10110100001101", 71 => "00110111000111", 
    72 => "01100000111011", 73 => "10010111101001", 74 => "11000001000010", 
    75 => "01000011011111", 76 => "01000110010101", 77 => "01010010011101", 
    78 => "10110010100111", 79 => "00011001011011", 80 => "00001100101101", 
    81 => "00100101101101", 82 => "00010101111010", 83 => "11011111100001", 
    84 => "11100001010100", 85 => "00001010111010", 86 => "11011100010100", 
    87 => "10110110101100", 88 => "00110011101011", 89 => "01001000101111", 
    90 => "11010011010010", 91 => "11001011100000", 92 => "11101101111000", 
    93 => "00100100101111", 94 => "10011010111110", 95 => "11111110100000", 
    96 => "10110111000011", 97 => "11110010100011", 98 => "10011011110110", 
    99 => "11011000010110", 100 => "01001101011100", 101 => "11000111000101", 
    102 => "11001010000101", 103 => "10101010010111", 104 => "00110100001001", 
    105 => "01100000001011", 106 => "11100001010101", 107 => "00111101111110", 
    108 => "00010111110111", 109 => "11111010101001", 110 => "11000000010010", 
    111 => "10110001001100", 112 => "00001011110110", 113 => "11000000011110", 
    114 => "11111001100000", 115 => "00110110001100", 116 => "01011001101110", 
    117 => "11000110101110", 118 => "00101010000100", 119 => "01010001101010", 
    120 => "10111000101111", 121 => "10011001000011", 122 => "10111001001001", 
    123 => "11000000110100", 124 => "00001011011010", 125 => "00010110111010", 
    126 => "00100000010101", 127 => "00100001110011", 128 => "01000100000010", 
    129 => "11011111011100", 130 => "11110100110000", 131 => "11110001001110", 
    132 => "01011000111111", 133 => "01100001011000", 134 => "11110000000011", 
    135 => "10100010000100", 136 => "10100101010000", 137 => "11001001011100", 
    138 => "00000000010101", 139 => "00011111111010", 140 => "00110110110111", 
    141 => "01000000010110", 142 => "10101100010010", 143 => "00111100001001", 
    144 => "10010100101110", 145 => "11110110110001", 146 => "00110000101111", 
    147 => "11100101100101", 148 => "11000100000011", 149 => "00011110100101", 
    150 => "10100110100110", 151 => "10001101011010", 152 => "10100000010010", 
    153 => "11000111101110", 154 => "00010101100011", 155 => "11011001110001", 
    156 => "00000000001101", 157 => "10010111101111", 158 => "11111100000001", 
    159 => "11001011010010", 160 => "01000011101110", 161 => "01100000110001", 
    162 => "11101111001110", 163 => "11100101100011", 164 => "10110011111000", 
    165 => "00101000010000", 166 => "10001110001011", 167 => "01011011110111", 
    168 => "00101011001000", 169 => "01010100101000", 170 => "11001100011011", 
    171 => "00011000111111", 172 => "10010000010001", 173 => "11010110100110", 
    174 => "00100000010011", 175 => "01001010111101", 176 => "00101110011010", 
    177 => "11010110010110", 178 => "11110000011001", 179 => "11011101010010", 
    180 => "01100011101100", 181 => "10011011110111", 182 => "10011000101000", 
    183 => "11101011010001", 184 => "10100101111010", 185 => "11100011100111", 
    186 => "11001100011011", 187 => "01100111000110", 188 => "01011011001000", 
    189 => "00110001001011", 190 => "00101010101110", 191 => "11011101100101", 
    192 => "00100000110110", 193 => "00100100100110", 194 => "10011111101110", 
    195 => "11100111001111", 196 => "10100000111001", 197 => "11010010101010", 
    198 => "01001110010000", 199 => "00101101111100", 200 => "00001100101001", 
    201 => "10110010100011", 202 => "00001000110110", 203 => "11100110010000", 
    204 => "10010111101110", 205 => "10101100011110", 206 => "11000011000101", 
    207 => "11111011100000", 208 => "11001010010111", 209 => "10101101101000", 
    210 => "01100101001111", 211 => "00100011011100", 212 => "11010011100011", 
    213 => "10100011100001", 214 => "00001011000111", 215 => "00000001101001", 
    216 => "11110011010100", 217 => "00011111101111", 218 => "10011010011000", 
    219 => "00011101001000", 220 => "11111111010001", 221 => "01001110011011", 
    222 => "00110010110111", 223 => "00011110101111", 224 => "11101111000010", 
    225 => "11100110110101", 226 => "10111011010011", 227 => "11101010010101", 
    228 => "11110001010010", 229 => "10101101111110", 230 => "11001011111100", 
    231 => "01001101111111", 232 => "10101011000101", 233 => "00010010001001", 
    234 => "11010011101111", 235 => "01000111110101", 236 => "10001111000100", 
    237 => "01000000111101", 238 => "01001000011010", 239 => "10101000011011", 
    240 => "11100001011000", 241 => "11101110011100", 242 => "10100101101100", 
    243 => "11100101001010", 244 => "10111010000001", 245 => "01000110110010", 
    246 => "11011101011101", 247 => "00100010110111", 248 => "10010111000111", 
    249 => "00001000011101", 250 => "01001100011000", 251 => "11000011110000", 
    252 => "00110101010100", 253 => "00100101011001", 254 => "11010001010011", 
    255 => "00010101001111", 256 => "11111010001001", 257 => "11110111101000", 
    258 => "01010000010111", 259 => "01100000110011", 260 => "10110001001001", 
    261 => "00011001010001", 262 => "11011010011010", 263 => "01100001010110", 
    264 => "01100100111111", 265 => "01011011100110", 266 => "00100000011100", 
    267 => "01100101111000", 268 => "11111110100011", 269 => "00010110001101", 
    270 => "11001100010010", 271 => "11101110001001", 272 => "11011001101100", 
    273 => "10010100010111", 274 => "00000100001011", 275 => "10100101110000", 
    276 => "11110000101010", 277 => "11110110010001", 278 => "00011101010001", 
    279 => "11111010101010", 280 => "00000110000011", 281 => "11001011111100", 
    282 => "11000101000011", 283 => "11001010101011", 284 => "10100000001111", 
    285 => "11110010011110", 286 => "01000101111101", 287 => "00111000000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_21 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_21 is
    component infer_layer_6_weights_V_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_21_rom_U :  component infer_layer_6_weights_V_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_7_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_7_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101011100011", 1 => "0001001010011011", 2 => "0000101100111001", 
    3 => "1110101100011111", 4 => "0000011011110101", 5 => "0000101110011011", 
    6 => "1110111110100100", 7 => "0000110100100000", 8 => "1111101000100000", 
    9 => "0000000010011011", 10 => "1111001011001100", 11 => "0000100101011101", 
    12 => "1110100000011101", 13 => "0000111100110010", 14 => "1111100101001010", 
    15 => "0001001100011011", 16 => "0010000001001011", 17 => "0000010100000010", 
    18 => "1110110010111011", 19 => "1111100000111011", 20 => "1111010111000101", 
    21 => "0000101011001001", 22 => "0001101101100001", 23 => "1111100011011000", 
    24 => "0001011100000011", 25 => "1111111100101100", 26 => "1111100101111010", 
    27 => "0000010100001101", 28 => "1110111110101000", 29 => "0000110100001110", 
    30 => "1110011010001010", 31 => "1110100101011010", 32 => "1110101001100001", 
    33 => "0000001011000110", 34 => "1111010100110011", 35 => "0000001000001101", 
    36 => "1110111010111010", 37 => "1111010100001011", 38 => "0001100100111001", 
    39 => "0001000111110100", 40 => "1110101011000000", 41 => "0001010110001011", 
    42 => "0000100011001111", 43 => "1110011100101100", 44 => "0001011001000111", 
    45 => "0000010001100011", 46 => "1111101100110101", 47 => "0001011101001101", 
    48 => "0000111000111111", 49 => "1110101100110100", 50 => "0001001000111111", 
    51 => "0000010110110010", 52 => "0000110111001101", 53 => "0001100100110110", 
    54 => "0011000100001010", 55 => "0010001011010001", 56 => "0010011100000100", 
    57 => "0001001110100100", 58 => "0000101111110001", 59 => "1110111100110010", 
    60 => "0000110110001001", 61 => "1110100001000001", 62 => "1111100110101011", 
    63 => "1111001101000010", 64 => "1111101000011111", 65 => "0000100101101111", 
    66 => "0000010010001001", 67 => "1111010000100000", 68 => "0000010010010011", 
    69 => "1111101010000000", 70 => "0001011100011001", 71 => "0000111111010000", 
    72 => "0001011101110010", 73 => "1111001000101110", 74 => "1111000110001111", 
    75 => "1111011110000100", 76 => "0010011000101101", 77 => "0001010011000000", 
    78 => "0000000110110100", 79 => "0010010000100101", 80 => "0000010100100110", 
    81 => "0001101010101101", 82 => "1111011100101001", 83 => "0000001000110111", 
    84 => "1110111110010000", 85 => "1111001110110001", 86 => "0010100001010001", 
    87 => "0100101100010111", 88 => "0010110000000111", 89 => "0000100000110101", 
    90 => "0010111100110110", 91 => "0001010011011101", 92 => "0000011100000010", 
    93 => "1111001000111001", 94 => "0000011001111100", 95 => "1110011100001111", 
    96 => "1111101000101000", 97 => "1111001010000110", 98 => "1110101001110101", 
    99 => "1110100010010101", 100 => "1111100111001111", 101 => "1110011011010111", 
    102 => "1111100011101101", 103 => "1110110010111011", 104 => "0000100111011110", 
    105 => "0000110000001010", 106 => "0001000111001111", 107 => "0000000001110010", 
    108 => "1111010000111110", 109 => "0000010111010000", 110 => "0000110101011010", 
    111 => "0000100101011010", 112 => "0010000101111100", 113 => "0001111101111110", 
    114 => "0001000111100010", 115 => "0000011011111011", 116 => "1110011001010000", 
    117 => "0001000000110110", 118 => "0001100111110001", 119 => "1101111010101111", 
    120 => "1111101100011010", 121 => "0000000010110011", 122 => "0000010110011001", 
    123 => "0000101011111101", 124 => "1111010000110111", 125 => "1111100111001111", 
    126 => "0000010110000010", 127 => "1111101110000101", 128 => "1110111010111110", 
    129 => "0000011010101010", 130 => "1111101100000001", 131 => "0000101110011001", 
    132 => "1111111011000011", 133 => "0000011001000001", 134 => "0001010001011001", 
    135 => "1111101100011111", 136 => "0000110101111110", 137 => "1111011110010101", 
    138 => "1110100001101000", 139 => "1110100010010101", 140 => "0000101001001101", 
    141 => "1110101000011000", 142 => "0000101100010111", 143 => "0001111111100000", 
    144 => "0000001000111000", 145 => "1111000111110100", 146 => "0000000111100101", 
    147 => "0001100000100111", 148 => "1111101010010111", 149 => "1111000001110011", 
    150 => "0010101011000100", 151 => "0001100010000000", 152 => "0010111101010101", 
    153 => "0000101010100110", 154 => "0001111001110111", 155 => "1111100011100110", 
    156 => "0000100000101001", 157 => "0001000010010001", 158 => "1111010101100101", 
    159 => "1111010110000100", 160 => "0000010001100000", 161 => "0001000000111101", 
    162 => "0010000100100110", 163 => "0001011101100110", 164 => "0000110001111000", 
    165 => "1111010111001101", 166 => "1110101101111110", 167 => "1110011100010011", 
    168 => "0001001100001001", 169 => "1111100101010010", 170 => "1110110011001111", 
    171 => "1110110011100010", 172 => "0100001010000110", 173 => "0001111101111100", 
    174 => "1110100110100000", 175 => "0000000011001101", 176 => "1111010001111110", 
    177 => "0000011101001111", 178 => "1111010110100011", 179 => "0001010110000100", 
    180 => "1110101001101100", 181 => "0000001100110111", 182 => "0000010111011110", 
    183 => "0010101001001111", 184 => "1110101101011001", 185 => "1111000111101000", 
    186 => "0010111010100000", 187 => "0000000001000011", 188 => "0001011110100011", 
    189 => "1111100011111111", 190 => "1111101000011101", 191 => "0000000111001000", 
    192 => "0001101010100101", 193 => "1111101100110000", 194 => "1111110110111000", 
    195 => "0000101110100000", 196 => "0001011101000101", 197 => "0001010110000111", 
    198 => "0000110000000010", 199 => "1111000001010100", 200 => "0001000111110010", 
    201 => "0001011111011100", 202 => "0001000100110001", 203 => "1111010001011001", 
    204 => "0001101000001011", 205 => "0000100011011000", 206 => "1111000010011100", 
    207 => "0001101111010100", 208 => "1111011110000000", 209 => "0001001000100001", 
    210 => "0000100101000000", 211 => "0001011110001001", 212 => "1110011100110111", 
    213 => "0001011100100011", 214 => "0010000011111111", 215 => "0000110001000000", 
    216 => "1111111110101111", 217 => "0001011010100111", 218 => "0010010001001000", 
    219 => "1111001000111100", 220 => "1111000101000101", 221 => "0000010001110001", 
    222 => "1111011010001111", 223 => "1111110111001111", 224 => "1111001010011011", 
    225 => "0000011000111101", 226 => "0010011110101000", 227 => "1111001000000010", 
    228 => "1111001100001010", 229 => "1110111011111010", 230 => "0010001001001101", 
    231 => "1110110110100100", 232 => "0000011100101110", 233 => "0000101010101100", 
    234 => "0001011110110001", 235 => "0000101001110011", 236 => "0011011101000111", 
    237 => "0000101101101001", 238 => "1110011111101100", 239 => "0001010000100110", 
    240 => "0000111010001110", 241 => "1110111110000110", 242 => "1111111011101100", 
    243 => "1110011110001001", 244 => "1111001100110110", 245 => "1111101001011100", 
    246 => "0001101001000010", 247 => "0011011000111010", 248 => "0000100100111101", 
    249 => "1111100100110001", 250 => "0010110101000111", 251 => "0000001011101101", 
    252 => "1111101001110010", 253 => "0000111110101010", 254 => "0001011001011110", 
    255 => "0000000101011111", 256 => "0000000001001010", 257 => "0000010000100100", 
    258 => "0010101011110110", 259 => "0000101001101011", 260 => "0000110100111001", 
    261 => "0001000001100010", 262 => "0001001001111001", 263 => "1111101110100000", 
    264 => "0000101100011111", 265 => "0001001101011101", 266 => "1111110001001111", 
    267 => "0000101101010001", 268 => "0010000010101000", 269 => "0000000100000001", 
    270 => "0000001110111101", 271 => "1111111101011100", 272 => "0001000101100110", 
    273 => "0001110000001011", 274 => "0000011101111110", 275 => "1110111010111010", 
    276 => "0001100110001100", 277 => "1111101010000111", 278 => "0001100111110000", 
    279 => "0001001101001111", 280 => "0000011111010111", 281 => "0001011011111101", 
    282 => "0010000100010011", 283 => "0000110111010110", 284 => "1111111101111101", 
    285 => "1111001010111010", 286 => "0001100010010010", 287 => "0001010000101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_7 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_7 is
    component infer_layer_6_weights_V_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_7_rom_U :  component infer_layer_6_weights_V_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



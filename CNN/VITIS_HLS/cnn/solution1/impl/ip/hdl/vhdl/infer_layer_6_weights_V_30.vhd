-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_30_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_30_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111000101000", 1 => "11001001011000", 2 => "11001001010101", 
    3 => "10110000000001", 4 => "10101011001010", 5 => "00100000010011", 
    6 => "10010010110100", 7 => "11110111011100", 8 => "10011000100001", 
    9 => "10110011111100", 10 => "10110111010010", 11 => "10100110101110", 
    12 => "11111111000101", 13 => "10001110101001", 14 => "11011101001111", 
    15 => "00100011100001", 16 => "10010010000011", 17 => "10011000010110", 
    18 => "00100100001011", 19 => "10100011110100", 20 => "00100111001010", 
    21 => "00101110111110", 22 => "00001000000111", 23 => "10001111011111", 
    24 => "01001100110000", 25 => "11100100011101", 26 => "11011001000110", 
    27 => "10110111000101", 28 => "00010100000111", 29 => "10100111001101", 
    30 => "00110101100001", 31 => "01100111011000", 32 => "01000010100010", 
    33 => "00011100001111", 34 => "10101011101111", 35 => "00011001001010", 
    36 => "00100010100110", 37 => "10011111111010", 38 => "10100111101001", 
    39 => "01100011111101", 40 => "01011111011010", 41 => "10111011100001", 
    42 => "11011010010010", 43 => "01001010100000", 44 => "00101111001000", 
    45 => "00010000001010", 46 => "01000100000001", 47 => "11000010111001", 
    48 => "10101101000011", 49 => "00001100011110", 50 => "11010011001111", 
    51 => "10101100000010", 52 => "00111000011101", 53 => "00100001001001", 
    54 => "00011100111100", 55 => "00100101100011", 56 => "01000111101010", 
    57 => "10111111101100", 58 => "11010101100010", 59 => "00000111100010", 
    60 => "00101101110100", 61 => "11001111100011", 62 => "11101111100000", 
    63 => "01001011100100", 64 => "11010011001100", 65 => "00110101110010", 
    66 => "10111010001001", 67 => "11010010011111", 68 => "10111001010010", 
    69 => "00011001011100", 70 => "10110101011110", 71 => "10100100100010", 
    72 => "00000001010011", 73 => "11110010100110", 74 => "00111111011011", 
    75 => "00110001000110", 76 => "00100011100011", 77 => "00101100010100", 
    78 => "11100010001011", 79 => "11110010011101", 80 => "11000101011111", 
    81 => "11000101011000", 82 => "00010100110010", 83 => "10011110110111", 
    84 => "01010111011001", 85 => "11100110011101", 86 => "11101111000000", 
    87 => "00101101001001", 88 => "00110110001000", 89 => "10101101010111", 
    90 => "11001010001001", 91 => "00010000101001", 92 => "00000100100101", 
    93 => "00000000001100", 94 => "10100011111001", 95 => "11011101000010", 
    96 => "10110110111000", 97 => "01010011110010", 98 => "00100011100110", 
    99 => "00101110001010", 100 => "10111100101101", 101 => "10101110111100", 
    102 => "01000010111111", 103 => "01010001000011", 104 => "11001101100011", 
    105 => "01011100111100", 106 => "00011111110111", 107 => "11110100011001", 
    108 => "00001111110100", 109 => "10010101111101", 110 => "01011000011101", 
    111 => "00001011001111", 112 => "10111100100001", 113 => "11001101000010", 
    114 => "00011010001011", 115 => "10101010000010", 116 => "10011101101100", 
    117 => "11001001111000", 118 => "10101001010101", 119 => "00001101110010", 
    120 => "11100010110010", 121 => "01000001110001", 122 => "11001001011011", 
    123 => "11000011110000", 124 => "01000001001110", 125 => "11001001110110", 
    126 => "01010010111011", 127 => "11011011100011", 128 => "11011000101101", 
    129 => "11100011111001", 130 => "00101001100010", 131 => "00100010000100", 
    132 => "10111101111101", 133 => "01010101011010", 134 => "00001010001011", 
    135 => "00001010100110", 136 => "11111000100010", 137 => "10101001100111", 
    138 => "11001100000010", 139 => "11101111111010", 140 => "10101100000101", 
    141 => "11000111000111", 142 => "10101100011111", 143 => "10110000101100", 
    144 => "00110000001110", 145 => "10101101001111", 146 => "11011110111001", 
    147 => "11111101001001", 148 => "10011001111110", 149 => "11101110110011", 
    150 => "01000010100111", 151 => "01000010011001", 152 => "10101010100010", 
    153 => "01000100101101", 154 => "11100111010111", 155 => "01100110000100", 
    156 => "00001000000011", 157 => "10100001011100", 158 => "00111011111101", 
    159 => "10101000100110", 160 => "10001000111101", 161 => "00110100110101", 
    162 => "10111001101100", 163 => "11101110010000", 164 => "10111001110010", 
    165 => "10111000101110", 166 => "00110100111101", 167 => "00011100011100", 
    168 => "01100000100101", 169 => "00111100001000", 170 => "00010100110011", 
    171 => "11001101101010", 172 => "00010000000101", 173 => "10110100110011", 
    174 => "11011101100101", 175 => "01001101010000", 176 => "00000010001000", 
    177 => "00010100110010", 178 => "01011111011010", 179 => "01100001101011", 
    180 => "10011110000001", 181 => "10100111000111", 182 => "10001110000111", 
    183 => "10011100111000", 184 => "11111001000110", 185 => "01000010110111", 
    186 => "00110100011101", 187 => "01000110001000", 188 => "10111111001110", 
    189 => "11111011001111", 190 => "00010100010010", 191 => "10111010100000", 
    192 => "10100000100010", 193 => "00101111101000", 194 => "10001011111010", 
    195 => "10100100000111", 196 => "01010110010101", 197 => "00111111101011", 
    198 => "11010101110110", 199 => "01010000010110", 200 => "11101110010011", 
    201 => "00110000000000", 202 => "10111010010001", 203 => "01100001110001", 
    204 => "01001001010110", 205 => "11111110001001", 206 => "10100100000011", 
    207 => "11001100010001", 208 => "01000111111010", 209 => "11011101100101", 
    210 => "01000110101011", 211 => "00110001101111", 212 => "10111010010110", 
    213 => "10100000111001", 214 => "10110100011010", 215 => "00010110111011", 
    216 => "01000001001111", 217 => "01000001000000", 218 => "00000001100111", 
    219 => "10111110100111", 220 => "10110100111110", 221 => "01001110100100", 
    222 => "00111101001110", 223 => "00111100111111", 224 => "11100100110100", 
    225 => "00001000000011", 226 => "11101110011001", 227 => "11011000111100", 
    228 => "11000100010000", 229 => "11101110010111", 230 => "00111110000111", 
    231 => "11001111011110", 232 => "00011000001101", 233 => "00001001000000", 
    234 => "11101110000000", 235 => "01010011001111", 236 => "10001111101011", 
    237 => "10100010110010", 238 => "10111100010010", 239 => "11000010111111", 
    240 => "10111001010110", 241 => "01001011001010", 242 => "11011110011000", 
    243 => "11000110100101", 244 => "00100101101111", 245 => "11110011111110", 
    246 => "10111110110000", 247 => "11111010110011", 248 => "10001110010101", 
    249 => "01011010011100", 250 => "11000111000100", 251 => "11101010111011", 
    252 => "11101110100101", 253 => "00000100100000", 254 => "00010011001100", 
    255 => "11001100110100", 256 => "10010101000010", 257 => "00111100000011", 
    258 => "11010011001100", 259 => "01001110101101", 260 => "10111001100001", 
    261 => "01011110001001", 262 => "11001011000110", 263 => "11000000010110", 
    264 => "01100100001011", 265 => "10110111000000", 266 => "11101000010001", 
    267 => "10100011000000", 268 => "10110001100000", 269 => "10001100000001", 
    270 => "11011011011011", 271 => "11011100111100", 272 => "00010000001111", 
    273 => "10110011100010", 274 => "01010101000001", 275 => "00111100001111", 
    276 => "00000110011111", 277 => "11110100010110", 278 => "01010001011000", 
    279 => "00110000100110", 280 => "01001100110100", 281 => "00110111111011", 
    282 => "11010001100000", 283 => "01000000001011", 284 => "10011100110100", 
    285 => "00010001100110", 286 => "00101110110011", 287 => "10011100101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_30 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_30 is
    component infer_layer_6_weights_V_30_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_30_rom_U :  component infer_layer_6_weights_V_30_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_26_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110011001111001", 1 => "11110100000110000", 
    2 => "00000100011110100", 3 => "00000101100001010", 
    4 => "11110111011110001", 5 => "00000111111100001", 
    6 => "00000001101110110", 7 => "00000001000010101", 
    8 => "00001000011000011", 9 => "11111010110111011", 
    10 => "11110110101110110", 11 => "00000101000011101", 
    12 => "11110101110010101", 13 => "00000100001011001", 
    14 => "11111010100101100", 15 => "00001010011000000", 
    16 => "11111001111000100", 17 => "00000101110010111", 
    18 => "11111111010010100", 19 => "00000101011011101", 
    20 => "00000100101000111", 21 => "11111011010101111", 
    22 => "11110111000010110", 23 => "11111100001001000", 
    24 => "11111001111000011", 25 => "00000110010100100", 
    26 => "11111000010101001", 27 => "00000011011001101", 
    28 => "00000010110101100", 29 => "00000010100111000", 
    30 => "11111100110111101", 31 => "11111011010111011", 
    32 => "00001000010001000", 33 => "11111000111101011", 
    34 => "00000011001010011", 35 => "00000010100010000", 
    36 => "00000010000110010", 37 => "11110101101000101", 
    38 => "11110100011000101", 39 => "00000000010011101", 
    40 => "00001001000001010", 41 => "11111101101110001", 
    42 => "00000010100011101", 43 => "11111111111000000", 
    44 => "11110110000000001", 45 => "11110111011111001", 
    46 => "00001010100110010", 47 => "00000100100101000", 
    48 => "11111101101000111", 49 => "11111111110001111", 
    50 => "00000110111101100", 51 => "00000111110000001", 
    52 => "11111110000110000", 53 => "00001011010000000", 
    54 => "00001001001111111", 55 => "11111001010011100", 
    56 => "11111111000011111", 57 => "00001010011011001", 
    58 => "00000101111001100", 59 => "11110101001000100", 
    60 => "11111100101111101", 61 => "00001000100110011", 
    62 => "00000010010101010", 63 => "11111001110100000", 
    64 => "11111101110110001", 65 => "11111001110011001", 
    66 => "00001010110001001", 67 => "00000110100001011", 
    68 => "11111100010110110", 69 => "00000111000011111", 
    70 => "00000111010010100", 71 => "11110011100000100", 
    72 => "11111100101101100", 73 => "11111110001110011", 
    74 => "00001011010010001", 75 => "11111001100010011", 
    76 => "11110100101101011", 77 => "11110110010011011", 
    78 => "00001000110100000", 79 => "11111101011011111", 
    80 => "00000001100001000", 81 => "00000100101111011", 
    82 => "00000001111101101", 83 => "11110110101001010", 
    84 => "11111110101111001", 85 => "11110110011010011", 
    86 => "11110110110110100", 87 => "00000110000001101", 
    88 => "11110101101100011", 89 => "00000011111110000", 
    90 => "11110110101111000", 91 => "11110110110001001", 
    92 => "11110011111000011", 93 => "11110110111000001", 
    94 => "11110110101100000", 95 => "00000010000110011", 
    96 => "11110111010000101", 97 => "00000100001001100", 
    98 => "11111011011001100", 99 => "11110100011111101", 
    100 => "00000110111111100", 101 => "00000010011100111", 
    102 => "11110111000111111", 103 => "00000101100111000", 
    104 => "00000000001001010", 105 => "00001001010110001", 
    106 => "00001001100001010", 107 => "00001001001011110", 
    108 => "11110011001101101", 109 => "00000010000110100", 
    110 => "11111110110001110", 111 => "00000100110111000", 
    112 => "00001001000110010", 113 => "11111001011111011", 
    114 => "11111011001010111", 115 => "11111010010000001", 
    116 => "00000001010011010", 117 => "00000110000101010", 
    118 => "11111111111110001", 119 => "00001000100010011", 
    120 => "00000011011010111", 121 => "00000111101110111", 
    122 => "00000100111000100", 123 => "11110110100111010", 
    124 => "11111000000000001", 125 => "11111011010101001", 
    126 => "00000000111110010", 127 => "00000111110000010", 
    128 => "00000100000001111", 129 => "11111000101011011", 
    130 => "00001000111000001", 131 => "00000101010000101", 
    132 => "00000100001011001", 133 => "00000111001000011", 
    134 => "11110100100001001", 135 => "11111101010101011", 
    136 => "11111001000010111", 137 => "00001000110011000", 
    138 => "11110110110000111", 139 => "11110111001101101", 
    140 => "11111101010100100", 141 => "11111110011010111", 
    142 => "11111001100001101", 143 => "00001011100110001", 
    144 => "11111110100110000", 145 => "00001011010111011", 
    146 => "00000010000000010", 147 => "00000101101100100", 
    148 => "00000011111111111", 149 => "11110011111010000", 
    150 => "11111010100111111", 151 => "00000110010100001", 
    152 => "00001011100110011", 153 => "11110111101000110", 
    154 => "00000001010011001", 155 => "00000001000101110", 
    156 => "00000110101111110", 157 => "11111101101100010", 
    158 => "11110111101111001", 159 => "00001001000011111", 
    160 => "11110101101110101", 161 => "11110110010001010", 
    162 => "11111011011101000", 163 => "00000011110010000", 
    164 => "00000101101011011", 165 => "00001011011010110", 
    166 => "11110100001001101", 167 => "11111011110000100", 
    168 => "11110011111011111", 169 => "11110101110000001", 
    170 => "11111101010100110", 171 => "11110100010011000", 
    172 => "11111110011100000", 173 => "11110101010001000", 
    174 => "11111010010011100", 175 => "11111010100001001", 
    176 => "11111100101011010", 177 => "00001001011011001", 
    178 => "00000001010011000", 179 => "11110111100111001", 
    180 => "00000001010010010", 181 => "11110101101001110", 
    182 => "11111101000011110", 183 => "00000000011111110", 
    184 => "11111001111110101", 185 => "11110111111010110", 
    186 => "11110011110110011", 187 => "11111001101000000", 
    188 => "11110111111010010", 189 => "00000001000100100", 
    190 => "00000110100101100", 191 => "11111000110000111", 
    192 => "11110111100010100", 193 => "00000100111110100", 
    194 => "11110110101110010", 195 => "00000010011101000", 
    196 => "00001010011011100", 197 => "11111011001011001", 
    198 => "00000101001011000", 199 => "11110110101111100", 
    200 => "11110111110101001", 201 => "00000010001101010", 
    202 => "00000011000100011", 203 => "00000111001011001", 
    204 => "00000011000100111", 205 => "00000011001010010", 
    206 => "11110101010111000", 207 => "11111000000101010", 
    208 => "11111100010010011", 209 => "00000001010100010", 
    210 => "11110110101000001", 211 => "11111010001101010", 
    212 => "11110101001111001", 213 => "00000111100010001", 
    214 => "11110100001111111", 215 => "11110100001001000", 
    216 => "11111011011011110", 217 => "00000111101011111", 
    218 => "00001001100100010", 219 => "11111100000011001", 
    220 => "00000100000000110", 221 => "00000011000101110", 
    222 => "11111111001111111", 223 => "00000000000100001", 
    224 => "11111010111000100", 225 => "11110110111101010", 
    226 => "00000110101100111", 227 => "00000101010001001", 
    228 => "00000010011001100", 229 => "11110110100110010", 
    230 => "11111011101101001", 231 => "11111110100110000", 
    232 => "11111100101001011", 233 => "11111000101001011", 
    234 => "00000010010010001", 235 => "00001011100011100", 
    236 => "00000110010111111", 237 => "11111110010011111", 
    238 => "11111101101100111", 239 => "00001000011101011", 
    240 => "11111101010100011", 241 => "00001001100110001", 
    242 => "11110110101101100", 243 => "11110111100001001", 
    244 => "00000110001111011", 245 => "11111101100101110", 
    246 => "11111101100110010", 247 => "00000001111101111", 
    248 => "11111100001010111", 249 => "00000100111111010", 
    250 => "00000101011101111", 251 => "11110011001111010", 
    252 => "00001001011000110", 253 => "00000100111011101", 
    254 => "11110100101010000", 255 => "00001011000101101", 
    256 => "00000000110100110", 257 => "11111011011101100", 
    258 => "11110111111001111", 259 => "00000100010101101", 
    260 => "00000110111111100", 261 => "11111010111101100", 
    262 => "11111011011001000", 263 => "00001000001100011", 
    264 => "00000000001101010", 265 => "11111101011011001", 
    266 => "11111111111101000", 267 => "00000110010011100", 
    268 => "11110110100010101", 269 => "11111111011010001", 
    270 => "11110110100110010", 271 => "11110011010110011", 
    272 => "11111101100110001", 273 => "11110011001101010", 
    274 => "11110100011111110", 275 => "00000011101111000", 
    276 => "00001000101001001", 277 => "11110101000011111", 
    278 => "00000011100111011", 279 => "00000111101001110", 
    280 => "11110110111100110", 281 => "00001011110100100", 
    282 => "11110111110001001", 283 => "11111011110001111", 
    284 => "11111001110001000", 285 => "11111100000010001", 
    286 => "00001000000101010", 287 => "00000110110001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_26 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_26 is
    component infer_layer_6_weights_V_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_26_rom_U :  component infer_layer_6_weights_V_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_1_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000001110111000", 1 => "1111001010111011", 2 => "0010010110011100", 
    3 => "1111111011111110", 4 => "1110100111010100", 5 => "0000001100011111", 
    6 => "0011100011110110", 7 => "0001011101101111", 8 => "1111111011001101", 
    9 => "1110101100010010", 10 => "1110011001110100", 11 => "1110101001101111", 
    12 => "1110001111000101", 13 => "0001001100110111", 14 => "1110010011011001", 
    15 => "0000100100100011", 16 => "1111110010001011", 17 => "1110011111101110", 
    18 => "0000110000010111", 19 => "0001000001101100", 20 => "0000110101001101", 
    21 => "0000010110011110", 22 => "0010010101111001", 23 => "0100101000000000", 
    24 => "0100000000010100", 25 => "1110111111100010", 26 => "0010100110110101", 
    27 => "0000110011110110", 28 => "1111000010011100", 29 => "0000010111111011", 
    30 => "0001010011010100", 31 => "0000010001101100", 32 => "1110101010110000", 
    33 => "0000011010110010", 34 => "1100111111001010", 35 => "0000001001101110", 
    36 => "1111010000111000", 37 => "0000000110101010", 38 => "1110010101010011", 
    39 => "0000100111010010", 40 => "1111111000011110", 41 => "0001010000000011", 
    42 => "0000001011111111", 43 => "0000010100001100", 44 => "1101111010000010", 
    45 => "1101111100001110", 46 => "1110101111000101", 47 => "0001101011000011", 
    48 => "0001000010101110", 49 => "0001110110011110", 50 => "0000001000011001", 
    51 => "0001001110001111", 52 => "0001001001111010", 53 => "1110101100100100", 
    54 => "1100000000011111", 55 => "0011010110100110", 56 => "0000111000001111", 
    57 => "1110111000000110", 58 => "0001001111111001", 59 => "0001010011010000", 
    60 => "0001001010111011", 61 => "1111101001101011", 62 => "0000010101101001", 
    63 => "1111101101100101", 64 => "0000111111100001", 65 => "1111111011100000", 
    66 => "1101001010110001", 67 => "1111101100000010", 68 => "1111001110001101", 
    69 => "1110111100010111", 70 => "1110101001111000", 71 => "1110101100101111", 
    72 => "1111000010110011", 73 => "1110111010110111", 74 => "1110100100100100", 
    75 => "1110110101010111", 76 => "1011001110101101", 77 => "1100110111110000", 
    78 => "0001000111011111", 79 => "1111101100010111", 80 => "1110110111011010", 
    81 => "0001010110111111", 82 => "0000010011111111", 83 => "1111110000000101", 
    84 => "1111011010111011", 85 => "0001001000101001", 86 => "1111110010101011", 
    87 => "1100010101000110", 88 => "1100101111101110", 89 => "0000110010000110", 
    90 => "1101001110111110", 91 => "1111101110000101", 92 => "1110111100111100", 
    93 => "1111101010000000", 94 => "1111001010101010", 95 => "0000111010111101", 
    96 => "1111011100111101", 97 => "0000111001000001", 98 => "0011011101001101", 
    99 => "1111111011000001", 100 => "0000000111011000", 101 => "0001011101010101", 
    102 => "0010110111110100", 103 => "1110100010000001", 104 => "0000000111000100", 
    105 => "1111101100000110", 106 => "1110101001111010", 107 => "0001001111001111", 
    108 => "1110011101101101", 109 => "0000011110010010", 110 => "1110100001010111", 
    111 => "0000000100111111", 112 => "1110110001111101", 113 => "0000100101110100", 
    114 => "0000010110000111", 115 => "0001000110001110", 116 => "1111001100000011", 
    117 => "0001011000001010", 118 => "0010100011100000", 119 => "0010111100110011", 
    120 => "1110111110111110", 121 => "1111110111010101", 122 => "0001111111010011", 
    123 => "0001010111011100", 124 => "1110011000100000", 125 => "0000101001000001", 
    126 => "1111100101111010", 127 => "1110111100101011", 128 => "0000110110011110", 
    129 => "1110110101100001", 130 => "0000101101001011", 131 => "0000000011011000", 
    132 => "1111111111001101", 133 => "0000111100000111", 134 => "0001000011001010", 
    135 => "1111111100011111", 136 => "0000010101111101", 137 => "0001000110001001", 
    138 => "0000011000010010", 139 => "0001100011101000", 140 => "1110100000000000", 
    141 => "1110101100001110", 142 => "0000111110111110", 143 => "1111101100010011", 
    144 => "1111110001111111", 145 => "0001110111111111", 146 => "0000101101000011", 
    147 => "1111011011000110", 148 => "1111111001100011", 149 => "1111001011001011", 
    150 => "1110100011100000", 151 => "0101110010100100", 152 => "1111110111011110", 
    153 => "1111100101110010", 154 => "0000000111110110", 155 => "1111000010111101", 
    156 => "0000111110101000", 157 => "0001101000010101", 158 => "0001100010010010", 
    159 => "1111010001111110", 160 => "0001001111000010", 161 => "1111110101100001", 
    162 => "1100100001000000", 163 => "1111101010000111", 164 => "0000110010110101", 
    165 => "1111010100001100", 166 => "0000001011101011", 167 => "1111000011010011", 
    168 => "1110011101001101", 169 => "1110101011110101", 170 => "0000100111011010", 
    171 => "0001100011110110", 172 => "1110101100000111", 173 => "1111011101111101", 
    174 => "0000001010110001", 175 => "0000011101001010", 176 => "0000100001010101", 
    177 => "1111000010101111", 178 => "1111111001010010", 179 => "1111101110001001", 
    180 => "0001100010010101", 181 => "0000001010011110", 182 => "1111011001010101", 
    183 => "1011101011010010", 184 => "1101011110010000", 185 => "0000110010000111", 
    186 => "1100001000100011", 187 => "0000111001110111", 188 => "0001010110010000", 
    189 => "1111101100110000", 190 => "0001000011010111", 191 => "1111110110101111", 
    192 => "1110100001001101", 193 => "1111111100110100", 194 => "0011000100000111", 
    195 => "0000100101000000", 196 => "1111110010111011", 197 => "0001000010110001", 
    198 => "0010110000101100", 199 => "1110111100100100", 200 => "1111001010000010", 
    201 => "0001000101100110", 202 => "0001011110110111", 203 => "1111011010000101", 
    204 => "0000011011110001", 205 => "0010100001110000", 206 => "0001000001100111", 
    207 => "1111100101010000", 208 => "0001000111110001", 209 => "1110011111000001", 
    210 => "1110110110011000", 211 => "0000010111000011", 212 => "1111011100111100", 
    213 => "1110110100101110", 214 => "0100000011000000", 215 => "0011000100000111", 
    216 => "1110010001010110", 217 => "0000100001010010", 218 => "0010100000011011", 
    219 => "1111110010110101", 220 => "0000111111011100", 221 => "0001001000101000", 
    222 => "0000000010101101", 223 => "0001001011101111", 224 => "1110011001001100", 
    225 => "0000111001010001", 226 => "0011001100111111", 227 => "0001000011010100", 
    228 => "1111111010110111", 229 => "1111001010010010", 230 => "0011010110010110", 
    231 => "1111010100101001", 232 => "1111010011101010", 233 => "1111000111000000", 
    234 => "1111001010100010", 235 => "1110101101111110", 236 => "0010001101111100", 
    237 => "0001101001111000", 238 => "0000011110000001", 239 => "1111100110010100", 
    240 => "0000110111010001", 241 => "1111011110110100", 242 => "0000100101101000", 
    243 => "0000111000110010", 244 => "0000011100100100", 245 => "0000000000110001", 
    246 => "0001111011100110", 247 => "0100010011001111", 248 => "1111010001100001", 
    249 => "1110101110110100", 250 => "0011000111111000", 251 => "0000011000000110", 
    252 => "1111001010001010", 253 => "0001001000101111", 254 => "0001100011101111", 
    255 => "1110101101101001", 256 => "1110111001011000", 257 => "1111001000000011", 
    258 => "0000000110011110", 259 => "1111011011111001", 260 => "0000010001101101", 
    261 => "0000010101110011", 262 => "1110110111111011", 263 => "0001010111011101", 
    264 => "1111001110101100", 265 => "0000111100011100", 266 => "1111000001100011", 
    267 => "0000111000000000", 268 => "1101001100000000", 269 => "1101011110100100", 
    270 => "1111010100110111", 271 => "0000001101111110", 272 => "0001011111011010", 
    273 => "0000100000001101", 274 => "1111101000101110", 275 => "1111100100100101", 
    276 => "1110101001001011", 277 => "0000000010100001", 278 => "0001011100011100", 
    279 => "1110110001100100", 280 => "0001001001111101", 281 => "1111100100101000", 
    282 => "1111000110001011", 283 => "1110101000010011", 284 => "0000110010010111", 
    285 => "0001001011011101", 286 => "1110100101101101", 287 => "1111111111100110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_1 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_1 is
    component infer_layer_6_weights_V_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_1_rom_U :  component infer_layer_6_weights_V_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_31_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_31_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00100010101101", 1 => "11010111001000", 2 => "10100010011111", 
    3 => "11101010001000", 4 => "00110111010110", 5 => "10010001000101", 
    6 => "10100101111001", 7 => "01010100101111", 8 => "01001110111011", 
    9 => "11001000111101", 10 => "00111010110101", 11 => "10110001100001", 
    12 => "00011001010110", 13 => "01000011111110", 14 => "10111101000000", 
    15 => "10111000000101", 16 => "01000110011110", 17 => "11111000100000", 
    18 => "00111001011000", 19 => "01011011101001", 20 => "11101110100111", 
    21 => "01001011111010", 22 => "10111001010010", 23 => "01010101100100", 
    24 => "11011111001110", 25 => "11001010100110", 26 => "11011000010111", 
    27 => "10100011100011", 28 => "00010001110111", 29 => "00110111111110", 
    30 => "10011100100011", 31 => "00100101111011", 32 => "00010000000110", 
    33 => "00110001010101", 34 => "01100111001110", 35 => "10100100001000", 
    36 => "01100010001011", 37 => "11011111000011", 38 => "11111101111101", 
    39 => "10011011010000", 40 => "01001111101011", 41 => "01100010010001", 
    42 => "10110011000110", 43 => "11101100001110", 44 => "11001101010011", 
    45 => "10100100001100", 46 => "00100000010001", 47 => "00010011011001", 
    48 => "00010010011101", 49 => "01001110111111", 50 => "00010011110110", 
    51 => "10011011001110", 52 => "10111000010000", 53 => "00101100001110", 
    54 => "11001000000110", 55 => "01010111101001", 56 => "01011001111000", 
    57 => "10011001000001", 58 => "01011001110010", 59 => "10111011111010", 
    60 => "01001110101110", 61 => "00011111010011", 62 => "11011001110001", 
    63 => "10100101101110", 64 => "00110011110100", 65 => "00000100110000", 
    66 => "00001101111101", 67 => "00011101010001", 68 => "00011101101100", 
    69 => "01000111011101", 70 => "11111101010001", 71 => "01000111000011", 
    72 => "10100110101010", 73 => "10100000001000", 74 => "01100111111110", 
    75 => "11100011011110", 76 => "10101111110000", 77 => "00110001010000", 
    78 => "00110010101111", 79 => "10011110101011", 80 => "11111111110111", 
    81 => "11101100011000", 82 => "10010001100000", 83 => "11001110001011", 
    84 => "11010110101000", 85 => "11010110001110", 86 => "11111000001010", 
    87 => "10110011100011", 88 => "00101101000010", 89 => "11011111010111", 
    90 => "10100001111011", 91 => "10110010011111", 92 => "11111001000100", 
    93 => "11010101011110", 94 => "11110111111101", 95 => "11000110001000", 
    96 => "10101110110010", 97 => "10111000111100", 98 => "01000101011001", 
    99 => "00100000100101", 100 => "00111000110001", 101 => "11101001111011", 
    102 => "10101000101010", 103 => "11001101110011", 104 => "11001111001101", 
    105 => "01001001101101", 106 => "11001001110101", 107 => "01000100110011", 
    108 => "10100000111110", 109 => "10011110111100", 110 => "11110110001011", 
    111 => "00110100111100", 112 => "10111001110100", 113 => "10100110010011", 
    114 => "00110000100111", 115 => "00110011111010", 116 => "10110100101011", 
    117 => "10110101010101", 118 => "11001110111110", 119 => "11100011010110", 
    120 => "10111101111100", 121 => "11001111010010", 122 => "10111001010010", 
    123 => "10011101000011", 124 => "00001100111111", 125 => "10101100001000", 
    126 => "11100001001110", 127 => "11001111011101", 128 => "10111101100101", 
    129 => "00111001000010", 130 => "00011001011001", 131 => "00011100011110", 
    132 => "11100011000100", 133 => "11010100001101", 134 => "11000111001100", 
    135 => "11001110001100", 136 => "11101011001010", 137 => "01001011010101", 
    138 => "00011100000111", 139 => "01010000110101", 140 => "11010010000100", 
    141 => "01000111110010", 142 => "10110100011100", 143 => "00000100010111", 
    144 => "00011101101110", 145 => "01000011101100", 146 => "00010000001010", 
    147 => "00100110010110", 148 => "11011111110000", 149 => "00110000111111", 
    150 => "10101001011110", 151 => "01010111100101", 152 => "11010001010011", 
    153 => "00110011110100", 154 => "11111011010011", 155 => "11110001011101", 
    156 => "00110101110110", 157 => "11000000001101", 158 => "01000100010100", 
    159 => "11011111001011", 160 => "11001001011110", 161 => "00000011001111", 
    162 => "00011101111011", 163 => "10011001000101", 164 => "11000100010011", 
    165 => "11000110111001", 166 => "01000011110011", 167 => "10110111101011", 
    168 => "01010101110001", 169 => "11100101000010", 170 => "10101100011100", 
    171 => "01010001101000", 172 => "10100001110010", 173 => "11101000110100", 
    174 => "01000000000101", 175 => "11100111100010", 176 => "10100000011110", 
    177 => "11010011101010", 178 => "11110100110001", 179 => "10101001010111", 
    180 => "10101011101101", 181 => "11001110010001", 182 => "10101100010100", 
    183 => "10011110111000", 184 => "10100100101000", 185 => "01001011001111", 
    186 => "00011100011011", 187 => "10111000111010", 188 => "01011100111110", 
    189 => "10100110000111", 190 => "00000101000101", 191 => "00110011101011", 
    192 => "00010000001100", 193 => "11101110100100", 194 => "01011000000110", 
    195 => "00010011111110", 196 => "11110110000110", 197 => "00011111100011", 
    198 => "11011010111000", 199 => "11101111111010", 200 => "10100101011001", 
    201 => "11101111100011", 202 => "01011011111010", 203 => "10111010110000", 
    204 => "11000000000111", 205 => "10011111000110", 206 => "01100111011100", 
    207 => "00111101110001", 208 => "00111010001000", 209 => "10011010000000", 
    210 => "01010111000010", 211 => "01001101000110", 212 => "00100111001000", 
    213 => "01001010111011", 214 => "00000111001101", 215 => "01010001111111", 
    216 => "00101111001110", 217 => "01010011100011", 218 => "00110100011100", 
    219 => "00011011001001", 220 => "10101010011110", 221 => "01010111101100", 
    222 => "00111011110000", 223 => "10101001110101", 224 => "10101100010000", 
    225 => "00000010011101", 226 => "10100000000111", 227 => "00001010010000", 
    228 => "00001011101000", 229 => "00100110011010", 230 => "10111001010101", 
    231 => "11000011100100", 232 => "11000011101001", 233 => "11101011110000", 
    234 => "00010011000000", 235 => "11110000100111", 236 => "11010100001001", 
    237 => "00000101110101", 238 => "01100100010010", 239 => "11101000111001", 
    240 => "11010011100110", 241 => "10111101010110", 242 => "00010101110011", 
    243 => "11111100111000", 244 => "00000110001011", 245 => "10001100011111", 
    246 => "00110001010010", 247 => "01100011111010", 248 => "10011011011100", 
    249 => "00010000111110", 250 => "10110000111111", 251 => "01000110010000", 
    252 => "10001011111000", 253 => "01011011111100", 254 => "10110000101001", 
    255 => "00101010100000", 256 => "11111001000011", 257 => "00001001010011", 
    258 => "10011101000011", 259 => "00011100001011", 260 => "01001100101110", 
    261 => "11100101010100", 262 => "10100011001000", 263 => "11010110100000", 
    264 => "01010111010001", 265 => "00001011110001", 266 => "11011111010111", 
    267 => "10011101110101", 268 => "01010101100110", 269 => "00000011110011", 
    270 => "11010101010110", 271 => "00110000010001", 272 => "11111111110100", 
    273 => "01000101011011", 274 => "11001100101010", 275 => "00011110000110", 
    276 => "01010101010011", 277 => "11111001101010", 278 => "01011001110100", 
    279 => "11100000011001", 280 => "01001100000100", 281 => "00100010110100", 
    282 => "10111101010010", 283 => "01010001110010", 284 => "00110000100000", 
    285 => "00101101110101", 286 => "01000111101101", 287 => "01011010001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_31 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_31 is
    component infer_layer_4_weights_V_31_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_31_rom_U :  component infer_layer_4_weights_V_31_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_20_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_20_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001000110000110", 1 => "0000101100110010", 2 => "1110111000111010", 
    3 => "0001010101011101", 4 => "0001011101110011", 5 => "0001010010110000", 
    6 => "0000101111110010", 7 => "0001100011000001", 8 => "1111011101100001", 
    9 => "1111001101000001", 10 => "0000011010001100", 11 => "0000100110110100", 
    12 => "1111100011001010", 13 => "0000101010011001", 14 => "1110100010000111", 
    15 => "1111111000000010", 16 => "0000001111110110", 17 => "0000000100001010", 
    18 => "0000001010101100", 19 => "1111000001001100", 20 => "1110100100000101", 
    21 => "0000010111111100", 22 => "0000101011011100", 23 => "1110110000000101", 
    24 => "0001011111011010", 25 => "0001010011111000", 26 => "1111101110111101", 
    27 => "1110010111111101", 28 => "0001010110001100", 29 => "1111001100100010", 
    30 => "0000101001110111", 31 => "1110110111011000", 32 => "0000000010111011", 
    33 => "1110011100001000", 34 => "0001011100111110", 35 => "1110110100111111", 
    36 => "1110110100010101", 37 => "0000001010100111", 38 => "1110011101100101", 
    39 => "1111110101010011", 40 => "0000001000001000", 41 => "1111010101110011", 
    42 => "1111100110101010", 43 => "0001100000101101", 44 => "0000100100010111", 
    45 => "0000110101010010", 46 => "0001010011010000", 47 => "1110001001011001", 
    48 => "1111101101010111", 49 => "1110010100111110", 50 => "1111000011000101", 
    51 => "1110011101110111", 52 => "1111010001100110", 53 => "1111101100101011", 
    54 => "1111100001100001", 55 => "0000100101000011", 56 => "0000011100011111", 
    57 => "0001000011000010", 58 => "0001001110001010", 59 => "0000001000101011", 
    60 => "0000111100110111", 61 => "1111010110010111", 62 => "0001100001111000", 
    63 => "1111101101110111", 64 => "1111010011010011", 65 => "0000010001110010", 
    66 => "1111011011010111", 67 => "0001011110010011", 68 => "0001010001011001", 
    69 => "1111011101000000", 70 => "0000110000110110", 71 => "1110111001100110", 
    72 => "1111010101001101", 73 => "1111000101101001", 74 => "1111010000011100", 
    75 => "1111100100101101", 76 => "1111101100110111", 77 => "0000110010110011", 
    78 => "1110110110111010", 79 => "0001001011001100", 80 => "0000110111100110", 
    81 => "0000111000000011", 82 => "1111110111111100", 83 => "0000100100110111", 
    84 => "1111111100100000", 85 => "0001010110101001", 86 => "1111000101000101", 
    87 => "0000001100011101", 88 => "1110111101111000", 89 => "0001001101011110", 
    90 => "1111011010101011", 91 => "0001011000000010", 92 => "1111011000010011", 
    93 => "0000110000111011", 94 => "0001000011100100", 95 => "0000101101100101", 
    96 => "1110101101111111", 97 => "1110101110100101", 98 => "1110111111110000", 
    99 => "0000011001101111", 100 => "1110110100111011", 101 => "0001000100111001", 
    102 => "0001010001010000", 103 => "1111011101100110", 104 => "1110100010101001", 
    105 => "0000001110101101", 106 => "1111110010100001", 107 => "1111010001101110", 
    108 => "1111101010011100", 109 => "0001011111111101", 110 => "0001010000101000", 
    111 => "0000111101100010", 112 => "0000000000011100", 113 => "1111000111001110", 
    114 => "1111011111001000", 115 => "1111011001101010", 116 => "1110110000010101", 
    117 => "1110010110010101", 118 => "1111101001010011", 119 => "0001000101101010", 
    120 => "1110111011000000", 121 => "0000011001000011", 122 => "0000011000000100", 
    123 => "0000000011100111", 124 => "0001010011000101", 125 => "0001011011101011", 
    126 => "1111001010101000", 127 => "1111110110110011", 128 => "1110101001000010", 
    129 => "1110110000101010", 130 => "1111010001001101", 131 => "1111010000111100", 
    132 => "0001100011001111", 133 => "0001001011110111", 134 => "1111101100101000", 
    135 => "0000001101001110", 136 => "0001000101010111", 137 => "0000110110100111", 
    138 => "1110111100011010", 139 => "0000001100001111", 140 => "0001000101000101", 
    141 => "0000101000111010", 142 => "0001000011010110", 143 => "0000010001110000", 
    144 => "0000111100101011", 145 => "1111101101111101", 146 => "1111001101011011", 
    147 => "0000001111011000", 148 => "0000101011111111", 149 => "0001010011001011", 
    150 => "1111001111001000", 151 => "1111010110111000", 152 => "1111101101111100", 
    153 => "1111100110110110", 154 => "1111001110101010", 155 => "0000101011110110", 
    156 => "0001001010110101", 157 => "0001001001001100", 158 => "1111001011001000", 
    159 => "1111111000001111", 160 => "1110010100010110", 161 => "0000100000110111", 
    162 => "1111111111011111", 163 => "1111011001000101", 164 => "0000101110101110", 
    165 => "0001011100111001", 166 => "1111010000011100", 167 => "0000110010100111", 
    168 => "0001000101110000", 169 => "1111110111000110", 170 => "1111110110010011", 
    171 => "1110011000101011", 172 => "0001100111010111", 173 => "0001010011100110", 
    174 => "0000101100111001", 175 => "0000000100110001", 176 => "1110110111101111", 
    177 => "0000011100000111", 178 => "1110011001110100", 179 => "1111100011010111", 
    180 => "0001000100111011", 181 => "0000111110001111", 182 => "0000010010010100", 
    183 => "0001001100010110", 184 => "0000011100010011", 185 => "1111000010101111", 
    186 => "1110111100111111", 187 => "0000001001111111", 188 => "0000000000110110", 
    189 => "0000111101010101", 190 => "0001011111100111", 191 => "1111010111111010", 
    192 => "1111011101011011", 193 => "0000101100100100", 194 => "0001001010101110", 
    195 => "1111110111111101", 196 => "1111111110010000", 197 => "1110111100111100", 
    198 => "0000011011010111", 199 => "0000000001110101", 200 => "1111100110010111", 
    201 => "0000010001011001", 202 => "1111000011101010", 203 => "1111001000011110", 
    204 => "1111110011101100", 205 => "1111110011010001", 206 => "1111001100001101", 
    207 => "0000101100010110", 208 => "0000100010110110", 209 => "1110011010100001", 
    210 => "0000000100000011", 211 => "0000000111101000", 212 => "1111011111001000", 
    213 => "1111011011011011", 214 => "0001011110101001", 215 => "1110101101010100", 
    216 => "1111101101111100", 217 => "1110111110101010", 218 => "1111101101100100", 
    219 => "0000100101110000", 220 => "0000010101001111", 221 => "0000011001111011", 
    222 => "0000011010100100", 223 => "0000011100011111", 224 => "1111101001011011", 
    225 => "1111101001101001", 226 => "0000100010111000", 227 => "1110100011111101", 
    228 => "1110101000101000", 229 => "0001100001111110", 230 => "1110111001000011", 
    231 => "0000000001001110", 232 => "1110011111100010", 233 => "1110100001111111", 
    234 => "0001001101100001", 235 => "0000011110111000", 236 => "0000101101111101", 
    237 => "0001011100000010", 238 => "1110110100010001", 239 => "0001001010110111", 
    240 => "0000000100111010", 241 => "0000010101111111", 242 => "1111101001010100", 
    243 => "0000010000001100", 244 => "1110010101011100", 245 => "0001000111110110", 
    246 => "1111110011000110", 247 => "0000011111011100", 248 => "1110100100100110", 
    249 => "1110100111001010", 250 => "1111011100001000", 251 => "1111111011000010", 
    252 => "1111110100101100", 253 => "1111011100110111", 254 => "1110101001010010", 
    255 => "1111000011111100", 256 => "0001010010001010", 257 => "1110011011101110", 
    258 => "0001001110010101", 259 => "1111100000010011", 260 => "1111101101110001", 
    261 => "1110110011101110", 262 => "0000111100111101", 263 => "1111011010101100", 
    264 => "0000100010000110", 265 => "1111101111110011", 266 => "0000011001001011", 
    267 => "0000011010011111", 268 => "1110100011001010", 269 => "1110101101001001", 
    270 => "0001100101011111", 271 => "1111001100010001", 272 => "0001010100001010", 
    273 => "1110100101000110", 274 => "0001010100100011", 275 => "0000110000110100", 
    276 => "1111001010000000", 277 => "0000111010011110", 278 => "1111101101011010", 
    279 => "0001010111111111", 280 => "1111111100100101", 281 => "0000110111100110", 
    282 => "0000000111100010", 283 => "1111111110001011", 284 => "1110111001000101", 
    285 => "1111111011001101", 286 => "0001001100000001", 287 => "1110110010010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_20 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_20 is
    component infer_layer_4_weights_V_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_20_rom_U :  component infer_layer_4_weights_V_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



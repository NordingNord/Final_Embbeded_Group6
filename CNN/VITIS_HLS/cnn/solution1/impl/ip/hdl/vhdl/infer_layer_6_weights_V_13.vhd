-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_13_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110111110111101", 1 => "1110110110111011", 2 => "0001101000110111", 
    3 => "0000011110101011", 4 => "1110100010000001", 5 => "1111110001101001", 
    6 => "0000111100011111", 7 => "1110011010001000", 8 => "1111001110110010", 
    9 => "1111101110101011", 10 => "0001100010101010", 11 => "0000100001101011", 
    12 => "1111100011010110", 13 => "0001001110000001", 14 => "0001001100101100", 
    15 => "1111010011100110", 16 => "1111000101000000", 17 => "0000111011010110", 
    18 => "1110111001100110", 19 => "0001001010010110", 20 => "1111001101001111", 
    21 => "0000010000100111", 22 => "0010110010001001", 23 => "1111100111000111", 
    24 => "0011011001111001", 25 => "0000001011110111", 26 => "0001010001111010", 
    27 => "0000101101110111", 28 => "1111001011010100", 29 => "1111010000001110", 
    30 => "0000011001011001", 31 => "1110101100011101", 32 => "1111000111010110", 
    33 => "1111111111011110", 34 => "1110101010110000", 35 => "1110111111001110", 
    36 => "0000000000110000", 37 => "0001011101100000", 38 => "1111000111011000", 
    39 => "1110111100011110", 40 => "0000000011011010", 41 => "1111110010010000", 
    42 => "0001001010001100", 43 => "1111100110111000", 44 => "1100111000101010", 
    45 => "1101110110101111", 46 => "0001001111000010", 47 => "0001100111111100", 
    48 => "0000110011110001", 49 => "0001110000011011", 50 => "1111100000001101", 
    51 => "0001010001101110", 52 => "1110010110101011", 53 => "1110101001110010", 
    54 => "0000110110111101", 55 => "0010010111001011", 56 => "0001010111100111", 
    57 => "1111111101100101", 58 => "0001011011111000", 59 => "1110110011000111", 
    60 => "0001000100110001", 61 => "1110111010001101", 62 => "0000010100000101", 
    63 => "0001011110010111", 64 => "0001001001010111", 65 => "1111101010010011", 
    66 => "1101101101010000", 67 => "1110011011110000", 68 => "1110100111000001", 
    69 => "1110110010000000", 70 => "1101011110100111", 71 => "1111000101000000", 
    72 => "1110101000100111", 73 => "1110101001011100", 74 => "0001001110110110", 
    75 => "1110111100011010", 76 => "1101100010101100", 77 => "1101110100100100", 
    78 => "1111111010011001", 79 => "0000001110000011", 80 => "1111101100001000", 
    81 => "0000010011100111", 82 => "1110111001111111", 83 => "0000000101100001", 
    84 => "0000011000010111", 85 => "1110011110101111", 86 => "1101001010001100", 
    87 => "0000100000001011", 88 => "0010101110011100", 89 => "0001011010010001", 
    90 => "1111000011010011", 91 => "0000001000111010", 92 => "1111001011101011", 
    93 => "1111110100011011", 94 => "1110100010001100", 95 => "0001001010010101", 
    96 => "0001010100001011", 97 => "1110101100111010", 98 => "1111101010001110", 
    99 => "1111100011001001", 100 => "0000001000100100", 101 => "0001011111110000", 
    102 => "0000010101101110", 103 => "1110100010010100", 104 => "0001001001001010", 
    105 => "0001011011110101", 106 => "1111101010001010", 107 => "0001010001000001", 
    108 => "0001100011111011", 109 => "0000111011010001", 110 => "1111011110000010", 
    111 => "1110011011111111", 112 => "0000011011101001", 113 => "1110100000010011", 
    114 => "0001010010000010", 115 => "0000011000101101", 116 => "1111110111000001", 
    117 => "1111000010111001", 118 => "0010011000111001", 119 => "0000000011011101", 
    120 => "0000011001011101", 121 => "0001010111110001", 122 => "1111001000000010", 
    123 => "1111100100011000", 124 => "1111010100100010", 125 => "0000011110010101", 
    126 => "0000111100001010", 127 => "0000010110101011", 128 => "1111111001110011", 
    129 => "0001010000101000", 130 => "0010111101101011", 131 => "0000111101111001", 
    132 => "1111010110101011", 133 => "0001001110011100", 134 => "0000000001001000", 
    135 => "0000011100011000", 136 => "1111110110110010", 137 => "0000100010000101", 
    138 => "1111010011111110", 139 => "0000011010000101", 140 => "1111111010100000", 
    141 => "0010110010010111", 142 => "1111111110111010", 143 => "1110100101101001", 
    144 => "1110011110100110", 145 => "1111110100111100", 146 => "0000100100000101", 
    147 => "0000100001110101", 148 => "1110100001100011", 149 => "0000000010000110", 
    150 => "0010110011011101", 151 => "0010011011111010", 152 => "0000000111111110", 
    153 => "1110011110010000", 154 => "0010010111111100", 155 => "0000100100000000", 
    156 => "0000111100101111", 157 => "0001000111010110", 158 => "0000100001110000", 
    159 => "1110101000010010", 160 => "1110110010011011", 161 => "0000001111011100", 
    162 => "0001101010010111", 163 => "0000110001100011", 164 => "0001010000111011", 
    165 => "0000110000101100", 166 => "0001101000011101", 167 => "1111010011101011", 
    168 => "1110011010110000", 169 => "0000001010100010", 170 => "0001100010011111", 
    171 => "1111110001111110", 172 => "0000111000000111", 173 => "0001111001101000", 
    174 => "1111110010100001", 175 => "1111101010101100", 176 => "0000100100011101", 
    177 => "1110001111101100", 178 => "0000101110011011", 179 => "0000010000100000", 
    180 => "0001011001101111", 181 => "0001011011111100", 182 => "1111101011001010", 
    183 => "0010000011110111", 184 => "0000001010111000", 185 => "1110110011111110", 
    186 => "0000000001010011", 187 => "1111110001000001", 188 => "1111111100000110", 
    189 => "1111010100100101", 190 => "1111100100000010", 191 => "1110010100001000", 
    192 => "0001100000101111", 193 => "1111011111010001", 194 => "1100110111110010", 
    195 => "1110011101011101", 196 => "1110101101101011", 197 => "0001001100100010", 
    198 => "0001001101110111", 199 => "1111100000111101", 200 => "0001001000111011", 
    201 => "1111011010000111", 202 => "1111111111111011", 203 => "0000101000100111", 
    204 => "1101101010101010", 205 => "0000011110001011", 206 => "1110011101101111", 
    207 => "0001110011100110", 208 => "1111011001101111", 209 => "1110111101100111", 
    210 => "1111110011001111", 211 => "0000110000011000", 212 => "1111100111110001", 
    213 => "1110111001010100", 214 => "0001110011000011", 215 => "1101000100100011", 
    216 => "0001010000100001", 217 => "0000011110000011", 218 => "1110000101010101", 
    219 => "0000111001001010", 220 => "1110111111010001", 221 => "0001100111011000", 
    222 => "1110011001000000", 223 => "0001001010001010", 224 => "0000001111000100", 
    225 => "0001100100101101", 226 => "1110111110100110", 227 => "1110111110000001", 
    228 => "1111011000100000", 229 => "0001001100011101", 230 => "0001001111101011", 
    231 => "0000011101001001", 232 => "0000100011001100", 233 => "1111100100010101", 
    234 => "0000001110010001", 235 => "0001100100011101", 236 => "0000000000100100", 
    237 => "0000011110011100", 238 => "0000111011110000", 239 => "1110101000110101", 
    240 => "0001011110000100", 241 => "0000011100010000", 242 => "0000111100011100", 
    243 => "0000011110001111", 244 => "1110101101100111", 245 => "1111011111100100", 
    246 => "0001101001011111", 247 => "1101111100110101", 248 => "0000111011111110", 
    249 => "1110001101101101", 250 => "1111011100111001", 251 => "1111000101000000", 
    252 => "1111100110100011", 253 => "0001011101001100", 254 => "0000110011101010", 
    255 => "1111011000101100", 256 => "0001000111010101", 257 => "1111101000000000", 
    258 => "0001001111010010", 259 => "0000011010000000", 260 => "1111011000010100", 
    261 => "1110011100010001", 262 => "0000100011000000", 263 => "1111011011010101", 
    264 => "1110111011000111", 265 => "1111000010100010", 266 => "1111110111101011", 
    267 => "1111001001010001", 268 => "0000111011000000", 269 => "1110111100101110", 
    270 => "1110101011110111", 271 => "1111001011011110", 272 => "1110101010010110", 
    273 => "0000101111010100", 274 => "0000000000100000", 275 => "1110110011011001", 
    276 => "1110110111011011", 277 => "1111110111111000", 278 => "0001000000010101", 
    279 => "0001010101011100", 280 => "0000111111100010", 281 => "0001000010101010", 
    282 => "0001011100001100", 283 => "1111001110011001", 284 => "0000000000010111", 
    285 => "1111011001111000", 286 => "0001100010011110", 287 => "1111100110000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_13 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_13 is
    component infer_layer_6_weights_V_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_13_rom_U :  component infer_layer_6_weights_V_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



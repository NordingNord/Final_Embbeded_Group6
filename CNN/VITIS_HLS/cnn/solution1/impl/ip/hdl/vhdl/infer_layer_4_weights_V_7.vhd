-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_7_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_7_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001010111001100", 1 => "0000011101110010", 2 => "1111110101110101", 
    3 => "1111011111011100", 4 => "0000101111010101", 5 => "1111100100010010", 
    6 => "1110100011101110", 7 => "0001000110010111", 8 => "0000101011011001", 
    9 => "0000111010011110", 10 => "0001000100110101", 11 => "0001011010000111", 
    12 => "0000001011011010", 13 => "0000001011001000", 14 => "1111101101111101", 
    15 => "1110100101001100", 16 => "1111100011011101", 17 => "0000010111010110", 
    18 => "1111010011010000", 19 => "0000100101011101", 20 => "1110011011111111", 
    21 => "1111111011010010", 22 => "1111111011110101", 23 => "1111100111001001", 
    24 => "0001100001001000", 25 => "1111001101010100", 26 => "1110101111100100", 
    27 => "1111011011100000", 28 => "1110100111110011", 29 => "1110010111011011", 
    30 => "0000010100110111", 31 => "0001010101101000", 32 => "0000111001100110", 
    33 => "0000110000010010", 34 => "0000011111010010", 35 => "0000111101000000", 
    36 => "1111000000110011", 37 => "1110101111101111", 38 => "1111100010010101", 
    39 => "1110100101011100", 40 => "1110011100000011", 41 => "1111011101000110", 
    42 => "0000001011100111", 43 => "1111111100010111", 44 => "0000001000101101", 
    45 => "1111100101000010", 46 => "1110111010011011", 47 => "0000101000111111", 
    48 => "0001100010101111", 49 => "1110111011101011", 50 => "0000110011100010", 
    51 => "0001001010011100", 52 => "0000101110111100", 53 => "0000111100101010", 
    54 => "1110101000100001", 55 => "0000111100111100", 56 => "0000011101100110", 
    57 => "0000010000110110", 58 => "1111001110011101", 59 => "0001011001011000", 
    60 => "1110101101101100", 61 => "1110011011001110", 62 => "0001010100100011", 
    63 => "1110101001111001", 64 => "0000010100101010", 65 => "0000100100101111", 
    66 => "0001100000000010", 67 => "1111110110110001", 68 => "1111110110011010", 
    69 => "0000010000011011", 70 => "1111011110111000", 71 => "1111001111101100", 
    72 => "0001001100010111", 73 => "1110101110111000", 74 => "1111010101001111", 
    75 => "0000000000111010", 76 => "0001100011010100", 77 => "1110100011010011", 
    78 => "0001000010101000", 79 => "1111111001110100", 80 => "1111011011101011", 
    81 => "0000111011101001", 82 => "0001100001110110", 83 => "0001100101001101", 
    84 => "1110011010010001", 85 => "1110011010101001", 86 => "0000001101110010", 
    87 => "1111100001111011", 88 => "1110011101011101", 89 => "1111101100010110", 
    90 => "0000011011111001", 91 => "1111111000000100", 92 => "0000101000001110", 
    93 => "0001001001011011", 94 => "1111100110000100", 95 => "1111100110110101", 
    96 => "0000001011000010", 97 => "1111100101100000", 98 => "0000011101010010", 
    99 => "1111111101000000", 100 => "0000011000011001", 101 => "1111110000010110", 
    102 => "0000011010100100", 103 => "1110101101100010", 104 => "1111110001010100", 
    105 => "1110110000101101", 106 => "0001000101100000", 107 => "0000011000110010", 
    108 => "1110101010100101", 109 => "1111111111111111", 110 => "0001100000000101", 
    111 => "0000000100110111", 112 => "1110110010010100", 113 => "0001010101011011", 
    114 => "1110011101100101", 115 => "0000100100001000", 116 => "1110101001100101", 
    117 => "0000100101101110", 118 => "1110101100001101", 119 => "0001010111110010", 
    120 => "0001011001101101", 121 => "0000100011111111", 122 => "1111011101010011", 
    123 => "1111011111011010", 124 => "1110110101110001", 125 => "1111110001000110", 
    126 => "0001000100010111", 127 => "0001011100110000", 128 => "0000100011001110", 
    129 => "0000001011110010", 130 => "0001001010101001", 131 => "0000000000011100", 
    132 => "1110011010000010", 133 => "0000001100001000", 134 => "1111101011000110", 
    135 => "1110110010111010", 136 => "1111101011011010", 137 => "1111010110011101", 
    138 => "1110111010111010", 139 => "0001100010110011", 140 => "0000011001001011", 
    141 => "0001100011101010", 142 => "1111101111001001", 143 => "1111101110010100", 
    144 => "0001001101100110", 145 => "0000010001010110", 146 => "1111100000011101", 
    147 => "1110110000101010", 148 => "0000000111011001", 149 => "0000000110110100", 
    150 => "0001011011110101", 151 => "1111011111010000", 152 => "0001100111001011", 
    153 => "0000010000000000", 154 => "0001000100110000", 155 => "0001001110011000", 
    156 => "0000100101110011", 157 => "0000101100010110", 158 => "0000011100110110", 
    159 => "1110111100101011", 160 => "1111100011110010", 161 => "1111110011000100", 
    162 => "0001011001110101", 163 => "1110111101011111", 164 => "0000011100000110", 
    165 => "0001010101100001", 166 => "0000010101011011", 167 => "0000001110111001", 
    168 => "0000010010110011", 169 => "1111011000101101", 170 => "1111000010000001", 
    171 => "0000011000110010", 172 => "1111110001001101", 173 => "1111110110100010", 
    174 => "0000000101000010", 175 => "0001010011010000", 176 => "1111101110000010", 
    177 => "1111100111111010", 178 => "0001010010101000", 179 => "1111001000010011", 
    180 => "1110101100010010", 181 => "1111000010000100", 182 => "0000011001011111", 
    183 => "0000011011100101", 184 => "0000010100011111", 185 => "1110100000011110", 
    186 => "0000001110101000", 187 => "1110101011011110", 188 => "0001000010000010", 
    189 => "0001011100001001", 190 => "0000001111010000", 191 => "1111111011000110", 
    192 => "1111100100011010", 193 => "0001011000111110", 194 => "1111001010110111", 
    195 => "1111110011001010", 196 => "0001011000001010", 197 => "1110101011100000", 
    198 => "0001001000010010", 199 => "0001010100010111", 200 => "1110110101001100", 
    201 => "1111011011000100", 202 => "0001011101110001", 203 => "0000101101111110", 
    204 => "0000011011010110", 205 => "0000011110101000", 206 => "0000011011011000", 
    207 => "1111000110100000", 208 => "0000010110101000", 209 => "0000001001010010", 
    210 => "1111111000100011", 211 => "1110110101110000", 212 => "0000001110101101", 
    213 => "1110111101001100", 214 => "1111011001010011", 215 => "0001010111011110", 
    216 => "1110110110111101", 217 => "0000110110011110", 218 => "0000010011000110", 
    219 => "1111001111001001", 220 => "0000100011111110", 221 => "1111011011001001", 
    222 => "1110111100000101", 223 => "0000001101011010", 224 => "0000011111010100", 
    225 => "0000110001010101", 226 => "0000010111011001", 227 => "0000000000111011", 
    228 => "1111100110000111", 229 => "0000111111001111", 230 => "0001011111110011", 
    231 => "0000010000101101", 232 => "0000011000111111", 233 => "0000011001111101", 
    234 => "0000010000101011", 235 => "1111010110101110", 236 => "0001010001010100", 
    237 => "1111110010001100", 238 => "0000010100001110", 239 => "0001000100100010", 
    240 => "0001001101101100", 241 => "0000001001010110", 242 => "0001011101110101", 
    243 => "1110101010001010", 244 => "1111011111111111", 245 => "1111100010101101", 
    246 => "1111000111010000", 247 => "1110110100111101", 248 => "0001100100110001", 
    249 => "0000100111111101", 250 => "0000010011011000", 251 => "1111011010010110", 
    252 => "1111101000010001", 253 => "0001010000100111", 254 => "1111011010010011", 
    255 => "0000010001100100", 256 => "1110101010011111", 257 => "1111110110100000", 
    258 => "1111101001100101", 259 => "0000101010110100", 260 => "0001011101000100", 
    261 => "1110101100101101", 262 => "1111010101100000", 263 => "1111110110000011", 
    264 => "1110100000101001", 265 => "0000110111001011", 266 => "0000111101010001", 
    267 => "0001010110100011", 268 => "1111101110010000", 269 => "1111101001110010", 
    270 => "1111110101010110", 271 => "1111100010110111", 272 => "0001100010110010", 
    273 => "0001011100010000", 274 => "0000011011010100", 275 => "1111111110111101", 
    276 => "1110011110010101", 277 => "1111010101111010", 278 => "0000101001011001", 
    279 => "0001011111101100", 280 => "1110110000010001", 281 => "1111011011111010", 
    282 => "0000000101111001", 283 => "1111100010111110", 284 => "1110111111111100", 
    285 => "0001000011100010", 286 => "1110110101101010", 287 => "1110111011000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_7 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_7 is
    component infer_layer_4_weights_V_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_7_rom_U :  component infer_layer_4_weights_V_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



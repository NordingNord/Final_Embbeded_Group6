-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_8_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111111110110", 1 => "00000110110111", 2 => "10111100111000", 
    3 => "01001010010110", 4 => "11001111110101", 5 => "11010110110011", 
    6 => "00101110100100", 7 => "11011001010001", 8 => "00010001000010", 
    9 => "00010001000110", 10 => "10011111110111", 11 => "00111000100001", 
    12 => "11010110101000", 13 => "00100100011100", 14 => "11001100111000", 
    15 => "11101000100111", 16 => "11001011001000", 17 => "00010001110110", 
    18 => "11101110101111", 19 => "01100110110011", 20 => "11010110011101", 
    21 => "00110011101000", 22 => "00011010100100", 23 => "10101000010000", 
    24 => "11001101101101", 25 => "11110011010110", 26 => "00110001111001", 
    27 => "00110101101000", 28 => "10100010001000", 29 => "00111111101101", 
    30 => "00011010110001", 31 => "10101111001011", 32 => "01010001111111", 
    33 => "10100000001101", 34 => "00100100001001", 35 => "10011100101101", 
    36 => "11001000011100", 37 => "01011010011101", 38 => "00001100111101", 
    39 => "10110000111001", 40 => "10101000111101", 41 => "00101100000111", 
    42 => "11101110000001", 43 => "00100110010101", 44 => "00101111001100", 
    45 => "01000010000110", 46 => "11000110000100", 47 => "01010111000000", 
    48 => "00111100011101", 49 => "11011101010001", 50 => "00110011010011", 
    51 => "11010011001010", 52 => "10100000100110", 53 => "00110110110110", 
    54 => "11000000110011", 55 => "00110011000101", 56 => "10010010110111", 
    57 => "01000110001000", 58 => "01010100011000", 59 => "00101100100100", 
    60 => "01010011001101", 61 => "00100000010100", 62 => "11001100111001", 
    63 => "11011000001010", 64 => "11100011111011", 65 => "11011011110111", 
    66 => "11101000110001", 67 => "11001101111001", 68 => "11101111010110", 
    69 => "10110011001010", 70 => "10110110011011", 71 => "00000001101101", 
    72 => "11011110111101", 73 => "00010011001101", 74 => "01001111111001", 
    75 => "01100001101001", 76 => "11101100011111", 77 => "10100111001110", 
    78 => "11100111110001", 79 => "11110100110100", 80 => "10110111100000", 
    81 => "11111100011101", 82 => "00101000110001", 83 => "11110100011001", 
    84 => "10101000001111", 85 => "00100001110001", 86 => "10110100110110", 
    87 => "11100100100011", 88 => "11001000000110", 89 => "01011010010010", 
    90 => "11111001000110", 91 => "11111101000111", 92 => "10101000011111", 
    93 => "11101001011010", 94 => "01100000100111", 95 => "00011000110100", 
    96 => "10100110101001", 97 => "00001101101110", 98 => "11100010010110", 
    99 => "11001110110010", 100 => "10110111001000", 101 => "11110001110101", 
    102 => "10110100000100", 103 => "10100111101110", 104 => "11000011100010", 
    105 => "00001111001010", 106 => "11001011110000", 107 => "10100000011101", 
    108 => "10111000110011", 109 => "01000000110101", 110 => "01011111110010", 
    111 => "10101001001100", 112 => "10110011001000", 113 => "10101110000111", 
    114 => "10011000110011", 115 => "11011111111110", 116 => "01000010101001", 
    117 => "11111101100101", 118 => "01000111101110", 119 => "11011101111001", 
    120 => "00000101101000", 121 => "01001111000011", 122 => "00110100000011", 
    123 => "10101111110011", 124 => "01001110101100", 125 => "11101011101011", 
    126 => "00001101011010", 127 => "11111011001001", 128 => "01011000010111", 
    129 => "01001001100011", 130 => "10100101000100", 131 => "01010101100011", 
    132 => "11010111110101", 133 => "11110100011010", 134 => "10010101101011", 
    135 => "00100010001011", 136 => "00000011110000", 137 => "00000011001110", 
    138 => "00111110100111", 139 => "11111010000000", 140 => "00000110010100", 
    141 => "00010001110100", 142 => "00010110011110", 143 => "11001111001111", 
    144 => "10101000010001", 145 => "10111010000110", 146 => "01011100101001", 
    147 => "10100101110011", 148 => "00101111001001", 149 => "11001000011001", 
    150 => "11100000110011", 151 => "00011110000111", 152 => "01001010001010", 
    153 => "10011110001010", 154 => "11010000001111", 155 => "11000001011101", 
    156 => "01001101010000", 157 => "00110001101011", 158 => "00000000101000", 
    159 => "00100000010001", 160 => "10010101010111", 161 => "10100111001010", 
    162 => "11001100011100", 163 => "00000100010101", 164 => "00001110011110", 
    165 => "00101100100110", 166 => "10011100100011", 167 => "10110101110100", 
    168 => "10100000110000", 169 => "10101110011010", 170 => "10111100111011", 
    171 => "11110010010110", 172 => "10110110001001", 173 => "11100001011011", 
    174 => "11001000000000", 175 => "11100011001011", 176 => "11011100000001", 
    177 => "00000110010000", 178 => "10100010000101", 179 => "10111011011000", 
    180 => "00011111100101", 181 => "11011101110111", 182 => "11010000111000", 
    183 => "00000100000000", 184 => "01000101100001", 185 => "10011010111010", 
    186 => "00001000001101", 187 => "11000011010001", 188 => "10011110111001", 
    189 => "11011010111011", 190 => "11110110011000", 191 => "11011001101110", 
    192 => "10010110101010", 193 => "11001111001011", 194 => "00001001100000", 
    195 => "11011000100100", 196 => "00101101000010", 197 => "11101000110101", 
    198 => "11001001010011", 199 => "10100101000111", 200 => "00100101111111", 
    201 => "10101000001110", 202 => "10100001110011", 203 => "11010110000001", 
    204 => "00011010101010", 205 => "01011000000010", 206 => "01000001000000", 
    207 => "10010110111011", 208 => "11111000010011", 209 => "01001011110000", 
    210 => "01011110010001", 211 => "01100111100101", 212 => "11001010000110", 
    213 => "00101110000100", 214 => "01000010100010", 215 => "10011001000111", 
    216 => "01001011010100", 217 => "01100101011001", 218 => "11001100101101", 
    219 => "11000111000001", 220 => "01011001111101", 221 => "10011101011100", 
    222 => "01000000000110", 223 => "00010000010110", 224 => "01001110100000", 
    225 => "00001000001011", 226 => "00101101111111", 227 => "10100110111011", 
    228 => "01010110011000", 229 => "01011011101100", 230 => "11001101000101", 
    231 => "10111111001000", 232 => "11100110110000", 233 => "10011001011001", 
    234 => "01011110110010", 235 => "00110110101000", 236 => "11010110100100", 
    237 => "00101001010111", 238 => "11111010111010", 239 => "00011100110010", 
    240 => "01000111001001", 241 => "00101010011010", 242 => "00110000000001", 
    243 => "01000010000001", 244 => "11100011010111", 245 => "11011111101111", 
    246 => "11001111001010", 247 => "00100111011111", 248 => "00001111010101", 
    249 => "11001000001110", 250 => "10110011111000", 251 => "01100100000110", 
    252 => "11010111000001", 253 => "10101110001111", 254 => "01010100000101", 
    255 => "11011011110001", 256 => "11101100100110", 257 => "10101110001111", 
    258 => "01100000101100", 259 => "11100000001101", 260 => "01010101110111", 
    261 => "11110110101001", 262 => "11001100001011", 263 => "01000100100101", 
    264 => "11001100110011", 265 => "10100001111111", 266 => "11010011100101", 
    267 => "11101010110110", 268 => "01011100000001", 269 => "11010001111001", 
    270 => "00101001001110", 271 => "00000110111000", 272 => "01001001000100", 
    273 => "11010110100110", 274 => "11100111110100", 275 => "11000010101101", 
    276 => "00001000010101", 277 => "01011010010000", 278 => "10011110111010", 
    279 => "11100000111011", 280 => "00010011011110", 281 => "01010001000011", 
    282 => "10100111101000", 283 => "11100110011001", 284 => "10111000010010", 
    285 => "11111101010111", 286 => "00100001010011", 287 => "11001010010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_8 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_8 is
    component infer_layer_6_weights_V_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_8_rom_U :  component infer_layer_6_weights_V_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



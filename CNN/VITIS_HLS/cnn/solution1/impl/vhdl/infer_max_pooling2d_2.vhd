-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_max_pooling2d_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_788_p_ce : OUT STD_LOGIC;
    grp_fu_1839_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1839_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1839_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1839_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1839_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_max_pooling2d_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_16 : STD_LOGIC_VECTOR (8 downto 0) := "000010110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_F20 : STD_LOGIC_VECTOR (11 downto 0) := "111100100000";
    constant ap_const_lv10_160 : STD_LOGIC_VECTOR (9 downto 0) := "0101100000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten44_reg_140 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_152 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_164 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal iii_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln121_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln121_reg_988_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f9_cast_reg_968 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f9_cast_reg_968_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f9_cast_reg_968_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f9_cast_reg_968_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_33_fu_234_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_33_reg_973 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_lshr_f_cast_reg_978 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f_cast_reg_978_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f_cast_reg_978_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f_cast_reg_978_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln127_fu_250_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln127_reg_983 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln127_reg_983_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln121_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_988_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_988_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_992_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_992_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_992_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_fu_272_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln121_reg_1002 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_1_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_1_reg_1007 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_1_reg_1007_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_lshr_f9_cast_mid1_reg_1013 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f9_cast_mid1_reg_1013_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f9_cast_mid1_reg_1013_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f9_cast_mid1_reg_1013_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln121_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_reg_1018_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_reg_1018_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_reg_1018_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_2_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_2_reg_1025 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_2_reg_1025_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_2_reg_1025_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_2_reg_1025_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln124_fu_352_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_reg_1031 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_reg_1031_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_reg_1031_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_reg_1031_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln127_1_fu_360_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln127_1_reg_1038 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln127_1_reg_1038_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal iii_cast_fu_392_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal iii_cast_reg_1043 : STD_LOGIC_VECTOR (13 downto 0);
    signal iii_cast_reg_1043_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln124_1_fu_430_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln124_1_reg_1058 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln121_fu_436_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln121_reg_1063 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln121_6_fu_442_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln121_6_reg_1068 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln124_4_fu_448_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln124_4_reg_1073 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_load_1_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_fu_453_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln127_reg_1085 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_5_fu_458_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln124_5_reg_1090 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln124_fu_467_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln124_reg_1095 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln136_fu_515_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_1_fu_664_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_1_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln136_5_fu_692_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_5_reg_1120 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln136_2_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_2_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_2_reg_1125_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln142_fu_869_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln142_reg_1144 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten44_phi_fu_144_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_156_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_168_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_ii_phi_fu_179_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_iii_phi_fu_190_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln136_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_2_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln136_3_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_228_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_228_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_228_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1_fu_300_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid1_fu_300_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1_fu_300_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln136_fu_254_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln127_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln121_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_2_fu_306_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln136_6_fu_364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln121_4_fu_314_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln124_2_fu_370_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln124_1_fu_378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln136_1_fu_406_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln136_mid2_fu_384_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_3_fu_419_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln124_fu_467_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln124_fu_467_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln136_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_477_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_487_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid110_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln124_1_fu_537_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln124_1_fu_537_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln124_1_fu_537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln136_2_fu_524_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln121_3_fu_543_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln136_7_fu_556_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln121_5_fu_549_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln124_3_fu_561_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln124_2_fu_568_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln136_1_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_2_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_585_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_1_fu_595_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_3_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_2_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_2_fu_612_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_5_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_4_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_1_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_2_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_2_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_670_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln136_4_fu_680_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln136_1_mid2_fu_574_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln136_3_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_4_fu_715_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_701_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_3_fu_711_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_7_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_6_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_4_fu_728_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_9_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_8_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_3_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_4_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_3_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_4_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul33_fu_794_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul33_fu_794_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul33_fu_794_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast2_fu_800_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul33_mid1_fu_812_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul33_mid1_fu_812_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul33_mid1_fu_812_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_lshr_f_cast_mid1_fu_825_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_fu_818_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast2_mid1_fu_834_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul351_fu_803_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul351_mid1_fu_838_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_7_fu_844_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln124_1_fu_851_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal iii_cast5_fu_866_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add40_mid2_fu_858_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln136_5_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_6_fu_892_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_878_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_5_fu_888_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_11_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_10_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_895_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_6_fu_905_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_13_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_12_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_5_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_6_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_5_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_6_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_197_ce : STD_LOGIC;
    signal grp_fu_197_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_203_ce : STD_LOGIC;
    signal grp_fu_203_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal empty_fu_228_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul33_fu_794_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul33_mid1_fu_812_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln124_1_fu_537_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln124_fu_467_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1_fu_300_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mul_5ns_6ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component infer_mul_4ns_5ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    mul_5ns_6ns_9_1_1_U22 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => empty_fu_228_p0,
        din1 => empty_fu_228_p1,
        dout => empty_fu_228_p2);

    mul_5ns_6ns_9_1_1_U23 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => p_mid1_fu_300_p0,
        din1 => p_mid1_fu_300_p1,
        dout => p_mid1_fu_300_p2);

    mul_5ns_6ns_9_1_1_U24 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln124_fu_467_p0,
        din1 => mul_ln124_fu_467_p1,
        dout => mul_ln124_fu_467_p2);

    mul_5ns_6ns_9_1_1_U25 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln124_1_fu_537_p0,
        din1 => mul_ln124_1_fu_537_p1,
        dout => mul_ln124_1_fu_537_p2);

    mul_4ns_5ns_7_1_1_U26 : component infer_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul33_fu_794_p0,
        din1 => mul33_fu_794_p1,
        dout => mul33_fu_794_p2);

    mul_4ns_5ns_7_1_1_U27 : component infer_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul33_mid1_fu_812_p0,
        din1 => mul33_mid1_fu_812_p1,
        dout => mul33_mid1_fu_812_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state9)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state9))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_152 <= select_ln121_6_reg_1068;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_152 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ii_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ii_reg_175 <= select_ln124_4_reg_1073;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_175 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    iii_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                iii_reg_186 <= add_ln127_reg_1085;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_186 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten44_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten44_reg_140 <= add_ln121_reg_1063;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten44_reg_140 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_164 <= select_ln124_5_reg_1090;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_164 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln121_fu_260_p2 = ap_const_lv1_0))) then
                add_ln121_1_reg_1007 <= add_ln121_1_fu_280_p2;
                add_ln124_1_reg_1058 <= add_ln124_1_fu_430_p2;
                and_ln121_reg_1018 <= and_ln121_fu_334_p2;
                icmp_ln124_reg_992 <= icmp_ln124_fu_266_p2;
                ii_2_reg_1025 <= ii_2_fu_340_p2;
                    iii_cast_reg_1043(5 downto 0) <= iii_cast_fu_392_p1(5 downto 0);
                p_lshr_f9_cast_mid1_reg_1013 <= add_ln121_1_fu_280_p2(4 downto 1);
                select_ln121_reg_1002 <= select_ln121_fu_272_p3;
                select_ln124_reg_1031 <= select_ln124_fu_352_p3;
                    zext_ln127_1_reg_1038(4 downto 0) <= zext_ln127_1_fu_360_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln121_1_reg_1007_pp0_iter1_reg <= add_ln121_1_reg_1007;
                and_ln121_reg_1018_pp0_iter1_reg <= and_ln121_reg_1018;
                and_ln121_reg_1018_pp0_iter2_reg <= and_ln121_reg_1018_pp0_iter1_reg;
                and_ln121_reg_1018_pp0_iter3_reg <= and_ln121_reg_1018_pp0_iter2_reg;
                    empty_33_reg_973(4 downto 1) <= empty_33_fu_234_p2(4 downto 1);
                icmp_ln121_reg_988 <= icmp_ln121_fu_260_p2;
                icmp_ln121_reg_988_pp0_iter1_reg <= icmp_ln121_reg_988;
                icmp_ln121_reg_988_pp0_iter2_reg <= icmp_ln121_reg_988_pp0_iter1_reg;
                icmp_ln121_reg_988_pp0_iter3_reg <= icmp_ln121_reg_988_pp0_iter2_reg;
                icmp_ln124_reg_992_pp0_iter1_reg <= icmp_ln124_reg_992;
                icmp_ln124_reg_992_pp0_iter2_reg <= icmp_ln124_reg_992_pp0_iter1_reg;
                icmp_ln124_reg_992_pp0_iter3_reg <= icmp_ln124_reg_992_pp0_iter2_reg;
                ii_2_reg_1025_pp0_iter1_reg <= ii_2_reg_1025;
                ii_2_reg_1025_pp0_iter2_reg <= ii_2_reg_1025_pp0_iter1_reg;
                ii_2_reg_1025_pp0_iter3_reg <= ii_2_reg_1025_pp0_iter2_reg;
                    iii_cast_reg_1043_pp0_iter1_reg(5 downto 0) <= iii_cast_reg_1043(5 downto 0);
                mul_ln124_reg_1095 <= mul_ln124_fu_467_p2;
                p_lshr_f9_cast_mid1_reg_1013_pp0_iter1_reg <= p_lshr_f9_cast_mid1_reg_1013;
                p_lshr_f9_cast_mid1_reg_1013_pp0_iter2_reg <= p_lshr_f9_cast_mid1_reg_1013_pp0_iter1_reg;
                p_lshr_f9_cast_mid1_reg_1013_pp0_iter3_reg <= p_lshr_f9_cast_mid1_reg_1013_pp0_iter2_reg;
                p_lshr_f9_cast_reg_968 <= ap_phi_mux_i_phi_fu_156_p4(4 downto 1);
                p_lshr_f9_cast_reg_968_pp0_iter1_reg <= p_lshr_f9_cast_reg_968;
                p_lshr_f9_cast_reg_968_pp0_iter2_reg <= p_lshr_f9_cast_reg_968_pp0_iter1_reg;
                p_lshr_f9_cast_reg_968_pp0_iter3_reg <= p_lshr_f9_cast_reg_968_pp0_iter2_reg;
                p_lshr_f_cast_reg_978 <= ap_phi_mux_ii_phi_fu_179_p4(4 downto 1);
                p_lshr_f_cast_reg_978_pp0_iter1_reg <= p_lshr_f_cast_reg_978;
                p_lshr_f_cast_reg_978_pp0_iter2_reg <= p_lshr_f_cast_reg_978_pp0_iter1_reg;
                p_lshr_f_cast_reg_978_pp0_iter3_reg <= p_lshr_f_cast_reg_978_pp0_iter2_reg;
                select_ln124_reg_1031_pp0_iter1_reg <= select_ln124_reg_1031;
                select_ln124_reg_1031_pp0_iter2_reg <= select_ln124_reg_1031_pp0_iter1_reg;
                select_ln124_reg_1031_pp0_iter3_reg <= select_ln124_reg_1031_pp0_iter2_reg;
                    zext_ln127_1_reg_1038_pp0_iter1_reg(4 downto 0) <= zext_ln127_1_reg_1038(4 downto 0);
                    zext_ln127_reg_983(4 downto 0) <= zext_ln127_fu_250_p1(4 downto 0);
                    zext_ln127_reg_983_pp0_iter1_reg(4 downto 0) <= zext_ln127_reg_983(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln121_reg_1063 <= add_ln121_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln127_reg_1085 <= add_ln127_fu_453_p2;
                input_load_1_reg_1078 <= input_r_q0;
                select_ln121_6_reg_1068 <= select_ln121_6_fu_442_p3;
                select_ln124_4_reg_1073 <= select_ln124_4_fu_448_p3;
                select_ln124_5_reg_1090 <= select_ln124_5_fu_458_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln136_5_reg_1120 <= add_ln136_5_fu_692_p2;
                select_ln136_1_reg_1108 <= select_ln136_1_fu_664_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln121_reg_988_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln142_reg_1144 <= add_ln142_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln121_reg_988_pp0_iter2_reg = ap_const_lv1_0))) then
                input_load_3_reg_1137 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln121_reg_988_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_208 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln121_reg_988_pp0_iter2_reg = ap_const_lv1_0))) then
                select_ln136_2_reg_1125 <= select_ln136_2_fu_780_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln136_2_reg_1125_pp0_iter3_reg <= select_ln136_2_reg_1125;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln136_reg_1101 <= select_ln136_fu_515_p3;
            end if;
        end if;
    end process;
    empty_33_reg_973(0) <= '1';
    zext_ln127_reg_983(8 downto 5) <= "0000";
    zext_ln127_reg_983_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln127_1_reg_1038(8 downto 5) <= "0000";
    zext_ln127_1_reg_1038_pp0_iter1_reg(8 downto 5) <= "0000";
    iii_cast_reg_1043(13 downto 6) <= "00000000";
    iii_cast_reg_1043_pp0_iter1_reg(13 downto 6) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add40_mid2_fu_858_p3 <= (select_ln124_1_fu_851_p3 & ap_const_lv5_0);
    add_ln121_1_fu_280_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_156_p4) + unsigned(ap_const_lv5_2));
    add_ln121_fu_436_p2 <= std_logic_vector(unsigned(indvar_flatten44_reg_140) + unsigned(ap_const_lv12_1));
    add_ln124_1_fu_430_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_168_p4) + unsigned(ap_const_lv10_1));
    add_ln127_fu_453_p2 <= std_logic_vector(unsigned(select_ln124_reg_1031) + unsigned(ap_const_lv6_1));
    add_ln136_1_fu_406_p3 <= (tmp_fu_396_p4 & select_ln124_fu_352_p3);
    add_ln136_2_fu_524_p2 <= std_logic_vector(unsigned(mul_ln124_reg_1095) + unsigned(zext_ln127_reg_983_pp0_iter1_reg));
    add_ln136_3_fu_419_p2 <= std_logic_vector(unsigned(shl_ln136_mid2_fu_384_p3) + unsigned(iii_cast_fu_392_p1));
    add_ln136_4_fu_680_p3 <= (tmp_9_fu_670_p4 & select_ln124_reg_1031_pp0_iter1_reg);
    add_ln136_5_fu_692_p2 <= std_logic_vector(unsigned(shl_ln136_1_mid2_fu_574_p3) + unsigned(iii_cast_reg_1043_pp0_iter1_reg));
    add_ln136_6_fu_364_p2 <= std_logic_vector(unsigned(select_ln121_2_fu_306_p3) + unsigned(zext_ln127_1_fu_360_p1));
    add_ln136_7_fu_556_p2 <= std_logic_vector(unsigned(select_ln121_3_fu_543_p3) + unsigned(zext_ln127_1_reg_1038_pp0_iter1_reg));
    add_ln136_fu_254_p2 <= std_logic_vector(unsigned(empty_fu_228_p2) + unsigned(zext_ln127_fu_250_p1));
    add_ln142_fu_869_p2 <= std_logic_vector(unsigned(iii_cast5_fu_866_p1) + unsigned(add40_mid2_fu_858_p3));
    and_ln121_fu_334_p2 <= (xor_ln121_fu_322_p2 and icmp_ln127_fu_328_p2);
    and_ln136_1_fu_652_p2 <= (or_ln136_2_fu_646_p2 and or_ln136_1_fu_628_p2);
    and_ln136_2_fu_658_p2 <= (grp_fu_788_p_dout0 and and_ln136_1_fu_652_p2);
    and_ln136_3_fu_768_p2 <= (or_ln136_4_fu_762_p2 and or_ln136_3_fu_744_p2);
    and_ln136_4_fu_774_p2 <= (grp_fu_1839_p_dout0 and and_ln136_3_fu_768_p2);
    and_ln136_5_fu_945_p2 <= (or_ln136_6_fu_939_p2 and or_ln136_5_fu_921_p2);
    and_ln136_6_fu_951_p2 <= (grp_fu_1839_p_dout0 and and_ln136_5_fu_945_p2);
    and_ln136_fu_509_p2 <= (or_ln136_fu_503_p2 and grp_fu_788_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter3_state9_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter3_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln121_reg_988, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln121_reg_988 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_156_p4_assign_proc : process(i_reg_152, icmp_ln121_reg_988, ap_CS_fsm_pp0_stage0, select_ln121_6_reg_1068, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_156_p4 <= select_ln121_6_reg_1068;
        else 
            ap_phi_mux_i_phi_fu_156_p4 <= i_reg_152;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_179_p4_assign_proc : process(ii_reg_175, icmp_ln121_reg_988, ap_CS_fsm_pp0_stage0, select_ln124_4_reg_1073, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ii_phi_fu_179_p4 <= select_ln124_4_reg_1073;
        else 
            ap_phi_mux_ii_phi_fu_179_p4 <= ii_reg_175;
        end if; 
    end process;


    ap_phi_mux_iii_phi_fu_190_p4_assign_proc : process(iii_reg_186, icmp_ln121_reg_988, ap_CS_fsm_pp0_stage0, add_ln127_reg_1085, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_iii_phi_fu_190_p4 <= add_ln127_reg_1085;
        else 
            ap_phi_mux_iii_phi_fu_190_p4 <= iii_reg_186;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten44_phi_fu_144_p4_assign_proc : process(indvar_flatten44_reg_140, icmp_ln121_reg_988, ap_CS_fsm_pp0_stage0, add_ln121_reg_1063, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten44_phi_fu_144_p4 <= add_ln121_reg_1063;
        else 
            ap_phi_mux_indvar_flatten44_phi_fu_144_p4 <= indvar_flatten44_reg_140;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_168_p4_assign_proc : process(indvar_flatten_reg_164, icmp_ln121_reg_988, ap_CS_fsm_pp0_stage0, select_ln124_5_reg_1090, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_988 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_168_p4 <= select_ln124_5_reg_1090;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_168_p4 <= indvar_flatten_reg_164;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln136_1_fu_582_p1 <= input_load_1_reg_1078;
    bitcast_ln136_2_fu_599_p1 <= select_ln136_reg_1101;
    bitcast_ln136_3_fu_697_p1 <= reg_208;
    bitcast_ln136_4_fu_715_p1 <= select_ln136_1_reg_1108;
    bitcast_ln136_5_fu_875_p1 <= input_load_3_reg_1137;
    bitcast_ln136_6_fu_892_p1 <= select_ln136_2_reg_1125_pp0_iter3_reg;
    bitcast_ln136_fu_473_p1 <= reg_208;
    empty_33_fu_234_p2 <= (ap_phi_mux_i_phi_fu_156_p4 or ap_const_lv5_1);
    empty_fu_228_p0 <= empty_fu_228_p00(5 - 1 downto 0);
    empty_fu_228_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_156_p4),9));
    empty_fu_228_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    grp_fu_1839_p_ce <= ap_const_logic_1;
    grp_fu_1839_p_din0 <= grp_fu_203_p0;
    grp_fu_1839_p_din1 <= grp_fu_203_p1;
    grp_fu_1839_p_opcode <= ap_const_lv5_2;
    grp_fu_197_ce <= ap_const_logic_1;
    grp_fu_197_opcode <= ap_const_lv5_2;

    grp_fu_197_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, input_load_1_reg_1078, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_197_p0 <= input_load_1_reg_1078;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_197_p0 <= input_r_q1;
        else 
            grp_fu_197_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_197_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, select_ln136_fu_515_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_197_p1 <= select_ln136_fu_515_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_197_p1 <= ap_const_lv32_0;
        else 
            grp_fu_197_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_197_p2 <= grp_fu_788_p_dout0;
    grp_fu_203_ce <= ap_const_logic_1;
    grp_fu_203_opcode <= ap_const_lv5_2;

    grp_fu_203_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, input_load_3_reg_1137, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_203_p0 <= input_load_3_reg_1137;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_203_p0 <= input_r_q1;
        else 
            grp_fu_203_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, select_ln136_1_reg_1108, select_ln136_2_reg_1125, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_203_p1 <= select_ln136_2_reg_1125;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_203_p1 <= select_ln136_1_reg_1108;
        else 
            grp_fu_203_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_203_p2 <= grp_fu_1839_p_dout0;
    grp_fu_788_p_ce <= ap_const_logic_1;
    grp_fu_788_p_din0 <= grp_fu_197_p0;
    grp_fu_788_p_din1 <= grp_fu_197_p1;
    grp_fu_788_p_opcode <= ap_const_lv5_2;
    icmp_ln121_fu_260_p2 <= "1" when (ap_phi_mux_indvar_flatten44_phi_fu_144_p4 = ap_const_lv12_F20) else "0";
    icmp_ln124_fu_266_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_168_p4 = ap_const_lv10_160) else "0";
    icmp_ln127_fu_328_p2 <= "1" when (ap_phi_mux_iii_phi_fu_190_p4 = ap_const_lv6_20) else "0";
    icmp_ln136_10_fu_909_p2 <= "0" when (tmp_3_fu_878_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_11_fu_915_p2 <= "1" when (trunc_ln136_5_fu_888_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_12_fu_927_p2 <= "0" when (tmp_10_fu_895_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_13_fu_933_p2 <= "1" when (trunc_ln136_6_fu_905_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_1_fu_497_p2 <= "1" when (trunc_ln136_fu_487_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_2_fu_616_p2 <= "0" when (tmp_6_fu_585_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_3_fu_622_p2 <= "1" when (trunc_ln136_1_fu_595_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_4_fu_634_p2 <= "0" when (tmp_7_fu_602_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_5_fu_640_p2 <= "1" when (trunc_ln136_2_fu_612_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_6_fu_732_p2 <= "0" when (tmp_s_fu_701_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_7_fu_738_p2 <= "1" when (trunc_ln136_3_fu_711_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_8_fu_750_p2 <= "0" when (tmp_1_fu_718_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_9_fu_756_p2 <= "1" when (trunc_ln136_4_fu_728_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_491_p2 <= "0" when (tmp_4_fu_477_p4 = ap_const_lv8_FF) else "1";
    ii_2_fu_340_p2 <= std_logic_vector(unsigned(select_ln121_fu_272_p3) + unsigned(ap_const_lv5_2));
    iii_cast5_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_reg_1031_pp0_iter3_reg),12));
    iii_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_fu_352_p3),14));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln136_1_fu_425_p1, ap_block_pp0_stage1, zext_ln136_3_fu_787_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln136_3_fu_787_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln136_1_fu_425_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln136_fu_414_p1, zext_ln136_2_fu_687_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address1 <= zext_ln136_2_fu_687_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln136_fu_414_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul33_fu_794_p0 <= mul33_fu_794_p00(4 - 1 downto 0);
    mul33_fu_794_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f9_cast_reg_968_pp0_iter3_reg),7));
    mul33_fu_794_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul33_mid1_fu_812_p0 <= mul33_mid1_fu_812_p00(4 - 1 downto 0);
    mul33_mid1_fu_812_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f9_cast_mid1_reg_1013_pp0_iter3_reg),7));
    mul33_mid1_fu_812_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul351_fu_803_p2 <= std_logic_vector(unsigned(mul33_fu_794_p2) + unsigned(p_cast2_fu_800_p1));
    mul351_mid1_fu_838_p2 <= std_logic_vector(unsigned(select_ln121_1_fu_818_p3) + unsigned(p_cast2_mid1_fu_834_p1));
    mul_ln124_1_fu_537_p0 <= mul_ln124_1_fu_537_p00(5 - 1 downto 0);
    mul_ln124_1_fu_537_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid110_fu_528_p2),9));
    mul_ln124_1_fu_537_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    mul_ln124_fu_467_p0 <= mul_ln124_fu_467_p00(5 - 1 downto 0);
    mul_ln124_fu_467_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_33_reg_973),9));
    mul_ln124_fu_467_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    or_ln124_1_fu_378_p2 <= (select_ln124_2_fu_370_p3 or ap_const_lv9_1);
    or_ln124_2_fu_568_p2 <= (select_ln124_3_fu_561_p3 or ap_const_lv9_1);
    or_ln124_fu_346_p2 <= (icmp_ln124_fu_266_p2 or and_ln121_fu_334_p2);
    or_ln136_1_fu_628_p2 <= (icmp_ln136_3_fu_622_p2 or icmp_ln136_2_fu_616_p2);
    or_ln136_2_fu_646_p2 <= (icmp_ln136_5_fu_640_p2 or icmp_ln136_4_fu_634_p2);
    or_ln136_3_fu_744_p2 <= (icmp_ln136_7_fu_738_p2 or icmp_ln136_6_fu_732_p2);
    or_ln136_4_fu_762_p2 <= (icmp_ln136_9_fu_756_p2 or icmp_ln136_8_fu_750_p2);
    or_ln136_5_fu_921_p2 <= (icmp_ln136_11_fu_915_p2 or icmp_ln136_10_fu_909_p2);
    or_ln136_6_fu_939_p2 <= (icmp_ln136_13_fu_933_p2 or icmp_ln136_12_fu_927_p2);
    or_ln136_fu_503_p2 <= (icmp_ln136_fu_491_p2 or icmp_ln136_1_fu_497_p2);
    output_r_address0 <= zext_ln142_fu_964_p1(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        input_load_3_reg_1137 when (and_ln136_6_fu_951_p2(0) = '1') else 
        select_ln136_2_reg_1125_pp0_iter3_reg;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln121_reg_988_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln121_reg_988_pp0_iter3_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast2_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_reg_978_pp0_iter3_reg),7));
    p_cast2_mid1_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_mid1_fu_825_p4),7));
    p_lshr_f_cast_mid1_fu_825_p4 <= ii_2_reg_1025_pp0_iter3_reg(4 downto 1);
    p_mid110_fu_528_p2 <= (ap_const_lv5_1 or add_ln121_1_reg_1007_pp0_iter1_reg);
    p_mid1_fu_300_p0 <= p_mid1_fu_300_p00(5 - 1 downto 0);
    p_mid1_fu_300_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_1_fu_280_p2),9));
    p_mid1_fu_300_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    select_ln121_1_fu_818_p3 <= 
        mul33_mid1_fu_812_p2 when (icmp_ln124_reg_992_pp0_iter3_reg(0) = '1') else 
        mul33_fu_794_p2;
    select_ln121_2_fu_306_p3 <= 
        p_mid1_fu_300_p2 when (icmp_ln124_fu_266_p2(0) = '1') else 
        empty_fu_228_p2;
    select_ln121_3_fu_543_p3 <= 
        mul_ln124_1_fu_537_p2 when (icmp_ln124_reg_992_pp0_iter1_reg(0) = '1') else 
        mul_ln124_reg_1095;
    select_ln121_4_fu_314_p3 <= 
        p_mid1_fu_300_p2 when (icmp_ln124_fu_266_p2(0) = '1') else 
        add_ln136_fu_254_p2;
    select_ln121_5_fu_549_p3 <= 
        mul_ln124_1_fu_537_p2 when (icmp_ln124_reg_992_pp0_iter1_reg(0) = '1') else 
        add_ln136_2_fu_524_p2;
    select_ln121_6_fu_442_p3 <= 
        add_ln121_1_reg_1007 when (icmp_ln124_reg_992(0) = '1') else 
        i_reg_152;
    select_ln121_7_fu_844_p3 <= 
        mul33_mid1_fu_812_p2 when (icmp_ln124_reg_992_pp0_iter3_reg(0) = '1') else 
        mul351_fu_803_p2;
    select_ln121_fu_272_p3 <= 
        ap_const_lv5_0 when (icmp_ln124_fu_266_p2(0) = '1') else 
        ap_phi_mux_ii_phi_fu_179_p4;
    select_ln124_1_fu_851_p3 <= 
        mul351_mid1_fu_838_p2 when (and_ln121_reg_1018_pp0_iter3_reg(0) = '1') else 
        select_ln121_7_fu_844_p3;
    select_ln124_2_fu_370_p3 <= 
        add_ln136_6_fu_364_p2 when (and_ln121_fu_334_p2(0) = '1') else 
        select_ln121_4_fu_314_p3;
    select_ln124_3_fu_561_p3 <= 
        add_ln136_7_fu_556_p2 when (and_ln121_reg_1018_pp0_iter1_reg(0) = '1') else 
        select_ln121_5_fu_549_p3;
    select_ln124_4_fu_448_p3 <= 
        ii_2_reg_1025 when (and_ln121_reg_1018(0) = '1') else 
        select_ln121_reg_1002;
    select_ln124_5_fu_458_p3 <= 
        ap_const_lv10_1 when (icmp_ln124_reg_992(0) = '1') else 
        add_ln124_1_reg_1058;
    select_ln124_fu_352_p3 <= 
        ap_const_lv6_0 when (or_ln124_fu_346_p2(0) = '1') else 
        ap_phi_mux_iii_phi_fu_190_p4;
    select_ln136_1_fu_664_p3 <= 
        input_load_1_reg_1078 when (and_ln136_2_fu_658_p2(0) = '1') else 
        select_ln136_reg_1101;
    select_ln136_2_fu_780_p3 <= 
        reg_208 when (and_ln136_4_fu_774_p2(0) = '1') else 
        select_ln136_1_reg_1108;
    select_ln136_fu_515_p3 <= 
        reg_208 when (and_ln136_fu_509_p2(0) = '1') else 
        ap_const_lv32_0;
    shl_ln136_1_mid2_fu_574_p3 <= (or_ln124_2_fu_568_p2 & ap_const_lv5_0);
    shl_ln136_mid2_fu_384_p3 <= (or_ln124_1_fu_378_p2 & ap_const_lv5_0);
    tmp_10_fu_895_p4 <= bitcast_ln136_6_fu_892_p1(30 downto 23);
    tmp_1_fu_718_p4 <= bitcast_ln136_4_fu_715_p1(30 downto 23);
    tmp_3_fu_878_p4 <= bitcast_ln136_5_fu_875_p1(30 downto 23);
    tmp_4_fu_477_p4 <= bitcast_ln136_fu_473_p1(30 downto 23);
    tmp_6_fu_585_p4 <= bitcast_ln136_1_fu_582_p1(30 downto 23);
    tmp_7_fu_602_p4 <= bitcast_ln136_2_fu_599_p1(30 downto 23);
    tmp_9_fu_670_p4 <= select_ln124_3_fu_561_p3(8 downto 1);
    tmp_fu_396_p4 <= select_ln124_2_fu_370_p3(8 downto 1);
    tmp_s_fu_701_p4 <= bitcast_ln136_3_fu_697_p1(30 downto 23);
    trunc_ln136_1_fu_595_p1 <= bitcast_ln136_1_fu_582_p1(23 - 1 downto 0);
    trunc_ln136_2_fu_612_p1 <= bitcast_ln136_2_fu_599_p1(23 - 1 downto 0);
    trunc_ln136_3_fu_711_p1 <= bitcast_ln136_3_fu_697_p1(23 - 1 downto 0);
    trunc_ln136_4_fu_728_p1 <= bitcast_ln136_4_fu_715_p1(23 - 1 downto 0);
    trunc_ln136_5_fu_888_p1 <= bitcast_ln136_5_fu_875_p1(23 - 1 downto 0);
    trunc_ln136_6_fu_905_p1 <= bitcast_ln136_6_fu_892_p1(23 - 1 downto 0);
    trunc_ln136_fu_487_p1 <= bitcast_ln136_fu_473_p1(23 - 1 downto 0);
    xor_ln121_fu_322_p2 <= (icmp_ln124_fu_266_p2 xor ap_const_lv1_1);
    zext_ln127_1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_2_fu_340_p2),9));
    zext_ln127_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ii_phi_fu_179_p4),9));
    zext_ln136_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_3_fu_419_p2),64));
    zext_ln136_2_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_4_fu_680_p3),64));
    zext_ln136_3_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_5_reg_1120),64));
    zext_ln136_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_1_fu_406_p3),64));
    zext_ln142_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_reg_1144),64));
end behav;

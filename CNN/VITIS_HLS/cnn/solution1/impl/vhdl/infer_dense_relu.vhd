-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_dense_relu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_ce : OUT STD_LOGIC;
    grp_fu_770_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_770_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_770_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_770_p_ce : OUT STD_LOGIC;
    grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_788_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_dense_relu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_BD132645 : STD_LOGIC_VECTOR (31 downto 0) := "10111101000100110010011001000101";
    constant ap_const_lv32_3DD7686F : STD_LOGIC_VECTOR (31 downto 0) := "00111101110101110110100001101111";
    constant ap_const_lv32_BCAFADCE : STD_LOGIC_VECTOR (31 downto 0) := "10111100101011111010110111001110";
    constant ap_const_lv32_BD4D2997 : STD_LOGIC_VECTOR (31 downto 0) := "10111101010011010010100110010111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_12_weights_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer_12_weights_ce0 : STD_LOGIC;
    signal layer_12_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_reg_183 : STD_LOGIC_VECTOR (4 downto 0);
    signal add108_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln157_fu_220_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln157_reg_552 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln157_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln157_fu_232_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln157_reg_561 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_52_fu_236_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_52_reg_566 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_240_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln159_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln159_reg_580 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln159_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_reg_585_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_reg_585_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln161_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln161_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_1_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln161_1_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln161_1_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln161_2_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_2_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_57_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal empty_55_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_55_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_399_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_413_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_3_2_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal output_2_2_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_2_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_2_fu_525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal output_0_0_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_0_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_2_0_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_0_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_ii_phi_fu_187_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_add108_phi_fu_197_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ii_cast4_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_fu_240_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln161_fu_295_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_299_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln161_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln161_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln161_3_fu_348_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln161_4_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln161_2_fu_378_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln49_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_429_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_439_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_6_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_3_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_4_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_5_fu_500_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_6_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_7_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_ce : STD_LOGIC;
    signal grp_fu_209_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_215_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_dense_relu_layer_12_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_12_weights_U : component infer_dense_relu_layer_12_weights
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_12_weights_address0,
        ce0 => layer_12_weights_ce0,
        q0 => layer_12_weights_q0);

    mux_42_32_1_1_U62 : component infer_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_0_reg_132,
        din1 => output_1_0_reg_142,
        din2 => output_2_0_reg_152,
        din3 => output_3_0_reg_162,
        din4 => tmp_fu_240_p5,
        dout => tmp_fu_240_p6);

    mux_42_32_1_1_U63 : component infer_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BD132645,
        din1 => ap_const_lv32_3DD7686F,
        din2 => ap_const_lv32_BCAFADCE,
        din3 => ap_const_lv32_BD4D2997,
        din4 => empty_52_reg_566,
        dout => tmp_s_fu_399_p6);

    mux_42_32_1_1_U64 : component infer_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_43_fu_413_p1,
        din1 => tmp_43_fu_413_p2,
        din2 => tmp_43_fu_413_p3,
        din3 => empty_57_reg_649,
        din4 => empty_52_reg_566,
        dout => tmp_43_fu_413_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln157_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln157_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_0_preg <= output_0_0_reg_132;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_1_preg <= output_1_0_reg_142;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_2_preg <= output_2_0_reg_152;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_3_preg <= output_3_0_reg_162;
                end if; 
            end if;
        end if;
    end process;


    add108_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                add108_reg_194 <= tmp_fu_240_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln159_reg_585_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                add108_reg_194 <= grp_fu_763_p_dout0;
            end if; 
        end if;
    end process;

    i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_reg_172 <= add_ln157_reg_552;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_172 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ii_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_reg_183 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln159_reg_585 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ii_reg_183 <= add_ln159_reg_580;
            end if; 
        end if;
    end process;

    output_0_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                output_0_0_reg_132 <= output_0_2_fu_525_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                output_0_0_reg_132 <= output_0_read;
            end if; 
        end if;
    end process;

    output_1_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                output_1_0_reg_142 <= output_1_2_fu_506_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                output_1_0_reg_142 <= output_1_read;
            end if; 
        end if;
    end process;

    output_2_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                output_2_0_reg_152 <= output_2_2_fu_493_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                output_2_0_reg_152 <= output_2_read;
            end if; 
        end if;
    end process;

    output_3_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                output_3_0_reg_162 <= output_3_2_fu_486_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                output_3_0_reg_162 <= output_3_read;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add1_reg_677 <= grp_fu_763_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln157_reg_552 <= add_ln157_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln159_reg_580 <= add_ln159_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_52_reg_566 <= empty_52_fu_236_p1;
                    zext_ln157_reg_561(2 downto 0) <= zext_ln157_fu_232_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                empty_54_reg_656 <= empty_54_fu_372_p3;
                empty_55_reg_662 <= empty_55_fu_385_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                empty_57_reg_649 <= empty_57_fu_364_p3;
                icmp_ln161_1_reg_625 <= icmp_ln161_1_fu_330_p2;
                icmp_ln161_2_reg_638 <= icmp_ln161_2_fu_343_p2;
                icmp_ln161_reg_619 <= icmp_ln161_fu_317_p2;
                select_ln161_1_reg_633 <= select_ln161_1_fu_335_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln159_reg_585 <= icmp_ln159_fu_284_p2;
                icmp_ln159_reg_585_pp0_iter1_reg <= icmp_ln159_reg_585;
                icmp_ln159_reg_585_pp0_iter2_reg <= icmp_ln159_reg_585_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln159_reg_585 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul7_reg_609 <= grp_fu_770_p_dout0;
            end if;
        end if;
    end process;
    zext_ln157_reg_561(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln157_fu_226_p2, ap_enable_reg_pp0_iter0, icmp_ln159_fu_284_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln159_fu_284_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln159_fu_284_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln157_fu_220_p2 <= std_logic_vector(unsigned(i_reg_172) + unsigned(ap_const_lv3_1));
    add_ln159_fu_278_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_phi_fu_187_p4) + unsigned(ap_const_lv5_1));
    add_ln161_fu_307_p2 <= std_logic_vector(unsigned(shl_ln_fu_299_p3) + unsigned(zext_ln157_reg_561));
    and_ln49_fu_461_p2 <= (or_ln49_fu_455_p2 and grp_fu_788_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln159_fu_284_p2)
    begin
        if ((icmp_ln159_fu_284_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln157_fu_226_p2)
    begin
        if ((((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add108_phi_fu_197_p4_assign_proc : process(add108_reg_194, icmp_ln159_reg_585_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, grp_fu_763_p_dout0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln159_reg_585_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_add108_phi_fu_197_p4 <= grp_fu_763_p_dout0;
        else 
            ap_phi_mux_add108_phi_fu_197_p4 <= add108_reg_194;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_187_p4_assign_proc : process(ii_reg_183, add_ln159_reg_580, ap_CS_fsm_pp0_stage0, icmp_ln159_reg_585, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln159_reg_585 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_ii_phi_fu_187_p4 <= add_ln159_reg_580;
        else 
            ap_phi_mux_ii_phi_fu_187_p4 <= ii_reg_183;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln157_fu_226_p2)
    begin
        if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, icmp_ln157_fu_226_p2, output_0_0_reg_132, ap_return_0_preg)
    begin
        if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_0 <= output_0_0_reg_132;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, icmp_ln157_fu_226_p2, output_1_0_reg_142, ap_return_1_preg)
    begin
        if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_1 <= output_1_0_reg_142;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state2, icmp_ln157_fu_226_p2, output_2_0_reg_152, ap_return_2_preg)
    begin
        if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_2 <= output_2_0_reg_152;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state2, icmp_ln157_fu_226_p2, output_3_0_reg_162, ap_return_3_preg)
    begin
        if (((icmp_ln157_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_3 <= output_3_0_reg_162;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bitcast_ln49_fu_426_p1 <= add1_reg_677;
    empty_52_fu_236_p1 <= i_reg_172(2 - 1 downto 0);
    empty_54_fu_372_p3 <= 
        output_0_0_reg_132 when (icmp_ln161_2_reg_638(0) = '1') else 
        select_ln161_1_reg_633;
    empty_55_fu_385_p3 <= 
        output_1_0_reg_142 when (icmp_ln161_2_reg_638(0) = '1') else 
        select_ln161_2_fu_378_p3;
    empty_57_fu_364_p3 <= 
        output_3_0_reg_162 when (icmp_ln161_2_fu_343_p2(0) = '1') else 
        select_ln161_4_fu_356_p3;
    grp_fu_204_ce <= ap_const_logic_1;

    grp_fu_204_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state14, tmp_43_fu_413_p6, ap_enable_reg_pp0_iter1, ap_phi_mux_add108_phi_fu_197_p4, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_204_p0 <= tmp_43_fu_413_p6;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_204_p0 <= ap_phi_mux_add108_phi_fu_197_p4;
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, mul7_reg_609, ap_CS_fsm_state14, tmp_s_fu_399_p6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_204_p1 <= tmp_s_fu_399_p6;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_204_p1 <= mul7_reg_609;
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_204_p2 <= grp_fu_763_p_dout0;
    grp_fu_209_ce <= ap_const_logic_1;
    grp_fu_209_p0 <= input_r_q0;
    grp_fu_209_p1 <= layer_12_weights_q0;
    grp_fu_209_p2 <= grp_fu_770_p_dout0;
    grp_fu_215_ce <= ap_const_logic_1;
    grp_fu_215_opcode <= ap_const_lv5_2;
    grp_fu_215_p0 <= add1_reg_677;
    grp_fu_215_p1 <= ap_const_lv32_0;
    grp_fu_215_p2 <= grp_fu_788_p_dout0;
    grp_fu_763_p_ce <= ap_const_logic_1;
    grp_fu_763_p_din0 <= grp_fu_204_p0;
    grp_fu_763_p_din1 <= grp_fu_204_p1;
    grp_fu_763_p_opcode <= ap_const_lv2_0;
    grp_fu_770_p_ce <= ap_const_logic_1;
    grp_fu_770_p_din0 <= input_r_q0;
    grp_fu_770_p_din1 <= layer_12_weights_q0;
    grp_fu_788_p_ce <= ap_const_logic_1;
    grp_fu_788_p_din0 <= add1_reg_677;
    grp_fu_788_p_din1 <= ap_const_lv32_0;
    grp_fu_788_p_opcode <= ap_const_lv5_2;
    icmp_ln157_fu_226_p2 <= "1" when (i_reg_172 = ap_const_lv3_4) else "0";
    icmp_ln159_fu_284_p2 <= "1" when (ap_phi_mux_ii_phi_fu_187_p4 = ap_const_lv5_10) else "0";
    icmp_ln161_1_fu_330_p2 <= "1" when (empty_52_reg_566 = ap_const_lv2_1) else "0";
    icmp_ln161_2_fu_343_p2 <= "1" when (empty_52_reg_566 = ap_const_lv2_2) else "0";
    icmp_ln161_fu_317_p2 <= "1" when (empty_52_reg_566 = ap_const_lv2_0) else "0";
    icmp_ln49_6_fu_449_p2 <= "1" when (trunc_ln49_fu_439_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_443_p2 <= "0" when (tmp_44_fu_429_p4 = ap_const_lv8_FF) else "1";
    ii_cast4_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ii_phi_fu_187_p4),64));
    input_r_address0 <= ii_cast4_fu_290_p1(4 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_12_weights_address0 <= zext_ln161_fu_312_p1(6 - 1 downto 0);

    layer_12_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer_12_weights_ce0 <= ap_const_logic_1;
        else 
            layer_12_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln49_fu_455_p2 <= (icmp_ln49_fu_443_p2 or icmp_ln49_6_fu_449_p2);
    output_0_2_fu_525_p3 <= 
        output_0_0_reg_132 when (icmp_ln161_2_reg_638(0) = '1') else 
        select_ln49_7_fu_519_p3;
    output_1_2_fu_506_p3 <= 
        output_1_0_reg_142 when (icmp_ln161_2_reg_638(0) = '1') else 
        select_ln49_5_fu_500_p3;
    output_2_2_fu_493_p3 <= 
        select_ln49_fu_467_p3 when (icmp_ln161_2_reg_638(0) = '1') else 
        output_2_0_reg_152;
    output_3_2_fu_486_p3 <= 
        output_3_0_reg_162 when (icmp_ln161_2_reg_638(0) = '1') else 
        select_ln49_4_fu_480_p3;
    select_ln161_1_fu_335_p3 <= 
        output_0_0_reg_132 when (icmp_ln161_1_fu_330_p2(0) = '1') else 
        select_ln161_fu_322_p3;
    select_ln161_2_fu_378_p3 <= 
        add108_reg_194 when (icmp_ln161_1_reg_625(0) = '1') else 
        output_1_0_reg_142;
    select_ln161_3_fu_348_p3 <= 
        output_3_0_reg_162 when (icmp_ln161_fu_317_p2(0) = '1') else 
        add108_reg_194;
    select_ln161_4_fu_356_p3 <= 
        output_3_0_reg_162 when (icmp_ln161_1_fu_330_p2(0) = '1') else 
        select_ln161_3_fu_348_p3;
    select_ln161_fu_322_p3 <= 
        add108_reg_194 when (icmp_ln161_fu_317_p2(0) = '1') else 
        output_0_0_reg_132;
    select_ln49_3_fu_474_p3 <= 
        empty_57_reg_649 when (icmp_ln161_reg_619(0) = '1') else 
        select_ln49_fu_467_p3;
    select_ln49_4_fu_480_p3 <= 
        empty_57_reg_649 when (icmp_ln161_1_reg_625(0) = '1') else 
        select_ln49_3_fu_474_p3;
    select_ln49_5_fu_500_p3 <= 
        select_ln49_fu_467_p3 when (icmp_ln161_1_reg_625(0) = '1') else 
        empty_55_reg_662;
    select_ln49_6_fu_513_p3 <= 
        select_ln49_fu_467_p3 when (icmp_ln161_reg_619(0) = '1') else 
        empty_54_reg_656;
    select_ln49_7_fu_519_p3 <= 
        empty_54_reg_656 when (icmp_ln161_1_reg_625(0) = '1') else 
        select_ln49_6_fu_513_p3;
    select_ln49_fu_467_p3 <= 
        add1_reg_677 when (and_ln49_fu_461_p2(0) = '1') else 
        ap_const_lv32_0;
    shl_ln_fu_299_p3 <= (trunc_ln161_fu_295_p1 & ap_const_lv2_0);
    tmp_43_fu_413_p1 <= 
        output_0_0_reg_132 when (icmp_ln161_2_reg_638(0) = '1') else 
        select_ln161_1_reg_633;
    tmp_43_fu_413_p2 <= 
        output_1_0_reg_142 when (icmp_ln161_2_reg_638(0) = '1') else 
        select_ln161_2_fu_378_p3;
    tmp_43_fu_413_p3 <= 
        add108_reg_194 when (icmp_ln161_2_reg_638(0) = '1') else 
        output_2_0_reg_152;
    tmp_44_fu_429_p4 <= bitcast_ln49_fu_426_p1(30 downto 23);
    tmp_fu_240_p5 <= i_reg_172(2 - 1 downto 0);
    trunc_ln161_fu_295_p1 <= ap_phi_mux_ii_phi_fu_187_p4(4 - 1 downto 0);
    trunc_ln49_fu_439_p1 <= bitcast_ln49_fu_426_p1(23 - 1 downto 0);
    zext_ln157_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_172),6));
    zext_ln161_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_fu_307_p2),64));
end behav;

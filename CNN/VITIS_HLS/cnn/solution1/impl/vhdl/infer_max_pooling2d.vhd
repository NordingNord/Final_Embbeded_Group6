-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_max_pooling2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1083_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1083_p_ce : OUT STD_LOGIC;
    grp_fu_2720_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2720_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2720_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2720_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2720_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_max_pooling2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten23_reg_126 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_138 : STD_LOGIC_VECTOR (6 downto 0);
    signal iii_reg_149 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln121_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln121_reg_754_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_754_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_754_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_758_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_reg_767_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_fu_224_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_reg_775 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_reg_775_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_cast3_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iii_cast3_reg_782 : STD_LOGIC_VECTOR (63 downto 0);
    signal iii_cast3_reg_782_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal iii_cast3_reg_782_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal iii_cast3_reg_782_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_fu_248_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln124_reg_797 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln121_fu_254_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln121_reg_802 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_load_7_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_fu_260_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln127_reg_814 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_17_fu_265_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln124_17_reg_819 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln136_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln124_15_fu_421_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln124_15_reg_831 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln136_7_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_7_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln136_fu_565_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln136_reg_848 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln136_8_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_8_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_8_reg_853_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_9_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten23_phi_fu_130_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_142_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_iii_phi_fu_153_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_ii_phi_fu_164_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln136_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_10_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_11_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln127_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln121_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_1_fu_237_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln136_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_275_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_14_fu_285_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_27_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_fu_322_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln136_fu_328_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_3_fu_340_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_332_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln136_5_fu_346_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_fu_354_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln136_13_fu_381_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln136_mid1_fu_385_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln121_16_fu_361_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln136_14_fu_400_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln136_5_mid1_fu_406_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_17_fu_368_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_5_fu_375_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitcast_ln136_13_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_14_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_434_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_15_fu_444_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_29_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_28_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_451_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_16_fu_461_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_31_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_30_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_15_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_16_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_13_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_14_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_13_fu_393_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_532_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln121_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_16_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_17_fu_519_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln136_s_fu_552_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln124_14_fu_414_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal iii_cast_fu_428_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln136_15_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_16_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_575_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_17_fu_585_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_33_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_32_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_18_fu_602_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_35_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_34_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_18_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_19_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_15_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_16_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_17_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_18_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_668_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_19_fu_678_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_37_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_36_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_685_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_20_fu_695_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_39_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_38_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_20_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_21_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_17_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_18_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_171_ce : STD_LOGIC;
    signal grp_fu_171_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_177_ce : STD_LOGIC;
    signal grp_fu_177_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state5)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ii_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ii_reg_160 <= select_ln124_15_reg_831;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    iii_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                iii_reg_149 <= add_ln127_reg_814;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_149 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten23_reg_126 <= add_ln121_reg_802;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_126 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_138 <= select_ln124_17_reg_819;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_138 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln121_reg_802 <= add_ln121_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln124_reg_797 <= add_ln124_fu_248_p2;
                and_ln121_reg_767 <= and_ln121_fu_212_p2;
                icmp_ln124_reg_758 <= icmp_ln124_fu_194_p2;
                    iii_cast3_reg_782(5 downto 0) <= iii_cast3_fu_232_p1(5 downto 0);
                select_ln124_reg_775 <= select_ln124_fu_224_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln127_reg_814 <= add_ln127_fu_260_p2;
                input_load_7_reg_807 <= input_r_q0;
                select_ln124_17_reg_819 <= select_ln124_17_fu_265_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln136_reg_848 <= add_ln136_fu_565_p2;
                select_ln136_7_reg_836 <= select_ln136_7_fu_513_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln121_reg_767_pp0_iter1_reg <= and_ln121_reg_767;
                icmp_ln121_reg_754 <= icmp_ln121_fu_188_p2;
                icmp_ln121_reg_754_pp0_iter1_reg <= icmp_ln121_reg_754;
                icmp_ln121_reg_754_pp0_iter2_reg <= icmp_ln121_reg_754_pp0_iter1_reg;
                icmp_ln121_reg_754_pp0_iter3_reg <= icmp_ln121_reg_754_pp0_iter2_reg;
                icmp_ln124_reg_758_pp0_iter1_reg <= icmp_ln124_reg_758;
                    iii_cast3_reg_782_pp0_iter1_reg(5 downto 0) <= iii_cast3_reg_782(5 downto 0);
                    iii_cast3_reg_782_pp0_iter2_reg(5 downto 0) <= iii_cast3_reg_782_pp0_iter1_reg(5 downto 0);
                    iii_cast3_reg_782_pp0_iter3_reg(5 downto 0) <= iii_cast3_reg_782_pp0_iter2_reg(5 downto 0);
                select_ln124_reg_775_pp0_iter1_reg <= select_ln124_reg_775;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                input_load_9_reg_865 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln121_reg_754_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_182 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln124_15_reg_831 <= select_ln124_15_fu_421_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln136_8_reg_853 <= select_ln136_8_fu_654_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln136_8_reg_853_pp0_iter3_reg <= select_ln136_8_reg_853;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln136_reg_824 <= select_ln136_fu_313_p3;
            end if;
        end if;
    end process;
    iii_cast3_reg_782(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    iii_cast3_reg_782_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    iii_cast3_reg_782_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    iii_cast3_reg_782_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln121_fu_254_p2 <= std_logic_vector(unsigned(indvar_flatten23_reg_126) + unsigned(ap_const_lv6_1));
    add_ln124_fu_248_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_142_p4) + unsigned(ap_const_lv7_1));
    add_ln127_fu_260_p2 <= std_logic_vector(unsigned(select_ln124_reg_775) + unsigned(ap_const_lv6_1));
    add_ln136_fu_565_p2 <= std_logic_vector(unsigned(select_ln124_14_fu_414_p3) + unsigned(iii_cast_fu_428_p1));
    add_ln136_s_fu_552_p3 <= (select_ln124_16_fu_545_p3 & or_ln136_17_fu_519_p2);
    and_ln121_fu_212_p2 <= (xor_ln121_fu_200_p2 and icmp_ln127_fu_206_p2);
    and_ln136_13_fu_501_p2 <= (or_ln136_16_fu_495_p2 and or_ln136_15_fu_477_p2);
    and_ln136_14_fu_507_p2 <= (grp_fu_1083_p_dout0 and and_ln136_13_fu_501_p2);
    and_ln136_15_fu_642_p2 <= (or_ln136_19_fu_636_p2 and or_ln136_18_fu_618_p2);
    and_ln136_16_fu_648_p2 <= (grp_fu_2720_p_dout0 and and_ln136_15_fu_642_p2);
    and_ln136_17_fu_735_p2 <= (or_ln136_21_fu_729_p2 and or_ln136_20_fu_711_p2);
    and_ln136_18_fu_741_p2 <= (grp_fu_2720_p_dout0 and and_ln136_17_fu_735_p2);
    and_ln136_fu_307_p2 <= (or_ln136_fu_301_p2 and grp_fu_1083_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln121_reg_754, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln121_reg_754 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_164_p4_assign_proc : process(ii_reg_160, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, icmp_ln121_reg_754_pp0_iter2_reg, select_ln124_15_reg_831, ap_block_pp0_stage1)
    begin
        if (((icmp_ln121_reg_754_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_ii_phi_fu_164_p4 <= select_ln124_15_reg_831;
        else 
            ap_phi_mux_ii_phi_fu_164_p4 <= ii_reg_160;
        end if; 
    end process;


    ap_phi_mux_iii_phi_fu_153_p4_assign_proc : process(iii_reg_149, icmp_ln121_reg_754, ap_CS_fsm_pp0_stage0, add_ln127_reg_814, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_iii_phi_fu_153_p4 <= add_ln127_reg_814;
        else 
            ap_phi_mux_iii_phi_fu_153_p4 <= iii_reg_149;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_130_p4_assign_proc : process(indvar_flatten23_reg_126, icmp_ln121_reg_754, ap_CS_fsm_pp0_stage0, add_ln121_reg_802, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_130_p4 <= add_ln121_reg_802;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_130_p4 <= indvar_flatten23_reg_126;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_142_p4_assign_proc : process(indvar_flatten_reg_138, icmp_ln121_reg_754, ap_CS_fsm_pp0_stage0, select_ln124_17_reg_819, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_142_p4 <= select_ln124_17_reg_819;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_142_p4 <= indvar_flatten_reg_138;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln136_13_fu_431_p1 <= input_load_7_reg_807;
    bitcast_ln136_14_fu_448_p1 <= select_ln136_reg_824;
    bitcast_ln136_15_fu_571_p1 <= reg_182;
    bitcast_ln136_16_fu_589_p1 <= select_ln136_7_reg_836;
    bitcast_ln136_17_fu_665_p1 <= input_load_9_reg_865;
    bitcast_ln136_18_fu_682_p1 <= select_ln136_8_reg_853_pp0_iter3_reg;
    bitcast_ln136_fu_271_p1 <= reg_182;
    grp_fu_1083_p_ce <= ap_const_logic_1;
    grp_fu_1083_p_din0 <= grp_fu_171_p0;
    grp_fu_1083_p_din1 <= grp_fu_171_p1;
    grp_fu_1083_p_opcode <= ap_const_lv5_2;
    grp_fu_171_ce <= ap_const_logic_1;
    grp_fu_171_opcode <= ap_const_lv5_2;

    grp_fu_171_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, input_load_7_reg_807, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_171_p0 <= input_load_7_reg_807;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_171_p0 <= input_r_q1;
        else 
            grp_fu_171_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_171_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, select_ln136_fu_313_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_171_p1 <= select_ln136_fu_313_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_171_p1 <= ap_const_lv32_0;
        else 
            grp_fu_171_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_171_p2 <= grp_fu_1083_p_dout0;
    grp_fu_177_ce <= ap_const_logic_1;
    grp_fu_177_opcode <= ap_const_lv5_2;

    grp_fu_177_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, input_load_9_reg_865, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_177_p0 <= input_load_9_reg_865;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_177_p0 <= input_r_q1;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, select_ln136_7_reg_836, select_ln136_8_reg_853, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_177_p1 <= select_ln136_8_reg_853;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_177_p1 <= select_ln136_7_reg_836;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_177_p2 <= grp_fu_2720_p_dout0;
    grp_fu_2720_p_ce <= ap_const_logic_1;
    grp_fu_2720_p_din0 <= grp_fu_177_p0;
    grp_fu_2720_p_din1 <= grp_fu_177_p1;
    grp_fu_2720_p_opcode <= ap_const_lv5_2;
    icmp_ln121_fu_188_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_130_p4 = ap_const_lv6_20) else "0";
    icmp_ln124_fu_194_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_142_p4 = ap_const_lv7_20) else "0";
    icmp_ln127_fu_206_p2 <= "1" when (ap_phi_mux_iii_phi_fu_153_p4 = ap_const_lv6_20) else "0";
    icmp_ln136_27_fu_295_p2 <= "1" when (trunc_ln136_14_fu_285_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_28_fu_465_p2 <= "0" when (tmp_29_fu_434_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_29_fu_471_p2 <= "1" when (trunc_ln136_15_fu_444_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_30_fu_483_p2 <= "0" when (tmp_30_fu_451_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_31_fu_489_p2 <= "1" when (trunc_ln136_16_fu_461_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_32_fu_606_p2 <= "0" when (tmp_32_fu_575_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_33_fu_612_p2 <= "1" when (trunc_ln136_17_fu_585_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_34_fu_624_p2 <= "0" when (tmp_33_fu_592_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_35_fu_630_p2 <= "1" when (trunc_ln136_18_fu_602_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_36_fu_699_p2 <= "0" when (tmp_35_fu_668_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_37_fu_705_p2 <= "1" when (trunc_ln136_19_fu_678_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_38_fu_717_p2 <= "0" when (tmp_36_fu_685_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_39_fu_723_p2 <= "1" when (trunc_ln136_20_fu_695_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_289_p2 <= "0" when (tmp_fu_275_p4 = ap_const_lv8_FF) else "1";
    ii_5_fu_375_p2 <= (select_ln121_fu_354_p3 xor ap_const_lv2_2);
    iii_cast3_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_fu_224_p3),64));
    iii_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_reg_775_pp0_iter1_reg),7));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln136_fu_243_p1, zext_ln136_11_fu_661_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln136_11_fu_661_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln136_fu_243_p1(7 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, iii_cast3_fu_232_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln136_10_fu_560_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln136_10_fu_560_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= iii_cast3_fu_232_p1(7 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln121_fu_540_p2 <= (tmp_2_fu_532_p3 or icmp_ln124_reg_758_pp0_iter1_reg);
    or_ln124_fu_218_p2 <= (icmp_ln124_fu_194_p2 or and_ln121_fu_212_p2);
    or_ln136_14_fu_400_p2 <= (select_ln121_fu_354_p3 or ap_const_lv2_1);
    or_ln136_15_fu_477_p2 <= (icmp_ln136_29_fu_471_p2 or icmp_ln136_28_fu_465_p2);
    or_ln136_16_fu_495_p2 <= (icmp_ln136_31_fu_489_p2 or icmp_ln136_30_fu_483_p2);
    or_ln136_17_fu_519_p2 <= (select_ln124_reg_775_pp0_iter1_reg or select_ln124_13_fu_393_p3);
    or_ln136_18_fu_618_p2 <= (icmp_ln136_33_fu_612_p2 or icmp_ln136_32_fu_606_p2);
    or_ln136_19_fu_636_p2 <= (icmp_ln136_35_fu_630_p2 or icmp_ln136_34_fu_624_p2);
    or_ln136_20_fu_711_p2 <= (icmp_ln136_37_fu_705_p2 or icmp_ln136_36_fu_699_p2);
    or_ln136_21_fu_729_p2 <= (icmp_ln136_39_fu_723_p2 or icmp_ln136_38_fu_717_p2);
    or_ln136_3_fu_340_p2 <= (xor_ln136_fu_322_p2 or ap_const_lv2_1);
    or_ln136_fu_301_p2 <= (icmp_ln136_fu_289_p2 or icmp_ln136_27_fu_295_p2);
    output_r_address0 <= iii_cast3_reg_782_pp0_iter3_reg(5 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        input_load_9_reg_865 when (and_ln136_18_fu_741_p2(0) = '1') else 
        select_ln136_8_reg_853_pp0_iter3_reg;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln121_reg_754_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((icmp_ln121_reg_754_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln121_16_fu_361_p3 <= 
        ap_const_lv6_0 when (icmp_ln124_reg_758_pp0_iter1_reg(0) = '1') else 
        shl_ln_fu_332_p3;
    select_ln121_17_fu_368_p3 <= 
        ap_const_lv7_60 when (icmp_ln124_reg_758_pp0_iter1_reg(0) = '1') else 
        shl_ln136_5_fu_346_p3;
    select_ln121_fu_354_p3 <= 
        ap_const_lv2_0 when (icmp_ln124_reg_758_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_ii_phi_fu_164_p4;
    select_ln124_13_fu_393_p3 <= 
        shl_ln136_mid1_fu_385_p3 when (and_ln121_reg_767_pp0_iter1_reg(0) = '1') else 
        select_ln121_16_fu_361_p3;
    select_ln124_14_fu_414_p3 <= 
        shl_ln136_5_mid1_fu_406_p3 when (and_ln121_reg_767_pp0_iter1_reg(0) = '1') else 
        select_ln121_17_fu_368_p3;
    select_ln124_15_fu_421_p3 <= 
        ii_5_fu_375_p2 when (and_ln121_reg_767_pp0_iter1_reg(0) = '1') else 
        select_ln121_fu_354_p3;
    select_ln124_16_fu_545_p3 <= 
        tmp_1_fu_524_p3 when (and_ln121_reg_767_pp0_iter1_reg(0) = '1') else 
        or_ln121_fu_540_p2;
    select_ln124_17_fu_265_p3 <= 
        ap_const_lv7_1 when (icmp_ln124_reg_758(0) = '1') else 
        add_ln124_reg_797;
    select_ln124_fu_224_p3 <= 
        ap_const_lv6_0 when (or_ln124_fu_218_p2(0) = '1') else 
        ap_phi_mux_iii_phi_fu_153_p4;
    select_ln136_7_fu_513_p3 <= 
        input_load_7_reg_807 when (and_ln136_14_fu_507_p2(0) = '1') else 
        select_ln136_reg_824;
    select_ln136_8_fu_654_p3 <= 
        reg_182 when (and_ln136_16_fu_648_p2(0) = '1') else 
        select_ln136_7_reg_836;
    select_ln136_fu_313_p3 <= 
        reg_182 when (and_ln136_fu_307_p2(0) = '1') else 
        ap_const_lv32_0;
    shl_ln136_5_fu_346_p3 <= (or_ln136_3_fu_340_p2 & ap_const_lv5_0);
    shl_ln136_5_mid1_fu_406_p3 <= (or_ln136_14_fu_400_p2 & ap_const_lv5_0);
    shl_ln136_mid1_fu_385_p3 <= (trunc_ln136_13_fu_381_p1 & ap_const_lv5_0);
    shl_ln_fu_332_p3 <= (trunc_ln136_fu_328_p1 & ap_const_lv5_0);
    tmp_1_fu_524_p3 <= select_ln121_fu_354_p3(1 downto 1);
    tmp_29_fu_434_p4 <= bitcast_ln136_13_fu_431_p1(30 downto 23);
    tmp_2_fu_532_p3 <= xor_ln136_fu_322_p2(1 downto 1);
    tmp_30_fu_451_p4 <= bitcast_ln136_14_fu_448_p1(30 downto 23);
    tmp_32_fu_575_p4 <= bitcast_ln136_15_fu_571_p1(30 downto 23);
    tmp_33_fu_592_p4 <= bitcast_ln136_16_fu_589_p1(30 downto 23);
    tmp_35_fu_668_p4 <= bitcast_ln136_17_fu_665_p1(30 downto 23);
    tmp_36_fu_685_p4 <= bitcast_ln136_18_fu_682_p1(30 downto 23);
    tmp_fu_275_p4 <= bitcast_ln136_fu_271_p1(30 downto 23);
    trunc_ln136_13_fu_381_p1 <= select_ln121_fu_354_p3(1 - 1 downto 0);
    trunc_ln136_14_fu_285_p1 <= bitcast_ln136_fu_271_p1(23 - 1 downto 0);
    trunc_ln136_15_fu_444_p1 <= bitcast_ln136_13_fu_431_p1(23 - 1 downto 0);
    trunc_ln136_16_fu_461_p1 <= bitcast_ln136_14_fu_448_p1(23 - 1 downto 0);
    trunc_ln136_17_fu_585_p1 <= bitcast_ln136_15_fu_571_p1(23 - 1 downto 0);
    trunc_ln136_18_fu_602_p1 <= bitcast_ln136_16_fu_589_p1(23 - 1 downto 0);
    trunc_ln136_19_fu_678_p1 <= bitcast_ln136_17_fu_665_p1(23 - 1 downto 0);
    trunc_ln136_20_fu_695_p1 <= bitcast_ln136_18_fu_682_p1(23 - 1 downto 0);
    trunc_ln136_fu_328_p1 <= xor_ln136_fu_322_p2(1 - 1 downto 0);
    xor_ln121_fu_200_p2 <= (icmp_ln124_fu_194_p2 xor ap_const_lv1_1);
    xor_ln136_1_fu_237_p2 <= (select_ln124_fu_224_p3 xor ap_const_lv6_20);
    xor_ln136_fu_322_p2 <= (ap_phi_mux_ii_phi_fu_164_p4 xor ap_const_lv2_2);
    zext_ln136_10_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_s_fu_552_p3),64));
    zext_ln136_11_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_reg_848),64));
    zext_ln136_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln136_1_fu_237_p2),64));
end behav;

-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_11_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_11_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10101010001101", 1 => "00111010101010", 2 => "10111010010100", 
    3 => "00111010011000", 4 => "01011011011100", 5 => "00100110001000", 
    6 => "00001100001100", 7 => "11010010011010", 8 => "01010010111001", 
    9 => "01000111011111", 10 => "00011101100111", 11 => "00111101000110", 
    12 => "10100011100010", 13 => "11000110101110", 14 => "01010000111011", 
    15 => "00101010011111", 16 => "11010111001101", 17 => "11101100001000", 
    18 => "11001101001111", 19 => "01001111110011", 20 => "01100000000011", 
    21 => "10101000100101", 22 => "11110001100001", 23 => "00110010111010", 
    24 => "00110000010111", 25 => "00110101000001", 26 => "00111000111101", 
    27 => "00001110111111", 28 => "00110010011001", 29 => "10110111111001", 
    30 => "10010110100111", 31 => "11111110110101", 32 => "10101100111011", 
    33 => "11011101011111", 34 => "11010010000100", 35 => "11000100000010", 
    36 => "00111011001110", 37 => "00000001100010", 38 => "10111110110010", 
    39 => "11010010111011", 40 => "10101011101000", 41 => "10100110110010", 
    42 => "01100101110000", 43 => "10100011101110", 44 => "10100001100101", 
    45 => "01000101010001", 46 => "11101010101111", 47 => "11011011011010", 
    48 => "01100100100111", 49 => "11001101111000", 50 => "00111111001000", 
    51 => "00000101100110", 52 => "00000001011011", 53 => "11100100011100", 
    54 => "11110001000000", 55 => "00101100111101", 56 => "01001101010010", 
    57 => "11111000000110", 58 => "00110001011100", 59 => "00010111011111", 
    60 => "00001110111001", 61 => "11100001111110", 62 => "10011001000111", 
    63 => "10111010111001", 64 => "00000110001101", 65 => "10101111100100", 
    66 => "10111000110000", 67 => "00110101000011", 68 => "11100000010010", 
    69 => "01010010011000", 70 => "00001001101111", 71 => "00000100011101", 
    72 => "00001100101000", 73 => "11001111001101", 74 => "00110011101111", 
    75 => "00010111011011", 76 => "11010001100000", 77 => "11111000101111", 
    78 => "11110110000111", 79 => "11000111000100", 80 => "00011001110110", 
    81 => "01011011101100", 82 => "00011000001100", 83 => "01010000101100", 
    84 => "11001000010101", 85 => "11101010001101", 86 => "00001110110000", 
    87 => "00110101111111", 88 => "00111001100101", 89 => "01000010000001", 
    90 => "11110100000111", 91 => "00000100011101", 92 => "00001011000011", 
    93 => "11011100110111", 94 => "11110001010110", 95 => "11111000001010", 
    96 => "10110001110011", 97 => "10101110001010", 98 => "01100110011101", 
    99 => "11110000010000", 100 => "00001100101011", 101 => "00100101001100", 
    102 => "01011011000010", 103 => "11101001100100", 104 => "10111001011000", 
    105 => "11000100001110", 106 => "11001111011110", 107 => "00111101100111", 
    108 => "00101100100101", 109 => "10011001100011", 110 => "10110110111111", 
    111 => "00000110111101", 112 => "11100011011101", 113 => "10100101000110", 
    114 => "11100001000010", 115 => "10011001000011", 116 => "10110001111111", 
    117 => "00000011011000", 118 => "00000001011011", 119 => "01011101110110", 
    120 => "10110111101000", 121 => "00001001000001", 122 => "11101010111001", 
    123 => "10101111001110", 124 => "01001000000011", 125 => "11111010111011", 
    126 => "10110011111111", 127 => "01001001101110", 128 => "11001011100010", 
    129 => "01011010101100", 130 => "00000001101000", 131 => "11010100000010", 
    132 => "11001010001111", 133 => "01000011010000", 134 => "10110010010111", 
    135 => "01100000100101", 136 => "10010101101111", 137 => "11000001001011", 
    138 => "11111110111100", 139 => "10100111101001", 140 => "11101010000101", 
    141 => "00100100000110", 142 => "01100000011000", 143 => "10111001101110", 
    144 => "01011010110111", 145 => "10110000101111", 146 => "00010000010101", 
    147 => "01011101000101", 148 => "10111010001111", 149 => "01010011101011", 
    150 => "00101010001110", 151 => "00010010100010", 152 => "11000100100100", 
    153 => "00101011001010", 154 => "11000110000111", 155 => "01001101101111", 
    156 => "11111001011000", 157 => "00011100100101", 158 => "01010010101100", 
    159 => "00110001010100", 160 => "00001001110010", 161 => "01100100111000", 
    162 => "11100100111001", 163 => "00001101100101", 164 => "11100100010100", 
    165 => "11011110011100", 166 => "00001011100010", 167 => "01000010011000", 
    168 => "11011000011100", 169 => "01100000101001", 170 => "11111001110111", 
    171 => "00100111010101", 172 => "11111101011101", 173 => "01001010011110", 
    174 => "11101000100011", 175 => "10111110101010", 176 => "11011010000011", 
    177 => "10101000101010", 178 => "00111110111011", 179 => "11011010100110", 
    180 => "11111110111001", 181 => "00011101010010", 182 => "10101010010100", 
    183 => "11100011111110", 184 => "00011010101010", 185 => "10011001110011", 
    186 => "11000110000110", 187 => "01001011010100", 188 => "11110111110101", 
    189 => "00000001001110", 190 => "11101000000101", 191 => "11101001011000", 
    192 => "00100100010000", 193 => "11011111100001", 194 => "00101000001010", 
    195 => "00110101000011", 196 => "00001011110011", 197 => "10111111001000", 
    198 => "01001011110001", 199 => "00000000011000", 200 => "01011110001011", 
    201 => "10011100110110", 202 => "01000001100010", 203 => "10100111100110", 
    204 => "10111001011011", 205 => "10011111100100", 206 => "00011100000000", 
    207 => "00110000100100", 208 => "11010111011101", 209 => "00110100011011", 
    210 => "11011001111110", 211 => "11100111101101", 212 => "01001010110001", 
    213 => "11111100000100", 214 => "00001111110010", 215 => "11110111100111", 
    216 => "01010000110101", 217 => "00101100011111", 218 => "01010110010010", 
    219 => "11001010011010", 220 => "10010101110100", 221 => "11001001110110", 
    222 => "00000011101111", 223 => "11101101000111", 224 => "00111010101111", 
    225 => "11110001101110", 226 => "11000010001011", 227 => "01001011100111", 
    228 => "11100100100111", 229 => "01010000000101", 230 => "11111101101001", 
    231 => "00000000101110", 232 => "00011001111011", 233 => "00111100010110", 
    234 => "00101100001101", 235 => "11001111011101", 236 => "00101000110001", 
    237 => "11011000011000", 238 => "11011011110111", 239 => "10111101001001", 
    240 => "00100110011000", 241 => "11010101010010", 242 => "01010011001010", 
    243 => "10011101011101", 244 => "00101111111001", 245 => "11010011011101", 
    246 => "01010111011000", 247 => "10100010001010", 248 => "11010010100101", 
    249 => "11010001001011", 250 => "10111111100011", 251 => "00111001001011", 
    252 => "00110111000101", 253 => "10011011010100", 254 => "01100011011001", 
    255 => "00101010101101", 256 => "00000010001111", 257 => "00010101101101", 
    258 => "00010011100010", 259 => "10101000101100", 260 => "10110000101001", 
    261 => "10010110101111", 262 => "10100000010001", 263 => "11010000110100", 
    264 => "11110001011111", 265 => "00010101111100", 266 => "11101001011001", 
    267 => "00111001100100", 268 => "11011100110111", 269 => "00110000001111", 
    270 => "10011110110000", 271 => "11101000011001", 272 => "11000101010101", 
    273 => "00111010111001", 274 => "00110100111101", 275 => "00111111011101", 
    276 => "01001110001010", 277 => "11001000010101", 278 => "11101010100010", 
    279 => "00111111110100", 280 => "00001101000011", 281 => "00010101011011", 
    282 => "00100000110101", 283 => "11000011101101", 284 => "00101110110010", 
    285 => "00110100100111", 286 => "11000001000011", 287 => "00110000010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_11 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_11 is
    component infer_layer_4_weights_V_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_11_rom_U :  component infer_layer_4_weights_V_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



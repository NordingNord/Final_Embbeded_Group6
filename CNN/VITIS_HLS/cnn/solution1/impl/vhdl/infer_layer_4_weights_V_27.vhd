-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_27_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_27_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000010010001110", 1 => "1111111101001011", 2 => "1110100111000100", 
    3 => "1110101010111011", 4 => "0001010101010011", 5 => "1111000010111100", 
    6 => "0000101110100011", 7 => "1110110010100011", 8 => "1111100110001001", 
    9 => "1110110101100101", 10 => "1110111010101100", 11 => "0000000100100101", 
    12 => "0001001111110111", 13 => "1110100101011000", 14 => "1110101101110011", 
    15 => "1111100000100001", 16 => "1111111110110101", 17 => "1110111111101100", 
    18 => "1111101000000101", 19 => "1111001000011110", 20 => "0000100101001110", 
    21 => "0000001101001100", 22 => "0000111010000101", 23 => "0001010100101001", 
    24 => "1111001000110100", 25 => "0000101101001000", 26 => "0001001001001101", 
    27 => "1110110101000011", 28 => "1110100100011011", 29 => "0000010111001101", 
    30 => "0001000010011000", 31 => "1110011010100100", 32 => "1111000001011101", 
    33 => "0000010110011010", 34 => "0001001011101100", 35 => "1110011111011010", 
    36 => "0000111011010100", 37 => "1111100110111111", 38 => "1110111100110011", 
    39 => "1110111011000100", 40 => "0000111111010001", 41 => "0000001011010110", 
    42 => "0000110011111100", 43 => "0000101010100000", 44 => "1111100001101011", 
    45 => "1110111110100100", 46 => "1110011111100110", 47 => "0000001001011001", 
    48 => "1110111010110111", 49 => "1110010010011000", 50 => "0000110111000001", 
    51 => "1111111111110001", 52 => "1111010100000001", 53 => "1111100001000001", 
    54 => "0001001111100111", 55 => "0000000001110001", 56 => "1111000001101011", 
    57 => "0000100111011111", 58 => "0000010100100110", 59 => "1111000110100000", 
    60 => "0000110000100100", 61 => "0000110000011001", 62 => "1111010110111110", 
    63 => "1111101011100011", 64 => "1111101000110110", 65 => "0000111011100110", 
    66 => "0001000001011011", 67 => "0001011011110110", 68 => "0000010111101001", 
    69 => "1111010000100100", 70 => "1111101011101011", 71 => "1111111100010101", 
    72 => "1110110001111010", 73 => "1111111001001110", 74 => "0001010111000110", 
    75 => "0000010110011111", 76 => "0001010010110001", 77 => "1111110100011111", 
    78 => "1110011110010001", 79 => "1110111100101000", 80 => "0001010010110100", 
    81 => "0001000101011101", 82 => "0001000011000011", 83 => "0000000110010110", 
    84 => "1110010010100111", 85 => "0001011011100100", 86 => "0000000111110100", 
    87 => "1110011101111000", 88 => "1111011011111011", 89 => "0001000000010000", 
    90 => "0001100111100001", 91 => "1110011110001001", 92 => "0001011000100000", 
    93 => "1111011100110000", 94 => "1111101110000110", 95 => "0001011100010101", 
    96 => "0000000001010011", 97 => "0000110101110000", 98 => "0000101010001111", 
    99 => "0000001100001111", 100 => "0001001000101110", 101 => "1110101111001010", 
    102 => "0000001110101000", 103 => "0000101110010010", 104 => "1111111101101111", 
    105 => "0000010101011010", 106 => "0000100000000100", 107 => "1111111000110111", 
    108 => "0000011000010011", 109 => "1111011111101100", 110 => "0000110011001110", 
    111 => "1111011110000111", 112 => "1111101111001111", 113 => "0001001100011111", 
    114 => "1111100110100111", 115 => "0001010111011111", 116 => "1111001110010111", 
    117 => "0000001001001110", 118 => "0000010101101111", 119 => "1110011000000100", 
    120 => "1110100110011001", 121 => "1110010100001010", 122 => "0000010010111011", 
    123 => "1111100011110001", 124 => "1111110100011101", 125 => "0000111000001110", 
    126 => "0000111000001111", 127 => "0000101011100110", 128 => "1111010001010010", 
    129 => "1111101111000111", 130 => "0000111101100001", 131 => "1111111010101011", 
    132 => "1111101110110000", 133 => "1111011111110110", 134 => "0000110011011001", 
    135 => "1110110101100011", 136 => "1111000111111010", 137 => "0000011110101111", 
    138 => "0000110001000100", 139 => "0000001000001000", 140 => "1111011010110111", 
    141 => "0000001000111100", 142 => "1110101010000011", 143 => "1111000110111011", 
    144 => "0000101001011000", 145 => "0001100001010001", 146 => "0000000101000110", 
    147 => "0001010001011001", 148 => "1111111000100101", 149 => "1111111101100110", 
    150 => "0001100111110010", 151 => "1110100101101000", 152 => "0001000000000010", 
    153 => "0000110100101100", 154 => "1110101110000000", 155 => "0001010001011110", 
    156 => "1111110000111100", 157 => "1111101000110100", 158 => "0000001111011111", 
    159 => "0000001111000110", 160 => "1111110111111100", 161 => "1110100010010001", 
    162 => "1111010100110000", 163 => "1111111101010010", 164 => "0001100101010011", 
    165 => "1110110010111000", 166 => "1110011100111001", 167 => "0001100010000001", 
    168 => "1111000110000010", 169 => "0000101100001110", 170 => "1111011000001100", 
    171 => "1111101110011111", 172 => "1110011100110011", 173 => "1111010101110000", 
    174 => "0001011110111011", 175 => "0000000101001010", 176 => "1111011100000010", 
    177 => "1110111100011011", 178 => "0000100010011100", 179 => "0001000111011100", 
    180 => "0000010010101010", 181 => "1111100001011100", 182 => "0001011010100111", 
    183 => "1111010000011000", 184 => "0000000111100100", 185 => "0001001101011011", 
    186 => "1111011101111111", 187 => "1110100100010111", 188 => "0000010110001100", 
    189 => "1111011001110010", 190 => "1110010011110101", 191 => "1111000100010001", 
    192 => "1111110011011000", 193 => "0001010101011111", 194 => "0001101000010011", 
    195 => "1110110111001001", 196 => "1111110110011011", 197 => "1110011101011001", 
    198 => "1110101001010010", 199 => "1111001101110111", 200 => "1111001010100010", 
    201 => "0001000001110101", 202 => "0000000001000111", 203 => "0000010100100101", 
    204 => "1111011111010011", 205 => "0001001000101010", 206 => "1110101110110000", 
    207 => "0001000011110111", 208 => "1111110100010000", 209 => "0001000100100100", 
    210 => "1111110010000101", 211 => "0000100011110110", 212 => "1110111111101101", 
    213 => "1110010111011000", 214 => "0000000110111101", 215 => "0000101011011010", 
    216 => "1111110011101001", 217 => "0000001111000111", 218 => "0001010001000101", 
    219 => "1111010110100001", 220 => "0001011000011000", 221 => "0000100100110010", 
    222 => "0001000000001100", 223 => "0000001000001101", 224 => "1111011011010011", 
    225 => "1110101010000000", 226 => "1110101000100010", 227 => "1111100000000110", 
    228 => "1110110101110110", 229 => "1110101101001000", 230 => "0000111001100010", 
    231 => "0000000010111101", 232 => "0000000010001010", 233 => "1111000011111101", 
    234 => "0001100000100001", 235 => "1111010010010001", 236 => "0000100001101010", 
    237 => "0000000001011000", 238 => "0000111101010101", 239 => "0001001110111010", 
    240 => "0000001010110010", 241 => "1110101110111111", 242 => "1110111010010010", 
    243 => "1111111011000010", 244 => "1111011111101011", 245 => "0000101110111000", 
    246 => "0000110010101111", 247 => "0000000100111100", 248 => "1110100011101101", 
    249 => "1111010101111111", 250 => "0001001110000111", 251 => "0000011011001010", 
    252 => "0000001011011011", 253 => "0001000001000000", 254 => "0000001100000101", 
    255 => "1111001101000001", 256 => "0001100001000010", 257 => "1110100101011110", 
    258 => "0001101000000000", 259 => "0000010111011010", 260 => "1110011101110110", 
    261 => "1111000101100101", 262 => "0000010101110111", 263 => "1110101010101010", 
    264 => "0000011000011010", 265 => "1110011011011000", 266 => "0000010010100111", 
    267 => "1111001011110011", 268 => "1110011011100101", 269 => "1110011011000011", 
    270 => "0001011000000011", 271 => "1111111100101100", 272 => "1110011011010001", 
    273 => "0000001111100110", 274 => "1111000011111011", 275 => "1111111010111001", 
    276 => "0001010000010100", 277 => "0001000010101010", 278 => "1110100010111011", 
    279 => "1111111001000110", 280 => "0000011100000000", 281 => "0001011000100100", 
    282 => "0000010011110000", 283 => "0001100000001001", 284 => "1110110101001011", 
    285 => "1110010011100101", 286 => "0000100001000011", 287 => "1111110010011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_27 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_27 is
    component infer_layer_4_weights_V_27_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_27_rom_U :  component infer_layer_4_weights_V_27_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



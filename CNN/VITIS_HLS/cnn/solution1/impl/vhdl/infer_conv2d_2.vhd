-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_conv2d_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1057_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_ce : OUT STD_LOGIC;
    grp_fu_1064_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1064_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1064_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1064_p_ce : OUT STD_LOGIC;
    grp_fu_1083_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1083_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1083_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_conv2d_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv9_16 : STD_LOGIC_VECTOR (8 downto 0) := "000010110";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv14_3C80 : STD_LOGIC_VECTOR (13 downto 0) := "11110010000000";
    constant ap_const_lv11_2C0 : STD_LOGIC_VECTOR (10 downto 0) := "01011000000";
    constant ap_const_lv9_1EA : STD_LOGIC_VECTOR (8 downto 0) := "111101010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_2_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_2_weights_ce0 : STD_LOGIC;
    signal layer_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_2_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_2_bias_ce0 : STD_LOGIC;
    signal layer_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten42_reg_220 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_242 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal vi_reg_264 : STD_LOGIC_VECTOR (2 downto 0);
    signal add4320_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln71_fu_301_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln71_reg_947 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln74_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_2_fu_405_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln71_2_reg_960 : STD_LOGIC_VECTOR (4 downto 0);
    signal iii_mid2_fu_425_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_mid2_reg_968 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast8_mid2_fu_433_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast8_mid2_reg_975 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_981 : STD_LOGIC_VECTOR (13 downto 0);
    signal ii_cast8_mid2_cast_fu_500_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_cast8_mid2_cast_reg_986 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln77_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_fu_506_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln77_1_reg_996 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid128_fu_534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid128_reg_1006 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_reg_1011 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln83_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1016_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1016_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_1_fu_635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_1_reg_1025 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_704_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_reg_1030 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_3_fu_796_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_3_reg_1035 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln86_1_fu_863_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_1_reg_1050 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln95_fu_869_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln95_reg_1065 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln86_4_fu_874_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_4_reg_1070 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1075 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln77_fu_880_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln77_reg_1090 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_fu_891_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln74_reg_1095 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer_2_bias_load_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten82_reg_164 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten56_reg_186 : STD_LOGIC_VECTOR (10 downto 0);
    signal ii_reg_198 : STD_LOGIC_VECTOR (4 downto 0);
    signal iii_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten42_phi_fu_224_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_iv_phi_fu_235_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_246_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v_phi_fu_257_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_vi_phi_fu_268_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_add4320_phi_fu_278_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sum19_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal mul_ln74_fu_311_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln74_fu_311_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast_fu_317_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_321_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln74_fu_311_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln71_1_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln74_1_fu_367_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln74_1_fu_367_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln74_1_fu_367_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln77_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln71_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_349_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln71_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_62_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_413_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast_mid1_fu_441_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid1_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_mid1_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln71_1_fu_373_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid174_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid152_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln71_3_fu_461_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_63_fu_469_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln77_2_fu_485_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_mid_fu_477_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum19_fu_489_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_mid116_fu_509_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_mid_fu_522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_mid_fu_514_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_mid126_fu_530_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln86_fu_546_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_55_fu_550_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_563_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_555_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_571_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next34_fu_581_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_57_fu_591_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_595_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_fu_587_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln95_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_2_fu_647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln94_fu_603_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_56_fu_575_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln89_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln83_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_621_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln83_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next34_dup_fu_692_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln86_1_fu_712_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid1_fu_716_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_mid1_fu_729_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_mid1_fu_721_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_mid1_fu_737_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next34_mid1_fu_747_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_59_fu_757_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_761_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_mid1_fu_753_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_1_fu_769_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_3_fu_659_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid13_fu_741_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln83_4_fu_667_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln86_2_fu_783_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_60_fu_804_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln95_fu_808_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_1_fu_775_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln83_1_fu_655_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_1_fu_812_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_2_fu_818_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln83_fu_643_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln98_2_fu_832_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln98_fu_838_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln86_fu_791_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_fu_842_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_824_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln98_1_fu_853_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln74_1_fu_885_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln49_fu_898_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_901_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_911_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_6_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_290_ce : STD_LOGIC;
    signal grp_fu_296_ce : STD_LOGIC;
    signal grp_fu_296_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal mul_ln74_1_fu_367_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln74_fu_311_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mul_5ns_6ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component infer_conv2d_2_layer_2_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_conv2d_2_layer_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_2_weights_U : component infer_conv2d_2_layer_2_weights
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_2_weights_address0,
        ce0 => layer_2_weights_ce0,
        q0 => layer_2_weights_q0);

    layer_2_bias_U : component infer_conv2d_2_layer_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_2_bias_address0,
        ce0 => layer_2_bias_ce0,
        q0 => layer_2_bias_q0);

    mul_5ns_6ns_9_1_1_U7 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln74_fu_311_p0,
        din1 => mul_ln74_fu_311_p1,
        dout => mul_ln74_fu_311_p2);

    mul_5ns_6ns_9_1_1_U8 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln74_1_fu_367_p0,
        din1 => mul_ln74_1_fu_367_p1,
        dout => mul_ln74_1_fu_367_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4320_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln83_reg_1016_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                add4320_reg_275 <= grp_fu_1057_p_dout0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                add4320_reg_275 <= output_r_q0;
            end if; 
        end if;
    end process;

    i_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_reg_175 <= select_ln71_2_reg_960;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_175 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    ii_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                ii_reg_198 <= ii_cast8_mid2_reg_975;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_198 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    iii_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                iii_reg_209 <= add_ln77_reg_1090;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_209 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten42_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten42_reg_220 <= add_ln83_reg_1011;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten42_reg_220 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten56_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten56_reg_186 <= select_ln74_reg_1095;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten56_reg_186 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten82_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten82_reg_164 <= add_ln71_reg_947;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten82_reg_164 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_242 <= select_ln86_4_reg_1070;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_242 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iv_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                iv_reg_231 <= select_ln83_1_reg_1025;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                iv_reg_231 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    v_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                v_reg_253 <= select_ln86_3_reg_1035;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_reg_253 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    vi_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                vi_reg_264 <= add_ln95_reg_1065;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vi_reg_264 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln71_reg_947 <= add_ln71_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln77_reg_1090 <= add_ln77_fu_880_p2;
                select_ln74_reg_1095 <= select_ln74_fu_891_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln83_reg_1011 <= add_ln83_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_fu_609_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln86_1_reg_1050 <= add_ln86_1_fu_863_p2;
                icmp_ln86_reg_1020 <= icmp_ln86_fu_615_p2;
                select_ln86_reg_1030 <= select_ln86_fu_704_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln95_reg_1065 <= add_ln95_fu_869_p2;
                select_ln86_4_reg_1070 <= select_ln86_4_fu_874_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_reg_1105 <= grp_fu_1057_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln74_reg_955 <= icmp_ln74_fu_343_p2;
                ii_cast8_mid2_reg_975 <= ii_cast8_mid2_fu_433_p3;
                iii_mid2_reg_968 <= iii_mid2_fu_425_p3;
                output_addr_reg_981 <= sum19_cast_fu_495_p1(14 - 1 downto 0);
                select_ln71_2_reg_960 <= select_ln71_2_fu_405_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln83_reg_1016 <= icmp_ln83_fu_609_p2;
                icmp_ln83_reg_1016_pp0_iter1_reg <= icmp_ln83_reg_1016;
                icmp_ln83_reg_1016_pp0_iter2_reg <= icmp_ln83_reg_1016_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    ii_cast8_mid2_cast_reg_986(4 downto 0) <= ii_cast8_mid2_cast_fu_500_p1(4 downto 0);
                    p_mid128_reg_1006(9 downto 3) <= p_mid128_fu_534_p2(9 downto 3);
                    zext_ln77_1_reg_996(5 downto 0) <= zext_ln77_1_fu_506_p1(5 downto 0);
                    zext_ln77_reg_991(5 downto 0) <= zext_ln77_fu_503_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                layer_2_bias_load_reg_1100 <= layer_2_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_reg_1075 <= grp_fu_1064_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_fu_609_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln83_1_reg_1025 <= select_ln83_1_fu_635_p3;
                select_ln86_3_reg_1035 <= select_ln86_3_fu_796_p3;
            end if;
        end if;
    end process;
    ii_cast8_mid2_cast_reg_986(9 downto 5) <= "00000";
    zext_ln77_reg_991(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln77_1_reg_996(8 downto 6) <= "000";
    p_mid128_reg_1006(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_337_p2, ap_enable_reg_pp0_iter0, icmp_ln83_fu_609_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln71_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_fu_609_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_fu_609_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln71_1_fu_357_p2 <= std_logic_vector(unsigned(i_reg_175) + unsigned(ap_const_lv5_1));
    add_ln71_fu_301_p2 <= std_logic_vector(unsigned(indvar_flatten82_reg_164) + unsigned(ap_const_lv14_1));
    add_ln74_1_fu_885_p2 <= std_logic_vector(unsigned(indvar_flatten56_reg_186) + unsigned(ap_const_lv11_1));
    add_ln74_fu_413_p2 <= std_logic_vector(unsigned(select_ln71_fu_349_p3) + unsigned(ap_const_lv5_1));
    add_ln77_fu_880_p2 <= std_logic_vector(unsigned(iii_mid2_reg_968) + unsigned(ap_const_lv6_1));
    add_ln83_fu_540_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten42_phi_fu_224_p4) + unsigned(ap_const_lv4_1));
    add_ln86_1_fu_863_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_246_p4) + unsigned(ap_const_lv4_1));
    add_ln86_fu_791_p2 <= std_logic_vector(unsigned(select_ln86_2_fu_783_p3) + unsigned(ii_cast8_mid2_cast_reg_986));
    add_ln95_1_fu_812_p2 <= std_logic_vector(signed(sext_ln95_fu_808_p1) + signed(select_ln86_1_fu_775_p3));
    add_ln95_2_fu_818_p2 <= std_logic_vector(unsigned(zext_ln83_1_fu_655_p1) + unsigned(add_ln95_1_fu_812_p2));
    add_ln95_fu_869_p2 <= std_logic_vector(unsigned(select_ln86_reg_1030) + unsigned(ap_const_lv3_1));
    add_ln98_1_fu_853_p2 <= std_logic_vector(unsigned(shl_ln_fu_824_p3) + unsigned(zext_ln77_1_reg_996));
    add_ln98_2_fu_832_p2 <= std_logic_vector(signed(empty_60_fu_804_p1) + signed(zext_ln83_fu_643_p1));
    add_ln98_fu_842_p2 <= std_logic_vector(signed(sext_ln98_fu_838_p1) + signed(add_ln86_fu_791_p2));
    and_ln49_fu_933_p2 <= (or_ln49_fu_927_p2 and grp_fu_1083_p_dout0);
    and_ln71_fu_399_p2 <= (xor_ln71_fu_387_p2 and icmp_ln77_fu_393_p2);
    and_ln83_fu_686_p2 <= (xor_ln83_fu_674_p2 and icmp_ln89_fu_680_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(8);
    ap_CS_fsm_state16 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
    ap_CS_fsm_state21 <= ap_CS_fsm(14);
    ap_CS_fsm_state22 <= ap_CS_fsm(15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln83_fu_609_p2)
    begin
        if ((icmp_ln83_fu_609_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_337_p2)
    begin
        if ((((icmp_ln71_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add4320_phi_fu_278_p4_assign_proc : process(add4320_reg_275, icmp_ln83_reg_1016_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, grp_fu_1057_p_dout0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln83_reg_1016_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_add4320_phi_fu_278_p4 <= grp_fu_1057_p_dout0;
        else 
            ap_phi_mux_add4320_phi_fu_278_p4 <= add4320_reg_275;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten42_phi_fu_224_p4_assign_proc : process(indvar_flatten42_reg_220, add_ln83_reg_1011, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1016, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten42_phi_fu_224_p4 <= add_ln83_reg_1011;
        else 
            ap_phi_mux_indvar_flatten42_phi_fu_224_p4 <= indvar_flatten42_reg_220;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_246_p4_assign_proc : process(indvar_flatten_reg_242, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1016, select_ln86_4_reg_1070, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_246_p4 <= select_ln86_4_reg_1070;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_246_p4 <= indvar_flatten_reg_242;
        end if; 
    end process;


    ap_phi_mux_iv_phi_fu_235_p4_assign_proc : process(iv_reg_231, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1016, select_ln83_1_reg_1025, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_iv_phi_fu_235_p4 <= select_ln83_1_reg_1025;
        else 
            ap_phi_mux_iv_phi_fu_235_p4 <= iv_reg_231;
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_257_p4_assign_proc : process(v_reg_253, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1016, select_ln86_3_reg_1035, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_v_phi_fu_257_p4 <= select_ln86_3_reg_1035;
        else 
            ap_phi_mux_v_phi_fu_257_p4 <= v_reg_253;
        end if; 
    end process;


    ap_phi_mux_vi_phi_fu_268_p4_assign_proc : process(vi_reg_264, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1016, add_ln95_reg_1065, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_1016 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_vi_phi_fu_268_p4 <= add_ln95_reg_1065;
        else 
            ap_phi_mux_vi_phi_fu_268_p4 <= vi_reg_264;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_337_p2)
    begin
        if (((icmp_ln71_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_fu_898_p1 <= add_reg_1105;
    empty_55_fu_550_p2 <= std_logic_vector(signed(sext_ln86_fu_546_p1) + signed(select_ln71_2_reg_960));
    empty_56_fu_575_p2 <= std_logic_vector(unsigned(p_shl1_fu_555_p3) - unsigned(p_shl2_cast_fu_571_p1));
    empty_57_fu_591_p1 <= indvars_iv_next34_fu_581_p2(2 - 1 downto 0);
    empty_59_fu_757_p1 <= indvars_iv_next34_mid1_fu_747_p2(2 - 1 downto 0);
    empty_60_fu_804_p1 <= select_ln86_fu_704_p3(2 - 1 downto 0);
    empty_62_fu_419_p2 <= (icmp_ln74_fu_343_p2 or and_ln71_fu_399_p2);
    empty_63_fu_469_p3 <= 
        p_mid152_fu_455_p2 when (and_ln71_fu_399_p2(0) = '1') else 
        select_ln71_3_fu_461_p3;
    empty_fu_331_p2 <= std_logic_vector(signed(tmp_cast_fu_327_p1) + signed(mul_ln74_fu_311_p2));
    grp_fu_1057_p_ce <= ap_const_logic_1;
    grp_fu_1057_p_din0 <= grp_fu_285_p0;
    grp_fu_1057_p_din1 <= grp_fu_285_p1;
    grp_fu_1057_p_opcode <= ap_const_lv2_0;
    grp_fu_1064_p_ce <= ap_const_logic_1;
    grp_fu_1064_p_din0 <= input_r_q0;
    grp_fu_1064_p_din1 <= layer_2_weights_q0;
    grp_fu_1083_p_ce <= ap_const_logic_1;
    grp_fu_1083_p_din0 <= add_reg_1105;
    grp_fu_1083_p_din1 <= ap_const_lv32_0;
    grp_fu_1083_p_opcode <= ap_const_lv5_2;
    grp_fu_285_ce <= ap_const_logic_1;

    grp_fu_285_p0_assign_proc : process(add4320_reg_275, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_phi_mux_add4320_phi_fu_278_p4, ap_block_pp0_stage1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_285_p0 <= add4320_reg_275;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_285_p0 <= ap_phi_mux_add4320_phi_fu_278_p4;
        else 
            grp_fu_285_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, mul_reg_1075, layer_2_bias_load_reg_1100, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_285_p1 <= layer_2_bias_load_reg_1100;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_285_p1 <= mul_reg_1075;
        else 
            grp_fu_285_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_285_p2 <= grp_fu_1057_p_dout0;
    grp_fu_290_ce <= ap_const_logic_1;
    grp_fu_290_p0 <= input_r_q0;
    grp_fu_290_p1 <= layer_2_weights_q0;
    grp_fu_290_p2 <= grp_fu_1064_p_dout0;
    grp_fu_296_ce <= ap_const_logic_1;
    grp_fu_296_opcode <= ap_const_lv5_2;
    grp_fu_296_p0 <= add_reg_1105;
    grp_fu_296_p1 <= ap_const_lv32_0;
    grp_fu_296_p2 <= grp_fu_1083_p_dout0;
    icmp_ln49_6_fu_921_p2 <= "1" when (trunc_ln49_fu_911_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_915_p2 <= "0" when (tmp_s_fu_901_p4 = ap_const_lv8_FF) else "1";
    icmp_ln71_fu_337_p2 <= "1" when (indvar_flatten82_reg_164 = ap_const_lv14_3C80) else "0";
    icmp_ln74_fu_343_p2 <= "1" when (indvar_flatten56_reg_186 = ap_const_lv11_2C0) else "0";
    icmp_ln77_fu_393_p2 <= "1" when (iii_reg_209 = ap_const_lv6_20) else "0";
    icmp_ln83_fu_609_p2 <= "1" when (ap_phi_mux_indvar_flatten42_phi_fu_224_p4 = ap_const_lv4_9) else "0";
    icmp_ln86_fu_615_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_246_p4 = ap_const_lv4_9) else "0";
    icmp_ln89_fu_680_p2 <= "1" when (ap_phi_mux_vi_phi_fu_268_p4 = ap_const_lv3_2) else "0";
    ii_cast8_mid2_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_cast8_mid2_reg_975),10));
    ii_cast8_mid2_fu_433_p3 <= 
        add_ln74_fu_413_p2 when (and_ln71_fu_399_p2(0) = '1') else 
        select_ln71_fu_349_p3;
    ii_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_198),6));
    ii_cast_mid1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_413_p2),6));
    iii_mid2_fu_425_p3 <= 
        ap_const_lv6_0 when (empty_62_fu_419_p2(0) = '1') else 
        iii_reg_209;
    indvars_iv_next34_cast_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_fu_581_p2),4));
    indvars_iv_next34_cast_mid1_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_mid1_fu_747_p2),4));
    indvars_iv_next34_dup_fu_692_p2 <= std_logic_vector(unsigned(select_ln83_fu_621_p3) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_fu_581_p2 <= std_logic_vector(signed(ap_phi_mux_v_phi_fu_257_p4) + signed(ap_const_lv3_1));
    indvars_iv_next34_mid1_fu_747_p2 <= std_logic_vector(unsigned(select_ln83_fu_621_p3) + unsigned(ap_const_lv3_2));
    input_r_address0 <= zext_ln98_fu_848_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_2_bias_address0 <= zext_ln77_reg_991(5 - 1 downto 0);

    layer_2_bias_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_2_bias_ce0 <= ap_const_logic_1;
        else 
            layer_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_2_weights_address0 <= zext_ln98_1_fu_858_p1(9 - 1 downto 0);

    layer_2_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            layer_2_weights_ce0 <= ap_const_logic_1;
        else 
            layer_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln74_1_fu_367_p0 <= mul_ln74_1_fu_367_p00(5 - 1 downto 0);
    mul_ln74_1_fu_367_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_1_fu_357_p2),9));
    mul_ln74_1_fu_367_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    mul_ln74_fu_311_p0 <= mul_ln74_fu_311_p00(5 - 1 downto 0);
    mul_ln74_fu_311_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_175),9));
    mul_ln74_fu_311_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    or_ln49_fu_927_p2 <= (icmp_ln49_fu_915_p2 or icmp_ln49_6_fu_921_p2);
    or_ln86_fu_698_p2 <= (icmp_ln86_fu_615_p2 or and_ln83_fu_686_p2);

    output_r_address0_assign_proc : process(ap_CS_fsm_state2, output_addr_reg_981, ap_CS_fsm_state22, sum19_cast_fu_495_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_address0 <= output_addr_reg_981;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= sum19_cast_fu_495_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        add_reg_1105 when (and_ln49_fu_933_p2(0) = '1') else 
        ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid116_fu_509_p2 <= std_logic_vector(unsigned(select_ln71_2_reg_960) + unsigned(ap_const_lv5_1F));
    p_mid128_fu_534_p2 <= std_logic_vector(unsigned(p_shl1_mid_fu_514_p3) - unsigned(p_shl2_cast_mid126_fu_530_p1));
    p_mid13_fu_741_p2 <= std_logic_vector(unsigned(p_shl1_mid1_fu_721_p3) - unsigned(p_shl2_cast_mid1_fu_737_p1));
    p_mid152_fu_455_p2 <= std_logic_vector(signed(tmp_cast_mid1_fu_451_p1) + signed(select_ln71_1_fu_373_p3));
    p_mid174_fu_381_p2 <= std_logic_vector(unsigned(mul_ln74_1_fu_367_p2) + unsigned(ap_const_lv9_1EA));
    p_mid1_fu_716_p2 <= std_logic_vector(signed(sext_ln86_1_fu_712_p1) + signed(select_ln71_2_reg_960));
    p_mid_fu_477_p3 <= (empty_63_fu_469_p3 & ap_const_lv5_0);
    p_shl1_fu_555_p3 <= (empty_55_fu_550_p2 & ap_const_lv5_0);
    p_shl1_mid1_fu_721_p3 <= (p_mid1_fu_716_p2 & ap_const_lv5_0);
    p_shl1_mid_fu_514_p3 <= (p_mid116_fu_509_p2 & ap_const_lv5_0);
    p_shl2_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_563_p3),10));
    p_shl2_cast_mid126_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid_fu_522_p3),10));
    p_shl2_cast_mid1_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_729_p3),10));
    p_shl2_fu_563_p3 <= (empty_55_fu_550_p2 & ap_const_lv3_0);
    p_shl2_mid1_fu_729_p3 <= (p_mid1_fu_716_p2 & ap_const_lv3_0);
    p_shl2_mid_fu_522_p3 <= (p_mid116_fu_509_p2 & ap_const_lv3_0);
    p_shl_fu_595_p3 <= (empty_57_fu_591_p1 & ap_const_lv2_0);
    p_shl_mid1_fu_761_p3 <= (empty_59_fu_757_p1 & ap_const_lv2_0);
    select_ln71_1_fu_373_p3 <= 
        mul_ln74_1_fu_367_p2 when (icmp_ln74_fu_343_p2(0) = '1') else 
        mul_ln74_fu_311_p2;
    select_ln71_2_fu_405_p3 <= 
        add_ln71_1_fu_357_p2 when (icmp_ln74_fu_343_p2(0) = '1') else 
        i_reg_175;
    select_ln71_3_fu_461_p3 <= 
        p_mid174_fu_381_p2 when (icmp_ln74_fu_343_p2(0) = '1') else 
        empty_fu_331_p2;
    select_ln71_fu_349_p3 <= 
        ap_const_lv5_1 when (icmp_ln74_fu_343_p2(0) = '1') else 
        ii_reg_198;
    select_ln74_fu_891_p3 <= 
        ap_const_lv11_1 when (icmp_ln74_reg_955(0) = '1') else 
        add_ln74_1_fu_885_p2;
    select_ln83_1_fu_635_p3 <= 
        xor_ln95_fu_629_p2 when (icmp_ln86_fu_615_p2(0) = '1') else 
        ap_phi_mux_iv_phi_fu_235_p4;
    select_ln83_2_fu_647_p3 <= 
        ap_phi_mux_iv_phi_fu_235_p4 when (icmp_ln86_fu_615_p2(0) = '1') else 
        xor_ln95_fu_629_p2;
    select_ln83_3_fu_659_p3 <= 
        ap_const_lv4_0 when (icmp_ln86_fu_615_p2(0) = '1') else 
        sub_ln94_fu_603_p2;
    select_ln83_4_fu_667_p3 <= 
        p_mid128_reg_1006 when (icmp_ln86_fu_615_p2(0) = '1') else 
        empty_56_fu_575_p2;
    select_ln83_fu_621_p3 <= 
        ap_const_lv3_7 when (icmp_ln86_fu_615_p2(0) = '1') else 
        ap_phi_mux_v_phi_fu_257_p4;
    select_ln86_1_fu_775_p3 <= 
        sub_ln94_1_fu_769_p2 when (and_ln83_fu_686_p2(0) = '1') else 
        select_ln83_3_fu_659_p3;
    select_ln86_2_fu_783_p3 <= 
        p_mid13_fu_741_p2 when (and_ln83_fu_686_p2(0) = '1') else 
        select_ln83_4_fu_667_p3;
    select_ln86_3_fu_796_p3 <= 
        indvars_iv_next34_dup_fu_692_p2 when (and_ln83_fu_686_p2(0) = '1') else 
        select_ln83_fu_621_p3;
    select_ln86_4_fu_874_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_reg_1020(0) = '1') else 
        add_ln86_1_reg_1050;
    select_ln86_fu_704_p3 <= 
        ap_const_lv3_7 when (or_ln86_fu_698_p2(0) = '1') else 
        ap_phi_mux_vi_phi_fu_268_p4;
        sext_ln86_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_next34_dup_fu_692_p2),5));

        sext_ln86_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_v_phi_fu_257_p4),5));

        sext_ln95_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_60_fu_804_p1),4));

        sext_ln98_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln98_2_fu_832_p2),10));

    shl_ln_fu_824_p3 <= (add_ln95_2_fu_818_p2 & ap_const_lv5_0);
    sub_ln94_1_fu_769_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_761_p3) - unsigned(indvars_iv_next34_cast_mid1_fu_753_p1));
    sub_ln94_fu_603_p2 <= std_logic_vector(unsigned(p_shl_fu_595_p3) - unsigned(indvars_iv_next34_cast_fu_587_p1));
    sum19_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum19_fu_489_p2),64));
    sum19_fu_489_p2 <= std_logic_vector(unsigned(zext_ln77_2_fu_485_p1) + unsigned(p_mid_fu_477_p3));
        tmp_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_321_p2),9));

        tmp_cast_mid1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_mid1_fu_445_p2),9));

    tmp_fu_321_p2 <= std_logic_vector(unsigned(ii_cast_fu_317_p1) + unsigned(ap_const_lv6_29));
    tmp_mid1_fu_445_p2 <= std_logic_vector(unsigned(ii_cast_mid1_fu_441_p1) + unsigned(ap_const_lv6_29));
    tmp_s_fu_901_p4 <= bitcast_ln49_fu_898_p1(30 downto 23);
    trunc_ln49_fu_911_p1 <= bitcast_ln49_fu_898_p1(23 - 1 downto 0);
    xor_ln71_fu_387_p2 <= (icmp_ln74_fu_343_p2 xor ap_const_lv1_1);
    xor_ln83_fu_674_p2 <= (icmp_ln86_fu_615_p2 xor ap_const_lv1_1);
    xor_ln95_fu_629_p2 <= (ap_phi_mux_iv_phi_fu_235_p4 xor ap_const_lv1_1);
    zext_ln77_1_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_968),9));
    zext_ln77_2_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_fu_425_p3),14));
    zext_ln77_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_968),64));
    zext_ln83_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_2_fu_647_p3),4));
    zext_ln83_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_1_fu_635_p3),2));
    zext_ln98_1_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_1_fu_853_p2),64));
    zext_ln98_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_842_p2),64));
end behav;

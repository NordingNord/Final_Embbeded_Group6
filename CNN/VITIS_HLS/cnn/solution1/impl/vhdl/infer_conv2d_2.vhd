-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_conv2d_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_852_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_ce : OUT STD_LOGIC;
    grp_fu_856_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_856_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_856_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_856_p_ce : OUT STD_LOGIC;
    grp_fu_1954_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1954_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1954_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1954_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1954_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_conv2d_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv12_3A : STD_LOGIC_VECTOR (11 downto 0) := "000000111010";
    constant ap_const_lv7_45 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_const_lv17_1A480 : STD_LOGIC_VECTOR (16 downto 0) := "11010010010000000";
    constant ap_const_lv12_740 : STD_LOGIC_VECTOR (11 downto 0) := "011101000000";
    constant ap_const_lv12_FC6 : STD_LOGIC_VECTOR (11 downto 0) := "111111000110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_2_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_2_weights_ce0 : STD_LOGIC;
    signal layer_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_2_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_2_bias_ce0 : STD_LOGIC;
    signal layer_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten42_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_250 : STD_LOGIC_VECTOR (2 downto 0);
    signal vi_reg_261 : STD_LOGIC_VECTOR (2 downto 0);
    signal add4115_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln66_fu_299_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln66_reg_944 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln69_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_2_fu_403_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_2_reg_957 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_mid2_fu_423_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_mid2_reg_965 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast6_mid2_fu_431_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast6_mid2_reg_972 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_65_fu_467_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_65_reg_978 : STD_LOGIC_VECTOR (11 downto 0);
    signal ii_cast6_mid2_cast_fu_480_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ii_cast6_mid2_cast_reg_988 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add52_mid2_fu_483_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add52_mid2_reg_993 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln72_1_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln72_1_reg_998 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln72_2_fu_493_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln72_2_reg_1003 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_mid132_fu_521_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid132_reg_1013 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln77_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln77_reg_1018_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_1018_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_1_fu_616_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_1_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln80_fu_685_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_reg_1032 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_3_fu_777_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_3_reg_1037 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_1_fu_844_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln80_1_reg_1052 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln77_fu_850_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln77_reg_1067 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln92_fu_856_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln92_reg_1072 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_4_fu_861_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_4_reg_1077 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add_ln102_fu_867_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln102_reg_1092 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln72_fu_871_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln72_reg_1097 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln69_fu_882_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln69_reg_1102 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten79_reg_160 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_reg_171 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten50_reg_182 : STD_LOGIC_VECTOR (11 downto 0);
    signal ii_reg_194 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_reg_205 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten42_phi_fu_220_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_iv_phi_fu_232_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_243_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v_phi_fu_254_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_vi_phi_fu_265_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_add4115_phi_fu_275_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln72_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_309_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_309_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_cast_fu_315_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_325_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_309_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln66_1_fu_355_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid161_fu_365_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid161_fu_365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid161_fu_365_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln72_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln66_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_347_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln66_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_64_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_fu_411_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast_mid1_fu_439_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid1_fu_443_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_mid1_fu_449_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln66_1_fu_371_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul4811_mid171_fu_379_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul4811_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul4811_mid1_fu_453_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln66_3_fu_459_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid116_fu_496_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_mid_fu_509_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_mid_fu_501_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_mid130_fu_517_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln80_fu_527_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_next37_fu_536_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_57_fu_531_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_fu_554_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_546_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_59_fu_572_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_576_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next37_cast_fu_542_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln92_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_2_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln91_fu_584_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_58_fu_566_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln83_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_fu_602_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln77_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next37_dup_fu_673_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln80_1_fu_693_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_next37_mid1_fu_702_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_697_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_mid1_fu_720_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_mid1_fu_712_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_mid1_fu_728_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_61_fu_738_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_742_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next37_cast_mid1_fu_708_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln91_1_fu_750_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln77_3_fu_640_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid13_fu_732_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln77_4_fu_648_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln80_2_fu_764_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_62_fu_785_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln77_fu_624_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln87_fu_789_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln87_fu_795_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln80_fu_772_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln87_1_fu_799_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln92_fu_810_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_1_fu_756_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln77_1_fu_636_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln92_1_fu_814_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln92_2_fu_820_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_826_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln91_fu_834_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln69_1_fu_876_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln49_fu_889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_893_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_903_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_4_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_287_ce : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_293_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal empty_fu_309_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid161_fu_365_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mul_6ns_7ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component infer_conv2d_2_layer_2_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_conv2d_2_layer_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_2_weights_U : component infer_conv2d_2_layer_2_weights
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_2_weights_address0,
        ce0 => layer_2_weights_ce0,
        q0 => layer_2_weights_q0);

    layer_2_bias_U : component infer_conv2d_2_layer_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_2_bias_address0,
        ce0 => layer_2_bias_ce0,
        q0 => layer_2_bias_q0);

    mul_6ns_7ns_12_1_1_U7 : component infer_mul_6ns_7ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        din0 => empty_fu_309_p0,
        din1 => empty_fu_309_p1,
        dout => empty_fu_309_p2);

    mul_6ns_7ns_12_1_1_U8 : component infer_mul_6ns_7ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        din0 => p_mid161_fu_365_p0,
        din1 => p_mid161_fu_365_p1,
        dout => p_mid161_fu_365_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4115_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln77_reg_1018_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                add4115_reg_272 <= grp_fu_852_p_dout0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                add4115_reg_272 <= layer_2_bias_q0;
            end if; 
        end if;
    end process;

    i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_reg_171 <= select_ln66_2_reg_957;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_171 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    ii_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                ii_reg_194 <= ii_cast6_mid2_reg_972;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ii_reg_194 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    iii_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                iii_reg_205 <= add_ln72_reg_1097;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                iii_reg_205 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten42_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
                indvar_flatten42_reg_216 <= add_ln77_reg_1067;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten42_reg_216 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten50_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten50_reg_182 <= select_ln69_reg_1102;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten50_reg_182 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten79_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten79_reg_160 <= add_ln66_reg_944;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten79_reg_160 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
                indvar_flatten_reg_239 <= select_ln80_4_reg_1077;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_239 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iv_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
                iv_reg_228 <= select_ln77_1_reg_1027;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                iv_reg_228 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    v_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
                v_reg_250 <= select_ln80_3_reg_1037;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_reg_250 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    vi_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
                vi_reg_261 <= add_ln92_reg_1072;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vi_reg_261 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    add52_mid2_reg_993(16 downto 5) <= add52_mid2_fu_483_p3(16 downto 5);
                    ii_cast6_mid2_cast_reg_988(5 downto 0) <= ii_cast6_mid2_cast_fu_480_p1(5 downto 0);
                    p_mid132_reg_1013(11 downto 2) <= p_mid132_fu_521_p2(11 downto 2);
                    zext_ln72_1_reg_998(5 downto 0) <= zext_ln72_1_fu_490_p1(5 downto 0);
                    zext_ln72_2_reg_1003(5 downto 0) <= zext_ln72_2_fu_493_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln102_reg_1092 <= add_ln102_fu_867_p2;
                add_ln72_reg_1097 <= add_ln72_fu_871_p2;
                select_ln69_reg_1102 <= select_ln69_fu_882_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln66_reg_944 <= add_ln66_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln77_reg_1067 <= add_ln77_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_fu_590_p2 = ap_const_lv1_0))) then
                add_ln80_1_reg_1052 <= add_ln80_1_fu_844_p2;
                icmp_ln80_reg_1022 <= icmp_ln80_fu_596_p2;
                select_ln80_reg_1032 <= select_ln80_fu_685_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then
                add_ln92_reg_1072 <= add_ln92_fu_856_p2;
                select_ln80_4_reg_1077 <= select_ln80_4_fu_861_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_65_reg_978 <= empty_65_fu_467_p3;
                icmp_ln69_reg_952 <= icmp_ln69_fu_341_p2;
                ii_cast6_mid2_reg_972 <= ii_cast6_mid2_fu_431_p3;
                iii_mid2_reg_965 <= iii_mid2_fu_423_p3;
                select_ln66_2_reg_957 <= select_ln66_2_fu_403_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln77_reg_1018 <= icmp_ln77_fu_590_p2;
                icmp_ln77_reg_1018_pp0_iter1_reg <= icmp_ln77_reg_1018;
                icmp_ln77_reg_1018_pp0_iter2_reg <= icmp_ln77_reg_1018_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then
                mul_reg_1082 <= grp_fu_856_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_fu_590_p2 = ap_const_lv1_0))) then
                select_ln77_1_reg_1027 <= select_ln77_1_fu_616_p3;
                select_ln80_3_reg_1037 <= select_ln80_3_fu_777_p3;
            end if;
        end if;
    end process;
    ii_cast6_mid2_cast_reg_988(11 downto 6) <= "000000";
    add52_mid2_reg_993(4 downto 0) <= "00000";
    zext_ln72_1_reg_998(8 downto 6) <= "000";
    zext_ln72_2_reg_1003(16 downto 6) <= "00000000000";
    p_mid132_reg_1013(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_335_p2, icmp_ln77_reg_1018, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln66_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (icmp_ln77_reg_1018 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (icmp_ln77_reg_1018 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add52_mid2_fu_483_p3 <= (empty_65_reg_978 & ap_const_lv5_0);
    add_ln102_fu_867_p2 <= std_logic_vector(unsigned(zext_ln72_2_reg_1003) + unsigned(add52_mid2_reg_993));
    add_ln66_1_fu_355_p2 <= std_logic_vector(unsigned(i_reg_171) + unsigned(ap_const_lv6_1));
    add_ln66_fu_299_p2 <= std_logic_vector(unsigned(indvar_flatten79_reg_160) + unsigned(ap_const_lv17_1));
    add_ln69_1_fu_876_p2 <= std_logic_vector(unsigned(indvar_flatten50_reg_182) + unsigned(ap_const_lv12_1));
    add_ln69_fu_411_p2 <= std_logic_vector(unsigned(select_ln66_fu_347_p3) + unsigned(ap_const_lv6_1));
    add_ln72_fu_871_p2 <= std_logic_vector(unsigned(iii_mid2_reg_965) + unsigned(ap_const_lv6_1));
    add_ln77_fu_850_p2 <= std_logic_vector(unsigned(indvar_flatten42_reg_216) + unsigned(ap_const_lv4_1));
    add_ln80_1_fu_844_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_243_p4) + unsigned(ap_const_lv4_1));
    add_ln80_fu_772_p2 <= std_logic_vector(unsigned(select_ln80_2_fu_764_p3) + unsigned(ii_cast6_mid2_cast_reg_988));
    add_ln87_1_fu_799_p2 <= std_logic_vector(signed(sext_ln87_fu_795_p1) + signed(add_ln80_fu_772_p2));
    add_ln87_fu_789_p2 <= std_logic_vector(signed(empty_62_fu_785_p1) + signed(zext_ln77_fu_624_p1));
    add_ln91_fu_834_p2 <= std_logic_vector(unsigned(shl_ln_fu_826_p3) + unsigned(zext_ln72_1_reg_998));
    add_ln92_1_fu_814_p2 <= std_logic_vector(signed(sext_ln92_fu_810_p1) + signed(select_ln80_1_fu_756_p3));
    add_ln92_2_fu_820_p2 <= std_logic_vector(unsigned(zext_ln77_1_fu_636_p1) + unsigned(add_ln92_1_fu_814_p2));
    add_ln92_fu_856_p2 <= std_logic_vector(unsigned(select_ln80_reg_1032) + unsigned(ap_const_lv3_1));
    and_ln49_fu_925_p2 <= (or_ln49_fu_919_p2 and grp_fu_1954_p_dout0);
    and_ln66_fu_397_p2 <= (xor_ln66_fu_385_p2 and icmp_ln72_fu_391_p2);
    and_ln77_fu_667_p2 <= (xor_ln77_fu_655_p2 and icmp_ln83_fu_661_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln77_reg_1018)
    begin
        if ((icmp_ln77_reg_1018 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_335_p2)
    begin
        if ((((icmp_ln66_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add4115_phi_fu_275_p4_assign_proc : process(add4115_reg_272, icmp_ln77_reg_1018_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, grp_fu_852_p_dout0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln77_reg_1018_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_add4115_phi_fu_275_p4 <= grp_fu_852_p_dout0;
        else 
            ap_phi_mux_add4115_phi_fu_275_p4 <= add4115_reg_272;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten42_phi_fu_220_p4_assign_proc : process(indvar_flatten42_reg_216, icmp_ln77_reg_1018, ap_CS_fsm_pp0_stage0, add_ln77_reg_1067, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten42_phi_fu_220_p4 <= add_ln77_reg_1067;
        else 
            ap_phi_mux_indvar_flatten42_phi_fu_220_p4 <= indvar_flatten42_reg_216;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_243_p4_assign_proc : process(indvar_flatten_reg_239, icmp_ln77_reg_1018, ap_CS_fsm_pp0_stage0, select_ln80_4_reg_1077, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_243_p4 <= select_ln80_4_reg_1077;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_243_p4 <= indvar_flatten_reg_239;
        end if; 
    end process;


    ap_phi_mux_iv_phi_fu_232_p4_assign_proc : process(iv_reg_228, icmp_ln77_reg_1018, ap_CS_fsm_pp0_stage0, select_ln77_1_reg_1027, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
            ap_phi_mux_iv_phi_fu_232_p4 <= select_ln77_1_reg_1027;
        else 
            ap_phi_mux_iv_phi_fu_232_p4 <= iv_reg_228;
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_254_p4_assign_proc : process(v_reg_250, icmp_ln77_reg_1018, ap_CS_fsm_pp0_stage0, select_ln80_3_reg_1037, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
            ap_phi_mux_v_phi_fu_254_p4 <= select_ln80_3_reg_1037;
        else 
            ap_phi_mux_v_phi_fu_254_p4 <= v_reg_250;
        end if; 
    end process;


    ap_phi_mux_vi_phi_fu_265_p4_assign_proc : process(vi_reg_261, icmp_ln77_reg_1018, ap_CS_fsm_pp0_stage0, add_ln92_reg_1072, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_1018 = ap_const_lv1_0))) then 
            ap_phi_mux_vi_phi_fu_265_p4 <= add_ln92_reg_1072;
        else 
            ap_phi_mux_vi_phi_fu_265_p4 <= vi_reg_261;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_fu_335_p2)
    begin
        if (((icmp_ln66_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_fu_889_p1 <= add4115_reg_272;
    empty_57_fu_531_p2 <= std_logic_vector(signed(sext_ln80_fu_527_p1) + signed(select_ln66_2_reg_957));
    empty_58_fu_566_p2 <= std_logic_vector(unsigned(p_shl3_fu_546_p3) - unsigned(p_shl4_cast_fu_562_p1));
    empty_59_fu_572_p1 <= indvars_iv_next37_fu_536_p2(2 - 1 downto 0);
    empty_61_fu_738_p1 <= indvars_iv_next37_mid1_fu_702_p2(2 - 1 downto 0);
    empty_62_fu_785_p1 <= select_ln80_fu_685_p3(2 - 1 downto 0);
    empty_64_fu_417_p2 <= (icmp_ln69_fu_341_p2 or and_ln66_fu_397_p2);
    empty_65_fu_467_p3 <= 
        mul4811_mid1_fu_453_p2 when (and_ln66_fu_397_p2(0) = '1') else 
        select_ln66_3_fu_459_p3;
    empty_fu_309_p0 <= empty_fu_309_p00(6 - 1 downto 0);
    empty_fu_309_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_171),12));
    empty_fu_309_p1 <= ap_const_lv12_3A(7 - 1 downto 0);
    grp_fu_1954_p_ce <= ap_const_logic_1;
    grp_fu_1954_p_din0 <= add4115_reg_272;
    grp_fu_1954_p_din1 <= ap_const_lv32_0;
    grp_fu_1954_p_opcode <= ap_const_lv5_4;
    grp_fu_282_ce <= ap_const_logic_1;
    grp_fu_282_p0 <= ap_phi_mux_add4115_phi_fu_275_p4;
    grp_fu_282_p1 <= mul_reg_1082;
    grp_fu_282_p2 <= grp_fu_852_p_dout0;
    grp_fu_287_ce <= ap_const_logic_1;
    grp_fu_287_p0 <= input_r_q0;
    grp_fu_287_p1 <= layer_2_weights_q0;
    grp_fu_287_p2 <= grp_fu_856_p_dout0;
    grp_fu_293_ce <= ap_const_logic_1;
    grp_fu_293_opcode <= ap_const_lv5_4;
    grp_fu_293_p0 <= add4115_reg_272;
    grp_fu_293_p1 <= ap_const_lv32_0;
    grp_fu_293_p2 <= grp_fu_1954_p_dout0;
    grp_fu_852_p_ce <= ap_const_logic_1;
    grp_fu_852_p_din0 <= ap_phi_mux_add4115_phi_fu_275_p4;
    grp_fu_852_p_din1 <= mul_reg_1082;
    grp_fu_852_p_opcode <= ap_const_lv2_0;
    grp_fu_856_p_ce <= ap_const_logic_1;
    grp_fu_856_p_din0 <= input_r_q0;
    grp_fu_856_p_din1 <= layer_2_weights_q0;
    icmp_ln49_4_fu_913_p2 <= "1" when (trunc_ln49_fu_903_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_907_p2 <= "0" when (tmp_s_fu_893_p4 = ap_const_lv8_FF) else "1";
    icmp_ln66_fu_335_p2 <= "1" when (indvar_flatten79_reg_160 = ap_const_lv17_1A480) else "0";
    icmp_ln69_fu_341_p2 <= "1" when (indvar_flatten50_reg_182 = ap_const_lv12_740) else "0";
    icmp_ln72_fu_391_p2 <= "1" when (iii_reg_205 = ap_const_lv6_20) else "0";
    icmp_ln77_fu_590_p2 <= "1" when (ap_phi_mux_indvar_flatten42_phi_fu_220_p4 = ap_const_lv4_9) else "0";
    icmp_ln80_fu_596_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_243_p4 = ap_const_lv4_9) else "0";
    icmp_ln83_fu_661_p2 <= "1" when (ap_phi_mux_vi_phi_fu_265_p4 = ap_const_lv3_2) else "0";
    ii_cast6_mid2_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_cast6_mid2_reg_972),12));
    ii_cast6_mid2_fu_431_p3 <= 
        add_ln69_fu_411_p2 when (and_ln66_fu_397_p2(0) = '1') else 
        select_ln66_fu_347_p3;
    ii_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_194),7));
    ii_cast_mid1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_411_p2),7));
    iii_mid2_fu_423_p3 <= 
        ap_const_lv6_0 when (empty_64_fu_417_p2(0) = '1') else 
        iii_reg_205;
    indvars_iv_next37_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next37_fu_536_p2),4));
    indvars_iv_next37_cast_mid1_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next37_mid1_fu_702_p2),4));
    indvars_iv_next37_dup_fu_673_p2 <= std_logic_vector(unsigned(select_ln77_fu_602_p3) + unsigned(ap_const_lv3_1));
    indvars_iv_next37_fu_536_p2 <= std_logic_vector(signed(ap_phi_mux_v_phi_fu_254_p4) + signed(ap_const_lv3_1));
    indvars_iv_next37_mid1_fu_702_p2 <= std_logic_vector(unsigned(select_ln77_fu_602_p3) + unsigned(ap_const_lv3_2));
    input_r_address0 <= zext_ln87_fu_805_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_2_bias_address0 <= zext_ln72_fu_475_p1(5 - 1 downto 0);

    layer_2_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_2_bias_ce0 <= ap_const_logic_1;
        else 
            layer_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_2_weights_address0 <= zext_ln91_fu_839_p1(9 - 1 downto 0);

    layer_2_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer_2_weights_ce0 <= ap_const_logic_1;
        else 
            layer_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul4811_fu_329_p2 <= std_logic_vector(signed(tmp_cast_fu_325_p1) + signed(empty_fu_309_p2));
    mul4811_mid171_fu_379_p2 <= std_logic_vector(unsigned(p_mid161_fu_365_p2) + unsigned(ap_const_lv12_FC6));
    mul4811_mid1_fu_453_p2 <= std_logic_vector(signed(tmp_cast_mid1_fu_449_p1) + signed(select_ln66_1_fu_371_p3));
    or_ln49_fu_919_p2 <= (icmp_ln49_fu_907_p2 or icmp_ln49_4_fu_913_p2);
    or_ln80_fu_679_p2 <= (icmp_ln80_fu_596_p2 or and_ln77_fu_667_p2);
    output_r_address0 <= zext_ln102_fu_940_p1(17 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        ap_const_lv32_0 when (and_ln49_fu_925_p2(0) = '1') else 
        add4115_reg_272;

    output_r_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid116_fu_496_p2 <= std_logic_vector(unsigned(select_ln66_2_reg_957) + unsigned(ap_const_lv6_3F));
    p_mid132_fu_521_p2 <= std_logic_vector(unsigned(p_shl3_mid_fu_501_p3) - unsigned(p_shl4_cast_mid130_fu_517_p1));
    p_mid13_fu_732_p2 <= std_logic_vector(unsigned(p_shl3_mid1_fu_712_p3) - unsigned(p_shl4_cast_mid1_fu_728_p1));
    p_mid161_fu_365_p0 <= p_mid161_fu_365_p00(6 - 1 downto 0);
    p_mid161_fu_365_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_1_fu_355_p2),12));
    p_mid161_fu_365_p1 <= ap_const_lv12_3A(7 - 1 downto 0);
    p_mid1_fu_697_p2 <= std_logic_vector(signed(sext_ln80_1_fu_693_p1) + signed(select_ln66_2_reg_957));
    p_shl3_fu_546_p3 <= (empty_57_fu_531_p2 & ap_const_lv6_0);
    p_shl3_mid1_fu_712_p3 <= (p_mid1_fu_697_p2 & ap_const_lv6_0);
    p_shl3_mid_fu_501_p3 <= (p_mid116_fu_496_p2 & ap_const_lv6_0);
    p_shl4_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_554_p3),12));
    p_shl4_cast_mid130_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_mid_fu_509_p3),12));
    p_shl4_cast_mid1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_mid1_fu_720_p3),12));
    p_shl4_fu_554_p3 <= (empty_57_fu_531_p2 & ap_const_lv2_0);
    p_shl4_mid1_fu_720_p3 <= (p_mid1_fu_697_p2 & ap_const_lv2_0);
    p_shl4_mid_fu_509_p3 <= (p_mid116_fu_496_p2 & ap_const_lv2_0);
    p_shl_fu_576_p3 <= (empty_59_fu_572_p1 & ap_const_lv2_0);
    p_shl_mid1_fu_742_p3 <= (empty_61_fu_738_p1 & ap_const_lv2_0);
    select_ln66_1_fu_371_p3 <= 
        p_mid161_fu_365_p2 when (icmp_ln69_fu_341_p2(0) = '1') else 
        empty_fu_309_p2;
    select_ln66_2_fu_403_p3 <= 
        add_ln66_1_fu_355_p2 when (icmp_ln69_fu_341_p2(0) = '1') else 
        i_reg_171;
    select_ln66_3_fu_459_p3 <= 
        mul4811_mid171_fu_379_p2 when (icmp_ln69_fu_341_p2(0) = '1') else 
        mul4811_fu_329_p2;
    select_ln66_fu_347_p3 <= 
        ap_const_lv6_1 when (icmp_ln69_fu_341_p2(0) = '1') else 
        ii_reg_194;
    select_ln69_fu_882_p3 <= 
        ap_const_lv12_1 when (icmp_ln69_reg_952(0) = '1') else 
        add_ln69_1_fu_876_p2;
    select_ln77_1_fu_616_p3 <= 
        xor_ln92_fu_610_p2 when (icmp_ln80_fu_596_p2(0) = '1') else 
        ap_phi_mux_iv_phi_fu_232_p4;
    select_ln77_2_fu_628_p3 <= 
        ap_phi_mux_iv_phi_fu_232_p4 when (icmp_ln80_fu_596_p2(0) = '1') else 
        xor_ln92_fu_610_p2;
    select_ln77_3_fu_640_p3 <= 
        ap_const_lv4_0 when (icmp_ln80_fu_596_p2(0) = '1') else 
        sub_ln91_fu_584_p2;
    select_ln77_4_fu_648_p3 <= 
        p_mid132_reg_1013 when (icmp_ln80_fu_596_p2(0) = '1') else 
        empty_58_fu_566_p2;
    select_ln77_fu_602_p3 <= 
        ap_const_lv3_7 when (icmp_ln80_fu_596_p2(0) = '1') else 
        ap_phi_mux_v_phi_fu_254_p4;
    select_ln80_1_fu_756_p3 <= 
        sub_ln91_1_fu_750_p2 when (and_ln77_fu_667_p2(0) = '1') else 
        select_ln77_3_fu_640_p3;
    select_ln80_2_fu_764_p3 <= 
        p_mid13_fu_732_p2 when (and_ln77_fu_667_p2(0) = '1') else 
        select_ln77_4_fu_648_p3;
    select_ln80_3_fu_777_p3 <= 
        indvars_iv_next37_dup_fu_673_p2 when (and_ln77_fu_667_p2(0) = '1') else 
        select_ln77_fu_602_p3;
    select_ln80_4_fu_861_p3 <= 
        ap_const_lv4_1 when (icmp_ln80_reg_1022(0) = '1') else 
        add_ln80_1_reg_1052;
    select_ln80_fu_685_p3 <= 
        ap_const_lv3_7 when (or_ln80_fu_679_p2(0) = '1') else 
        ap_phi_mux_vi_phi_fu_265_p4;
        sext_ln80_1_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_next37_dup_fu_673_p2),6));

        sext_ln80_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_v_phi_fu_254_p4),6));

        sext_ln87_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln87_fu_789_p2),12));

        sext_ln92_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_62_fu_785_p1),4));

    shl_ln_fu_826_p3 <= (add_ln92_2_fu_820_p2 & ap_const_lv5_0);
    sub_ln91_1_fu_750_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_742_p3) - unsigned(indvars_iv_next37_cast_mid1_fu_708_p1));
    sub_ln91_fu_584_p2 <= std_logic_vector(unsigned(p_shl_fu_576_p3) - unsigned(indvars_iv_next37_cast_fu_542_p1));
        tmp_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_319_p2),12));

        tmp_cast_mid1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_mid1_fu_443_p2),12));

    tmp_fu_319_p2 <= std_logic_vector(unsigned(ii_cast_fu_315_p1) + unsigned(ap_const_lv7_45));
    tmp_mid1_fu_443_p2 <= std_logic_vector(unsigned(ii_cast_mid1_fu_439_p1) + unsigned(ap_const_lv7_45));
    tmp_s_fu_893_p4 <= bitcast_ln49_fu_889_p1(30 downto 23);
    trunc_ln49_fu_903_p1 <= bitcast_ln49_fu_889_p1(23 - 1 downto 0);
    xor_ln66_fu_385_p2 <= (icmp_ln69_fu_341_p2 xor ap_const_lv1_1);
    xor_ln77_fu_655_p2 <= (icmp_ln80_fu_596_p2 xor ap_const_lv1_1);
    xor_ln92_fu_610_p2 <= (ap_phi_mux_iv_phi_fu_232_p4 xor ap_const_lv1_1);
    zext_ln102_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_reg_1092),64));
    zext_ln72_1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_965),9));
    zext_ln72_2_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_965),17));
    zext_ln72_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_fu_423_p3),64));
    zext_ln77_1_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_2_fu_628_p3),4));
    zext_ln77_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_1_fu_616_p3),2));
    zext_ln87_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln87_1_fu_799_p2),64));
    zext_ln91_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_834_p2),64));
end behav;

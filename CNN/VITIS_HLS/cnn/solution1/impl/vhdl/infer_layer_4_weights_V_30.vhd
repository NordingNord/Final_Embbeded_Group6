-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_30_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_30_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00011101100010", 1 => "10111010110010", 2 => "01000101011100", 
    3 => "01001111001100", 4 => "01000111001000", 5 => "00111111000000", 
    6 => "00010010011100", 7 => "10110000011111", 8 => "11000111101001", 
    9 => "10101111100011", 10 => "11010000001111", 11 => "11001101111100", 
    12 => "11010001111001", 13 => "01100011001011", 14 => "01000011100010", 
    15 => "11000010110111", 16 => "10011110110010", 17 => "10111011001111", 
    18 => "10011001100001", 19 => "10011100100101", 20 => "11110000010100", 
    21 => "01010100011010", 22 => "00000110101000", 23 => "00011010001100", 
    24 => "11011000110011", 25 => "00010001011001", 26 => "10111100110001", 
    27 => "11000101000010", 28 => "10110100101001", 29 => "10011010001001", 
    30 => "00001101001001", 31 => "11010100111100", 32 => "11110110011110", 
    33 => "10101011101111", 34 => "00111010100111", 35 => "01010010110111", 
    36 => "00110101010010", 37 => "00001001111110", 38 => "11111001100000", 
    39 => "01001110110111", 40 => "11000000111111", 41 => "10101100100011", 
    42 => "10111000000010", 43 => "10110001011011", 44 => "11100010011011", 
    45 => "00110100011101", 46 => "01011100110010", 47 => "11111100111100", 
    48 => "00111110011111", 49 => "00011111011011", 50 => "11101000110110", 
    51 => "01011101100011", 52 => "11000010100000", 53 => "10011000111010", 
    54 => "01011001011110", 55 => "10110110010011", 56 => "00111110001111", 
    57 => "11011011100100", 58 => "11101001111010", 59 => "00001000000011", 
    60 => "11111010110111", 61 => "00100111010110", 62 => "01001001101111", 
    63 => "00000111101010", 64 => "01010110101011", 65 => "00001010001110", 
    66 => "11001111001101", 67 => "00001110011000", 68 => "10100101101001", 
    69 => "10100010001100", 70 => "01100000011001", 71 => "00110001001001", 
    72 => "01011010100111", 73 => "11000010100011", 74 => "11001001010100", 
    75 => "10111110101100", 76 => "01011011001000", 77 => "00100110010011", 
    78 => "10010111111100", 79 => "00110110001110", 80 => "00011010100000", 
    81 => "11101110000100", 82 => "01011110010011", 83 => "11010001010001", 
    84 => "10010111000100", 85 => "00111010100110", 86 => "01000110101010", 
    87 => "11000101101101", 88 => "00110111111000", 89 => "10111001010000", 
    90 => "00110001010001", 91 => "11100101001110", 92 => "11101010000010", 
    93 => "10011000010100", 94 => "00001100100101", 95 => "11011011110110", 
    96 => "10101101110010", 97 => "11010010111101", 98 => "11001000010010", 
    99 => "00011100110101", 100 => "11001100010100", 101 => "01011110111100", 
    102 => "10101101011110", 103 => "01001110011110", 104 => "00001111000000", 
    105 => "01001111000000", 106 => "00010111100111", 107 => "01000000100000", 
    108 => "10100000110110", 109 => "01001111111100", 110 => "11110011101100", 
    111 => "00101000000001", 112 => "00010101011100", 113 => "11100111111101", 
    114 => "10110010110110", 115 => "00111001100011", 116 => "11100000000011", 
    117 => "00111011111001", 118 => "10110100100001", 119 => "10100101110101", 
    120 => "10011011000010", 121 => "11111011010101", 122 => "10011001111100", 
    123 => "10101111011000", 124 => "00001100110111", 125 => "11001101010001", 
    126 => "00101011111011", 127 => "11110010010100", 128 => "11101011000011", 
    129 => "00101011111111", 130 => "00111000100101", 131 => "11110011100011", 
    132 => "00110100010011", 133 => "01000011000001", 134 => "10100001111101", 
    135 => "01100000110010", 136 => "01100001000000", 137 => "00100101111000", 
    138 => "01011111000010", 139 => "00001001010001", 140 => "11000000000111", 
    141 => "11011000010111", 142 => "01000001100000", 143 => "00101111110001", 
    144 => "11111010111011", 145 => "11001010001111", 146 => "10100000001111", 
    147 => "01010001000001", 148 => "00110100100101", 149 => "10100000010111", 
    150 => "01010001101001", 151 => "10100110100110", 152 => "11001011010010", 
    153 => "10110110110001", 154 => "00011001111001", 155 => "00111110011010", 
    156 => "01010010011001", 157 => "01001101001000", 158 => "00011011000001", 
    159 => "00110110101001", 160 => "11001010000100", 161 => "11010000011101", 
    162 => "10100001010000", 163 => "00011010011011", 164 => "11010010011101", 
    165 => "00111010010101", 166 => "11101001001111", 167 => "01000011010100", 
    168 => "11100111000000", 169 => "10100011111010", 170 => "00110100001001", 
    171 => "00011000011101", 172 => "11100011110011", 173 => "01001010011101", 
    174 => "00001111010010", 175 => "11000010000100", 176 => "11100000110110", 
    177 => "00001010010011", 178 => "11101111110010", 179 => "00111000010111", 
    180 => "00101101001101", 181 => "10010100101110", 182 => "11111011111100", 
    183 => "10011010000101", 184 => "10111000110000", 185 => "01000001001110", 
    186 => "00100001110011", 187 => "11010011010110", 188 => "11010000000000", 
    189 => "11111011111111", 190 => "11101011010101", 191 => "00001001011101", 
    192 => "00111111010000", 193 => "00001011100011", 194 => "01000111110111", 
    195 => "10010110111011", 196 => "10111001101001", 197 => "10110100101011", 
    198 => "00000010111001", 199 => "00111101111000", 200 => "11111101100001", 
    201 => "10011000110110", 202 => "11000011110000", 203 => "10101011000111", 
    204 => "11100010001010", 205 => "11011011001110", 206 => "10101011111000", 
    207 => "11001001100100", 208 => "10100100111101", 209 => "11110000111011", 
    210 => "10011101010110", 211 => "11111100111111", 212 => "01010011011011", 
    213 => "11101101101100", 214 => "00101100111110", 215 => "11011001101011", 
    216 => "11110010110001", 217 => "00010100101011", 218 => "10101000100100", 
    219 => "01100100110101", 220 => "00100110000001", 221 => "11011110001000", 
    222 => "11000011010111", 223 => "00100011110001", 224 => "11111010111101", 
    225 => "01011101101010", 226 => "10100100000110", 227 => "00111000110000", 
    228 => "11001101010100", 229 => "11101010010101", 230 => "10110011101011", 
    231 => "10100101110010", 232 => "11001011110010", 233 => "00100100010110", 
    234 => "01010000011001", 235 => "11101010010011", 236 => "01001101000110", 
    237 => "11110000000000", 238 => "01001011001000", 239 => "01100001101111", 
    240 => "00010000101101", 241 => "11001001101011", 242 => "01000001111101", 
    243 => "00100110111011", 244 => "10011011100110", 245 => "10110100000010", 
    246 => "01011110001101", 247 => "11001000100101", 248 => "10111000000101", 
    249 => "00000011101011", 250 => "00100100001100", 251 => "00101000100100", 
    252 => "11110001100001", 253 => "11000011000111", 254 => "01000111001100", 
    255 => "00111101111000", 256 => "10011011001000", 257 => "01000100000011", 
    258 => "00110011001001", 259 => "10010110011000", 260 => "00010000010111", 
    261 => "10011101110110", 262 => "00101000100010", 263 => "01010001111110", 
    264 => "00000100001001", 265 => "00011011101110", 266 => "00110101011011", 
    267 => "01010010011110", 268 => "11000011101110", 269 => "10011110000001", 
    270 => "11100101010100", 271 => "11111010100101", 272 => "11111001000110", 
    273 => "10100010100101", 274 => "00111011011111", 275 => "11000110010011", 
    276 => "01010110011011", 277 => "00000110111011", 278 => "11101110101100", 
    279 => "10100000001010", 280 => "00000011100001", 281 => "00011001111001", 
    282 => "11011001101101", 283 => "11010110101011", 284 => "10011010111111", 
    285 => "11010000101001", 286 => "11101011000001", 287 => "01011001010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_30 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_30 is
    component infer_layer_4_weights_V_30_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_30_rom_U :  component infer_layer_4_weights_V_30_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



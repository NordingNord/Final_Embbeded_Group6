-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_2_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000010011000101", 1 => "0001100000000110", 2 => "0010100110000110", 
    3 => "1111001110111000", 4 => "1110110100110110", 5 => "1110110101011000", 
    6 => "0001000001110010", 7 => "0000000001010011", 8 => "1110011101000000", 
    9 => "1111000010110101", 10 => "0001010001111101", 11 => "1111100100011101", 
    12 => "1111000001110001", 13 => "1111100100001100", 14 => "1110110010011101", 
    15 => "0000011000110011", 16 => "1110110010100110", 17 => "0000010100101110", 
    18 => "1111010100100110", 19 => "1111010111100011", 20 => "1110101011000011", 
    21 => "1111111100010111", 22 => "0001001000010011", 23 => "0000101010101110", 
    24 => "0000001110010101", 25 => "0001100001110001", 26 => "0000100000010110", 
    27 => "1110101110101111", 28 => "1111100011010101", 29 => "1111011000100001", 
    30 => "0001000110001000", 31 => "0001000011110110", 32 => "0000110110010101", 
    33 => "0000110100111001", 34 => "0010110110001011", 35 => "1110101011101111", 
    36 => "1111101000101001", 37 => "1111010011111001", 38 => "0010001010100000", 
    39 => "0000011101011001", 40 => "1111100110001001", 41 => "1111001101110000", 
    42 => "0000100001010001", 43 => "0001011000011110", 44 => "0010010111000000", 
    45 => "0000010011100011", 46 => "0000000111001111", 47 => "1110111001101111", 
    48 => "1111111100000011", 49 => "1111011011001001", 50 => "1111000100000100", 
    51 => "0001011100000100", 52 => "0001000100010100", 53 => "0001010010001010", 
    54 => "0000000000100011", 55 => "0001110001110010", 56 => "1111111100110100", 
    57 => "1110111000111011", 58 => "0000011010001101", 59 => "0000000001010111", 
    60 => "0000110110001111", 61 => "0000011101101010", 62 => "1111010000100001", 
    63 => "0000011001010111", 64 => "0000001110001010", 65 => "0001100011101010", 
    66 => "0000100010000101", 67 => "1111000010001100", 68 => "0000110111001110", 
    69 => "1111110010101011", 70 => "0001011010110100", 71 => "1111001011110111", 
    72 => "1110101101100111", 73 => "1110010101010000", 74 => "1110110101101100", 
    75 => "1111111011001100", 76 => "0010100100000011", 77 => "0001010111011000", 
    78 => "1110100100000100", 79 => "1110110001110000", 80 => "0000010010100001", 
    81 => "0000011100011110", 82 => "1110011010011011", 83 => "0000110111001001", 
    84 => "1110010101000000", 85 => "0000001000010101", 86 => "1111101100111001", 
    87 => "1111101100010001", 88 => "0000010100011101", 89 => "0000011011011001", 
    90 => "0000111111110010", 91 => "0000010001100100", 92 => "0000000000010111", 
    93 => "0000110011010011", 94 => "1111101110101010", 95 => "1111010000110100", 
    96 => "1110010100000100", 97 => "1110100010010000", 98 => "1111100110110101", 
    99 => "1110110101001100", 100 => "1111000010100110", 101 => "0000000011111100", 
    102 => "0000011000001100", 103 => "0001011010100010", 104 => "0000000111000000", 
    105 => "1110100101100001", 106 => "0000011100101101", 107 => "1111001001111110", 
    108 => "0010001000010011", 109 => "0000011001110101", 110 => "1111101101101100", 
    111 => "0000111001001001", 112 => "1110111010101101", 113 => "1111000101110001", 
    114 => "0001100110110000", 115 => "0000111011100010", 116 => "0000111001110110", 
    117 => "0001001001101000", 118 => "0001000100000000", 119 => "0000101111110000", 
    120 => "1100011100000101", 121 => "1111011100000110", 122 => "1110110110110001", 
    123 => "0001100000000111", 124 => "0000111110111010", 125 => "0001000100110100", 
    126 => "1110101000111011", 127 => "1111110010010011", 128 => "1111100001100000", 
    129 => "1111110111101001", 130 => "0001111111111111", 131 => "1110110010111010", 
    132 => "0000111110111000", 133 => "0000011100011110", 134 => "1111101111111001", 
    135 => "0000001110110001", 136 => "1111011100010100", 137 => "0000110110000001", 
    138 => "0001100101100010", 139 => "0001011100101001", 140 => "0010011001101000", 
    141 => "0000001001011000", 142 => "0001011100111010", 143 => "1110110010011001", 
    144 => "0000001110101011", 145 => "1111011100010101", 146 => "1111100001011101", 
    147 => "1110110100101111", 148 => "1111000110011001", 149 => "0000101101011010", 
    150 => "0001010010110110", 151 => "0001100101101101", 152 => "1011100111001011", 
    153 => "1111110011100111", 154 => "1110010111001011", 155 => "1111111011100000", 
    156 => "1110011011110110", 157 => "1111101101011101", 158 => "0000100100100011", 
    159 => "1111110000100001", 160 => "0001011110111101", 161 => "1110011101101001", 
    162 => "1110111110111100", 163 => "0001100001010110", 164 => "1110011100010000", 
    165 => "0001011110011111", 166 => "1111100011011111", 167 => "1111001110010100", 
    168 => "1110111100111111", 169 => "1111111011001000", 170 => "1111011111011110", 
    171 => "1111011101000110", 172 => "0010011001010110", 173 => "0010010010111100", 
    174 => "0001001110011011", 175 => "0001000000000110", 176 => "0001010000011000", 
    177 => "0001100010111011", 178 => "0000101011100100", 179 => "1111000011001011", 
    180 => "1111110100100101", 181 => "0001001110101111", 182 => "1111010010001000", 
    183 => "1111100100101000", 184 => "1111000101111011", 185 => "0001100010010000", 
    186 => "1100111001011010", 187 => "1111101011001100", 188 => "0001011100000001", 
    189 => "1110110111010111", 190 => "0001100011001011", 191 => "1110101011010001", 
    192 => "1111100101011100", 193 => "1111001100001101", 194 => "1110110110011000", 
    195 => "1110011111101110", 196 => "0001011111100001", 197 => "1110111011001101", 
    198 => "1110100101011001", 199 => "1110101001101100", 200 => "1110111011001001", 
    201 => "1111001110001000", 202 => "1111001001011010", 203 => "0001011001001000", 
    204 => "0000000110001110", 205 => "1110100111110011", 206 => "0000001010101010", 
    207 => "0000000101100110", 208 => "0001100111000011", 209 => "1111111001101000", 
    210 => "0000100011001110", 211 => "0000101110110101", 212 => "0000100110111100", 
    213 => "0001001011011001", 214 => "1101011001010101", 215 => "0001000110010100", 
    216 => "0001001101001110", 217 => "1111011101010100", 218 => "1111011101101110", 
    219 => "0001010011000100", 220 => "1110011010000111", 221 => "0001011010001010", 
    222 => "0001100001011000", 223 => "1111001100101010", 224 => "1111011100001111", 
    225 => "1110101100000011", 226 => "1100110101001100", 227 => "0000011000001100", 
    228 => "0001011000101001", 229 => "0001010111001100", 230 => "1101110101110111", 
    231 => "1110101100110110", 232 => "0001001000101000", 233 => "0001000101001000", 
    234 => "1111001000000000", 235 => "1111010000111011", 236 => "1110001011110101", 
    237 => "1111110010001011", 238 => "1111011110110111", 239 => "1111111100101011", 
    240 => "0001101011011110", 241 => "1111010100010101", 242 => "1111010101111101", 
    243 => "1110101111000010", 244 => "0000001110011001", 245 => "1110101000001011", 
    246 => "1110100001110101", 247 => "1101000010010011", 248 => "1110100011101100", 
    249 => "1110101010010001", 250 => "1101011010011011", 251 => "1111110111100111", 
    252 => "0001010010011100", 253 => "1111100011001011", 254 => "0000011110001110", 
    255 => "0001000011011101", 256 => "0001001101110110", 257 => "0000110110110010", 
    258 => "1110000100101100", 259 => "1111011000101110", 260 => "0000101111001101", 
    261 => "0001011110000110", 262 => "1110101101111010", 263 => "0000011000010111", 
    264 => "0000001011011111", 265 => "1110101000011101", 266 => "0000000101111010", 
    267 => "0001011010100100", 268 => "1101100011010110", 269 => "1110000111011010", 
    270 => "0000100000110011", 271 => "1110110001000110", 272 => "0001101011000100", 
    273 => "0000100101111111", 274 => "0000010011110100", 275 => "1111111001001000", 
    276 => "0000110101100010", 277 => "0000010100100001", 278 => "1110110110010110", 
    279 => "1101101001101101", 280 => "0001000000110110", 281 => "1110110000000111", 
    282 => "1110100000111000", 283 => "0000000110100001", 284 => "1111011110100110", 
    285 => "0001011000000111", 286 => "1111100000000010", 287 => "0001010001101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_2 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_2 is
    component infer_layer_6_weights_V_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_2_rom_U :  component infer_layer_6_weights_V_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_23_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111010111000011", 1 => "00000011100011001", 
    2 => "00011001101000100", 3 => "11111010111011111", 
    4 => "00000101110110000", 5 => "00001011010110011", 
    6 => "00001010111001001", 7 => "11111000001010111", 
    8 => "00000101101000100", 9 => "00000001111011111", 
    10 => "11110100001001111", 11 => "11111101010001000", 
    12 => "00001101000010101", 13 => "00001011101111001", 
    14 => "00000011000101101", 15 => "00000101100010100", 
    16 => "11111111001100010", 17 => "11111110110100001", 
    18 => "11110100001001100", 19 => "11111110101111011", 
    20 => "00000000000001001", 21 => "00001010010001001", 
    22 => "00011011000010000", 23 => "00000101111110101", 
    24 => "00000110111111111", 25 => "00000111101100101", 
    26 => "00011000001011010", 27 => "00001010000100100", 
    28 => "11111100000100111", 29 => "11110011101110100", 
    30 => "00000110110001111", 31 => "00001011111101001", 
    32 => "11110111101101100", 33 => "00001000110001100", 
    34 => "00010010010101110", 35 => "00001000010001001", 
    36 => "00000001001101101", 37 => "11110101100110001", 
    38 => "00001011111100010", 39 => "11110100000011110", 
    40 => "11111011101111101", 41 => "00001011111101001", 
    42 => "11110011001101111", 43 => "11110111010110010", 
    44 => "00000101111011001", 45 => "11111111001010100", 
    46 => "00000101110111000", 47 => "00001100110011011", 
    48 => "11111011001111101", 49 => "00001111011000110", 
    50 => "00000101010011100", 51 => "00000100100111010", 
    52 => "11110011010110111", 53 => "11111010001011110", 
    54 => "00001110001010111", 55 => "00010100000011100", 
    56 => "00010100010001011", 57 => "00000110000100111", 
    58 => "00010011101011101", 59 => "11111101100101011", 
    60 => "11110111011100111", 61 => "11111111011100111", 
    62 => "00001001010010101", 63 => "00001100000100010", 
    64 => "00000100110110101", 65 => "11110110010011001", 
    66 => "00001011101100100", 67 => "00000100110001000", 
    68 => "11111000001000101", 69 => "11111010101010010", 
    70 => "00000101010001111", 71 => "00001000011000000", 
    72 => "11111011001101110", 73 => "11110110010001010", 
    74 => "00000011110101010", 75 => "00000111101001001", 
    76 => "11111100111111110", 77 => "11110010110001101", 
    78 => "11110110011100011", 79 => "11111010100000000", 
    80 => "11110101010110100", 81 => "00000001101000000", 
    82 => "11111000010100011", 83 => "00000011110011011", 
    84 => "11110101010101010", 85 => "00000011011111111", 
    86 => "00000010010110001", 87 => "00000100101110111", 
    88 => "00100011110000110", 89 => "11111001101101101", 
    90 => "00000100001010000", 91 => "00001011101101011", 
    92 => "11110100010001111", 93 => "11111010100111010", 
    94 => "00000010010001001", 95 => "00000100000011011", 
    96 => "00000001011110100", 97 => "00000011001101110", 
    98 => "00001101101000110", 99 => "00000000110000110", 
    100 => "11111001101111111", 101 => "00000100101100000", 
    102 => "00001100110101010", 103 => "11111000111111100", 
    104 => "11111001101111111", 105 => "00000110111111011", 
    106 => "11110111010111010", 107 => "11110110110010101", 
    108 => "00011001110100010", 109 => "00010001001010110", 
    110 => "11110101111010000", 111 => "00000101000101000", 
    112 => "00000011110001110", 113 => "00000111001010110", 
    114 => "00000101111101100", 115 => "00000111101001110", 
    116 => "00001001100001001", 117 => "00000101010110010", 
    118 => "11111111100111100", 119 => "00000010111001110", 
    120 => "00010000001100000", 121 => "11111011100100010", 
    122 => "00000111101010100", 123 => "00001101010101011", 
    124 => "11111011000101010", 125 => "00000101001101001", 
    126 => "00000111111000010", 127 => "11111000100011100", 
    128 => "11111110100001011", 129 => "11111110100011000", 
    130 => "00001100101111010", 131 => "11110101101000111", 
    132 => "11111101101000101", 133 => "11110101000001100", 
    134 => "00010011101100110", 135 => "00001010001111000", 
    136 => "11111110011001000", 137 => "00000001000000010", 
    138 => "00000101101001011", 139 => "00000100000001111", 
    140 => "00011000100111001", 141 => "00010100011100111", 
    142 => "11111111011010110", 143 => "11111011111111101", 
    144 => "00000101011011100", 145 => "11110001111001011", 
    146 => "11111010011000000", 147 => "11110111010011010", 
    148 => "11111001011010111", 149 => "00001001110010001", 
    150 => "00000100101010111", 151 => "00001010011010100", 
    152 => "00000101110001000", 153 => "11111100111110010", 
    154 => "11111000101111001", 155 => "00000101101001100", 
    156 => "00001001000011111", 157 => "00001000010100010", 
    158 => "11111111111100110", 159 => "11111011100010000", 
    160 => "00001011100000000", 161 => "11111011100101011", 
    162 => "00100100011110001", 163 => "00000110010001111", 
    164 => "00001010001101010", 165 => "11110011011010011", 
    166 => "00001100110101101", 167 => "00000101001111001", 
    168 => "11111111000010001", 169 => "00000000100000001", 
    170 => "00000000011011011", 171 => "11110111011000011", 
    172 => "00011001010001111", 173 => "00011010100101011", 
    174 => "00000000010001011", 175 => "11111001110100010", 
    176 => "11111111010000010", 177 => "11111101001000011", 
    178 => "11110110000111001", 179 => "11111100101000100", 
    180 => "11111100000011110", 181 => "00001001000110111", 
    182 => "00001101010101011", 183 => "00011001101111100", 
    184 => "00000011000110001", 185 => "00000001000111100", 
    186 => "00010000010000011", 187 => "11110111100001100", 
    188 => "11111111011100100", 189 => "11110100011100001", 
    190 => "11110011110011111", 191 => "11110110111011111", 
    192 => "00001011100111111", 193 => "11110011111100001", 
    194 => "11110111100100000", 195 => "11111010010110000", 
    196 => "00001000101000000", 197 => "11110110110101001", 
    198 => "11111000100001010", 199 => "11111001001001100", 
    200 => "11110100010111110", 201 => "00000101101111000", 
    202 => "11110010111110010", 203 => "11110101010000011", 
    204 => "11111000111111000", 205 => "00000000011010110", 
    206 => "00001000111010100", 207 => "00000110011000001", 
    208 => "11110111110110111", 209 => "00000010100101010", 
    210 => "11111111010011101", 211 => "00000011010100110", 
    212 => "00000101011101001", 213 => "11111010001010001", 
    214 => "00000111000111111", 215 => "00001001000001010", 
    216 => "11110100110010000", 217 => "00000101001010001", 
    218 => "00000100111000111", 219 => "00000111001000111", 
    220 => "11110100000111100", 221 => "11110011110101110", 
    222 => "11111010011111000", 223 => "00001100110001111", 
    224 => "11110110101100000", 225 => "11111000000100000", 
    226 => "00000100110010000", 227 => "11110110011100001", 
    228 => "00000001011000111", 229 => "00000101000100100", 
    230 => "00001000000011110", 231 => "00000000001000111", 
    232 => "00000001011001000", 233 => "11111100111001110", 
    234 => "00000100100101100", 235 => "00001011100010101", 
    236 => "11110111111100101", 237 => "00001001110101100", 
    238 => "11111000110010010", 239 => "11110110111010100", 
    240 => "00000000101010110", 241 => "11110111111000101", 
    242 => "00000000110110101", 243 => "00000010001100000", 
    244 => "00000000101001001", 245 => "00000110001100011", 
    246 => "00000010101001101", 247 => "00000010101001111", 
    248 => "00001010111010001", 249 => "00000110110110101", 
    250 => "00001010000000000", 251 => "11110101111110111", 
    252 => "11111111111011111", 253 => "11111001000011001", 
    254 => "00000011100101100", 255 => "00000000100110111", 
    256 => "00001100011000110", 257 => "11111111100010110", 
    258 => "11111110100000111", 259 => "00001001110000011", 
    260 => "11110100011000111", 261 => "11111000101000101", 
    262 => "00000111011001111", 263 => "00000011110110010", 
    264 => "11110110000011001", 265 => "00001001001011000", 
    266 => "00000100011110001", 267 => "11111101001101100", 
    268 => "00000111001100110", 269 => "00000011110010110", 
    270 => "00000110010101110", 271 => "11111110111111011", 
    272 => "11111101110001111", 273 => "00000100110100010", 
    274 => "11111100111111110", 275 => "00000100001101000", 
    276 => "11111101001101011", 277 => "11111111101111001", 
    278 => "11110111100000001", 279 => "00000011101001110", 
    280 => "11111100010101011", 281 => "11111010101111001", 
    282 => "00000011000100011", 283 => "00000111100000010", 
    284 => "00001100011101001", 285 => "11111111001110010", 
    286 => "00000010101110100", 287 => "11110100011101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_23 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_23 is
    component infer_layer_6_weights_V_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_23_rom_U :  component infer_layer_6_weights_V_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



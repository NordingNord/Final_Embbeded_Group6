-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_22_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00001011011001100", 1 => "11111001100000110", 
    2 => "11101110100000001", 3 => "11111001111011000", 
    4 => "00000101101011010", 5 => "11110110001101101", 
    6 => "11110111010000110", 7 => "00000011111011011", 
    8 => "11110101010100110", 9 => "11110100101011100", 
    10 => "00000100010011110", 11 => "00001000000001111", 
    12 => "11111010111000110", 13 => "11101101011010000", 
    14 => "00001011101110101", 15 => "00001000001100110", 
    16 => "00000101101011101", 17 => "00000101100001011", 
    18 => "11111111110100001", 19 => "00000001001000110", 
    20 => "11110101101110000", 21 => "00000011001000010", 
    22 => "11111101001010110", 23 => "11111111101101001", 
    24 => "00110000100100111", 25 => "00001001101010111", 
    26 => "00001010100010101", 27 => "11111001010010001", 
    28 => "11110111001011110", 29 => "11111010110110010", 
    30 => "11110100001101000", 31 => "11110100011101010", 
    32 => "00010011101101100", 33 => "11111110001101011", 
    34 => "11110110000000011", 35 => "11111100100001001", 
    36 => "11110100100100010", 37 => "00000101000011101", 
    38 => "11111100001000100", 39 => "11111010101010000", 
    40 => "00001100000101000", 41 => "00000000000011111", 
    42 => "00000010111001110", 43 => "11110111011100001", 
    44 => "11110001110010010", 45 => "11100111111111001", 
    46 => "11111100001010100", 47 => "00000001001011010", 
    48 => "00001001011100011", 49 => "00001010001100100", 
    50 => "11111100111011000", 51 => "11111101111001001", 
    52 => "00000011000111000", 53 => "11111000111100010", 
    54 => "11111110110110011", 55 => "00001001111111010", 
    56 => "00101010101100110", 57 => "11110110100100100", 
    58 => "00100101111011110", 59 => "00001001011110100", 
    60 => "11110100110100011", 61 => "11111010110110011", 
    62 => "11111110000011010", 63 => "00000101000110010", 
    64 => "00000110000000001", 65 => "11110101111101001", 
    66 => "00010100100010101", 67 => "11111101110011111", 
    68 => "00000110011010111", 69 => "11110111001011101", 
    70 => "11111001011111100", 71 => "11111110000010011", 
    72 => "00000011100001110", 73 => "11110111001011010", 
    74 => "11111000110101100", 75 => "11111010011110010", 
    76 => "00000100101010111", 77 => "11100111011001111", 
    78 => "11110100000001010", 79 => "00000100000000110", 
    80 => "00000111100111101", 81 => "11111001010111110", 
    82 => "00001001011011011", 83 => "00001011100000110", 
    84 => "11111100100111010", 85 => "00000101101001001", 
    86 => "00000010101110000", 87 => "00010110101000011", 
    88 => "00110000111101010", 89 => "00001010011000111", 
    90 => "00101010100000101", 91 => "00000001101100000", 
    92 => "00000101101010010", 93 => "11111101110110011", 
    94 => "11111100110100010", 95 => "11111000101001101", 
    96 => "11111011111101011", 97 => "00001100110101010", 
    98 => "00110001111010100", 99 => "00001000100111110", 
    100 => "11110011011110101", 101 => "11110100101010001", 
    102 => "00100010001101001", 103 => "00000000000010001", 
    104 => "00001000001110010", 105 => "00001001011010110", 
    106 => "00001010111001100", 107 => "11111010010110100", 
    108 => "00100011001011110", 109 => "00011000110010000", 
    110 => "11111010110000011", 111 => "11110000101000110", 
    112 => "00000110011000110", 113 => "11101110000110001", 
    114 => "00000010100101000", 115 => "11111110011111111", 
    116 => "00000100001110011", 117 => "11110101110001010", 
    118 => "00010111101111111", 119 => "00100010100111100", 
    120 => "00100111000001000", 121 => "11111100000100101", 
    122 => "00010110001011110", 123 => "00001001000010001", 
    124 => "00000000100101100", 125 => "00000110011010001", 
    126 => "11111101111001011", 127 => "11111011101111100", 
    128 => "11111011011101100", 129 => "00000000010010101", 
    130 => "00011101111101110", 131 => "00001101010011100", 
    132 => "00000110111110101", 133 => "00000001011000011", 
    134 => "00011101010110101", 135 => "00000011100110101", 
    136 => "11111101001110111", 137 => "00000000110110110", 
    138 => "00001001110110101", 139 => "11110101111000110", 
    140 => "00011110001100100", 141 => "00011001010001011", 
    142 => "00001100011100000", 143 => "11110100111001011", 
    144 => "11110100001111110", 145 => "11100110100010110", 
    146 => "11111010110100011", 147 => "00001010101010110", 
    148 => "11111111100011010", 149 => "11110111101100011", 
    150 => "00100010000001101", 151 => "00100000101000011", 
    152 => "11110111001100110", 153 => "11111111101001000", 
    154 => "00100011110000011", 155 => "11111011001001100", 
    156 => "11110111010001011", 157 => "11111010101010100", 
    158 => "00000011100101111", 159 => "11111010100101000", 
    160 => "11110001110000011", 161 => "00000101111100100", 
    162 => "00100001101100001", 163 => "00000111010001010", 
    164 => "11110101100011110", 165 => "11111001110001000", 
    166 => "00001010010100101", 167 => "11111110110001000", 
    168 => "00000110110000111", 169 => "11111010011011110", 
    170 => "11111000010011010", 171 => "00000010100100000", 
    172 => "00010111101000110", 173 => "00010011101011100", 
    174 => "11111000001101100", 175 => "11101100000101000", 
    176 => "11110011010110111", 177 => "11111100100011110", 
    178 => "11111101110110000", 179 => "11111001000000101", 
    180 => "11111000111001010", 181 => "11110101100001101", 
    182 => "00010110101110100", 183 => "00011110010001111", 
    184 => "11111000100101001", 185 => "11110111010100111", 
    186 => "00010110010101111", 187 => "11111000010011000", 
    188 => "11110101110111010", 189 => "00001100010011011", 
    190 => "00001011001000111", 191 => "00000100110010000", 
    192 => "00000011011111011", 193 => "00000010110011010", 
    194 => "11101101101100101", 195 => "00000010101011011", 
    196 => "11111110001101101", 197 => "11111111001010111", 
    198 => "11110110001100010", 199 => "11111100010010011", 
    200 => "11111001111100100", 201 => "00001100010010011", 
    202 => "00000001011101001", 203 => "11111011100010100", 
    204 => "11111111111111011", 205 => "00011011010101111", 
    206 => "00000001001011101", 207 => "11110000000100011", 
    208 => "00000100000001010", 209 => "11110100110000010", 
    210 => "00000101110000101", 211 => "00001011110110101", 
    212 => "11110100010011001", 213 => "11111111010000000", 
    214 => "11101110010110001", 215 => "11110110111111111", 
    216 => "11110111110000111", 217 => "00000111100011010", 
    218 => "11100110001101110", 219 => "00000110110011111", 
    220 => "00000111001011110", 221 => "11111000110110011", 
    222 => "11111010111001010", 223 => "00000011010001101", 
    224 => "11101101011010011", 225 => "11110011111100100", 
    226 => "11101011100100101", 227 => "11110110101010110", 
    228 => "00000111110100000", 229 => "00000100111110100", 
    230 => "11110010101110111", 231 => "11111101111101111", 
    232 => "11111110001011100", 233 => "00000111000110111", 
    234 => "11110110100011111", 235 => "11111001100000110", 
    236 => "00000111100011010", 237 => "00001111101011101", 
    238 => "11111100110110111", 239 => "11111110101000110", 
    240 => "00000100100111001", 241 => "11111110000101000", 
    242 => "00000000001101111", 243 => "00000110010110110", 
    244 => "00000110001100001", 245 => "11111100011000011", 
    246 => "11110001100000111", 247 => "11110010101000111", 
    248 => "11111000111101010", 249 => "11111010011000001", 
    250 => "11110010010110110", 251 => "00001000000001100", 
    252 => "11111001010011101", 253 => "00001011011011101", 
    254 => "00001100000001101", 255 => "00000100111111100", 
    256 => "00000010011111001", 257 => "11111000011011001", 
    258 => "11100010101100101", 259 => "00001011101110010", 
    260 => "00000111111100110", 261 => "11110100100110010", 
    262 => "11101101011101100", 263 => "11111011111111010", 
    264 => "00001010000001010", 265 => "11111101011101001", 
    266 => "11111000011110100", 267 => "00001001000100011", 
    268 => "11111101010011100", 269 => "00000110011101101", 
    270 => "11110100001001011", 271 => "11101101000111001", 
    272 => "11111001110110011", 273 => "00000100110100010", 
    274 => "11111000011000101", 275 => "11110101100111100", 
    276 => "11111011111011111", 277 => "11110111110001011", 
    278 => "11110011110000110", 279 => "11101010010011110", 
    280 => "00000011001110001", 281 => "00000100110010001", 
    282 => "11110101101100110", 283 => "00001011111110010", 
    284 => "11111111100100011", 285 => "00000100000000101", 
    286 => "11111101001110000", 287 => "00000001101101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_22 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_22 is
    component infer_layer_6_weights_V_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_22_rom_U :  component infer_layer_6_weights_V_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_12_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_12_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0100001111101000", 1 => "0001001000100110", 2 => "1110100000011110", 
    3 => "1111110001100100", 4 => "1110011101011101", 5 => "1110001100100110", 
    6 => "0000110100001100", 7 => "1111000011110001", 8 => "1110001010010010", 
    9 => "0001011000110011", 10 => "1111011110001101", 11 => "1111010010111000", 
    12 => "1111011111000111", 13 => "1110010100011110", 14 => "0000001101011111", 
    15 => "1110100000111101", 16 => "0000010101101101", 17 => "1110001001110100", 
    18 => "0111101010100010", 19 => "0010110000101010", 20 => "1110110101100001", 
    21 => "0000011100100100", 22 => "0001011101011000", 23 => "1110101000001100", 
    24 => "1111100000011000", 25 => "1110101001010100", 26 => "1111001001010000", 
    27 => "0000101001101100", 28 => "0101111000011111", 29 => "1110001011110110", 
    30 => "0001011000001010", 31 => "0011110100110000", 32 => "0101001100010100", 
    33 => "1110100000010101", 34 => "1111111111001011", 35 => "0000000100001111", 
    36 => "1110111111011011", 37 => "0000100100011110", 38 => "0001100101110000", 
    39 => "1110101000011111", 40 => "0001010010101110", 41 => "0001011000001101", 
    42 => "0000110100010111", 43 => "1110100100101100", 44 => "1110110101010000", 
    45 => "1110011000111010", 46 => "0001100100010110", 47 => "1101110100000100", 
    48 => "0000100001100001", 49 => "1110110101010000", 50 => "0011101001000110", 
    51 => "1110011010001111", 52 => "1110001001010001", 53 => "1110110100010000", 
    54 => "0000011010110100", 55 => "0000001101101011", 56 => "1111101001001001", 
    57 => "0011101000000100", 58 => "0001010110110111", 59 => "1111000001000010", 
    60 => "0101001111011111", 61 => "1110000011001101", 62 => "0111111001010010", 
    63 => "0010101110001111", 64 => "0010010101101011", 65 => "1111110110111010", 
    66 => "1111110010111110", 67 => "1111001111100101", 68 => "0000111011010111", 
    69 => "0000101100010010", 70 => "0000110110110110", 71 => "0000010011100110", 
    72 => "0000111011000100", 73 => "0000110110010111", 74 => "1110110001001001", 
    75 => "1111000001111000", 76 => "0001001111101100", 77 => "1111010111100010", 
    78 => "1110110000010101", 79 => "1111111001010001", 80 => "1111101111010001", 
    81 => "1110001001000111", 82 => "1110011000011110", 83 => "1011101101110000", 
    84 => "1110110011011110", 85 => "0001010001000010", 86 => "0000111000001001", 
    87 => "0001000100011111", 88 => "1111100111010001", 89 => "0100100100100101", 
    90 => "1111100011111000", 91 => "0000110101001110", 92 => "0100001100000010", 
    93 => "1111011001110111", 94 => "0101011010101100", 95 => "0010100111000011", 
    96 => "0011010110011100", 97 => "0000111011011010", 98 => "0000111001000011", 
    99 => "1110111110110001", 100 => "1111101110000000", 101 => "0001001000110011", 
    102 => "0001011000110011", 103 => "1111011011100001", 104 => "1110100101111101", 
    105 => "0000010111011100", 106 => "0000011101000000", 107 => "1111000011100111", 
    108 => "1111010010010111", 109 => "1111101110000111", 110 => "1111011001101100", 
    111 => "0000000111110011", 112 => "1110111011010111", 113 => "1110011010100100", 
    114 => "0001001011000100", 115 => "0000010110000111", 116 => "0001000111000101", 
    117 => "0000010010001011", 118 => "1111111010000001", 119 => "1111100101101101", 
    120 => "0000011001010111", 121 => "0001111001100000", 122 => "1111000110100100", 
    123 => "1111110111110100", 124 => "0110000011001000", 125 => "0001000111100100", 
    126 => "0100010101000001", 127 => "0100011011110011", 128 => "0100010111111110", 
    129 => "0000111000110010", 130 => "1111010000001110", 131 => "0000101011011101", 
    132 => "0000010101111101", 133 => "0011011101000000", 134 => "0000001101100000", 
    135 => "1110010111101111", 136 => "0000110010100100", 137 => "1111001000101101", 
    138 => "0000100000111000", 139 => "1110100010111000", 140 => "0001000100011101", 
    141 => "0010011010100011", 142 => "1110011111000100", 143 => "1111111001010001", 
    144 => "0000010001111011", 145 => "1111101001101011", 146 => "1010000001011000", 
    147 => "1101100001100011", 148 => "1110111101010101", 149 => "0001010101111101", 
    150 => "1110111000011110", 151 => "1110101111111100", 152 => "1110110000010111", 
    153 => "0101011101111001", 154 => "0000100100101000", 155 => "0001000100010110", 
    156 => "0101001001000000", 157 => "1111111101101000", 158 => "0100111011010000", 
    159 => "0010100110110000", 160 => "0100100010111011", 161 => "0000000010010010", 
    162 => "0001100001110010", 163 => "0000000001100111", 164 => "1110011111010000", 
    165 => "0001100110011001", 166 => "0000110111011100", 167 => "0001010100100001", 
    168 => "0000001000100111", 169 => "1111110000110001", 170 => "1110101000000010", 
    171 => "1110100111111000", 172 => "1111100010001000", 173 => "0000000010111111", 
    174 => "0001010010101011", 175 => "1111101100110110", 176 => "0000100101000000", 
    177 => "0000111100001101", 178 => "1001100001001001", 179 => "1110100011100100", 
    180 => "0001000110010010", 181 => "0001110011001000", 182 => "0001010110100111", 
    183 => "0000111000111101", 184 => "1111011011111010", 185 => "0100000010011110", 
    186 => "0001001001111011", 187 => "1111101101100000", 188 => "0100100001100000", 
    189 => "1111010111110100", 190 => "0100010011000000", 191 => "0100000000011110", 
    192 => "0011000100110111", 193 => "1110110001100011", 194 => "1110011110011010", 
    195 => "1111011111000010", 196 => "0000011001001101", 197 => "0000000101110101", 
    198 => "0000101110011101", 199 => "0001000011110011", 200 => "0000101001100111", 
    201 => "0001000001100110", 202 => "1111101011000011", 203 => "1111111110100111", 
    204 => "0001011101110111", 205 => "0010001110100100", 206 => "1111101010011010", 
    207 => "0001101100100101", 208 => "1111001110000100", 209 => "0001101111101110", 
    210 => "1011111000001000", 211 => "1101110001000010", 212 => "1110111000001010", 
    213 => "0001011011100110", 214 => "1110111100110011", 215 => "0000001010100010", 
    216 => "1110011000100111", 217 => "0001010001111000", 218 => "1111001100010011", 
    219 => "1110011111101101", 220 => "0100011001100000", 221 => "1110110100110100", 
    222 => "0101000110000110", 223 => "1111110011100111", 224 => "0001010010001100", 
    225 => "0000111000011011", 226 => "1110111001001100", 227 => "0001110101100101", 
    228 => "0000110101111110", 229 => "0000011101010001", 230 => "1111000101000011", 
    231 => "0000100101110001", 232 => "1111111010010100", 233 => "1111001100010110", 
    234 => "1110100110101011", 235 => "0001101011101100", 236 => "0000000111111001", 
    237 => "1111110000111101", 238 => "0000101011110110", 239 => "0001111001011010", 
    240 => "0001000100110111", 241 => "0001011011001101", 242 => "1010000111011000", 
    243 => "1111100011000111", 244 => "0001000100110111", 245 => "0000110101010100", 
    246 => "0001010111110011", 247 => "1111110001010011", 248 => "0000011100010100", 
    249 => "0001011000001110", 250 => "0000010010111111", 251 => "1110011011001101", 
    252 => "0000000000010110", 253 => "0001010010010101", 254 => "0100101100100110", 
    255 => "1111011001000010", 256 => "1111010011111001", 257 => "0000011100011101", 
    258 => "1110011111010100", 259 => "1111011101111010", 260 => "0000110100001111", 
    261 => "0000000001000010", 262 => "1111111000011001", 263 => "0000101110011110", 
    264 => "0000110010001001", 265 => "1110100000001110", 266 => "0000011001010111", 
    267 => "1111000011011010", 268 => "1110100101111010", 269 => "0001110101010110", 
    270 => "1111010001001111", 271 => "0001111000001001", 272 => "0000110111100111", 
    273 => "1111110011001000", 274 => "1011001101011000", 275 => "1111110111100000", 
    276 => "0010000010101011", 277 => "1111010100010111", 278 => "1110101010010111", 
    279 => "0000111001001001", 280 => "0001000000100100", 281 => "0000001011100010", 
    282 => "1111011011101010", 283 => "1111001101101100", 284 => "0010100001110000", 
    285 => "0001001111100000", 286 => "0000000101100011", 287 => "0000101111101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_12 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_12 is
    component infer_layer_4_weights_V_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_12_rom_U :  component infer_layer_4_weights_V_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



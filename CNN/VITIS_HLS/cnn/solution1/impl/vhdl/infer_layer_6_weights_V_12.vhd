-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_12_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_12_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110101010011010", 1 => "1111011010101000", 2 => "0000001011010110", 
    3 => "0000000111001011", 4 => "0000010101101100", 5 => "0000111001011111", 
    6 => "0000111000001101", 7 => "1110110101101001", 8 => "0001010001001110", 
    9 => "0001011001100001", 10 => "0001011010010011", 11 => "1110101011000010", 
    12 => "0000101001010111", 13 => "0001101010001110", 14 => "1111100010110010", 
    15 => "1111000001000101", 16 => "0000100010001001", 17 => "0000010110010010", 
    18 => "0001000110111111", 19 => "0001001001001011", 20 => "0000011000011010", 
    21 => "0000101001000000", 22 => "1111000101010111", 23 => "1110001000100000", 
    24 => "0001110001100101", 25 => "1111011000000101", 26 => "0000111110010110", 
    27 => "0000111111100000", 28 => "0000001101110000", 29 => "0000101011001100", 
    30 => "1111110001000100", 31 => "1111010101001100", 32 => "1111101100001000", 
    33 => "0000101110011100", 34 => "1110001011100011", 35 => "1110110011101110", 
    36 => "1110110011000101", 37 => "0001000101111100", 38 => "0001110000000011", 
    39 => "0001000011011001", 40 => "1110111011001101", 41 => "1111000010001010", 
    42 => "1111101000011101", 43 => "1110111110101100", 44 => "1111010101110111", 
    45 => "0000111001111000", 46 => "0000110111100010", 47 => "1111010110010110", 
    48 => "0000110111001111", 49 => "0001011111110010", 50 => "0001101101010110", 
    51 => "0000100101011000", 52 => "1111110101101101", 53 => "0000110011011010", 
    54 => "0001000100100111", 55 => "0000110111000101", 56 => "0011111001000001", 
    57 => "0000010000001001", 58 => "1110011100101111", 59 => "0000111110100000", 
    60 => "1111010111110100", 61 => "0001010001100101", 62 => "0001010110110110", 
    63 => "1110101000000101", 64 => "0001010101111101", 65 => "1111000110010101", 
    66 => "1101101011010001", 67 => "1111010000000011", 68 => "0001000100000101", 
    69 => "1111100110100111", 70 => "0000010010100110", 71 => "0001000011011111", 
    72 => "0001011000011010", 73 => "0000110011000010", 74 => "1110111001010001", 
    75 => "0000101111111101", 76 => "1111010111100111", 77 => "1111101000101111", 
    78 => "1111011110010110", 79 => "0000111111110010", 80 => "1111011100000100", 
    81 => "0001010100111000", 82 => "0001100000100101", 83 => "0000111011010101", 
    84 => "0001010100010111", 85 => "0000001011110110", 86 => "0000001001000111", 
    87 => "0010011000000100", 88 => "0101000001001101", 89 => "0001010100000110", 
    90 => "0010110001100111", 91 => "0001001000000011", 92 => "1110110100110010", 
    93 => "0001010100100001", 94 => "1110110111101011", 95 => "1111010001101111", 
    96 => "1111101100000111", 97 => "1111011101000000", 98 => "0010010101010010", 
    99 => "0001100001010011", 100 => "0001010011010011", 101 => "0001011010100101", 
    102 => "0001100010110111", 103 => "0000011101010001", 104 => "1111010001111101", 
    105 => "0000010000100010", 106 => "0000001111000101", 107 => "0000000010001101", 
    108 => "0001111011011001", 109 => "0001010111110001", 110 => "0001000001010010", 
    111 => "0000001010110110", 112 => "0000110000010011", 113 => "1111000010110100", 
    114 => "1111101011101111", 115 => "0000111111101111", 116 => "1111101101000010", 
    117 => "1111000100010111", 118 => "0001001110100100", 119 => "1110100011001100", 
    120 => "0010101110011001", 121 => "0000001100010101", 122 => "0001011011111101", 
    123 => "1111000010001011", 124 => "1111001010110101", 125 => "0001000000100100", 
    126 => "0000110000101010", 127 => "1111100000110000", 128 => "1111111000011100", 
    129 => "1110110010010111", 130 => "0001111111110101", 131 => "0000110110101111", 
    132 => "1111111100101100", 133 => "0001001000010100", 134 => "0001111011100101", 
    135 => "0001011000010010", 136 => "0000100001101100", 137 => "1111101111001011", 
    138 => "0001010001100100", 139 => "0001000100101010", 140 => "0001000101010011", 
    141 => "0000101001010001", 142 => "1111100110001011", 143 => "0000100111000010", 
    144 => "1111100101010110", 145 => "1101110111111001", 146 => "1111110111111000", 
    147 => "0001000011001001", 148 => "1110100000101100", 149 => "1111111111100101", 
    150 => "0000011110101001", 151 => "0010110110110010", 152 => "0100111111001101", 
    153 => "0000011111110110", 154 => "0100110110100011", 155 => "1110110111100100", 
    156 => "1110011000101011", 157 => "1111011101101011", 158 => "1111010010110001", 
    159 => "1111011101101111", 160 => "1101100011110101", 161 => "1110011100001011", 
    162 => "0100000111101110", 163 => "1110111000110110", 164 => "1110011110000000", 
    165 => "0000110100000001", 166 => "1111110010000111", 167 => "1111100101011100", 
    168 => "1110110101110010", 169 => "1111001100110101", 170 => "0001001011001000", 
    171 => "1111101110101010", 172 => "0010111001010011", 173 => "0000110100000101", 
    174 => "0000000000101111", 175 => "0001000001101110", 176 => "0000010110101011", 
    177 => "1101110111101101", 178 => "1110101011101101", 179 => "1110101011000101", 
    180 => "0000100001100100", 181 => "1111101110000010", 182 => "0000101110100110", 
    183 => "0001111101001001", 184 => "0011111011111101", 185 => "0001010100101010", 
    186 => "0100110000000001", 187 => "1111101110101010", 188 => "0001000110001101", 
    189 => "1111001000011000", 190 => "1111111001001010", 191 => "1111011111010111", 
    192 => "0000001000000000", 193 => "0000100100001110", 194 => "0000010010010011", 
    195 => "0000111100011100", 196 => "1111011100101111", 197 => "0000010001100110", 
    198 => "0001111011010101", 199 => "0000011000000101", 200 => "1110111101100110", 
    201 => "1111001100111100", 202 => "1111111000011011", 203 => "1110111010111001", 
    204 => "1101010010100110", 205 => "0000011100110101", 206 => "0000110001101101", 
    207 => "1111000001110001", 208 => "0000000011111111", 209 => "0000011000110000", 
    210 => "0000101101001001", 211 => "0001100011011011", 212 => "1110111000011111", 
    213 => "1110100101010111", 214 => "0011100010110001", 215 => "0000101001101101", 
    216 => "0110111001000111", 217 => "1111000111110001", 218 => "0010010010111000", 
    219 => "1110100111101111", 220 => "0000111110100101", 221 => "1110100010010111", 
    222 => "0000100111111111", 223 => "0000010101101111", 224 => "1111000010001110", 
    225 => "0001001111011000", 226 => "0000011000110000", 227 => "0000001110111010", 
    228 => "0000001011100110", 229 => "1110011101100111", 230 => "1111110000001010", 
    231 => "1111110001110010", 232 => "1111001101001001", 233 => "0000000001100111", 
    234 => "1110111111011011", 235 => "1110110011010110", 236 => "0001100101110010", 
    237 => "0000011111101111", 238 => "0000110101110111", 239 => "1111101011001010", 
    240 => "0000000111001110", 241 => "1111111100111101", 242 => "0001101001001101", 
    243 => "0000110111001010", 244 => "1111010011111100", 245 => "1110011110010000", 
    246 => "1110110111101001", 247 => "0100000101011010", 248 => "0100010010000001", 
    249 => "0001001000010100", 250 => "0011111101101110", 251 => "1111001111011100", 
    252 => "1110111010110011", 253 => "1110111111000010", 254 => "0000100100000010", 
    255 => "0001001100110011", 256 => "0000111010101101", 257 => "0001001100000001", 
    258 => "0001010000100011", 259 => "1111001011110001", 260 => "1111100011010011", 
    261 => "0001001101110010", 262 => "1111100110101011", 263 => "1110110110011111", 
    264 => "1111100000000011", 265 => "1110101011010001", 266 => "0000010010101011", 
    267 => "0000100010101001", 268 => "0010010100110100", 269 => "0001000111011010", 
    270 => "1111101111001101", 271 => "0000000110011011", 272 => "1111001011111010", 
    273 => "0000110100100100", 274 => "1111100001010000", 275 => "0000001101001101", 
    276 => "1111110001110001", 277 => "1111010011100000", 278 => "1111011010010011", 
    279 => "0000000000111111", 280 => "0000000011100000", 281 => "0001011101100000", 
    282 => "1110111010011101", 283 => "0001011011100101", 284 => "1111101101100110", 
    285 => "1110111111110001", 286 => "1111101000110110", 287 => "0000011111000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_12 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_12 is
    component infer_layer_6_weights_V_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_12_rom_U :  component infer_layer_6_weights_V_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_conv2d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_852_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_852_p_ce : OUT STD_LOGIC;
    grp_fu_856_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_856_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_856_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_856_p_ce : OUT STD_LOGIC;
    grp_fu_1954_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1954_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1954_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1954_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1954_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_conv2d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv10_1B : STD_LOGIC_VECTOR (9 downto 0) := "0000011011";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv15_5B20 : STD_LOGIC_VECTOR (14 downto 0) := "101101100100000";
    constant ap_const_lv11_360 : STD_LOGIC_VECTOR (10 downto 0) := "01101100000";
    constant ap_const_lv10_3E5 : STD_LOGIC_VECTOR (9 downto 0) := "1111100101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_4_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal layer_4_weights_ce0 : STD_LOGIC;
    signal layer_4_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_4_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_4_bias_ce0 : STD_LOGIC;
    signal layer_4_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten36_reg_218 : STD_LOGIC_VECTOR (8 downto 0);
    signal iv_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_241 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_252 : STD_LOGIC_VECTOR (2 downto 0);
    signal vi_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal add4115_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln66_fu_300_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln66_reg_850 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln69_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_5_fu_404_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln66_5_reg_863 : STD_LOGIC_VECTOR (4 downto 0);
    signal iii_mid2_fu_424_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_mid2_reg_869 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast4_mid2_fu_432_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast4_mid2_reg_876 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_71_fu_468_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_71_reg_882 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_cast4_mid2_cast_fu_481_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_cast4_mid2_cast_reg_892 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add52_mid2_fu_484_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add52_mid2_reg_897 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln72_3_fu_491_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln72_3_reg_902 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln72_4_fu_494_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln72_4_reg_907 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln77_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln77_reg_917_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_917_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_5_fu_557_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln77_5_reg_926 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln80_fu_607_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_reg_932 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_5_fu_643_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_5_reg_937 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln87_fu_678_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln87_reg_947 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln80_3_fu_712_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln80_3_reg_957 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer_4_weights_load_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln77_fu_718_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln77_reg_967 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln92_fu_754_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln92_reg_977 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln80_7_fu_759_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_7_reg_982 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln102_fu_765_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln102_reg_1002 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln72_fu_769_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln72_reg_1007 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln69_fu_780_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln69_reg_1012 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state10 : STD_LOGIC;
    signal indvar_flatten73_reg_162 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_reg_173 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten44_reg_184 : STD_LOGIC_VECTOR (10 downto 0);
    signal ii_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal iii_reg_207 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten36_phi_fu_222_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_iv_phi_fu_234_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_245_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v_phi_fu_256_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_vi_phi_fu_267_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_add4115_phi_fu_277_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln102_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_310_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_310_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast_fu_316_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_320_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_326_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_310_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln66_2_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid155_fu_366_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid155_fu_366_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid155_fu_366_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln72_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln66_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_348_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln66_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_70_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast_mid1_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid1_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_mid1_fu_450_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln66_4_fu_372_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul4811_mid165_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul4811_fu_330_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul4811_mid1_fu_454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln66_6_fu_460_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next37_fu_497_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_66_fu_507_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_511_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next37_cast_fu_503_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln91_fu_519_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln77_1_fu_551_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln92_3_fu_525_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln83_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_fu_543_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln77_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next37_mid1_fu_615_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_68_fu_625_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_629_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next37_cast_mid1_fu_621_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next37_dup_fu_595_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln80_fu_651_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln80_fu_655_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln91_2_fu_637_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln92_4_fu_664_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln77_6_fu_569_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_6_fu_670_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln91_fu_682_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln92_5_fu_686_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln77_fu_565_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_692_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln91_fu_702_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_842_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln87_fu_727_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln87_fu_730_p2 : STD_LOGIC_VECTOR (9 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln87_fu_730_p2 : signal is "no";
    signal shl_ln_fu_735_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln77_fu_724_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln87_2_fu_743_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln69_2_fu_774_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln49_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_791_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_801_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_5_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_842_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_842_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_284_ce : STD_LOGIC;
    signal grp_fu_289_ce : STD_LOGIC;
    signal grp_fu_294_ce : STD_LOGIC;
    signal grp_fu_294_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal empty_fu_310_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_842_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid155_fu_366_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mul_5ns_6ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component infer_mac_muladd_5ns_6ns_5ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component infer_conv2d_1_layer_4_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_conv2d_1_layer_4_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_4_weights_U : component infer_conv2d_1_layer_4_weights
    generic map (
        DataWidth => 32,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_4_weights_address0,
        ce0 => layer_4_weights_ce0,
        q0 => layer_4_weights_q0);

    layer_4_bias_U : component infer_conv2d_1_layer_4_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_4_bias_address0,
        ce0 => layer_4_bias_ce0,
        q0 => layer_4_bias_q0);

    mul_5ns_6ns_10_1_1_U36 : component infer_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => empty_fu_310_p0,
        din1 => empty_fu_310_p1,
        dout => empty_fu_310_p2);

    mul_5ns_6ns_10_1_1_U37 : component infer_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => p_mid155_fu_366_p0,
        din1 => p_mid155_fu_366_p1,
        dout => p_mid155_fu_366_p2);

    mac_muladd_5ns_6ns_5ns_10_4_1_U38 : component infer_mac_muladd_5ns_6ns_5ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_842_p0,
        din1 => grp_fu_842_p1,
        din2 => grp_fu_842_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_842_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state10)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4115_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln77_reg_917_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                add4115_reg_274 <= grp_fu_852_p_dout0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                add4115_reg_274 <= layer_4_bias_q0;
            end if; 
        end if;
    end process;

    i_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_reg_173 <= select_ln66_5_reg_863;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_173 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    ii_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                ii_reg_196 <= ii_cast4_mid2_reg_876;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ii_reg_196 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    iii_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                iii_reg_207 <= add_ln72_reg_1007;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                iii_reg_207 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten36_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
                indvar_flatten36_reg_218 <= add_ln77_reg_967;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten36_reg_218 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten44_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten44_reg_184 <= select_ln69_reg_1012;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten44_reg_184 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten73_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten73_reg_162 <= add_ln66_reg_850;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten73_reg_162 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
                indvar_flatten_reg_241 <= select_ln80_7_reg_982;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_241 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iv_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
                iv_reg_230 <= select_ln77_5_reg_926;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                iv_reg_230 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    v_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
                v_reg_252 <= select_ln80_5_reg_937;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_reg_252 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    vi_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
                vi_reg_263 <= add_ln92_reg_977;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vi_reg_263 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    add52_mid2_reg_897(14 downto 5) <= add52_mid2_fu_484_p3(14 downto 5);
                    ii_cast4_mid2_cast_reg_892(4 downto 0) <= ii_cast4_mid2_cast_fu_481_p1(4 downto 0);
                    zext_ln72_3_reg_902(5 downto 0) <= zext_ln72_3_fu_491_p1(5 downto 0);
                    zext_ln72_4_reg_907(5 downto 0) <= zext_ln72_4_fu_494_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln102_reg_1002 <= add_ln102_fu_765_p2;
                add_ln72_reg_1007 <= add_ln72_fu_769_p2;
                select_ln69_reg_1012 <= select_ln69_fu_780_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln66_reg_850 <= add_ln66_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln77_reg_967 <= add_ln77_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_fu_531_p2 = ap_const_lv1_0))) then
                add_ln80_3_reg_957 <= add_ln80_3_fu_712_p2;
                icmp_ln80_reg_921 <= icmp_ln80_fu_537_p2;
                select_ln80_reg_932 <= select_ln80_fu_607_p3;
                trunc_ln87_reg_947 <= trunc_ln87_fu_678_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then
                add_ln92_reg_977 <= add_ln92_fu_754_p2;
                select_ln80_7_reg_982 <= select_ln80_7_fu_759_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_71_reg_882 <= empty_71_fu_468_p3;
                icmp_ln69_reg_858 <= icmp_ln69_fu_342_p2;
                ii_cast4_mid2_reg_876 <= ii_cast4_mid2_fu_432_p3;
                iii_mid2_reg_869 <= iii_mid2_fu_424_p3;
                select_ln66_5_reg_863 <= select_ln66_5_fu_404_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln77_reg_917 <= icmp_ln77_fu_531_p2;
                icmp_ln77_reg_917_pp0_iter1_reg <= icmp_ln77_reg_917;
                icmp_ln77_reg_917_pp0_iter2_reg <= icmp_ln77_reg_917_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then
                layer_4_weights_load_reg_962 <= layer_4_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln77_reg_917_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_reg_992 <= grp_fu_856_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_fu_531_p2 = ap_const_lv1_0))) then
                select_ln77_5_reg_926 <= select_ln77_5_fu_557_p3;
                select_ln80_5_reg_937 <= select_ln80_5_fu_643_p3;
            end if;
        end if;
    end process;
    ii_cast4_mid2_cast_reg_892(9 downto 5) <= "00000";
    add52_mid2_reg_897(4 downto 0) <= "00000";
    zext_ln72_3_reg_902(13 downto 6) <= "00000000";
    zext_ln72_4_reg_907(14 downto 6) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_336_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln66_fu_336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add52_mid2_fu_484_p3 <= (empty_71_reg_882 & ap_const_lv5_0);
    add_ln102_fu_765_p2 <= std_logic_vector(unsigned(zext_ln72_4_reg_907) + unsigned(add52_mid2_reg_897));
    add_ln66_2_fu_356_p2 <= std_logic_vector(unsigned(i_reg_173) + unsigned(ap_const_lv5_1));
    add_ln66_fu_300_p2 <= std_logic_vector(unsigned(indvar_flatten73_reg_162) + unsigned(ap_const_lv15_1));
    add_ln69_2_fu_774_p2 <= std_logic_vector(unsigned(indvar_flatten44_reg_184) + unsigned(ap_const_lv11_1));
    add_ln69_fu_412_p2 <= std_logic_vector(unsigned(select_ln66_fu_348_p3) + unsigned(ap_const_lv5_1));
    add_ln72_fu_769_p2 <= std_logic_vector(unsigned(iii_mid2_reg_869) + unsigned(ap_const_lv6_1));
    add_ln77_1_fu_551_p2 <= std_logic_vector(unsigned(ap_phi_mux_iv_phi_fu_234_p4) + unsigned(ap_const_lv6_1));
    add_ln77_fu_718_p2 <= std_logic_vector(unsigned(indvar_flatten36_reg_218) + unsigned(ap_const_lv9_1));
    add_ln80_3_fu_712_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_245_p4) + unsigned(ap_const_lv4_1));
    add_ln80_fu_655_p2 <= std_logic_vector(unsigned(select_ln66_5_reg_863) + unsigned(sext_ln80_fu_651_p1));
    add_ln87_2_fu_743_p2 <= std_logic_vector(unsigned(shl_ln_fu_735_p3) + unsigned(zext_ln77_fu_724_p1));
    add_ln87_fu_730_p2 <= std_logic_vector(unsigned(grp_fu_842_p3) + unsigned(sext_ln87_fu_727_p1));
    add_ln91_fu_702_p2 <= std_logic_vector(unsigned(shl_ln1_fu_692_p4) + unsigned(zext_ln72_3_reg_902));
    add_ln92_3_fu_525_p2 <= std_logic_vector(unsigned(sub_ln91_fu_519_p2) + unsigned(ap_const_lv4_1));
    add_ln92_4_fu_664_p2 <= std_logic_vector(unsigned(sub_ln91_2_fu_637_p2) + unsigned(ap_const_lv4_1));
    add_ln92_5_fu_686_p2 <= std_logic_vector(unsigned(select_ln80_6_fu_670_p3) + unsigned(sext_ln91_fu_682_p1));
    add_ln92_fu_754_p2 <= std_logic_vector(unsigned(select_ln80_reg_932) + unsigned(ap_const_lv3_1));
    and_ln49_fu_823_p2 <= (or_ln49_fu_817_p2 and grp_fu_1954_p_dout0);
    and_ln66_fu_398_p2 <= (xor_ln66_fu_386_p2 and icmp_ln72_fu_392_p2);
    and_ln77_fu_589_p2 <= (xor_ln77_fu_577_p2 and icmp_ln83_fu_583_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln77_reg_917, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (icmp_ln77_reg_917 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_336_p2)
    begin
        if ((((icmp_ln66_fu_336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add4115_phi_fu_277_p4_assign_proc : process(add4115_reg_274, ap_CS_fsm_pp0_stage0, icmp_ln77_reg_917_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, grp_fu_852_p_dout0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln77_reg_917_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_add4115_phi_fu_277_p4 <= grp_fu_852_p_dout0;
        else 
            ap_phi_mux_add4115_phi_fu_277_p4 <= add4115_reg_274;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten36_phi_fu_222_p4_assign_proc : process(indvar_flatten36_reg_218, icmp_ln77_reg_917, ap_CS_fsm_pp0_stage0, add_ln77_reg_967, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten36_phi_fu_222_p4 <= add_ln77_reg_967;
        else 
            ap_phi_mux_indvar_flatten36_phi_fu_222_p4 <= indvar_flatten36_reg_218;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_245_p4_assign_proc : process(indvar_flatten_reg_241, icmp_ln77_reg_917, ap_CS_fsm_pp0_stage0, select_ln80_7_reg_982, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_245_p4 <= select_ln80_7_reg_982;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_245_p4 <= indvar_flatten_reg_241;
        end if; 
    end process;


    ap_phi_mux_iv_phi_fu_234_p4_assign_proc : process(iv_reg_230, icmp_ln77_reg_917, ap_CS_fsm_pp0_stage0, select_ln77_5_reg_926, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
            ap_phi_mux_iv_phi_fu_234_p4 <= select_ln77_5_reg_926;
        else 
            ap_phi_mux_iv_phi_fu_234_p4 <= iv_reg_230;
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_256_p4_assign_proc : process(v_reg_252, icmp_ln77_reg_917, ap_CS_fsm_pp0_stage0, select_ln80_5_reg_937, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
            ap_phi_mux_v_phi_fu_256_p4 <= select_ln80_5_reg_937;
        else 
            ap_phi_mux_v_phi_fu_256_p4 <= v_reg_252;
        end if; 
    end process;


    ap_phi_mux_vi_phi_fu_267_p4_assign_proc : process(vi_reg_263, icmp_ln77_reg_917, ap_CS_fsm_pp0_stage0, add_ln92_reg_977, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln77_reg_917 = ap_const_lv1_0))) then 
            ap_phi_mux_vi_phi_fu_267_p4 <= add_ln92_reg_977;
        else 
            ap_phi_mux_vi_phi_fu_267_p4 <= vi_reg_263;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_fu_336_p2)
    begin
        if (((icmp_ln66_fu_336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_fu_787_p1 <= add4115_reg_274;
    empty_66_fu_507_p1 <= indvars_iv_next37_fu_497_p2(2 - 1 downto 0);
    empty_68_fu_625_p1 <= indvars_iv_next37_mid1_fu_615_p2(2 - 1 downto 0);
    empty_70_fu_418_p2 <= (icmp_ln69_fu_342_p2 or and_ln66_fu_398_p2);
    empty_71_fu_468_p3 <= 
        mul4811_mid1_fu_454_p2 when (and_ln66_fu_398_p2(0) = '1') else 
        select_ln66_6_fu_460_p3;
    empty_fu_310_p0 <= empty_fu_310_p00(5 - 1 downto 0);
    empty_fu_310_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_173),10));
    empty_fu_310_p1 <= ap_const_lv10_1B(6 - 1 downto 0);
    grp_fu_1954_p_ce <= ap_const_logic_1;
    grp_fu_1954_p_din0 <= add4115_reg_274;
    grp_fu_1954_p_din1 <= ap_const_lv32_0;
    grp_fu_1954_p_opcode <= ap_const_lv5_4;
    grp_fu_284_ce <= ap_const_logic_1;
    grp_fu_284_p0 <= ap_phi_mux_add4115_phi_fu_277_p4;
    grp_fu_284_p1 <= mul_reg_992;
    grp_fu_284_p2 <= grp_fu_852_p_dout0;
    grp_fu_289_ce <= ap_const_logic_1;
    grp_fu_289_p0 <= input_r_q0;
    grp_fu_289_p1 <= layer_4_weights_load_reg_962;
    grp_fu_289_p2 <= grp_fu_856_p_dout0;
    grp_fu_294_ce <= ap_const_logic_1;
    grp_fu_294_opcode <= ap_const_lv5_4;
    grp_fu_294_p0 <= add4115_reg_274;
    grp_fu_294_p1 <= ap_const_lv32_0;
    grp_fu_294_p2 <= grp_fu_1954_p_dout0;
    grp_fu_842_p0 <= grp_fu_842_p00(5 - 1 downto 0);
    grp_fu_842_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_fu_655_p2),10));
    grp_fu_842_p1 <= ap_const_lv10_1D(6 - 1 downto 0);
    grp_fu_842_p2 <= ii_cast4_mid2_cast_reg_892(5 - 1 downto 0);
    grp_fu_852_p_ce <= ap_const_logic_1;
    grp_fu_852_p_din0 <= ap_phi_mux_add4115_phi_fu_277_p4;
    grp_fu_852_p_din1 <= mul_reg_992;
    grp_fu_852_p_opcode <= ap_const_lv2_0;
    grp_fu_856_p_ce <= ap_const_logic_1;
    grp_fu_856_p_din0 <= input_r_q0;
    grp_fu_856_p_din1 <= layer_4_weights_load_reg_962;
    icmp_ln49_5_fu_811_p2 <= "1" when (trunc_ln49_fu_801_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_805_p2 <= "0" when (tmp_s_fu_791_p4 = ap_const_lv8_FF) else "1";
    icmp_ln66_fu_336_p2 <= "1" when (indvar_flatten73_reg_162 = ap_const_lv15_5B20) else "0";
    icmp_ln69_fu_342_p2 <= "1" when (indvar_flatten44_reg_184 = ap_const_lv11_360) else "0";
    icmp_ln72_fu_392_p2 <= "1" when (iii_reg_207 = ap_const_lv6_20) else "0";
    icmp_ln77_fu_531_p2 <= "1" when (ap_phi_mux_indvar_flatten36_phi_fu_222_p4 = ap_const_lv9_120) else "0";
    icmp_ln80_fu_537_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_245_p4 = ap_const_lv4_9) else "0";
    icmp_ln83_fu_583_p2 <= "1" when (ap_phi_mux_vi_phi_fu_267_p4 = ap_const_lv3_2) else "0";
    ii_cast4_mid2_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_cast4_mid2_reg_876),10));
    ii_cast4_mid2_fu_432_p3 <= 
        add_ln69_fu_412_p2 when (and_ln66_fu_398_p2(0) = '1') else 
        select_ln66_fu_348_p3;
    ii_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_196),6));
    ii_cast_mid1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_412_p2),6));
    iii_mid2_fu_424_p3 <= 
        ap_const_lv6_0 when (empty_70_fu_418_p2(0) = '1') else 
        iii_reg_207;
    indvars_iv_next37_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next37_fu_497_p2),4));
    indvars_iv_next37_cast_mid1_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next37_mid1_fu_615_p2),4));
    indvars_iv_next37_dup_fu_595_p2 <= std_logic_vector(unsigned(select_ln77_fu_543_p3) + unsigned(ap_const_lv3_1));
    indvars_iv_next37_fu_497_p2 <= std_logic_vector(unsigned(ap_phi_mux_v_phi_fu_256_p4) + unsigned(ap_const_lv3_1));
    indvars_iv_next37_mid1_fu_615_p2 <= std_logic_vector(unsigned(select_ln77_fu_543_p3) + unsigned(ap_const_lv3_2));
    input_r_address0 <= zext_ln87_fu_749_p1(15 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_4_bias_address0 <= zext_ln72_fu_476_p1(5 - 1 downto 0);

    layer_4_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_4_bias_ce0 <= ap_const_logic_1;
        else 
            layer_4_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_4_weights_address0 <= zext_ln91_fu_707_p1(14 - 1 downto 0);

    layer_4_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer_4_weights_ce0 <= ap_const_logic_1;
        else 
            layer_4_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul4811_fu_330_p2 <= std_logic_vector(signed(tmp_cast_fu_326_p1) + signed(empty_fu_310_p2));
    mul4811_mid165_fu_380_p2 <= std_logic_vector(unsigned(p_mid155_fu_366_p2) + unsigned(ap_const_lv10_3E5));
    mul4811_mid1_fu_454_p2 <= std_logic_vector(signed(tmp_cast_mid1_fu_450_p1) + signed(select_ln66_4_fu_372_p3));
    or_ln49_fu_817_p2 <= (icmp_ln49_fu_805_p2 or icmp_ln49_5_fu_811_p2);
    or_ln80_fu_601_p2 <= (icmp_ln80_fu_537_p2 or and_ln77_fu_589_p2);
    output_r_address0 <= zext_ln102_fu_838_p1(15 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        ap_const_lv32_0 when (and_ln49_fu_823_p2(0) = '1') else 
        add4115_reg_274;

    output_r_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid155_fu_366_p0 <= p_mid155_fu_366_p00(5 - 1 downto 0);
    p_mid155_fu_366_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_2_fu_356_p2),10));
    p_mid155_fu_366_p1 <= ap_const_lv10_1B(6 - 1 downto 0);
    p_shl_fu_511_p3 <= (empty_66_fu_507_p1 & ap_const_lv2_0);
    p_shl_mid1_fu_629_p3 <= (empty_68_fu_625_p1 & ap_const_lv2_0);
    select_ln66_4_fu_372_p3 <= 
        p_mid155_fu_366_p2 when (icmp_ln69_fu_342_p2(0) = '1') else 
        empty_fu_310_p2;
    select_ln66_5_fu_404_p3 <= 
        add_ln66_2_fu_356_p2 when (icmp_ln69_fu_342_p2(0) = '1') else 
        i_reg_173;
    select_ln66_6_fu_460_p3 <= 
        mul4811_mid165_fu_380_p2 when (icmp_ln69_fu_342_p2(0) = '1') else 
        mul4811_fu_330_p2;
    select_ln66_fu_348_p3 <= 
        ap_const_lv5_1 when (icmp_ln69_fu_342_p2(0) = '1') else 
        ii_reg_196;
    select_ln69_fu_780_p3 <= 
        ap_const_lv11_1 when (icmp_ln69_reg_858(0) = '1') else 
        add_ln69_2_fu_774_p2;
    select_ln77_5_fu_557_p3 <= 
        add_ln77_1_fu_551_p2 when (icmp_ln80_fu_537_p2(0) = '1') else 
        ap_phi_mux_iv_phi_fu_234_p4;
    select_ln77_6_fu_569_p3 <= 
        ap_const_lv4_1 when (icmp_ln80_fu_537_p2(0) = '1') else 
        add_ln92_3_fu_525_p2;
    select_ln77_fu_543_p3 <= 
        ap_const_lv3_7 when (icmp_ln80_fu_537_p2(0) = '1') else 
        ap_phi_mux_v_phi_fu_256_p4;
    select_ln80_5_fu_643_p3 <= 
        indvars_iv_next37_dup_fu_595_p2 when (and_ln77_fu_589_p2(0) = '1') else 
        select_ln77_fu_543_p3;
    select_ln80_6_fu_670_p3 <= 
        add_ln92_4_fu_664_p2 when (and_ln77_fu_589_p2(0) = '1') else 
        select_ln77_6_fu_569_p3;
    select_ln80_7_fu_759_p3 <= 
        ap_const_lv4_1 when (icmp_ln80_reg_921(0) = '1') else 
        add_ln80_3_reg_957;
    select_ln80_fu_607_p3 <= 
        ap_const_lv3_7 when (or_ln80_fu_601_p2(0) = '1') else 
        ap_phi_mux_vi_phi_fu_267_p4;
        sext_ln80_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln80_5_fu_643_p3),5));

        sext_ln87_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln87_reg_947),10));

        sext_ln91_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln87_fu_678_p1),4));

    shl_ln1_fu_692_p4 <= ((add_ln92_5_fu_686_p2 & trunc_ln77_fu_565_p1) & ap_const_lv5_0);
    shl_ln_fu_735_p3 <= (add_ln87_fu_730_p2 & ap_const_lv5_0);
    sub_ln91_2_fu_637_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_629_p3) - unsigned(indvars_iv_next37_cast_mid1_fu_621_p1));
    sub_ln91_fu_519_p2 <= std_logic_vector(unsigned(p_shl_fu_511_p3) - unsigned(indvars_iv_next37_cast_fu_503_p1));
        tmp_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_320_p2),10));

        tmp_cast_mid1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_mid1_fu_444_p2),10));

    tmp_fu_320_p2 <= std_logic_vector(unsigned(ii_cast_fu_316_p1) + unsigned(ap_const_lv6_24));
    tmp_mid1_fu_444_p2 <= std_logic_vector(unsigned(ii_cast_mid1_fu_440_p1) + unsigned(ap_const_lv6_24));
    tmp_s_fu_791_p4 <= bitcast_ln49_fu_787_p1(30 downto 23);
    trunc_ln49_fu_801_p1 <= bitcast_ln49_fu_787_p1(23 - 1 downto 0);
    trunc_ln77_fu_565_p1 <= select_ln77_5_fu_557_p3(5 - 1 downto 0);
    trunc_ln87_fu_678_p1 <= select_ln80_fu_607_p3(2 - 1 downto 0);
    xor_ln66_fu_386_p2 <= (icmp_ln69_fu_342_p2 xor ap_const_lv1_1);
    xor_ln77_fu_577_p2 <= (icmp_ln80_fu_537_p2 xor ap_const_lv1_1);
    zext_ln102_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_reg_1002),64));
    zext_ln72_3_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_869),14));
    zext_ln72_4_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_869),15));
    zext_ln72_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_fu_424_p3),64));
    zext_ln77_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_5_reg_926),15));
    zext_ln87_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln87_2_fu_743_p2),64));
    zext_ln91_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_702_p2),64));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_conv2d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_we0 : OUT STD_LOGIC;
    output_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_we0 : OUT STD_LOGIC;
    output_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_4_ce0 : OUT STD_LOGIC;
    output_4_we0 : OUT STD_LOGIC;
    output_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_5_ce0 : OUT STD_LOGIC;
    output_5_we0 : OUT STD_LOGIC;
    output_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_6_ce0 : OUT STD_LOGIC;
    output_6_we0 : OUT STD_LOGIC;
    output_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_7_ce0 : OUT STD_LOGIC;
    output_7_we0 : OUT STD_LOGIC;
    output_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_8_ce0 : OUT STD_LOGIC;
    output_8_we0 : OUT STD_LOGIC;
    output_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_9_ce0 : OUT STD_LOGIC;
    output_9_we0 : OUT STD_LOGIC;
    output_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_3097_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_ce : OUT STD_LOGIC;
    grp_fu_3101_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3101_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3101_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3101_p_ce : OUT STD_LOGIC;
    grp_fu_866_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_866_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_866_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_866_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_866_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_conv2d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv9_16 : STD_LOGIC_VECTOR (8 downto 0) := "000010110";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv14_3C80 : STD_LOGIC_VECTOR (13 downto 0) := "11110010000000";
    constant ap_const_lv11_2C0 : STD_LOGIC_VECTOR (10 downto 0) := "01011000000";
    constant ap_const_lv9_1EA : STD_LOGIC_VECTOR (8 downto 0) := "111101010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_60D : STD_LOGIC_VECTOR (13 downto 0) := "00011000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv29_549E : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000101010010011110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_2_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_2_weights_ce0 : STD_LOGIC;
    signal layer_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_2_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_2_bias_ce0 : STD_LOGIC;
    signal layer_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten42_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_reg_437 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_448 : STD_LOGIC_VECTOR (2 downto 0);
    signal vi_reg_459 : STD_LOGIC_VECTOR (2 downto 0);
    signal add4320_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln71_fu_534_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln71_reg_1222 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln74_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_2_fu_638_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln71_2_reg_1235 : STD_LOGIC_VECTOR (4 downto 0);
    signal iii_mid2_fu_658_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_mid2_reg_1243 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast8_mid2_fu_666_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast8_mid2_reg_1250 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum19_fu_722_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayNo_cast_reg_1266 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ii_cast8_mid2_cast_fu_747_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_cast8_mid2_cast_reg_1270 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln77_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_reg_1275 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_fu_753_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln77_1_reg_1280 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_0_addr_reg_1285 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_1_addr_reg_1290 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_2_addr_reg_1295 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_3_addr_reg_1300 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_4_addr_reg_1305 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_5_addr_reg_1310 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_6_addr_reg_1315 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_7_addr_reg_1320 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_8_addr_reg_1325 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_9_addr_reg_1330 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid128_fu_795_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid128_reg_1335 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln83_fu_801_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_reg_1340 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state21_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln83_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1345 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1345_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1345_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_1349 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_1_fu_896_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln83_1_reg_1354 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln86_fu_963_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_reg_1359 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_3_fu_1055_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_3_reg_1364 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln86_1_fu_1122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_1_reg_1379 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state22_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln95_fu_1128_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln95_reg_1394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state24_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln86_4_fu_1133_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_4_reg_1399 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1404 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal layer_2_bias_load_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal add_reg_1474 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal add_ln77_fu_1197_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal select_ln74_fu_1208_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten82_reg_323 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten56_reg_345 : STD_LOGIC_VECTOR (10 downto 0);
    signal ii_reg_357 : STD_LOGIC_VECTOR (4 downto 0);
    signal iii_reg_368 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_add4320_ph_phi_fu_382_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_indvar_flatten42_phi_fu_419_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_iv_phi_fu_430_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_441_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v_phi_fu_452_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_vi_phi_fu_463_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_add4320_phi_fu_483_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal phi_ln105_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal newIndex_cast_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_1107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln49_fu_1180_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_523_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_529_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal mul_ln74_fu_544_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln74_fu_544_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast_fu_550_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_554_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_560_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln74_fu_544_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln71_1_fu_590_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln74_1_fu_600_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln74_1_fu_600_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln74_1_fu_600_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln77_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln71_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_582_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln71_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_34_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_646_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast_mid1_fu_674_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid1_fu_678_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_mid1_fu_684_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln71_1_fu_606_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid174_fu_614_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_564_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid152_fu_688_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln71_3_fu_694_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_35_fu_702_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln77_2_fu_718_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_mid_fu_710_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_732_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1215_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_732_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_mid116_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_mid_fu_783_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_mid_fu_775_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_mid126_fu_791_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln86_fu_807_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_28_fu_811_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_824_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_816_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_832_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next34_fu_842_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_30_fu_852_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_856_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_fu_848_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_2_fu_890_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln83_1_fu_908_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_fu_864_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_29_fu_836_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln89_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln83_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_882_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln83_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next34_dup_fu_951_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln86_1_fu_971_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid1_fu_975_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_mid1_fu_988_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_mid1_fu_980_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_mid1_fu_996_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next34_mid1_fu_1006_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_32_fu_1016_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_1020_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_mid1_fu_1012_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_1_fu_1028_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_2_fu_918_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid13_fu_1000_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln83_3_fu_926_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln86_2_fu_1042_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln95_fu_1067_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln95_fu_1071_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_1_fu_1034_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_1_fu_912_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_1_fu_1075_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_2_fu_1081_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal vi_cast_fu_1063_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln83_fu_904_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_2_fu_1095_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln86_fu_1050_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_fu_1101_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_1087_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln98_1_fu_1112_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal bitcast_ln49_fu_1139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_1152_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_1_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_1_fu_1202_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1215_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1215_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_517_ce : STD_LOGIC;
    signal grp_fu_523_ce : STD_LOGIC;
    signal grp_fu_529_ce : STD_LOGIC;
    signal grp_fu_529_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_732_ap_start : STD_LOGIC;
    signal grp_fu_732_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_state23_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_1215_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln74_1_fu_600_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln74_fu_544_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_condition_395 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mul_5ns_6ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component infer_urem_14ns_12ns_14_18_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component infer_mul_mul_14ns_16ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component infer_conv2d_1_layer_2_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_conv2d_1_layer_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_2_weights_U : component infer_conv2d_1_layer_2_weights
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_2_weights_address0,
        ce0 => layer_2_weights_ce0,
        q0 => layer_2_weights_q0);

    layer_2_bias_U : component infer_conv2d_1_layer_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_2_bias_address0,
        ce0 => layer_2_bias_ce0,
        q0 => layer_2_bias_q0);

    mul_5ns_6ns_9_1_1_U20 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln74_fu_544_p0,
        din1 => mul_ln74_fu_544_p1,
        dout => mul_ln74_fu_544_p2);

    mul_5ns_6ns_9_1_1_U21 : component infer_mul_5ns_6ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln74_1_fu_600_p0,
        din1 => mul_ln74_1_fu_600_p1,
        dout => mul_ln74_1_fu_600_p2);

    urem_14ns_12ns_14_18_seq_1_U22 : component infer_urem_14ns_12ns_14_18_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_732_ap_start,
        done => grp_fu_732_ap_done,
        din0 => sum19_fu_722_p2,
        din1 => grp_fu_732_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_732_p2);

    mul_mul_14ns_16ns_29_4_1_U23 : component infer_mul_mul_14ns_16ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1215_p0,
        din1 => grp_fu_1215_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1215_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4320_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                add4320_reg_470 <= ap_phi_mux_add4320_ph_phi_fu_382_p20;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln83_reg_1345_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                add4320_reg_470 <= grp_fu_3097_p_dout0;
            end if; 
        end if;
    end process;

    i_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_reg_334 <= select_ln71_2_reg_1235;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_334 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    ii_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                ii_reg_357 <= ii_cast8_mid2_reg_1250;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_357 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    iii_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                iii_reg_368 <= add_ln77_fu_1197_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_368 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten42_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar_flatten42_reg_415 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten42_reg_415 <= add_ln83_reg_1340;
            end if; 
        end if;
    end process;

    indvar_flatten56_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                indvar_flatten56_reg_345 <= select_ln74_fu_1208_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten56_reg_345 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten82_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                indvar_flatten82_reg_323 <= add_ln71_reg_1222;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten82_reg_323 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar_flatten_reg_437 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_437 <= select_ln86_4_reg_1399;
            end if; 
        end if;
    end process;

    iv_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                iv_reg_426 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                iv_reg_426 <= select_ln83_1_reg_1354;
            end if; 
        end if;
    end process;

    phi_ln105_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                if ((ap_const_boolean_1 = ap_condition_395)) then 
                    phi_ln105_reg_491 <= output_9_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_8)) then 
                    phi_ln105_reg_491 <= output_8_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_7)) then 
                    phi_ln105_reg_491 <= output_7_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_6)) then 
                    phi_ln105_reg_491 <= output_6_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_5)) then 
                    phi_ln105_reg_491 <= output_5_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_4)) then 
                    phi_ln105_reg_491 <= output_4_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_3)) then 
                    phi_ln105_reg_491 <= output_3_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_2)) then 
                    phi_ln105_reg_491 <= output_2_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_1)) then 
                    phi_ln105_reg_491 <= output_1_q0;
                elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_0)) then 
                    phi_ln105_reg_491 <= output_0_q0;
                end if;
            end if; 
        end if;
    end process;

    v_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                v_reg_448 <= ap_const_lv3_7;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                v_reg_448 <= select_ln86_3_reg_1364;
            end if; 
        end if;
    end process;

    vi_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                vi_reg_459 <= ap_const_lv3_7;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                vi_reg_459 <= add_ln95_reg_1394;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln71_reg_1222 <= add_ln71_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln83_reg_1340 <= add_ln83_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_870_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln86_1_reg_1379 <= add_ln86_1_fu_1122_p2;
                icmp_ln86_reg_1349 <= icmp_ln86_fu_876_p2;
                select_ln86_reg_1359 <= select_ln86_fu_963_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln95_reg_1394 <= add_ln95_fu_1128_p2;
                select_ln86_4_reg_1399 <= select_ln86_4_fu_1133_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                add_reg_1474 <= grp_fu_3097_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                arrayNo_cast_reg_1266 <= grp_fu_1215_p2(28 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_570_p2 = ap_const_lv1_0))) then
                icmp_ln74_reg_1230 <= icmp_ln74_fu_576_p2;
                ii_cast8_mid2_reg_1250 <= ii_cast8_mid2_fu_666_p3;
                iii_mid2_reg_1243 <= iii_mid2_fu_658_p3;
                select_ln71_2_reg_1235 <= select_ln71_2_fu_638_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln83_reg_1345 <= icmp_ln83_fu_870_p2;
                icmp_ln83_reg_1345_pp0_iter1_reg <= icmp_ln83_reg_1345;
                icmp_ln83_reg_1345_pp0_iter2_reg <= icmp_ln83_reg_1345_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    ii_cast8_mid2_cast_reg_1270(4 downto 0) <= ii_cast8_mid2_cast_fu_747_p1(4 downto 0);
                output_0_addr_reg_1285 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_1_addr_reg_1290 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_2_addr_reg_1295 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_3_addr_reg_1300 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_4_addr_reg_1305 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_5_addr_reg_1310 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_6_addr_reg_1315 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_7_addr_reg_1320 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_8_addr_reg_1325 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                output_9_addr_reg_1330 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
                    zext_ln77_1_reg_1280(5 downto 0) <= zext_ln77_1_fu_753_p1(5 downto 0);
                    zext_ln77_reg_1275(5 downto 0) <= zext_ln77_fu_750_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                layer_2_bias_load_reg_1419 <= layer_2_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_reg_1404 <= grp_fu_3101_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    p_mid128_reg_1335(9 downto 3) <= p_mid128_fu_795_p2(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_870_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln83_1_reg_1354 <= select_ln83_1_fu_896_p3;
                select_ln86_3_reg_1364 <= select_ln86_3_fu_1055_p3;
            end if;
        end if;
    end process;
    ii_cast8_mid2_cast_reg_1270(9 downto 5) <= "00000";
    zext_ln77_reg_1275(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln77_1_reg_1280(8 downto 6) <= "000";
    p_mid128_reg_1335(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_570_p2, ap_enable_reg_pp0_iter0, icmp_ln83_fu_870_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_570_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_fu_870_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_fu_870_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln71_1_fu_590_p2 <= std_logic_vector(unsigned(i_reg_334) + unsigned(ap_const_lv5_1));
    add_ln71_fu_534_p2 <= std_logic_vector(unsigned(indvar_flatten82_reg_323) + unsigned(ap_const_lv14_1));
    add_ln74_1_fu_1202_p2 <= std_logic_vector(unsigned(indvar_flatten56_reg_345) + unsigned(ap_const_lv11_1));
    add_ln74_fu_646_p2 <= std_logic_vector(unsigned(select_ln71_fu_582_p3) + unsigned(ap_const_lv5_1));
    add_ln77_fu_1197_p2 <= std_logic_vector(unsigned(iii_mid2_reg_1243) + unsigned(ap_const_lv6_1));
    add_ln83_1_fu_912_p2 <= std_logic_vector(unsigned(trunc_ln83_1_fu_908_p1) + unsigned(ap_const_lv4_1));
    add_ln83_2_fu_890_p2 <= std_logic_vector(unsigned(ap_phi_mux_iv_phi_fu_430_p4) + unsigned(ap_const_lv64_1));
    add_ln83_fu_801_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten42_phi_fu_419_p4) + unsigned(ap_const_lv4_1));
    add_ln86_1_fu_1122_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_441_p4) + unsigned(ap_const_lv4_1));
    add_ln86_fu_1050_p2 <= std_logic_vector(unsigned(select_ln86_2_fu_1042_p3) + unsigned(ii_cast8_mid2_cast_reg_1270));
    add_ln95_1_fu_1075_p2 <= std_logic_vector(signed(sext_ln95_fu_1071_p1) + signed(select_ln86_1_fu_1034_p3));
    add_ln95_2_fu_1081_p2 <= std_logic_vector(unsigned(add_ln83_1_fu_912_p2) + unsigned(add_ln95_1_fu_1075_p2));
    add_ln95_fu_1128_p2 <= std_logic_vector(signed(select_ln86_reg_1359) + signed(ap_const_lv3_1));
    add_ln98_1_fu_1112_p2 <= std_logic_vector(unsigned(shl_ln_fu_1087_p3) + unsigned(zext_ln77_1_reg_1280));
    add_ln98_2_fu_1095_p2 <= std_logic_vector(signed(vi_cast_fu_1063_p1) + signed(trunc_ln83_fu_904_p1));
    add_ln98_fu_1101_p2 <= std_logic_vector(unsigned(add_ln98_2_fu_1095_p2) + unsigned(add_ln86_fu_1050_p2));
    and_ln49_fu_1174_p2 <= (or_ln49_fu_1168_p2 and grp_fu_866_p_dout0);
    and_ln71_fu_632_p2 <= (xor_ln71_fu_620_p2 and icmp_ln77_fu_626_p2);
    and_ln83_fu_945_p2 <= (xor_ln83_fu_933_p2 and icmp_ln89_fu_939_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state31 <= ap_CS_fsm(24);
    ap_CS_fsm_state32 <= ap_CS_fsm(25);
    ap_CS_fsm_state33 <= ap_CS_fsm(26);
    ap_CS_fsm_state34 <= ap_CS_fsm(27);
    ap_CS_fsm_state38 <= ap_CS_fsm(31);
    ap_CS_fsm_state39 <= ap_CS_fsm(32);
    ap_CS_fsm_state40 <= ap_CS_fsm(33);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_395_assign_proc : process(arrayNo_cast_reg_1266)
    begin
                ap_condition_395 <= ((arrayNo_cast_reg_1266 = ap_const_lv4_9) or ((arrayNo_cast_reg_1266 = ap_const_lv4_A) or ((arrayNo_cast_reg_1266 = ap_const_lv4_B) or ((arrayNo_cast_reg_1266 = ap_const_lv4_C) or ((arrayNo_cast_reg_1266 = ap_const_lv4_D) or ((arrayNo_cast_reg_1266 = ap_const_lv4_E) or (arrayNo_cast_reg_1266 = ap_const_lv4_F)))))));
    end process;


    ap_condition_pp0_exit_iter0_state21_assign_proc : process(icmp_ln83_fu_870_p2)
    begin
        if ((icmp_ln83_fu_870_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_570_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_570_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add4320_ph_phi_fu_382_p20_assign_proc : process(output_0_q0, output_1_q0, output_2_q0, output_3_q0, output_4_q0, output_5_q0, output_6_q0, output_7_q0, output_8_q0, output_9_q0, arrayNo_cast_reg_1266, ap_CS_fsm_state20, ap_condition_395)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
            if ((ap_const_boolean_1 = ap_condition_395)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_9_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_8)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_8_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_7)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_7_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_6)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_6_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_5)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_5_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_4)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_4_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_3)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_3_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_2)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_2_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_1)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_1_q0;
            elsif ((arrayNo_cast_reg_1266 = ap_const_lv4_0)) then 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= output_0_q0;
            else 
                ap_phi_mux_add4320_ph_phi_fu_382_p20 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_add4320_ph_phi_fu_382_p20 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_add4320_phi_fu_483_p4_assign_proc : process(add4320_reg_470, icmp_ln83_reg_1345_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, grp_fu_3097_p_dout0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln83_reg_1345_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_add4320_phi_fu_483_p4 <= grp_fu_3097_p_dout0;
        else 
            ap_phi_mux_add4320_phi_fu_483_p4 <= add4320_reg_470;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten42_phi_fu_419_p4_assign_proc : process(indvar_flatten42_reg_415, add_ln83_reg_1340, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1345, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten42_phi_fu_419_p4 <= add_ln83_reg_1340;
        else 
            ap_phi_mux_indvar_flatten42_phi_fu_419_p4 <= indvar_flatten42_reg_415;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_441_p4_assign_proc : process(indvar_flatten_reg_437, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1345, select_ln86_4_reg_1399, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_441_p4 <= select_ln86_4_reg_1399;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_441_p4 <= indvar_flatten_reg_437;
        end if; 
    end process;


    ap_phi_mux_iv_phi_fu_430_p4_assign_proc : process(iv_reg_426, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1345, select_ln83_1_reg_1354, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_iv_phi_fu_430_p4 <= select_ln83_1_reg_1354;
        else 
            ap_phi_mux_iv_phi_fu_430_p4 <= iv_reg_426;
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_452_p4_assign_proc : process(v_reg_448, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1345, select_ln86_3_reg_1364, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_v_phi_fu_452_p4 <= select_ln86_3_reg_1364;
        else 
            ap_phi_mux_v_phi_fu_452_p4 <= v_reg_448;
        end if; 
    end process;


    ap_phi_mux_vi_phi_fu_463_p4_assign_proc : process(vi_reg_459, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_1345, add_ln95_reg_1394, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln83_reg_1345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_vi_phi_fu_463_p4 <= add_ln95_reg_1394;
        else 
            ap_phi_mux_vi_phi_fu_463_p4 <= vi_reg_459;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_570_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_570_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_fu_1139_p1 <= add_reg_1474;
    empty_28_fu_811_p2 <= std_logic_vector(signed(sext_ln86_fu_807_p1) + signed(select_ln71_2_reg_1235));
    empty_29_fu_836_p2 <= std_logic_vector(unsigned(p_shl1_fu_816_p3) - unsigned(p_shl2_cast_fu_832_p1));
    empty_30_fu_852_p1 <= indvars_iv_next34_fu_842_p2(2 - 1 downto 0);
    empty_32_fu_1016_p1 <= indvars_iv_next34_mid1_fu_1006_p2(2 - 1 downto 0);
    empty_34_fu_652_p2 <= (icmp_ln74_fu_576_p2 or and_ln71_fu_632_p2);
    empty_35_fu_702_p3 <= 
        p_mid152_fu_688_p2 when (and_ln71_fu_632_p2(0) = '1') else 
        select_ln71_3_fu_694_p3;
    empty_fu_564_p2 <= std_logic_vector(signed(tmp_cast_fu_560_p1) + signed(mul_ln74_fu_544_p2));
    grp_fu_1215_p0 <= grp_fu_1215_p00(14 - 1 downto 0);
    grp_fu_1215_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum19_fu_722_p2),29));
    grp_fu_1215_p1 <= ap_const_lv29_549E(16 - 1 downto 0);
    grp_fu_3097_p_ce <= ap_const_logic_1;
    grp_fu_3097_p_din0 <= grp_fu_517_p0;
    grp_fu_3097_p_din1 <= grp_fu_517_p1;
    grp_fu_3097_p_opcode <= ap_const_lv2_0;
    grp_fu_3101_p_ce <= ap_const_logic_1;
    grp_fu_3101_p_din0 <= input_r_q0;
    grp_fu_3101_p_din1 <= layer_2_weights_q0;
    grp_fu_517_ce <= ap_const_logic_1;

    grp_fu_517_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_phi_mux_add4320_phi_fu_483_p4, ap_block_pp0_stage1, phi_ln105_reg_491, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_517_p0 <= phi_ln105_reg_491;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_517_p0 <= ap_phi_mux_add4320_phi_fu_483_p4;
        else 
            grp_fu_517_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_517_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, mul_reg_1404, layer_2_bias_load_reg_1419, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_517_p1 <= layer_2_bias_load_reg_1419;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_517_p1 <= mul_reg_1404;
        else 
            grp_fu_517_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_517_p2 <= grp_fu_3097_p_dout0;
    grp_fu_523_ce <= ap_const_logic_1;
    grp_fu_523_p0 <= input_r_q0;
    grp_fu_523_p1 <= layer_2_weights_q0;
    grp_fu_523_p2 <= grp_fu_3101_p_dout0;
    grp_fu_529_ce <= ap_const_logic_1;
    grp_fu_529_opcode <= ap_const_lv5_2;
    grp_fu_529_p0 <= add_reg_1474;
    grp_fu_529_p1 <= ap_const_lv32_0;
    grp_fu_529_p2 <= grp_fu_866_p_dout0;

    grp_fu_732_ap_start_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_570_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_570_p2 = ap_const_lv1_0))) then 
            grp_fu_732_ap_start <= ap_const_logic_1;
        else 
            grp_fu_732_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_732_p1 <= ap_const_lv14_60D(12 - 1 downto 0);
    grp_fu_866_p_ce <= ap_const_logic_1;
    grp_fu_866_p_din0 <= add_reg_1474;
    grp_fu_866_p_din1 <= ap_const_lv32_0;
    grp_fu_866_p_opcode <= ap_const_lv5_2;
    icmp_ln49_1_fu_1162_p2 <= "1" when (trunc_ln49_fu_1152_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_1156_p2 <= "0" when (tmp_s_fu_1142_p4 = ap_const_lv8_FF) else "1";
    icmp_ln71_fu_570_p2 <= "1" when (indvar_flatten82_reg_323 = ap_const_lv14_3C80) else "0";
    icmp_ln74_fu_576_p2 <= "1" when (indvar_flatten56_reg_345 = ap_const_lv11_2C0) else "0";
    icmp_ln77_fu_626_p2 <= "1" when (iii_reg_368 = ap_const_lv6_20) else "0";
    icmp_ln83_fu_870_p2 <= "1" when (ap_phi_mux_indvar_flatten42_phi_fu_419_p4 = ap_const_lv4_9) else "0";
    icmp_ln86_fu_876_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_441_p4 = ap_const_lv4_9) else "0";
    icmp_ln89_fu_939_p2 <= "1" when (ap_phi_mux_vi_phi_fu_463_p4 = ap_const_lv3_2) else "0";
    ii_cast8_mid2_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_cast8_mid2_reg_1250),10));
    ii_cast8_mid2_fu_666_p3 <= 
        add_ln74_fu_646_p2 when (and_ln71_fu_632_p2(0) = '1') else 
        select_ln71_fu_582_p3;
    ii_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_357),6));
    ii_cast_mid1_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_646_p2),6));
    iii_mid2_fu_658_p3 <= 
        ap_const_lv6_0 when (empty_34_fu_652_p2(0) = '1') else 
        iii_reg_368;
    indvars_iv_next34_cast_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_fu_842_p2),4));
    indvars_iv_next34_cast_mid1_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_mid1_fu_1006_p2),4));
    indvars_iv_next34_dup_fu_951_p2 <= std_logic_vector(unsigned(select_ln83_fu_882_p3) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_fu_842_p2 <= std_logic_vector(signed(ap_phi_mux_v_phi_fu_452_p4) + signed(ap_const_lv3_1));
    indvars_iv_next34_mid1_fu_1006_p2 <= std_logic_vector(unsigned(select_ln83_fu_882_p3) + unsigned(ap_const_lv3_2));
    input_r_address0 <= zext_ln98_fu_1107_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_2_bias_address0 <= zext_ln77_reg_1275(5 - 1 downto 0);

    layer_2_bias_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_2_bias_ce0 <= ap_const_logic_1;
        else 
            layer_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_2_weights_address0 <= zext_ln98_1_fu_1117_p1(9 - 1 downto 0);

    layer_2_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer_2_weights_ce0 <= ap_const_logic_1;
        else 
            layer_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln74_1_fu_600_p0 <= mul_ln74_1_fu_600_p00(5 - 1 downto 0);
    mul_ln74_1_fu_600_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_1_fu_590_p2),9));
    mul_ln74_1_fu_600_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    mul_ln74_fu_544_p0 <= mul_ln74_fu_544_p00(5 - 1 downto 0);
    mul_ln74_fu_544_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_334),9));
    mul_ln74_fu_544_p1 <= ap_const_lv9_16(6 - 1 downto 0);
    newIndex_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_732_p2),64));
    or_ln49_fu_1168_p2 <= (icmp_ln49_fu_1156_p2 or icmp_ln49_1_fu_1162_p2);
    or_ln86_fu_957_p2 <= (icmp_ln86_fu_876_p2 or and_ln83_fu_945_p2);

    output_0_address0_assign_proc : process(ap_CS_fsm_state19, output_0_addr_reg_1285, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_0_address0 <= output_0_addr_reg_1285;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_0_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_0_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_0_d0 <= add4320_reg_470;
        else 
            output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_0)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_0)))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(ap_CS_fsm_state19, output_1_addr_reg_1290, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_1_address0 <= output_1_addr_reg_1290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_1_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_1_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_1_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_1_d0 <= add4320_reg_470;
        else 
            output_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_1_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_1)))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_address0_assign_proc : process(ap_CS_fsm_state19, output_2_addr_reg_1295, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_2_address0 <= output_2_addr_reg_1295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_2_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_2_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_2_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_2_d0 <= add4320_reg_470;
        else 
            output_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_2_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_2)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_2)))) then 
            output_2_we0 <= ap_const_logic_1;
        else 
            output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_address0_assign_proc : process(ap_CS_fsm_state19, output_3_addr_reg_1300, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_3_address0 <= output_3_addr_reg_1300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_3_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_3_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_3_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_3_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_3_d0 <= add4320_reg_470;
        else 
            output_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_3_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_3)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_3)))) then 
            output_3_we0 <= ap_const_logic_1;
        else 
            output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_4_address0_assign_proc : process(ap_CS_fsm_state19, output_4_addr_reg_1305, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_4_address0 <= output_4_addr_reg_1305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_4_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_4_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_4_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_4_ce0 <= ap_const_logic_1;
        else 
            output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_4_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_4_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_4_d0 <= add4320_reg_470;
        else 
            output_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_4_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_4)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_4)))) then 
            output_4_we0 <= ap_const_logic_1;
        else 
            output_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_5_address0_assign_proc : process(ap_CS_fsm_state19, output_5_addr_reg_1310, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_5_address0 <= output_5_addr_reg_1310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_5_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_5_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_5_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_5_ce0 <= ap_const_logic_1;
        else 
            output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_5_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_5_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_5_d0 <= add4320_reg_470;
        else 
            output_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_5_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_5)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_5)))) then 
            output_5_we0 <= ap_const_logic_1;
        else 
            output_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_6_address0_assign_proc : process(ap_CS_fsm_state19, output_6_addr_reg_1315, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_6_address0 <= output_6_addr_reg_1315;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_6_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_6_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_6_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_6_ce0 <= ap_const_logic_1;
        else 
            output_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_6_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_6_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_6_d0 <= add4320_reg_470;
        else 
            output_6_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_6_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_6)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_6)))) then 
            output_6_we0 <= ap_const_logic_1;
        else 
            output_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_7_address0_assign_proc : process(ap_CS_fsm_state19, output_7_addr_reg_1320, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_7_address0 <= output_7_addr_reg_1320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_7_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_7_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_7_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_7_ce0 <= ap_const_logic_1;
        else 
            output_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_7_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_7_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_7_d0 <= add4320_reg_470;
        else 
            output_7_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_7_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_7)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_7)))) then 
            output_7_we0 <= ap_const_logic_1;
        else 
            output_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_8_address0_assign_proc : process(ap_CS_fsm_state19, output_8_addr_reg_1325, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_8_address0 <= output_8_addr_reg_1325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_8_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_8_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_8_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_8_ce0 <= ap_const_logic_1;
        else 
            output_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_8_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_8_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_8_d0 <= add4320_reg_470;
        else 
            output_8_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_8_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (arrayNo_cast_reg_1266 = ap_const_lv4_8)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (arrayNo_cast_reg_1266 = ap_const_lv4_8)))) then 
            output_8_we0 <= ap_const_logic_1;
        else 
            output_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_9_address0_assign_proc : process(ap_CS_fsm_state19, output_9_addr_reg_1330, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, newIndex_cast_fu_756_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_9_address0 <= output_9_addr_reg_1330;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_9_address0 <= newIndex_cast_fu_756_p1(11 - 1 downto 0);
        else 
            output_9_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_9_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_9_ce0 <= ap_const_logic_1;
        else 
            output_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_9_d0_assign_proc : process(add4320_reg_470, ap_CS_fsm_state31, ap_CS_fsm_state40, select_ln49_fu_1180_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_9_d0 <= select_ln49_fu_1180_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_9_d0 <= add4320_reg_470;
        else 
            output_9_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_9_we0_assign_proc : process(arrayNo_cast_reg_1266, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and ((arrayNo_cast_reg_1266 = ap_const_lv4_9) or ((arrayNo_cast_reg_1266 = ap_const_lv4_A) or ((arrayNo_cast_reg_1266 = ap_const_lv4_B) or ((arrayNo_cast_reg_1266 = ap_const_lv4_C) or ((arrayNo_cast_reg_1266 = ap_const_lv4_D) or ((arrayNo_cast_reg_1266 = ap_const_lv4_E) or (arrayNo_cast_reg_1266 = ap_const_lv4_F)))))))) or ((ap_const_logic_1 = ap_CS_fsm_state31) and ((arrayNo_cast_reg_1266 = ap_const_lv4_9) or ((arrayNo_cast_reg_1266 = ap_const_lv4_A) or ((arrayNo_cast_reg_1266 = ap_const_lv4_B) or ((arrayNo_cast_reg_1266 = ap_const_lv4_C) or ((arrayNo_cast_reg_1266 = ap_const_lv4_D) or ((arrayNo_cast_reg_1266 = ap_const_lv4_E) or (arrayNo_cast_reg_1266 = ap_const_lv4_F)))))))))) then 
            output_9_we0 <= ap_const_logic_1;
        else 
            output_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid116_fu_770_p2 <= std_logic_vector(unsigned(select_ln71_2_reg_1235) + unsigned(ap_const_lv5_1F));
    p_mid128_fu_795_p2 <= std_logic_vector(unsigned(p_shl1_mid_fu_775_p3) - unsigned(p_shl2_cast_mid126_fu_791_p1));
    p_mid13_fu_1000_p2 <= std_logic_vector(unsigned(p_shl1_mid1_fu_980_p3) - unsigned(p_shl2_cast_mid1_fu_996_p1));
    p_mid152_fu_688_p2 <= std_logic_vector(signed(tmp_cast_mid1_fu_684_p1) + signed(select_ln71_1_fu_606_p3));
    p_mid174_fu_614_p2 <= std_logic_vector(unsigned(mul_ln74_1_fu_600_p2) + unsigned(ap_const_lv9_1EA));
    p_mid1_fu_975_p2 <= std_logic_vector(signed(sext_ln86_1_fu_971_p1) + signed(select_ln71_2_reg_1235));
    p_mid_fu_710_p3 <= (empty_35_fu_702_p3 & ap_const_lv5_0);
    p_shl1_fu_816_p3 <= (empty_28_fu_811_p2 & ap_const_lv5_0);
    p_shl1_mid1_fu_980_p3 <= (p_mid1_fu_975_p2 & ap_const_lv5_0);
    p_shl1_mid_fu_775_p3 <= (p_mid116_fu_770_p2 & ap_const_lv5_0);
    p_shl2_cast_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_824_p3),10));
    p_shl2_cast_mid126_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid_fu_783_p3),10));
    p_shl2_cast_mid1_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_988_p3),10));
    p_shl2_fu_824_p3 <= (empty_28_fu_811_p2 & ap_const_lv3_0);
    p_shl2_mid1_fu_988_p3 <= (p_mid1_fu_975_p2 & ap_const_lv3_0);
    p_shl2_mid_fu_783_p3 <= (p_mid116_fu_770_p2 & ap_const_lv3_0);
    p_shl_fu_856_p3 <= (empty_30_fu_852_p1 & ap_const_lv2_0);
    p_shl_mid1_fu_1020_p3 <= (empty_32_fu_1016_p1 & ap_const_lv2_0);
    select_ln49_fu_1180_p3 <= 
        add_reg_1474 when (and_ln49_fu_1174_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln71_1_fu_606_p3 <= 
        mul_ln74_1_fu_600_p2 when (icmp_ln74_fu_576_p2(0) = '1') else 
        mul_ln74_fu_544_p2;
    select_ln71_2_fu_638_p3 <= 
        add_ln71_1_fu_590_p2 when (icmp_ln74_fu_576_p2(0) = '1') else 
        i_reg_334;
    select_ln71_3_fu_694_p3 <= 
        p_mid174_fu_614_p2 when (icmp_ln74_fu_576_p2(0) = '1') else 
        empty_fu_564_p2;
    select_ln71_fu_582_p3 <= 
        ap_const_lv5_1 when (icmp_ln74_fu_576_p2(0) = '1') else 
        ii_reg_357;
    select_ln74_fu_1208_p3 <= 
        ap_const_lv11_1 when (icmp_ln74_reg_1230(0) = '1') else 
        add_ln74_1_fu_1202_p2;
    select_ln83_1_fu_896_p3 <= 
        add_ln83_2_fu_890_p2 when (icmp_ln86_fu_876_p2(0) = '1') else 
        ap_phi_mux_iv_phi_fu_430_p4;
    select_ln83_2_fu_918_p3 <= 
        ap_const_lv4_0 when (icmp_ln86_fu_876_p2(0) = '1') else 
        sub_ln94_fu_864_p2;
    select_ln83_3_fu_926_p3 <= 
        p_mid128_reg_1335 when (icmp_ln86_fu_876_p2(0) = '1') else 
        empty_29_fu_836_p2;
    select_ln83_fu_882_p3 <= 
        ap_const_lv3_7 when (icmp_ln86_fu_876_p2(0) = '1') else 
        ap_phi_mux_v_phi_fu_452_p4;
    select_ln86_1_fu_1034_p3 <= 
        sub_ln94_1_fu_1028_p2 when (and_ln83_fu_945_p2(0) = '1') else 
        select_ln83_2_fu_918_p3;
    select_ln86_2_fu_1042_p3 <= 
        p_mid13_fu_1000_p2 when (and_ln83_fu_945_p2(0) = '1') else 
        select_ln83_3_fu_926_p3;
    select_ln86_3_fu_1055_p3 <= 
        indvars_iv_next34_dup_fu_951_p2 when (and_ln83_fu_945_p2(0) = '1') else 
        select_ln83_fu_882_p3;
    select_ln86_4_fu_1133_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_reg_1349(0) = '1') else 
        add_ln86_1_reg_1379;
    select_ln86_fu_963_p3 <= 
        ap_const_lv3_7 when (or_ln86_fu_957_p2(0) = '1') else 
        ap_phi_mux_vi_phi_fu_463_p4;
        sext_ln86_1_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_next34_dup_fu_951_p2),5));

        sext_ln86_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_v_phi_fu_452_p4),5));

        sext_ln95_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln95_fu_1067_p1),4));

    shl_ln_fu_1087_p3 <= (add_ln95_2_fu_1081_p2 & ap_const_lv5_0);
    sub_ln94_1_fu_1028_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_1020_p3) - unsigned(indvars_iv_next34_cast_mid1_fu_1012_p1));
    sub_ln94_fu_864_p2 <= std_logic_vector(unsigned(p_shl_fu_856_p3) - unsigned(indvars_iv_next34_cast_fu_848_p1));
    sum19_fu_722_p2 <= std_logic_vector(unsigned(zext_ln77_2_fu_718_p1) + unsigned(p_mid_fu_710_p3));
        tmp_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_554_p2),9));

        tmp_cast_mid1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_mid1_fu_678_p2),9));

    tmp_fu_554_p2 <= std_logic_vector(unsigned(ii_cast_fu_550_p1) + unsigned(ap_const_lv6_29));
    tmp_mid1_fu_678_p2 <= std_logic_vector(unsigned(ii_cast_mid1_fu_674_p1) + unsigned(ap_const_lv6_29));
    tmp_s_fu_1142_p4 <= bitcast_ln49_fu_1139_p1(30 downto 23);
    trunc_ln49_fu_1152_p1 <= bitcast_ln49_fu_1139_p1(23 - 1 downto 0);
    trunc_ln83_1_fu_908_p1 <= select_ln83_1_fu_896_p3(4 - 1 downto 0);
    trunc_ln83_fu_904_p1 <= select_ln83_1_fu_896_p3(10 - 1 downto 0);
    trunc_ln95_fu_1067_p1 <= select_ln86_fu_963_p3(2 - 1 downto 0);
        vi_cast_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln86_fu_963_p3),10));

    xor_ln71_fu_620_p2 <= (icmp_ln74_fu_576_p2 xor ap_const_lv1_1);
    xor_ln83_fu_933_p2 <= (icmp_ln86_fu_876_p2 xor ap_const_lv1_1);
    zext_ln77_1_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_1243),9));
    zext_ln77_2_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_fu_658_p3),14));
    zext_ln77_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_1243),64));
    zext_ln98_1_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_1_fu_1112_p2),64));
    zext_ln98_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_1101_p2),64));
end behav;

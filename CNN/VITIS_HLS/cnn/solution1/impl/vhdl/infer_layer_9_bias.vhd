-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_9_bias_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_9_bias_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10110111011100000001101001110100", 
    1 => "10111100100001011111111010101110", 
    2 => "10111011110100010111110110010100", 
    3 => "00111101001110100100110001100001", 
    4 => "00111101001010101110011101001001", 
    5 => "10111011100110111011110110100110", 
    6 => "00111101100011000100110000100010", 
    7 => "00000000000000000000000000000000", 
    8 => "10111100011111000011011101111111", 
    9 => "00000000000000000000000000000000", 
    10 => "10111101000001100011000000011110", 
    11 => "00000000000000000000000000000000", 
    12 => "00111100111001010100101111001110", 
    13 => "00111100010100010111001110110101", 
    14 => "00111101000011101001011100110100", 
    15 => "00000000000000000000000000000000", 
    16 => "10111010011001000011100101100011", 
    17 => "00111101001111111010011011100111", 
    18 => "10111100101001000000000001100110", 
    19 => "00111100111000000111000110011000", 
    20 => "10111100101110111101101011100000", 
    21 => "00111100101101001100000011101011", 
    22 => "10111011110000100001100111000100", 
    23 => "00000000000000000000000000000000", 
    24 => "10111100101110000110011010000011", 
    25 => "00111100100110110000100110010010", 
    26 => "10111100001011000110010010011111", 
    27 => "00000000000000000000000000000000", 
    28 => "10111100100000010000101100101101", 
    29 => "10111100010010010100001110111101", 
    30 => "00111101001111000010101001001001", 
    31 => "00111100110001000101111101011010", 
    32 => "10111100010010111000011001001010", 
    33 => "00111101010100100011100010000000", 
    34 => "10111100000000110010011101001110", 
    35 => "10111010011110001000011001000101", 
    36 => "00111101011110110111000100111011", 
    37 => "10111100100110000011000111001011", 
    38 => "00111100000100010111100001101101", 
    39 => "10111100100001001110001000101011", 
    40 => "00111101001111000101111010110110", 
    41 => "00111100100010100110100111011001", 
    42 => "10111100000111010110111111011110", 
    43 => "00000000000000000000000000000000", 
    44 => "10111100100001000110111000111011", 
    45 => "10111100110000110000001000110010", 
    46 => "00111101000110110100100011001001", 
    47 => "00000000000000000000000000000000", 
    48 => "10111011101101011110110010101110", 
    49 => "10111100100001000011000110101110", 
    50 => "10111010101101000001111001100011", 
    51 => "00111011100110000101101100001011", 
    52 => "00000000000000000000000000000000", 
    53 => "00111101100011110101110001111101", 
    54 => "00000000000000000000000000000000", 
    55 => "00111100000111111010100010000001", 
    56 => "10111011101111010011100111110010", 
    57 => "00000000000000000000000000000000", 
    58 => "00111011001000010101101010100100", 
    59 => "00111101101001010011101011001100", 
    60 => "10111101011000101000001100000000", 
    61 => "10111100000011010001010111111010", 
    62 => "00111010111011001000010010000101", 
    63 => "10111100100100101000101110010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_9_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_9_bias is
    component infer_layer_9_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_9_bias_rom_U :  component infer_layer_9_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



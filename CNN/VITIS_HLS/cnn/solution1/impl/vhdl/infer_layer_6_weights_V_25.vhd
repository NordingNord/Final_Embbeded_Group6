-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_25_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_25_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110111010100100", 1 => "0000000110010100", 2 => "1101100111000010", 
    3 => "1111101001001110", 4 => "0001000110010110", 5 => "0001010011100110", 
    6 => "1101011101010000", 7 => "0001000111000101", 8 => "0001100001100110", 
    9 => "0000001010111100", 10 => "1110011000010110", 11 => "1110111111101111", 
    12 => "1100010011001110", 13 => "1100011011010101", 14 => "1110101001000011", 
    15 => "0000110000100011", 16 => "1110100001111011", 17 => "1111010111101111", 
    18 => "1111000011111110", 19 => "1111010111110010", 20 => "0001100111011100", 
    21 => "1111111001101101", 22 => "1101011111100100", 23 => "1101001110101001", 
    24 => "0001111000111100", 25 => "0000101010011000", 26 => "1110000101010010", 
    27 => "0000001000000001", 28 => "0001100100110100", 29 => "0001010110101001", 
    30 => "0000010101100101", 31 => "1110010110101000", 32 => "0001010111000101", 
    33 => "0000010001101111", 34 => "1010101100011000", 35 => "0000001011100011", 
    36 => "0000100101001111", 37 => "1111111011000100", 38 => "1100100100010100", 
    39 => "0001010011011101", 40 => "1110110000011010", 41 => "1111011110110010", 
    42 => "1111001101011111", 43 => "1111011111000001", 44 => "1011110010011000", 
    45 => "1110100000110100", 46 => "1111100011110111", 47 => "0001000010001111", 
    48 => "0000110010101000", 49 => "0001110110000011", 50 => "1110110100000011", 
    51 => "0001000001101011", 52 => "0000100110111110", 53 => "0000001010110111", 
    54 => "1101011011111000", 55 => "1011011011111101", 56 => "1111110111010001", 
    57 => "1111001001000000", 58 => "1100100101110101", 59 => "1111000000001110", 
    60 => "1111001001010100", 61 => "1111110010101100", 62 => "1110111000000100", 
    63 => "0000001010000001", 64 => "1111100011110010", 65 => "1111011001101101", 
    66 => "1100110110000000", 67 => "0000101101011010", 68 => "0000010011110101", 
    69 => "1110110010111101", 70 => "0000000011010110", 71 => "1111101100101001", 
    72 => "1111101010001110", 73 => "1110100011110111", 74 => "0001011101101110", 
    75 => "0000100110100111", 76 => "1101111010011011", 77 => "1100001001010101", 
    78 => "1110110011101001", 79 => "0000110011001000", 80 => "0000100110111001", 
    81 => "0001001001001010", 82 => "1111110101101000", 83 => "1111101111000110", 
    84 => "1111111111011010", 85 => "0000011000011011", 86 => "1110000011110100", 
    87 => "1011110110110100", 88 => "0000101011011011", 89 => "0000010001010001", 
    90 => "1111111001100100", 91 => "0001000010010000", 92 => "0000000110011000", 
    93 => "0000100000101101", 94 => "0001001111101000", 95 => "0000011111000010", 
    96 => "0000110110100011", 97 => "1111011001010010", 98 => "0100110000001001", 
    99 => "0000000000110111", 100 => "1110011100010110", 101 => "0000000100001100", 
    102 => "0001101010011100", 103 => "1111011000011000", 104 => "0000010110100101", 
    105 => "0000010111011011", 106 => "1110110010110110", 107 => "0000011100011110", 
    108 => "1111111111100110", 109 => "0001010001100000", 110 => "0000100110101001", 
    111 => "1110101000010101", 112 => "1111010100100000", 113 => "0001001101110000", 
    114 => "0000100011111110", 115 => "1110100010011011", 116 => "1111101111010101", 
    117 => "1111111111101010", 118 => "0011111010010110", 119 => "0011000111001101", 
    120 => "0011100100000010", 121 => "0000100000110101", 122 => "0001110001010000", 
    123 => "0000000111001011", 124 => "1111001011110011", 125 => "1111001010000000", 
    126 => "0000101001011110", 127 => "0000101010111010", 128 => "0001111000001001", 
    129 => "1111011010000010", 130 => "0001000010101110", 131 => "1110101111111110", 
    132 => "0001100010101001", 133 => "0000111100110011", 134 => "1110100100111011", 
    135 => "0000010001000011", 136 => "0000110000101111", 137 => "0000101010101101", 
    138 => "1111001001011111", 139 => "0000110011010110", 140 => "0000011100101011", 
    141 => "1100110111001111", 142 => "0001000000111111", 143 => "0001001001010001", 
    144 => "1110110010010000", 145 => "0010000111100111", 146 => "1111101010101100", 
    147 => "0001100100111000", 148 => "1111011000011001", 149 => "1111110110111100", 
    150 => "1111101111110000", 151 => "0011100000010110", 152 => "0010011110000100", 
    153 => "1110100101101110", 154 => "0011001100111100", 155 => "0000100000010100", 
    156 => "0000100111001011", 157 => "0001010011000011", 158 => "1111001011000001", 
    159 => "1111011010000001", 160 => "0001101001110110", 161 => "1110110111000011", 
    162 => "1111100010011100", 163 => "1110100111001001", 164 => "0000100010110101", 
    165 => "1111011001111101", 166 => "1111010101010001", 167 => "0000001100001011", 
    168 => "1111111101000001", 169 => "1110110001111011", 170 => "0000110000100001", 
    171 => "0001001000110101", 172 => "0000111101100000", 173 => "0000000011100111", 
    174 => "1111011011011010", 175 => "0000100110101000", 176 => "0001010000001100", 
    177 => "0000100111111011", 178 => "1111100000001100", 179 => "0001001001010110", 
    180 => "0001000011001111", 181 => "1110111010001011", 182 => "1101011010010010", 
    183 => "0000001011010011", 184 => "0010101101100110", 185 => "0000111110101001", 
    186 => "0001100001111100", 187 => "0000100010110111", 188 => "1110101001011110", 
    189 => "0001000000100100", 190 => "1111011110010111", 191 => "1110010111000010", 
    192 => "1101111101101011", 193 => "1110100101110100", 194 => "0010110001100010", 
    195 => "1111101101100110", 196 => "0000010010101001", 197 => "1110101101101011", 
    198 => "0010001101100110", 199 => "1111010010100011", 200 => "1111010100100000", 
    201 => "1111011100111100", 202 => "1111110110010000", 203 => "1111001111111010", 
    204 => "0100111101110101", 205 => "0100100000100101", 206 => "0001101101101011", 
    207 => "0000000101111000", 208 => "1111001101110011", 209 => "1110001011000110", 
    210 => "1111001010010110", 211 => "1110011101000011", 212 => "1111000111011111", 
    213 => "1111011101000100", 214 => "0001101110100010", 215 => "1111011001010010", 
    216 => "1101000011111010", 217 => "1110101110011101", 218 => "1111101101001011", 
    219 => "1111000101110000", 220 => "1110110110010110", 221 => "1110011000011000", 
    222 => "0000001110001000", 223 => "0000101000000000", 224 => "1101101000001110", 
    225 => "1111010010111110", 226 => "0100010000110111", 227 => "0001100111000001", 
    228 => "0000101111101110", 229 => "0001001011001100", 230 => "0010111110010100", 
    231 => "1111001100000011", 232 => "1111000000101101", 233 => "0000001100011001", 
    234 => "0001000101001010", 235 => "0001011111100011", 236 => "0100011010100111", 
    237 => "0101001010010010", 238 => "1111011000101111", 239 => "0000011010111000", 
    240 => "1110011011000110", 241 => "1111110101111100", 242 => "1110111110011011", 
    243 => "0000001111100111", 244 => "1111111111100100", 245 => "1111100101101101", 
    246 => "0011000000000111", 247 => "0001110101110001", 248 => "0000011001011100", 
    249 => "0000010111010100", 250 => "0010100101111110", 251 => "1111010001110110", 
    252 => "1110110000100001", 253 => "0000111100110111", 254 => "1111010010000001", 
    255 => "1111010000011111", 256 => "1111111001011000", 257 => "0001101001010111", 
    258 => "0010001000001101", 259 => "0001000101110100", 260 => "0000001111110100", 
    261 => "0000100001101001", 262 => "0000000101100110", 263 => "1111011110101100", 
    264 => "1111110100110010", 265 => "0001011000111000", 266 => "0000111001100101", 
    267 => "1111110100010010", 268 => "0000111100111011", 269 => "0010101100101101", 
    270 => "0001101111111010", 271 => "0000001011000011", 272 => "1101110110010111", 
    273 => "0000010101001101", 274 => "1110111101000111", 275 => "1111101001110001", 
    276 => "0001001101101110", 277 => "1111001100010000", 278 => "0010111110000110", 
    279 => "0010010110001101", 280 => "0000011100000001", 281 => "0000000010100010", 
    282 => "0001010101001010", 283 => "1110100111000110", 284 => "0000011011100000", 
    285 => "0000101010010011", 286 => "1111011111011011", 287 => "1111111101011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_25 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_25 is
    component infer_layer_6_weights_V_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_25_rom_U :  component infer_layer_6_weights_V_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



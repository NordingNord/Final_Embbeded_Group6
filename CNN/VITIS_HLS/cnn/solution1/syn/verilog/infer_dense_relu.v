// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_dense_relu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_0_read,
        output_1_read,
        output_2_read,
        output_3_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        grp_fu_763_p_din0,
        grp_fu_763_p_din1,
        grp_fu_763_p_opcode,
        grp_fu_763_p_dout0,
        grp_fu_763_p_ce,
        grp_fu_770_p_din0,
        grp_fu_770_p_din1,
        grp_fu_770_p_dout0,
        grp_fu_770_p_ce,
        grp_fu_788_p_din0,
        grp_fu_788_p_din1,
        grp_fu_788_p_opcode,
        grp_fu_788_p_dout0,
        grp_fu_788_p_ce
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_pp0_stage0 = 14'd4;
parameter    ap_ST_fsm_pp0_stage1 = 14'd8;
parameter    ap_ST_fsm_pp0_stage2 = 14'd16;
parameter    ap_ST_fsm_pp0_stage3 = 14'd32;
parameter    ap_ST_fsm_state13 = 14'd64;
parameter    ap_ST_fsm_state14 = 14'd128;
parameter    ap_ST_fsm_state15 = 14'd256;
parameter    ap_ST_fsm_state16 = 14'd512;
parameter    ap_ST_fsm_state17 = 14'd1024;
parameter    ap_ST_fsm_state18 = 14'd2048;
parameter    ap_ST_fsm_state19 = 14'd4096;
parameter    ap_ST_fsm_state20 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
input  [31:0] output_0_read;
input  [31:0] output_1_read;
input  [31:0] output_2_read;
input  [31:0] output_3_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] grp_fu_763_p_din0;
output  [31:0] grp_fu_763_p_din1;
output  [1:0] grp_fu_763_p_opcode;
input  [31:0] grp_fu_763_p_dout0;
output   grp_fu_763_p_ce;
output  [31:0] grp_fu_770_p_din0;
output  [31:0] grp_fu_770_p_din1;
input  [31:0] grp_fu_770_p_dout0;
output   grp_fu_770_p_ce;
output  [31:0] grp_fu_788_p_din0;
output  [31:0] grp_fu_788_p_din1;
output  [4:0] grp_fu_788_p_opcode;
input  [0:0] grp_fu_788_p_dout0;
output   grp_fu_788_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] layer_12_weights_address0;
reg    layer_12_weights_ce0;
wire   [31:0] layer_12_weights_q0;
reg   [4:0] ii_reg_183;
reg   [31:0] add108_reg_194;
wire   [2:0] add_ln157_fu_220_p2;
reg   [2:0] add_ln157_reg_552;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln157_fu_226_p2;
wire   [5:0] zext_ln157_fu_232_p1;
reg   [5:0] zext_ln157_reg_561;
wire   [1:0] empty_52_fu_236_p1;
reg   [1:0] empty_52_reg_566;
wire   [31:0] tmp_fu_240_p6;
wire   [4:0] add_ln159_fu_278_p2;
reg   [4:0] add_ln159_reg_580;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln159_fu_284_p2;
reg   [0:0] icmp_ln159_reg_585;
reg   [0:0] icmp_ln159_reg_585_pp0_iter1_reg;
reg   [0:0] icmp_ln159_reg_585_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] mul7_reg_609;
wire   [31:0] grp_fu_204_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] icmp_ln161_fu_317_p2;
reg   [0:0] icmp_ln161_reg_619;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln161_1_fu_330_p2;
reg   [0:0] icmp_ln161_1_reg_625;
wire   [31:0] select_ln161_1_fu_335_p3;
reg   [31:0] select_ln161_1_reg_633;
wire   [0:0] icmp_ln161_2_fu_343_p2;
reg   [0:0] icmp_ln161_2_reg_638;
wire   [31:0] empty_57_fu_364_p3;
reg   [31:0] empty_57_reg_649;
wire   [31:0] empty_54_fu_372_p3;
reg   [31:0] empty_54_reg_656;
wire    ap_CS_fsm_state14;
wire   [31:0] empty_55_fu_385_p3;
reg   [31:0] empty_55_reg_662;
wire   [31:0] tmp_s_fu_399_p6;
wire   [31:0] tmp_43_fu_413_p6;
reg   [31:0] add1_reg_677;
wire    ap_CS_fsm_state18;
wire   [31:0] output_3_2_fu_486_p3;
wire    ap_CS_fsm_state20;
wire   [31:0] output_2_2_fu_493_p3;
wire   [31:0] output_1_2_fu_506_p3;
wire   [31:0] output_0_2_fu_525_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage1_subdone;
reg   [31:0] output_0_0_reg_132;
reg   [31:0] output_1_0_reg_142;
reg   [31:0] output_2_0_reg_152;
reg   [31:0] output_3_0_reg_162;
reg   [2:0] i_reg_172;
reg   [4:0] ap_phi_mux_ii_phi_fu_187_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_add108_phi_fu_197_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] ii_cast4_fu_290_p1;
wire   [63:0] zext_ln161_fu_312_p1;
reg   [31:0] grp_fu_204_p0;
reg   [31:0] grp_fu_204_p1;
wire   [31:0] grp_fu_209_p0;
wire   [31:0] grp_fu_209_p1;
wire   [31:0] grp_fu_215_p0;
wire   [31:0] grp_fu_215_p1;
wire    ap_CS_fsm_state19;
wire   [1:0] tmp_fu_240_p5;
wire   [3:0] trunc_ln161_fu_295_p1;
wire   [5:0] shl_ln_fu_299_p3;
wire   [5:0] add_ln161_fu_307_p2;
wire   [31:0] select_ln161_fu_322_p3;
wire   [31:0] select_ln161_3_fu_348_p3;
wire   [31:0] select_ln161_4_fu_356_p3;
wire   [31:0] select_ln161_2_fu_378_p3;
wire   [31:0] tmp_43_fu_413_p1;
wire   [31:0] tmp_43_fu_413_p2;
wire   [31:0] tmp_43_fu_413_p3;
wire   [31:0] bitcast_ln49_fu_426_p1;
wire   [7:0] tmp_44_fu_429_p4;
wire   [22:0] trunc_ln49_fu_439_p1;
wire   [0:0] icmp_ln49_6_fu_449_p2;
wire   [0:0] icmp_ln49_fu_443_p2;
wire   [0:0] or_ln49_fu_455_p2;
wire   [0:0] grp_fu_215_p2;
wire   [0:0] and_ln49_fu_461_p2;
wire   [31:0] select_ln49_fu_467_p3;
wire   [31:0] select_ln49_3_fu_474_p3;
wire   [31:0] select_ln49_4_fu_480_p3;
wire   [31:0] select_ln49_5_fu_500_p3;
wire   [31:0] select_ln49_6_fu_513_p3;
wire   [31:0] select_ln49_7_fu_519_p3;
wire    grp_fu_204_ce;
wire    grp_fu_209_ce;
wire    grp_fu_215_ce;
wire   [4:0] grp_fu_215_opcode;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [13:0] ap_NS_fsm;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

infer_dense_relu_layer_12_weights #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
layer_12_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_12_weights_address0),
    .ce0(layer_12_weights_ce0),
    .q0(layer_12_weights_q0)
);

infer_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U62(
    .din0(output_0_0_reg_132),
    .din1(output_1_0_reg_142),
    .din2(output_2_0_reg_152),
    .din3(output_3_0_reg_162),
    .din4(tmp_fu_240_p5),
    .dout(tmp_fu_240_p6)
);

infer_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U63(
    .din0(32'd3172148805),
    .din1(32'd1037527151),
    .din2(32'd3165629902),
    .din3(32'd3175950743),
    .din4(empty_52_reg_566),
    .dout(tmp_s_fu_399_p6)
);

infer_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U64(
    .din0(tmp_43_fu_413_p1),
    .din1(tmp_43_fu_413_p2),
    .din2(tmp_43_fu_413_p3),
    .din3(empty_57_reg_649),
    .din4(empty_52_reg_566),
    .dout(tmp_43_fu_413_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln157_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln157_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_0_preg <= output_0_0_reg_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_1_preg <= output_1_0_reg_142;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_2_preg <= output_2_0_reg_152;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_3_preg <= output_3_0_reg_162;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add108_reg_194 <= tmp_fu_240_p6;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln159_reg_585_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add108_reg_194 <= grp_fu_763_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_reg_172 <= add_ln157_reg_552;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_172 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ii_reg_183 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln159_reg_585 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ii_reg_183 <= add_ln159_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_0_0_reg_132 <= output_0_2_fu_525_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        output_0_0_reg_132 <= output_0_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_1_0_reg_142 <= output_1_2_fu_506_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        output_1_0_reg_142 <= output_1_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_2_0_reg_152 <= output_2_2_fu_493_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        output_2_0_reg_152 <= output_2_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_3_0_reg_162 <= output_3_2_fu_486_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        output_3_0_reg_162 <= output_3_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add1_reg_677 <= grp_fu_763_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln157_reg_552 <= add_ln157_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln159_reg_580 <= add_ln159_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_52_reg_566 <= empty_52_fu_236_p1;
        zext_ln157_reg_561[2 : 0] <= zext_ln157_fu_232_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_54_reg_656 <= empty_54_fu_372_p3;
        empty_55_reg_662 <= empty_55_fu_385_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        empty_57_reg_649 <= empty_57_fu_364_p3;
        icmp_ln161_1_reg_625 <= icmp_ln161_1_fu_330_p2;
        icmp_ln161_2_reg_638 <= icmp_ln161_2_fu_343_p2;
        icmp_ln161_reg_619 <= icmp_ln161_fu_317_p2;
        select_ln161_1_reg_633 <= select_ln161_1_fu_335_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln159_reg_585 <= icmp_ln159_fu_284_p2;
        icmp_ln159_reg_585_pp0_iter1_reg <= icmp_ln159_reg_585;
        icmp_ln159_reg_585_pp0_iter2_reg <= icmp_ln159_reg_585_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln159_reg_585 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul7_reg_609 <= grp_fu_770_p_dout0;
    end
end

always @ (*) begin
    if ((icmp_ln159_fu_284_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln159_reg_585_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_add108_phi_fu_197_p4 = grp_fu_763_p_dout0;
    end else begin
        ap_phi_mux_add108_phi_fu_197_p4 = add108_reg_194;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln159_reg_585 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ii_phi_fu_187_p4 = add_ln159_reg_580;
    end else begin
        ap_phi_mux_ii_phi_fu_187_p4 = ii_reg_183;
    end
end

always @ (*) begin
    if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_0 = output_0_0_reg_132;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_1 = output_1_0_reg_142;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_2 = output_2_0_reg_152;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_3 = output_3_0_reg_162;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_204_p0 = tmp_43_fu_413_p6;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_204_p0 = ap_phi_mux_add108_phi_fu_197_p4;
    end else begin
        grp_fu_204_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_204_p1 = tmp_s_fu_399_p6;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_204_p1 = mul7_reg_609;
    end else begin
        grp_fu_204_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer_12_weights_ce0 = 1'b1;
    end else begin
        layer_12_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln157_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln159_fu_284_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln159_fu_284_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln157_fu_220_p2 = (i_reg_172 + 3'd1);

assign add_ln159_fu_278_p2 = (ap_phi_mux_ii_phi_fu_187_p4 + 5'd1);

assign add_ln161_fu_307_p2 = (shl_ln_fu_299_p3 + zext_ln157_reg_561);

assign and_ln49_fu_461_p2 = (or_ln49_fu_455_p2 & grp_fu_788_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_426_p1 = add1_reg_677;

assign empty_52_fu_236_p1 = i_reg_172[1:0];

assign empty_54_fu_372_p3 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? output_0_0_reg_132 : select_ln161_1_reg_633);

assign empty_55_fu_385_p3 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? output_1_0_reg_142 : select_ln161_2_fu_378_p3);

assign empty_57_fu_364_p3 = ((icmp_ln161_2_fu_343_p2[0:0] == 1'b1) ? output_3_0_reg_162 : select_ln161_4_fu_356_p3);

assign grp_fu_204_ce = 1'b1;

assign grp_fu_204_p2 = grp_fu_763_p_dout0;

assign grp_fu_209_ce = 1'b1;

assign grp_fu_209_p0 = input_r_q0;

assign grp_fu_209_p1 = layer_12_weights_q0;

assign grp_fu_209_p2 = grp_fu_770_p_dout0;

assign grp_fu_215_ce = 1'b1;

assign grp_fu_215_opcode = 5'd2;

assign grp_fu_215_p0 = add1_reg_677;

assign grp_fu_215_p1 = 32'd0;

assign grp_fu_215_p2 = grp_fu_788_p_dout0;

assign grp_fu_763_p_ce = 1'b1;

assign grp_fu_763_p_din0 = grp_fu_204_p0;

assign grp_fu_763_p_din1 = grp_fu_204_p1;

assign grp_fu_763_p_opcode = 2'd0;

assign grp_fu_770_p_ce = 1'b1;

assign grp_fu_770_p_din0 = input_r_q0;

assign grp_fu_770_p_din1 = layer_12_weights_q0;

assign grp_fu_788_p_ce = 1'b1;

assign grp_fu_788_p_din0 = add1_reg_677;

assign grp_fu_788_p_din1 = 32'd0;

assign grp_fu_788_p_opcode = 5'd2;

assign icmp_ln157_fu_226_p2 = ((i_reg_172 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_284_p2 = ((ap_phi_mux_ii_phi_fu_187_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln161_1_fu_330_p2 = ((empty_52_reg_566 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln161_2_fu_343_p2 = ((empty_52_reg_566 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_317_p2 = ((empty_52_reg_566 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_6_fu_449_p2 = ((trunc_ln49_fu_439_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_443_p2 = ((tmp_44_fu_429_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ii_cast4_fu_290_p1 = ap_phi_mux_ii_phi_fu_187_p4;

assign input_r_address0 = ii_cast4_fu_290_p1;

assign layer_12_weights_address0 = zext_ln161_fu_312_p1;

assign or_ln49_fu_455_p2 = (icmp_ln49_fu_443_p2 | icmp_ln49_6_fu_449_p2);

assign output_0_2_fu_525_p3 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? output_0_0_reg_132 : select_ln49_7_fu_519_p3);

assign output_1_2_fu_506_p3 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? output_1_0_reg_142 : select_ln49_5_fu_500_p3);

assign output_2_2_fu_493_p3 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? select_ln49_fu_467_p3 : output_2_0_reg_152);

assign output_3_2_fu_486_p3 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? output_3_0_reg_162 : select_ln49_4_fu_480_p3);

assign select_ln161_1_fu_335_p3 = ((icmp_ln161_1_fu_330_p2[0:0] == 1'b1) ? output_0_0_reg_132 : select_ln161_fu_322_p3);

assign select_ln161_2_fu_378_p3 = ((icmp_ln161_1_reg_625[0:0] == 1'b1) ? add108_reg_194 : output_1_0_reg_142);

assign select_ln161_3_fu_348_p3 = ((icmp_ln161_fu_317_p2[0:0] == 1'b1) ? output_3_0_reg_162 : add108_reg_194);

assign select_ln161_4_fu_356_p3 = ((icmp_ln161_1_fu_330_p2[0:0] == 1'b1) ? output_3_0_reg_162 : select_ln161_3_fu_348_p3);

assign select_ln161_fu_322_p3 = ((icmp_ln161_fu_317_p2[0:0] == 1'b1) ? add108_reg_194 : output_0_0_reg_132);

assign select_ln49_3_fu_474_p3 = ((icmp_ln161_reg_619[0:0] == 1'b1) ? empty_57_reg_649 : select_ln49_fu_467_p3);

assign select_ln49_4_fu_480_p3 = ((icmp_ln161_1_reg_625[0:0] == 1'b1) ? empty_57_reg_649 : select_ln49_3_fu_474_p3);

assign select_ln49_5_fu_500_p3 = ((icmp_ln161_1_reg_625[0:0] == 1'b1) ? select_ln49_fu_467_p3 : empty_55_reg_662);

assign select_ln49_6_fu_513_p3 = ((icmp_ln161_reg_619[0:0] == 1'b1) ? select_ln49_fu_467_p3 : empty_54_reg_656);

assign select_ln49_7_fu_519_p3 = ((icmp_ln161_1_reg_625[0:0] == 1'b1) ? empty_54_reg_656 : select_ln49_6_fu_513_p3);

assign select_ln49_fu_467_p3 = ((and_ln49_fu_461_p2[0:0] == 1'b1) ? add1_reg_677 : 32'd0);

assign shl_ln_fu_299_p3 = {{trunc_ln161_fu_295_p1}, {2'd0}};

assign tmp_43_fu_413_p1 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? output_0_0_reg_132 : select_ln161_1_reg_633);

assign tmp_43_fu_413_p2 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? output_1_0_reg_142 : select_ln161_2_fu_378_p3);

assign tmp_43_fu_413_p3 = ((icmp_ln161_2_reg_638[0:0] == 1'b1) ? add108_reg_194 : output_2_0_reg_152);

assign tmp_44_fu_429_p4 = {{bitcast_ln49_fu_426_p1[30:23]}};

assign tmp_fu_240_p5 = i_reg_172[1:0];

assign trunc_ln161_fu_295_p1 = ap_phi_mux_ii_phi_fu_187_p4[3:0];

assign trunc_ln49_fu_439_p1 = bitcast_ln49_fu_426_p1[22:0];

assign zext_ln157_fu_232_p1 = i_reg_172;

assign zext_ln161_fu_312_p1 = add_ln161_fu_307_p2;

always @ (posedge ap_clk) begin
    zext_ln157_reg_561[5:3] <= 3'b000;
end

endmodule //infer_dense_relu

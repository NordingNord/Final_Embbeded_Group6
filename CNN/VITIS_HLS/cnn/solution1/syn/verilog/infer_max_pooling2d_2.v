// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_max_pooling2d_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_1083_p_din0,
        grp_fu_1083_p_din1,
        grp_fu_1083_p_opcode,
        grp_fu_1083_p_dout0,
        grp_fu_1083_p_ce,
        grp_fu_2720_p_din0,
        grp_fu_2720_p_din1,
        grp_fu_2720_p_opcode,
        grp_fu_2720_p_dout0,
        grp_fu_2720_p_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_1083_p_din0;
output  [31:0] grp_fu_1083_p_din1;
output  [4:0] grp_fu_1083_p_opcode;
input  [0:0] grp_fu_1083_p_dout0;
output   grp_fu_1083_p_ce;
output  [31:0] grp_fu_2720_p_din0;
output  [31:0] grp_fu_2720_p_din1;
output  [4:0] grp_fu_2720_p_opcode;
input  [0:0] grp_fu_2720_p_dout0;
output   grp_fu_2720_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten44_reg_140;
reg   [4:0] i_reg_152;
reg   [9:0] indvar_flatten_reg_164;
reg   [4:0] ii_reg_175;
reg   [5:0] iii_reg_186;
reg   [31:0] reg_208;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln121_reg_988;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln121_reg_988_pp0_iter1_reg;
reg   [3:0] p_lshr_f9_cast_reg_968;
reg   [3:0] p_lshr_f9_cast_reg_968_pp0_iter1_reg;
reg   [3:0] p_lshr_f9_cast_reg_968_pp0_iter2_reg;
reg   [3:0] p_lshr_f9_cast_reg_968_pp0_iter3_reg;
wire   [4:0] empty_34_fu_234_p2;
reg   [4:0] empty_34_reg_973;
reg   [3:0] p_lshr_f_cast_reg_978;
reg   [3:0] p_lshr_f_cast_reg_978_pp0_iter1_reg;
reg   [3:0] p_lshr_f_cast_reg_978_pp0_iter2_reg;
reg   [3:0] p_lshr_f_cast_reg_978_pp0_iter3_reg;
wire   [8:0] zext_ln127_fu_250_p1;
reg   [8:0] zext_ln127_reg_983;
reg   [8:0] zext_ln127_reg_983_pp0_iter1_reg;
wire   [0:0] icmp_ln121_fu_260_p2;
reg   [0:0] icmp_ln121_reg_988_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_988_pp0_iter3_reg;
wire   [0:0] icmp_ln124_fu_266_p2;
reg   [0:0] icmp_ln124_reg_992;
reg   [0:0] icmp_ln124_reg_992_pp0_iter1_reg;
reg   [0:0] icmp_ln124_reg_992_pp0_iter2_reg;
reg   [0:0] icmp_ln124_reg_992_pp0_iter3_reg;
wire   [4:0] select_ln121_fu_272_p3;
reg   [4:0] select_ln121_reg_1002;
wire   [4:0] add_ln121_1_fu_280_p2;
reg   [4:0] add_ln121_1_reg_1007;
reg   [4:0] add_ln121_1_reg_1007_pp0_iter1_reg;
reg   [3:0] p_lshr_f9_cast_mid1_reg_1013;
reg   [3:0] p_lshr_f9_cast_mid1_reg_1013_pp0_iter1_reg;
reg   [3:0] p_lshr_f9_cast_mid1_reg_1013_pp0_iter2_reg;
reg   [3:0] p_lshr_f9_cast_mid1_reg_1013_pp0_iter3_reg;
wire   [0:0] and_ln121_fu_334_p2;
reg   [0:0] and_ln121_reg_1018;
reg   [0:0] and_ln121_reg_1018_pp0_iter1_reg;
reg   [0:0] and_ln121_reg_1018_pp0_iter2_reg;
reg   [0:0] and_ln121_reg_1018_pp0_iter3_reg;
wire   [4:0] ii_2_fu_340_p2;
reg   [4:0] ii_2_reg_1025;
reg   [4:0] ii_2_reg_1025_pp0_iter1_reg;
reg   [4:0] ii_2_reg_1025_pp0_iter2_reg;
reg   [4:0] ii_2_reg_1025_pp0_iter3_reg;
wire   [5:0] select_ln124_fu_352_p3;
reg   [5:0] select_ln124_reg_1031;
reg   [5:0] select_ln124_reg_1031_pp0_iter1_reg;
reg   [5:0] select_ln124_reg_1031_pp0_iter2_reg;
reg   [5:0] select_ln124_reg_1031_pp0_iter3_reg;
wire   [8:0] zext_ln127_1_fu_360_p1;
reg   [8:0] zext_ln127_1_reg_1038;
reg   [8:0] zext_ln127_1_reg_1038_pp0_iter1_reg;
wire   [13:0] iii_cast_fu_392_p1;
reg   [13:0] iii_cast_reg_1043;
reg   [13:0] iii_cast_reg_1043_pp0_iter1_reg;
wire   [9:0] add_ln124_1_fu_430_p2;
reg   [9:0] add_ln124_1_reg_1058;
wire   [11:0] add_ln121_fu_436_p2;
reg   [11:0] add_ln121_reg_1063;
wire   [4:0] select_ln121_6_fu_442_p3;
reg   [4:0] select_ln121_6_reg_1068;
wire   [4:0] select_ln124_4_fu_448_p3;
reg   [4:0] select_ln124_4_reg_1073;
reg   [31:0] input_load_1_reg_1078;
wire   [5:0] add_ln127_fu_453_p2;
reg   [5:0] add_ln127_reg_1085;
wire   [9:0] select_ln124_5_fu_458_p3;
reg   [9:0] select_ln124_5_reg_1090;
wire   [8:0] mul_ln124_fu_467_p2;
reg   [8:0] mul_ln124_reg_1095;
wire   [31:0] select_ln136_fu_515_p3;
reg   [31:0] select_ln136_reg_1101;
wire   [31:0] select_ln136_1_fu_664_p3;
reg   [31:0] select_ln136_1_reg_1108;
wire   [13:0] add_ln136_5_fu_692_p2;
reg   [13:0] add_ln136_5_reg_1120;
wire   [31:0] select_ln136_2_fu_780_p3;
reg   [31:0] select_ln136_2_reg_1125;
reg   [31:0] select_ln136_2_reg_1125_pp0_iter3_reg;
reg   [31:0] input_load_3_reg_1137;
reg    ap_enable_reg_pp0_iter3;
wire   [11:0] add_ln142_fu_869_p2;
reg   [11:0] add_ln142_reg_1144;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter3_state9;
reg    ap_enable_reg_pp0_iter4;
reg   [11:0] ap_phi_mux_indvar_flatten44_phi_fu_144_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_i_phi_fu_156_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_168_p4;
reg   [4:0] ap_phi_mux_ii_phi_fu_179_p4;
reg   [5:0] ap_phi_mux_iii_phi_fu_190_p4;
wire   [63:0] zext_ln136_fu_414_p1;
wire   [63:0] zext_ln136_1_fu_425_p1;
wire   [63:0] zext_ln136_2_fu_687_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_3_fu_787_p1;
wire   [63:0] zext_ln142_fu_964_p1;
reg   [31:0] grp_fu_197_p0;
reg   [31:0] grp_fu_197_p1;
reg   [31:0] grp_fu_203_p0;
reg   [31:0] grp_fu_203_p1;
wire   [4:0] empty_fu_228_p0;
wire   [5:0] empty_fu_228_p1;
wire   [8:0] empty_fu_228_p2;
wire   [4:0] p_mid1_fu_300_p0;
wire   [5:0] p_mid1_fu_300_p1;
wire   [8:0] p_mid1_fu_300_p2;
wire   [8:0] add_ln136_fu_254_p2;
wire   [0:0] icmp_ln127_fu_328_p2;
wire   [0:0] xor_ln121_fu_322_p2;
wire   [0:0] or_ln124_fu_346_p2;
wire   [8:0] select_ln121_2_fu_306_p3;
wire   [8:0] add_ln136_6_fu_364_p2;
wire   [8:0] select_ln121_4_fu_314_p3;
wire   [8:0] select_ln124_2_fu_370_p3;
wire   [8:0] or_ln124_1_fu_378_p2;
wire   [7:0] tmp_fu_396_p4;
wire   [13:0] add_ln136_1_fu_406_p3;
wire   [13:0] shl_ln136_mid2_fu_384_p3;
wire   [13:0] add_ln136_3_fu_419_p2;
wire   [4:0] mul_ln124_fu_467_p0;
wire   [5:0] mul_ln124_fu_467_p1;
wire   [31:0] bitcast_ln136_fu_473_p1;
wire   [7:0] tmp_4_fu_477_p4;
wire   [22:0] trunc_ln136_fu_487_p1;
wire   [0:0] icmp_ln136_1_fu_497_p2;
wire   [0:0] icmp_ln136_fu_491_p2;
wire   [0:0] or_ln136_fu_503_p2;
wire   [0:0] grp_fu_197_p2;
wire   [0:0] and_ln136_fu_509_p2;
wire   [4:0] p_mid110_fu_528_p2;
wire   [4:0] mul_ln124_1_fu_537_p0;
wire   [5:0] mul_ln124_1_fu_537_p1;
wire   [8:0] mul_ln124_1_fu_537_p2;
wire   [8:0] add_ln136_2_fu_524_p2;
wire   [8:0] select_ln121_3_fu_543_p3;
wire   [8:0] add_ln136_7_fu_556_p2;
wire   [8:0] select_ln121_5_fu_549_p3;
wire   [8:0] select_ln124_3_fu_561_p3;
wire   [8:0] or_ln124_2_fu_568_p2;
wire   [31:0] bitcast_ln136_1_fu_582_p1;
wire   [31:0] bitcast_ln136_2_fu_599_p1;
wire   [7:0] tmp_6_fu_585_p4;
wire   [22:0] trunc_ln136_1_fu_595_p1;
wire   [0:0] icmp_ln136_3_fu_622_p2;
wire   [0:0] icmp_ln136_2_fu_616_p2;
wire   [7:0] tmp_7_fu_602_p4;
wire   [22:0] trunc_ln136_2_fu_612_p1;
wire   [0:0] icmp_ln136_5_fu_640_p2;
wire   [0:0] icmp_ln136_4_fu_634_p2;
wire   [0:0] or_ln136_1_fu_628_p2;
wire   [0:0] or_ln136_2_fu_646_p2;
wire   [0:0] and_ln136_1_fu_652_p2;
wire   [0:0] and_ln136_2_fu_658_p2;
wire   [7:0] tmp_9_fu_670_p4;
wire   [13:0] add_ln136_4_fu_680_p3;
wire   [13:0] shl_ln136_1_mid2_fu_574_p3;
wire   [31:0] bitcast_ln136_3_fu_697_p1;
wire   [31:0] bitcast_ln136_4_fu_715_p1;
wire   [7:0] tmp_s_fu_701_p4;
wire   [22:0] trunc_ln136_3_fu_711_p1;
wire   [0:0] icmp_ln136_7_fu_738_p2;
wire   [0:0] icmp_ln136_6_fu_732_p2;
wire   [7:0] tmp_1_fu_718_p4;
wire   [22:0] trunc_ln136_4_fu_728_p1;
wire   [0:0] icmp_ln136_9_fu_756_p2;
wire   [0:0] icmp_ln136_8_fu_750_p2;
wire   [0:0] or_ln136_3_fu_744_p2;
wire   [0:0] or_ln136_4_fu_762_p2;
wire   [0:0] and_ln136_3_fu_768_p2;
wire   [0:0] grp_fu_203_p2;
wire   [0:0] and_ln136_4_fu_774_p2;
wire   [3:0] mul33_fu_794_p0;
wire   [4:0] mul33_fu_794_p1;
wire   [6:0] mul33_fu_794_p2;
wire   [6:0] p_cast2_fu_800_p1;
wire   [3:0] mul33_mid1_fu_812_p0;
wire   [4:0] mul33_mid1_fu_812_p1;
wire   [6:0] mul33_mid1_fu_812_p2;
wire   [3:0] p_lshr_f_cast_mid1_fu_825_p4;
wire   [6:0] select_ln121_1_fu_818_p3;
wire   [6:0] p_cast2_mid1_fu_834_p1;
wire   [6:0] mul351_fu_803_p2;
wire   [6:0] mul351_mid1_fu_838_p2;
wire   [6:0] select_ln121_7_fu_844_p3;
wire   [6:0] select_ln124_1_fu_851_p3;
wire   [11:0] iii_cast5_fu_866_p1;
wire   [11:0] add40_mid2_fu_858_p3;
wire   [31:0] bitcast_ln136_5_fu_875_p1;
wire   [31:0] bitcast_ln136_6_fu_892_p1;
wire   [7:0] tmp_3_fu_878_p4;
wire   [22:0] trunc_ln136_5_fu_888_p1;
wire   [0:0] icmp_ln136_11_fu_915_p2;
wire   [0:0] icmp_ln136_10_fu_909_p2;
wire   [7:0] tmp_10_fu_895_p4;
wire   [22:0] trunc_ln136_6_fu_905_p1;
wire   [0:0] icmp_ln136_13_fu_933_p2;
wire   [0:0] icmp_ln136_12_fu_927_p2;
wire   [0:0] or_ln136_5_fu_921_p2;
wire   [0:0] or_ln136_6_fu_939_p2;
wire   [0:0] and_ln136_5_fu_945_p2;
wire   [0:0] and_ln136_6_fu_951_p2;
wire    grp_fu_197_ce;
wire   [4:0] grp_fu_197_opcode;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    grp_fu_203_ce;
wire   [4:0] grp_fu_203_opcode;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [8:0] empty_fu_228_p00;
wire   [6:0] mul33_fu_794_p00;
wire   [6:0] mul33_mid1_fu_812_p00;
wire   [8:0] mul_ln124_1_fu_537_p00;
wire   [8:0] mul_ln124_fu_467_p00;
wire   [8:0] p_mid1_fu_300_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U22(
    .din0(empty_fu_228_p0),
    .din1(empty_fu_228_p1),
    .dout(empty_fu_228_p2)
);

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U23(
    .din0(p_mid1_fu_300_p0),
    .din1(p_mid1_fu_300_p1),
    .dout(p_mid1_fu_300_p2)
);

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U24(
    .din0(mul_ln124_fu_467_p0),
    .din1(mul_ln124_fu_467_p1),
    .dout(mul_ln124_fu_467_p2)
);

infer_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U25(
    .din0(mul_ln124_1_fu_537_p0),
    .din1(mul_ln124_1_fu_537_p1),
    .dout(mul_ln124_1_fu_537_p2)
);

infer_mul_4ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_4ns_5ns_7_1_1_U26(
    .din0(mul33_fu_794_p0),
    .din1(mul33_fu_794_p1),
    .dout(mul33_fu_794_p2)
);

infer_mul_4ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_4ns_5ns_7_1_1_U27(
    .din0(mul33_mid1_fu_812_p0),
    .din1(mul33_mid1_fu_812_p1),
    .dout(mul33_mid1_fu_812_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter3_state9)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter3_state9))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_152 <= select_ln121_6_reg_1068;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_152 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_reg_175 <= select_ln124_4_reg_1073;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iii_reg_186 <= add_ln127_reg_1085;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_186 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten44_reg_140 <= add_ln121_reg_1063;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten44_reg_140 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_164 <= select_ln124_5_reg_1090;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_164 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_fu_260_p2 == 1'd0))) begin
        add_ln121_1_reg_1007 <= add_ln121_1_fu_280_p2;
        add_ln124_1_reg_1058 <= add_ln124_1_fu_430_p2;
        and_ln121_reg_1018 <= and_ln121_fu_334_p2;
        icmp_ln124_reg_992 <= icmp_ln124_fu_266_p2;
        ii_2_reg_1025 <= ii_2_fu_340_p2;
        iii_cast_reg_1043[5 : 0] <= iii_cast_fu_392_p1[5 : 0];
        p_lshr_f9_cast_mid1_reg_1013 <= {{add_ln121_1_fu_280_p2[4:1]}};
        select_ln121_reg_1002 <= select_ln121_fu_272_p3;
        select_ln124_reg_1031 <= select_ln124_fu_352_p3;
        zext_ln127_1_reg_1038[4 : 0] <= zext_ln127_1_fu_360_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln121_1_reg_1007_pp0_iter1_reg <= add_ln121_1_reg_1007;
        and_ln121_reg_1018_pp0_iter1_reg <= and_ln121_reg_1018;
        and_ln121_reg_1018_pp0_iter2_reg <= and_ln121_reg_1018_pp0_iter1_reg;
        and_ln121_reg_1018_pp0_iter3_reg <= and_ln121_reg_1018_pp0_iter2_reg;
        empty_34_reg_973[4 : 1] <= empty_34_fu_234_p2[4 : 1];
        icmp_ln121_reg_988 <= icmp_ln121_fu_260_p2;
        icmp_ln121_reg_988_pp0_iter1_reg <= icmp_ln121_reg_988;
        icmp_ln121_reg_988_pp0_iter2_reg <= icmp_ln121_reg_988_pp0_iter1_reg;
        icmp_ln121_reg_988_pp0_iter3_reg <= icmp_ln121_reg_988_pp0_iter2_reg;
        icmp_ln124_reg_992_pp0_iter1_reg <= icmp_ln124_reg_992;
        icmp_ln124_reg_992_pp0_iter2_reg <= icmp_ln124_reg_992_pp0_iter1_reg;
        icmp_ln124_reg_992_pp0_iter3_reg <= icmp_ln124_reg_992_pp0_iter2_reg;
        ii_2_reg_1025_pp0_iter1_reg <= ii_2_reg_1025;
        ii_2_reg_1025_pp0_iter2_reg <= ii_2_reg_1025_pp0_iter1_reg;
        ii_2_reg_1025_pp0_iter3_reg <= ii_2_reg_1025_pp0_iter2_reg;
        iii_cast_reg_1043_pp0_iter1_reg[5 : 0] <= iii_cast_reg_1043[5 : 0];
        mul_ln124_reg_1095 <= mul_ln124_fu_467_p2;
        p_lshr_f9_cast_mid1_reg_1013_pp0_iter1_reg <= p_lshr_f9_cast_mid1_reg_1013;
        p_lshr_f9_cast_mid1_reg_1013_pp0_iter2_reg <= p_lshr_f9_cast_mid1_reg_1013_pp0_iter1_reg;
        p_lshr_f9_cast_mid1_reg_1013_pp0_iter3_reg <= p_lshr_f9_cast_mid1_reg_1013_pp0_iter2_reg;
        p_lshr_f9_cast_reg_968 <= {{ap_phi_mux_i_phi_fu_156_p4[4:1]}};
        p_lshr_f9_cast_reg_968_pp0_iter1_reg <= p_lshr_f9_cast_reg_968;
        p_lshr_f9_cast_reg_968_pp0_iter2_reg <= p_lshr_f9_cast_reg_968_pp0_iter1_reg;
        p_lshr_f9_cast_reg_968_pp0_iter3_reg <= p_lshr_f9_cast_reg_968_pp0_iter2_reg;
        p_lshr_f_cast_reg_978 <= {{ap_phi_mux_ii_phi_fu_179_p4[4:1]}};
        p_lshr_f_cast_reg_978_pp0_iter1_reg <= p_lshr_f_cast_reg_978;
        p_lshr_f_cast_reg_978_pp0_iter2_reg <= p_lshr_f_cast_reg_978_pp0_iter1_reg;
        p_lshr_f_cast_reg_978_pp0_iter3_reg <= p_lshr_f_cast_reg_978_pp0_iter2_reg;
        select_ln124_reg_1031_pp0_iter1_reg <= select_ln124_reg_1031;
        select_ln124_reg_1031_pp0_iter2_reg <= select_ln124_reg_1031_pp0_iter1_reg;
        select_ln124_reg_1031_pp0_iter3_reg <= select_ln124_reg_1031_pp0_iter2_reg;
        zext_ln127_1_reg_1038_pp0_iter1_reg[4 : 0] <= zext_ln127_1_reg_1038[4 : 0];
        zext_ln127_reg_983[4 : 0] <= zext_ln127_fu_250_p1[4 : 0];
        zext_ln127_reg_983_pp0_iter1_reg[4 : 0] <= zext_ln127_reg_983[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln121_reg_1063 <= add_ln121_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln127_reg_1085 <= add_ln127_fu_453_p2;
        input_load_1_reg_1078 <= input_r_q0;
        select_ln121_6_reg_1068 <= select_ln121_6_fu_442_p3;
        select_ln124_4_reg_1073 <= select_ln124_4_fu_448_p3;
        select_ln124_5_reg_1090 <= select_ln124_5_fu_458_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln136_5_reg_1120 <= add_ln136_5_fu_692_p2;
        select_ln136_1_reg_1108 <= select_ln136_1_fu_664_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln121_reg_988_pp0_iter3_reg == 1'd0))) begin
        add_ln142_reg_1144 <= add_ln142_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_reg_988_pp0_iter2_reg == 1'd0))) begin
        input_load_3_reg_1137 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln121_reg_988_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_208 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln121_reg_988_pp0_iter2_reg == 1'd0))) begin
        select_ln136_2_reg_1125 <= select_ln136_2_fu_780_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln136_2_reg_1125_pp0_iter3_reg <= select_ln136_2_reg_1125;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln136_reg_1101 <= select_ln136_fu_515_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_pp0_exit_iter3_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_988 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_156_p4 = select_ln121_6_reg_1068;
    end else begin
        ap_phi_mux_i_phi_fu_156_p4 = i_reg_152;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ii_phi_fu_179_p4 = select_ln124_4_reg_1073;
    end else begin
        ap_phi_mux_ii_phi_fu_179_p4 = ii_reg_175;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_iii_phi_fu_190_p4 = add_ln127_reg_1085;
    end else begin
        ap_phi_mux_iii_phi_fu_190_p4 = iii_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten44_phi_fu_144_p4 = add_ln121_reg_1063;
    end else begin
        ap_phi_mux_indvar_flatten44_phi_fu_144_p4 = indvar_flatten44_reg_140;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_988 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = select_ln124_5_reg_1090;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = indvar_flatten_reg_164;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_197_p0 = input_load_1_reg_1078;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_197_p0 = input_r_q1;
    end else begin
        grp_fu_197_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_197_p1 = select_ln136_fu_515_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_197_p1 = 32'd0;
    end else begin
        grp_fu_197_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_203_p0 = input_load_3_reg_1137;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_203_p0 = input_r_q1;
    end else begin
        grp_fu_203_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_203_p1 = select_ln136_2_reg_1125;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_203_p1 = select_ln136_1_reg_1108;
    end else begin
        grp_fu_203_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln136_3_fu_787_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln136_1_fu_425_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address1 = zext_ln136_2_fu_687_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln136_fu_414_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_reg_988_pp0_iter3_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add40_mid2_fu_858_p3 = {{select_ln124_1_fu_851_p3}, {5'd0}};

assign add_ln121_1_fu_280_p2 = (ap_phi_mux_i_phi_fu_156_p4 + 5'd2);

assign add_ln121_fu_436_p2 = (indvar_flatten44_reg_140 + 12'd1);

assign add_ln124_1_fu_430_p2 = (ap_phi_mux_indvar_flatten_phi_fu_168_p4 + 10'd1);

assign add_ln127_fu_453_p2 = (select_ln124_reg_1031 + 6'd1);

assign add_ln136_1_fu_406_p3 = {{tmp_fu_396_p4}, {select_ln124_fu_352_p3}};

assign add_ln136_2_fu_524_p2 = (mul_ln124_reg_1095 + zext_ln127_reg_983_pp0_iter1_reg);

assign add_ln136_3_fu_419_p2 = (shl_ln136_mid2_fu_384_p3 + iii_cast_fu_392_p1);

assign add_ln136_4_fu_680_p3 = {{tmp_9_fu_670_p4}, {select_ln124_reg_1031_pp0_iter1_reg}};

assign add_ln136_5_fu_692_p2 = (shl_ln136_1_mid2_fu_574_p3 + iii_cast_reg_1043_pp0_iter1_reg);

assign add_ln136_6_fu_364_p2 = (select_ln121_2_fu_306_p3 + zext_ln127_1_fu_360_p1);

assign add_ln136_7_fu_556_p2 = (select_ln121_3_fu_543_p3 + zext_ln127_1_reg_1038_pp0_iter1_reg);

assign add_ln136_fu_254_p2 = (empty_fu_228_p2 + zext_ln127_fu_250_p1);

assign add_ln142_fu_869_p2 = (iii_cast5_fu_866_p1 + add40_mid2_fu_858_p3);

assign and_ln121_fu_334_p2 = (xor_ln121_fu_322_p2 & icmp_ln127_fu_328_p2);

assign and_ln136_1_fu_652_p2 = (or_ln136_2_fu_646_p2 & or_ln136_1_fu_628_p2);

assign and_ln136_2_fu_658_p2 = (grp_fu_1083_p_dout0 & and_ln136_1_fu_652_p2);

assign and_ln136_3_fu_768_p2 = (or_ln136_4_fu_762_p2 & or_ln136_3_fu_744_p2);

assign and_ln136_4_fu_774_p2 = (grp_fu_2720_p_dout0 & and_ln136_3_fu_768_p2);

assign and_ln136_5_fu_945_p2 = (or_ln136_6_fu_939_p2 & or_ln136_5_fu_921_p2);

assign and_ln136_6_fu_951_p2 = (grp_fu_2720_p_dout0 & and_ln136_5_fu_945_p2);

assign and_ln136_fu_509_p2 = (or_ln136_fu_503_p2 & grp_fu_1083_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln136_1_fu_582_p1 = input_load_1_reg_1078;

assign bitcast_ln136_2_fu_599_p1 = select_ln136_reg_1101;

assign bitcast_ln136_3_fu_697_p1 = reg_208;

assign bitcast_ln136_4_fu_715_p1 = select_ln136_1_reg_1108;

assign bitcast_ln136_5_fu_875_p1 = input_load_3_reg_1137;

assign bitcast_ln136_6_fu_892_p1 = select_ln136_2_reg_1125_pp0_iter3_reg;

assign bitcast_ln136_fu_473_p1 = reg_208;

assign empty_34_fu_234_p2 = (ap_phi_mux_i_phi_fu_156_p4 | 5'd1);

assign empty_fu_228_p0 = empty_fu_228_p00;

assign empty_fu_228_p00 = ap_phi_mux_i_phi_fu_156_p4;

assign empty_fu_228_p1 = 9'd22;

assign grp_fu_1083_p_ce = 1'b1;

assign grp_fu_1083_p_din0 = grp_fu_197_p0;

assign grp_fu_1083_p_din1 = grp_fu_197_p1;

assign grp_fu_1083_p_opcode = 5'd2;

assign grp_fu_197_ce = 1'b1;

assign grp_fu_197_opcode = 5'd2;

assign grp_fu_197_p2 = grp_fu_1083_p_dout0;

assign grp_fu_203_ce = 1'b1;

assign grp_fu_203_opcode = 5'd2;

assign grp_fu_203_p2 = grp_fu_2720_p_dout0;

assign grp_fu_2720_p_ce = 1'b1;

assign grp_fu_2720_p_din0 = grp_fu_203_p0;

assign grp_fu_2720_p_din1 = grp_fu_203_p1;

assign grp_fu_2720_p_opcode = 5'd2;

assign icmp_ln121_fu_260_p2 = ((ap_phi_mux_indvar_flatten44_phi_fu_144_p4 == 12'd3872) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_266_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_168_p4 == 10'd352) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_328_p2 = ((ap_phi_mux_iii_phi_fu_190_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln136_10_fu_909_p2 = ((tmp_3_fu_878_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_11_fu_915_p2 = ((trunc_ln136_5_fu_888_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_12_fu_927_p2 = ((tmp_10_fu_895_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_13_fu_933_p2 = ((trunc_ln136_6_fu_905_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_1_fu_497_p2 = ((trunc_ln136_fu_487_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_2_fu_616_p2 = ((tmp_6_fu_585_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_3_fu_622_p2 = ((trunc_ln136_1_fu_595_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_4_fu_634_p2 = ((tmp_7_fu_602_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_5_fu_640_p2 = ((trunc_ln136_2_fu_612_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_6_fu_732_p2 = ((tmp_s_fu_701_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_7_fu_738_p2 = ((trunc_ln136_3_fu_711_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_8_fu_750_p2 = ((tmp_1_fu_718_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_9_fu_756_p2 = ((trunc_ln136_4_fu_728_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_491_p2 = ((tmp_4_fu_477_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ii_2_fu_340_p2 = (select_ln121_fu_272_p3 + 5'd2);

assign iii_cast5_fu_866_p1 = select_ln124_reg_1031_pp0_iter3_reg;

assign iii_cast_fu_392_p1 = select_ln124_fu_352_p3;

assign mul33_fu_794_p0 = mul33_fu_794_p00;

assign mul33_fu_794_p00 = p_lshr_f9_cast_reg_968_pp0_iter3_reg;

assign mul33_fu_794_p1 = 7'd11;

assign mul33_mid1_fu_812_p0 = mul33_mid1_fu_812_p00;

assign mul33_mid1_fu_812_p00 = p_lshr_f9_cast_mid1_reg_1013_pp0_iter3_reg;

assign mul33_mid1_fu_812_p1 = 7'd11;

assign mul351_fu_803_p2 = (mul33_fu_794_p2 + p_cast2_fu_800_p1);

assign mul351_mid1_fu_838_p2 = (select_ln121_1_fu_818_p3 + p_cast2_mid1_fu_834_p1);

assign mul_ln124_1_fu_537_p0 = mul_ln124_1_fu_537_p00;

assign mul_ln124_1_fu_537_p00 = p_mid110_fu_528_p2;

assign mul_ln124_1_fu_537_p1 = 9'd22;

assign mul_ln124_fu_467_p0 = mul_ln124_fu_467_p00;

assign mul_ln124_fu_467_p00 = empty_34_reg_973;

assign mul_ln124_fu_467_p1 = 9'd22;

assign or_ln124_1_fu_378_p2 = (select_ln124_2_fu_370_p3 | 9'd1);

assign or_ln124_2_fu_568_p2 = (select_ln124_3_fu_561_p3 | 9'd1);

assign or_ln124_fu_346_p2 = (icmp_ln124_fu_266_p2 | and_ln121_fu_334_p2);

assign or_ln136_1_fu_628_p2 = (icmp_ln136_3_fu_622_p2 | icmp_ln136_2_fu_616_p2);

assign or_ln136_2_fu_646_p2 = (icmp_ln136_5_fu_640_p2 | icmp_ln136_4_fu_634_p2);

assign or_ln136_3_fu_744_p2 = (icmp_ln136_7_fu_738_p2 | icmp_ln136_6_fu_732_p2);

assign or_ln136_4_fu_762_p2 = (icmp_ln136_9_fu_756_p2 | icmp_ln136_8_fu_750_p2);

assign or_ln136_5_fu_921_p2 = (icmp_ln136_11_fu_915_p2 | icmp_ln136_10_fu_909_p2);

assign or_ln136_6_fu_939_p2 = (icmp_ln136_13_fu_933_p2 | icmp_ln136_12_fu_927_p2);

assign or_ln136_fu_503_p2 = (icmp_ln136_fu_491_p2 | icmp_ln136_1_fu_497_p2);

assign output_r_address0 = zext_ln142_fu_964_p1;

assign output_r_d0 = ((and_ln136_6_fu_951_p2[0:0] == 1'b1) ? input_load_3_reg_1137 : select_ln136_2_reg_1125_pp0_iter3_reg);

assign p_cast2_fu_800_p1 = p_lshr_f_cast_reg_978_pp0_iter3_reg;

assign p_cast2_mid1_fu_834_p1 = p_lshr_f_cast_mid1_fu_825_p4;

assign p_lshr_f_cast_mid1_fu_825_p4 = {{ii_2_reg_1025_pp0_iter3_reg[4:1]}};

assign p_mid110_fu_528_p2 = (5'd1 | add_ln121_1_reg_1007_pp0_iter1_reg);

assign p_mid1_fu_300_p0 = p_mid1_fu_300_p00;

assign p_mid1_fu_300_p00 = add_ln121_1_fu_280_p2;

assign p_mid1_fu_300_p1 = 9'd22;

assign select_ln121_1_fu_818_p3 = ((icmp_ln124_reg_992_pp0_iter3_reg[0:0] == 1'b1) ? mul33_mid1_fu_812_p2 : mul33_fu_794_p2);

assign select_ln121_2_fu_306_p3 = ((icmp_ln124_fu_266_p2[0:0] == 1'b1) ? p_mid1_fu_300_p2 : empty_fu_228_p2);

assign select_ln121_3_fu_543_p3 = ((icmp_ln124_reg_992_pp0_iter1_reg[0:0] == 1'b1) ? mul_ln124_1_fu_537_p2 : mul_ln124_reg_1095);

assign select_ln121_4_fu_314_p3 = ((icmp_ln124_fu_266_p2[0:0] == 1'b1) ? p_mid1_fu_300_p2 : add_ln136_fu_254_p2);

assign select_ln121_5_fu_549_p3 = ((icmp_ln124_reg_992_pp0_iter1_reg[0:0] == 1'b1) ? mul_ln124_1_fu_537_p2 : add_ln136_2_fu_524_p2);

assign select_ln121_6_fu_442_p3 = ((icmp_ln124_reg_992[0:0] == 1'b1) ? add_ln121_1_reg_1007 : i_reg_152);

assign select_ln121_7_fu_844_p3 = ((icmp_ln124_reg_992_pp0_iter3_reg[0:0] == 1'b1) ? mul33_mid1_fu_812_p2 : mul351_fu_803_p2);

assign select_ln121_fu_272_p3 = ((icmp_ln124_fu_266_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_ii_phi_fu_179_p4);

assign select_ln124_1_fu_851_p3 = ((and_ln121_reg_1018_pp0_iter3_reg[0:0] == 1'b1) ? mul351_mid1_fu_838_p2 : select_ln121_7_fu_844_p3);

assign select_ln124_2_fu_370_p3 = ((and_ln121_fu_334_p2[0:0] == 1'b1) ? add_ln136_6_fu_364_p2 : select_ln121_4_fu_314_p3);

assign select_ln124_3_fu_561_p3 = ((and_ln121_reg_1018_pp0_iter1_reg[0:0] == 1'b1) ? add_ln136_7_fu_556_p2 : select_ln121_5_fu_549_p3);

assign select_ln124_4_fu_448_p3 = ((and_ln121_reg_1018[0:0] == 1'b1) ? ii_2_reg_1025 : select_ln121_reg_1002);

assign select_ln124_5_fu_458_p3 = ((icmp_ln124_reg_992[0:0] == 1'b1) ? 10'd1 : add_ln124_1_reg_1058);

assign select_ln124_fu_352_p3 = ((or_ln124_fu_346_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_iii_phi_fu_190_p4);

assign select_ln136_1_fu_664_p3 = ((and_ln136_2_fu_658_p2[0:0] == 1'b1) ? input_load_1_reg_1078 : select_ln136_reg_1101);

assign select_ln136_2_fu_780_p3 = ((and_ln136_4_fu_774_p2[0:0] == 1'b1) ? reg_208 : select_ln136_1_reg_1108);

assign select_ln136_fu_515_p3 = ((and_ln136_fu_509_p2[0:0] == 1'b1) ? reg_208 : 32'd0);

assign shl_ln136_1_mid2_fu_574_p3 = {{or_ln124_2_fu_568_p2}, {5'd0}};

assign shl_ln136_mid2_fu_384_p3 = {{or_ln124_1_fu_378_p2}, {5'd0}};

assign tmp_10_fu_895_p4 = {{bitcast_ln136_6_fu_892_p1[30:23]}};

assign tmp_1_fu_718_p4 = {{bitcast_ln136_4_fu_715_p1[30:23]}};

assign tmp_3_fu_878_p4 = {{bitcast_ln136_5_fu_875_p1[30:23]}};

assign tmp_4_fu_477_p4 = {{bitcast_ln136_fu_473_p1[30:23]}};

assign tmp_6_fu_585_p4 = {{bitcast_ln136_1_fu_582_p1[30:23]}};

assign tmp_7_fu_602_p4 = {{bitcast_ln136_2_fu_599_p1[30:23]}};

assign tmp_9_fu_670_p4 = {{select_ln124_3_fu_561_p3[8:1]}};

assign tmp_fu_396_p4 = {{select_ln124_2_fu_370_p3[8:1]}};

assign tmp_s_fu_701_p4 = {{bitcast_ln136_3_fu_697_p1[30:23]}};

assign trunc_ln136_1_fu_595_p1 = bitcast_ln136_1_fu_582_p1[22:0];

assign trunc_ln136_2_fu_612_p1 = bitcast_ln136_2_fu_599_p1[22:0];

assign trunc_ln136_3_fu_711_p1 = bitcast_ln136_3_fu_697_p1[22:0];

assign trunc_ln136_4_fu_728_p1 = bitcast_ln136_4_fu_715_p1[22:0];

assign trunc_ln136_5_fu_888_p1 = bitcast_ln136_5_fu_875_p1[22:0];

assign trunc_ln136_6_fu_905_p1 = bitcast_ln136_6_fu_892_p1[22:0];

assign trunc_ln136_fu_487_p1 = bitcast_ln136_fu_473_p1[22:0];

assign xor_ln121_fu_322_p2 = (icmp_ln124_fu_266_p2 ^ 1'd1);

assign zext_ln127_1_fu_360_p1 = ii_2_fu_340_p2;

assign zext_ln127_fu_250_p1 = ap_phi_mux_ii_phi_fu_179_p4;

assign zext_ln136_1_fu_425_p1 = add_ln136_3_fu_419_p2;

assign zext_ln136_2_fu_687_p1 = add_ln136_4_fu_680_p3;

assign zext_ln136_3_fu_787_p1 = add_ln136_5_reg_1120;

assign zext_ln136_fu_414_p1 = add_ln136_1_fu_406_p3;

assign zext_ln142_fu_964_p1 = add_ln142_reg_1144;

always @ (posedge ap_clk) begin
    empty_34_reg_973[0] <= 1'b1;
    zext_ln127_reg_983[8:5] <= 4'b0000;
    zext_ln127_reg_983_pp0_iter1_reg[8:5] <= 4'b0000;
    zext_ln127_1_reg_1038[8:5] <= 4'b0000;
    zext_ln127_1_reg_1038_pp0_iter1_reg[8:5] <= 4'b0000;
    iii_cast_reg_1043[13:6] <= 8'b00000000;
    iii_cast_reg_1043_pp0_iter1_reg[13:6] <= 8'b00000000;
end

endmodule //infer_max_pooling2d_2

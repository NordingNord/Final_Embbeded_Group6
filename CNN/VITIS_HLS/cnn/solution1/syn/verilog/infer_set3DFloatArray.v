// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_set3DFloatArray (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_we0,
        array_r_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] array_r_address0;
output   array_r_ce0;
output   array_r_we0;
output  [31:0] array_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_r_ce0;
reg array_r_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] add_ln8_fu_89_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln12_fu_148_p2;
wire   [0:0] icmp_ln8_fu_95_p2;
wire   [6:0] select_ln10_22_fu_160_p3;
reg   [5:0] indvar_flatten11_reg_56;
reg   [6:0] indvar_flatten_reg_67;
reg   [5:0] iii_reg_78;
wire   [63:0] zext_ln14_fu_143_p1;
wire   [0:0] icmp_ln10_fu_101_p2;
wire   [0:0] icmp_ln12_fu_113_p2;
wire   [0:0] xor_ln8_fu_107_p2;
wire   [0:0] and_ln8_fu_119_p2;
wire   [0:0] or_ln10_fu_125_p2;
wire   [5:0] select_ln10_fu_131_p3;
wire   [4:0] empty_32_fu_139_p1;
wire   [6:0] add_ln10_fu_154_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        iii_reg_78 <= add_ln12_fu_148_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_78 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten11_reg_56 <= add_ln8_fu_89_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten11_reg_56 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_67 <= select_ln10_22_fu_160_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_67 <= 7'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        array_r_we0 = 1'b1;
    end else begin
        array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_154_p2 = (indvar_flatten_reg_67 + 7'd1);

assign add_ln12_fu_148_p2 = (select_ln10_fu_131_p3 + 6'd1);

assign add_ln8_fu_89_p2 = (indvar_flatten11_reg_56 + 6'd1);

assign and_ln8_fu_119_p2 = (xor_ln8_fu_107_p2 & icmp_ln12_fu_113_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign array_r_address0 = zext_ln14_fu_143_p1;

assign array_r_d0 = 32'd0;

assign empty_32_fu_139_p1 = select_ln10_fu_131_p3[4:0];

assign icmp_ln10_fu_101_p2 = ((indvar_flatten_reg_67 == 7'd32) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_113_p2 = ((iii_reg_78 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_95_p2 = ((indvar_flatten11_reg_56 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln10_fu_125_p2 = (icmp_ln10_fu_101_p2 | and_ln8_fu_119_p2);

assign select_ln10_22_fu_160_p3 = ((icmp_ln10_fu_101_p2[0:0] == 1'b1) ? 7'd1 : add_ln10_fu_154_p2);

assign select_ln10_fu_131_p3 = ((or_ln10_fu_125_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_78);

assign xor_ln8_fu_107_p2 = (icmp_ln10_fu_101_p2 ^ 1'd1);

assign zext_ln14_fu_143_p1 = empty_32_fu_139_p1;

endmodule //infer_set3DFloatArray

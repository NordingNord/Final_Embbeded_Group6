// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_set3DFloatArray_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_we0,
        array_r_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] array_r_address0;
output   array_r_ce0;
output   array_r_we0;
output  [31:0] array_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_r_ce0;
reg array_r_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [16:0] indvar_flatten17_reg_78;
reg   [5:0] i_reg_89;
reg   [11:0] indvar_flatten_reg_100;
reg   [5:0] ii_reg_111;
reg   [5:0] iii_reg_122;
wire   [16:0] add_ln8_fu_133_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln8_fu_139_p2;
reg   [0:0] icmp_ln8_reg_311;
reg   [0:0] icmp_ln8_reg_311_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_311_pp0_iter2_reg;
wire   [0:0] icmp_ln10_fu_145_p2;
reg   [0:0] icmp_ln10_reg_315;
reg   [0:0] icmp_ln10_reg_315_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_315_pp0_iter2_reg;
wire   [5:0] mul7_mid2_v_v_fu_157_p3;
reg   [5:0] mul7_mid2_v_v_reg_323;
wire   [11:0] select_ln10_3_fu_175_p3;
wire   [10:0] tmp_2_fu_183_p3;
reg   [10:0] tmp_2_reg_338;
wire   [0:0] icmp_ln12_mid216_fu_209_p2;
reg   [0:0] icmp_ln12_mid216_reg_343;
wire   [5:0] add_ln10_fu_215_p2;
reg   [5:0] add_ln10_reg_348;
wire   [5:0] select_ln10_fu_226_p3;
reg   [5:0] select_ln10_reg_353;
wire   [5:0] select_ln10_2_fu_234_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [5:0] add_ln12_fu_242_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter2_state4;
reg    ap_enable_reg_pp0_iter3;
reg   [5:0] ap_phi_mux_i_phi_fu_93_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln14_fu_294_p1;
wire   [5:0] add_ln8_1_fu_151_p2;
wire   [11:0] add_ln10_1_fu_169_p2;
wire   [0:0] icmp_ln12_fu_203_p2;
wire   [0:0] not_exitcond_flatten_fu_198_p2;
wire   [5:0] ii_mid27_fu_191_p3;
wire   [0:0] or_ln10_fu_221_p2;
wire   [10:0] p_mid1_fu_254_p3;
wire   [10:0] zext_ln12_mid214_fu_248_p3;
wire   [10:0] select_ln10_1_fu_261_p3;
wire   [16:0] grp_fu_299_p2;
wire   [10:0] tmp_1_fu_272_p4;
wire   [16:0] tmp_fu_281_p3;
wire   [16:0] select_ln10_1_cast_fu_268_p1;
wire   [16:0] add_ln14_fu_288_p2;
wire   [5:0] grp_fu_299_p0;
wire   [11:0] grp_fu_299_p1;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [16:0] grp_fu_299_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

infer_mul_mul_6ns_12ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 17 ))
mul_mul_6ns_12ns_17_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_299_p0),
    .din1(grp_fu_299_p1),
    .ce(1'b1),
    .dout(grp_fu_299_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_311 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_89 <= mul7_mid2_v_v_reg_323;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_89 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln8_reg_311_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ii_reg_111 <= select_ln10_2_fu_234_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_111 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln8_reg_311_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iii_reg_122 <= add_ln12_fu_242_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_122 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten17_reg_78 <= add_ln8_fu_133_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_78 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_100 <= select_ln10_3_fu_175_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_100 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_311_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln10_reg_348 <= add_ln10_fu_215_p2;
        icmp_ln12_mid216_reg_343 <= icmp_ln12_mid216_fu_209_p2;
        select_ln10_reg_353 <= select_ln10_fu_226_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_315 <= icmp_ln10_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_315_pp0_iter1_reg <= icmp_ln10_reg_315;
        icmp_ln8_reg_311 <= icmp_ln8_fu_139_p2;
        icmp_ln8_reg_311_pp0_iter1_reg <= icmp_ln8_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln10_reg_315_pp0_iter2_reg <= icmp_ln10_reg_315_pp0_iter1_reg;
        icmp_ln8_reg_311_pp0_iter2_reg <= icmp_ln8_reg_311_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul7_mid2_v_v_reg_323 <= mul7_mid2_v_v_fu_157_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_315_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_338[10 : 5] <= tmp_2_fu_183_p3[10 : 5];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_311 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_93_p4 = mul7_mid2_v_v_reg_323;
    end else begin
        ap_phi_mux_i_phi_fu_93_p4 = i_reg_89;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_311_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        array_r_we0 = 1'b1;
    end else begin
        array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_169_p2 = (indvar_flatten_reg_100 + 12'd1);

assign add_ln10_fu_215_p2 = (ii_mid27_fu_191_p3 + 6'd1);

assign add_ln12_fu_242_p2 = (select_ln10_fu_226_p3 + 6'd1);

assign add_ln14_fu_288_p2 = (tmp_fu_281_p3 + select_ln10_1_cast_fu_268_p1);

assign add_ln8_1_fu_151_p2 = (ap_phi_mux_i_phi_fu_93_p4 + 6'd1);

assign add_ln8_fu_133_p2 = (indvar_flatten17_reg_78 + 17'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign array_r_address0 = zext_ln14_fu_294_p1;

assign array_r_d0 = 32'd0;

assign grp_fu_299_p0 = grp_fu_299_p00;

assign grp_fu_299_p00 = mul7_mid2_v_v_fu_157_p3;

assign grp_fu_299_p1 = 17'd1856;

assign icmp_ln10_fu_145_p2 = ((indvar_flatten_reg_100 == 12'd1856) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_203_p2 = ((iii_reg_122 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln12_mid216_fu_209_p2 = (not_exitcond_flatten_fu_198_p2 & icmp_ln12_fu_203_p2);

assign icmp_ln8_fu_139_p2 = ((indvar_flatten17_reg_78 == 17'd107648) ? 1'b1 : 1'b0);

assign ii_mid27_fu_191_p3 = ((icmp_ln10_reg_315_pp0_iter1_reg[0:0] == 1'b1) ? 6'd0 : ii_reg_111);

assign mul7_mid2_v_v_fu_157_p3 = ((icmp_ln10_fu_145_p2[0:0] == 1'b1) ? add_ln8_1_fu_151_p2 : ap_phi_mux_i_phi_fu_93_p4);

assign not_exitcond_flatten_fu_198_p2 = (icmp_ln10_reg_315_pp0_iter1_reg ^ 1'd1);

assign or_ln10_fu_221_p2 = (icmp_ln12_mid216_fu_209_p2 | icmp_ln10_reg_315_pp0_iter1_reg);

assign p_mid1_fu_254_p3 = {{add_ln10_reg_348}, {5'd0}};

assign select_ln10_1_cast_fu_268_p1 = select_ln10_1_fu_261_p3;

assign select_ln10_1_fu_261_p3 = ((icmp_ln12_mid216_reg_343[0:0] == 1'b1) ? p_mid1_fu_254_p3 : zext_ln12_mid214_fu_248_p3);

assign select_ln10_2_fu_234_p3 = ((icmp_ln12_mid216_fu_209_p2[0:0] == 1'b1) ? add_ln10_fu_215_p2 : ii_mid27_fu_191_p3);

assign select_ln10_3_fu_175_p3 = ((icmp_ln10_fu_145_p2[0:0] == 1'b1) ? 12'd1 : add_ln10_1_fu_169_p2);

assign select_ln10_fu_226_p3 = ((or_ln10_fu_221_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_122);

assign tmp_1_fu_272_p4 = {{grp_fu_299_p2[16:6]}};

assign tmp_2_fu_183_p3 = {{ii_reg_111}, {5'd0}};

assign tmp_fu_281_p3 = {{tmp_1_fu_272_p4}, {select_ln10_reg_353}};

assign zext_ln12_mid214_fu_248_p3 = ((icmp_ln10_reg_315_pp0_iter2_reg[0:0] == 1'b1) ? 11'd0 : tmp_2_reg_338);

assign zext_ln14_fu_294_p1 = add_ln14_fu_288_p2;

always @ (posedge ap_clk) begin
    tmp_2_reg_338[4:0] <= 5'b00000;
end

endmodule //infer_set3DFloatArray_5

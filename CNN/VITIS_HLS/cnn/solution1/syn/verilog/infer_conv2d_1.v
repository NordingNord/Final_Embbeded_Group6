// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_1057_p_din0,
        grp_fu_1057_p_din1,
        grp_fu_1057_p_opcode,
        grp_fu_1057_p_dout0,
        grp_fu_1057_p_ce,
        grp_fu_1064_p_din0,
        grp_fu_1064_p_din1,
        grp_fu_1064_p_dout0,
        grp_fu_1064_p_ce,
        grp_fu_1083_p_din0,
        grp_fu_1083_p_din1,
        grp_fu_1083_p_opcode,
        grp_fu_1083_p_dout0,
        grp_fu_1083_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_pp0_stage0 = 16'd8;
parameter    ap_ST_fsm_pp0_stage1 = 16'd16;
parameter    ap_ST_fsm_pp0_stage2 = 16'd32;
parameter    ap_ST_fsm_pp0_stage3 = 16'd64;
parameter    ap_ST_fsm_state17 = 16'd128;
parameter    ap_ST_fsm_state18 = 16'd256;
parameter    ap_ST_fsm_state19 = 16'd512;
parameter    ap_ST_fsm_state20 = 16'd1024;
parameter    ap_ST_fsm_state21 = 16'd2048;
parameter    ap_ST_fsm_state22 = 16'd4096;
parameter    ap_ST_fsm_state23 = 16'd8192;
parameter    ap_ST_fsm_state24 = 16'd16384;
parameter    ap_ST_fsm_state25 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_1057_p_din0;
output  [31:0] grp_fu_1057_p_din1;
output  [1:0] grp_fu_1057_p_opcode;
input  [31:0] grp_fu_1057_p_dout0;
output   grp_fu_1057_p_ce;
output  [31:0] grp_fu_1064_p_din0;
output  [31:0] grp_fu_1064_p_din1;
input  [31:0] grp_fu_1064_p_dout0;
output   grp_fu_1064_p_ce;
output  [31:0] grp_fu_1083_p_din0;
output  [31:0] grp_fu_1083_p_din1;
output  [4:0] grp_fu_1083_p_opcode;
input  [0:0] grp_fu_1083_p_dout0;
output   grp_fu_1083_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[11:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] layer_4_weights_address0;
reg    layer_4_weights_ce0;
wire   [31:0] layer_4_weights_q0;
wire   [4:0] layer_4_bias_address0;
reg    layer_4_bias_ce0;
wire   [31:0] layer_4_bias_q0;
reg   [8:0] indvar_flatten36_reg_216;
reg   [5:0] iv_reg_227;
reg   [3:0] indvar_flatten_reg_238;
reg   [2:0] v_reg_249;
reg   [2:0] vi_reg_260;
reg   [31:0] add4320_reg_271;
wire   [11:0] add_ln71_2_fu_296_p2;
reg   [11:0] add_ln71_2_reg_849;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln74_fu_354_p2;
reg   [0:0] icmp_ln74_reg_857;
wire   [0:0] icmp_ln71_fu_348_p2;
wire   [3:0] select_ln71_5_fu_412_p3;
reg   [3:0] select_ln71_5_reg_862;
wire   [5:0] iii_mid2_fu_436_p3;
reg   [5:0] iii_mid2_reg_868;
wire   [3:0] ii_cast_mid2_fu_444_p3;
reg   [3:0] ii_cast_mid2_reg_875;
reg   [11:0] output_addr_reg_881;
wire   [6:0] ii_cast_mid2_cast_fu_497_p1;
reg   [6:0] ii_cast_mid2_cast_reg_886;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln77_fu_500_p1;
reg   [63:0] zext_ln77_reg_891;
wire   [13:0] zext_ln77_3_fu_503_p1;
reg   [13:0] zext_ln77_3_reg_896;
wire   [8:0] add_ln83_fu_506_p2;
reg   [8:0] add_ln83_reg_906;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln83_fu_546_p2;
reg   [0:0] icmp_ln83_reg_911;
reg   [0:0] icmp_ln83_reg_911_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_911_pp0_iter2_reg;
wire   [0:0] icmp_ln86_fu_552_p2;
reg   [0:0] icmp_ln86_reg_915;
wire   [5:0] select_ln83_5_fu_572_p3;
reg   [5:0] select_ln83_5_reg_920;
wire   [2:0] select_ln86_fu_622_p3;
reg   [2:0] select_ln86_reg_926;
wire  signed [2:0] select_ln86_5_fu_658_p3;
reg  signed [2:0] select_ln86_5_reg_931;
wire  signed [1:0] trunc_ln91_fu_693_p1;
reg  signed [1:0] trunc_ln91_reg_941;
wire   [3:0] add_ln86_3_fu_727_p2;
reg   [3:0] add_ln86_3_reg_951;
reg   [31:0] layer_4_weights_load_reg_956;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] add_ln95_fu_752_p2;
reg   [2:0] add_ln95_reg_961;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire   [3:0] select_ln86_7_fu_768_p3;
reg   [3:0] select_ln86_7_reg_971;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] mul_reg_981;
wire   [31:0] grp_fu_281_p2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state17;
wire   [5:0] add_ln77_fu_774_p2;
reg   [5:0] add_ln77_reg_996;
wire   [9:0] select_ln74_fu_785_p3;
reg   [9:0] select_ln74_reg_1001;
reg   [31:0] layer_4_bias_load_reg_1006;
wire    ap_CS_fsm_state18;
reg   [31:0] add_reg_1011;
wire    ap_CS_fsm_state23;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [11:0] indvar_flatten80_reg_160;
wire    ap_CS_fsm_state25;
reg   [3:0] i_reg_171;
reg   [9:0] indvar_flatten50_reg_182;
reg   [3:0] ii_reg_194;
reg   [5:0] iii_reg_205;
reg   [8:0] ap_phi_mux_indvar_flatten36_phi_fu_220_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_iv_phi_fu_231_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_242_p4;
reg   [2:0] ap_phi_mux_v_phi_fu_253_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_264_p4;
reg   [31:0] ap_phi_mux_add4320_phi_fu_274_p4;
wire   [63:0] sum19_cast_fu_492_p1;
wire   [63:0] zext_ln98_2_fu_722_p1;
wire   [63:0] zext_ln98_fu_763_p1;
wire    ap_block_pp0_stage3;
reg   [31:0] grp_fu_281_p0;
reg   [31:0] grp_fu_281_p1;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_286_p0;
wire   [31:0] grp_fu_286_p1;
wire   [31:0] grp_fu_291_p0;
wire   [31:0] grp_fu_291_p1;
wire    ap_CS_fsm_state24;
wire   [3:0] empty_fu_302_p2;
wire   [6:0] tmp_46_fu_312_p3;
wire   [6:0] p_cast_fu_308_p1;
wire   [3:0] tmp3_fu_326_p2;
wire   [6:0] tmp3_cast_fu_332_p1;
wire   [6:0] tmp_fu_320_p2;
wire   [6:0] p_mid_fu_372_p3;
wire   [6:0] p_cast_mid1_fu_368_p1;
wire   [6:0] tmp_mid1_fu_380_p2;
wire   [0:0] icmp_ln77_fu_400_p2;
wire   [0:0] xor_ln71_fu_394_p2;
wire   [3:0] add_ln71_fu_342_p2;
wire   [3:0] select_ln71_fu_360_p3;
wire   [0:0] and_ln71_fu_406_p2;
wire   [0:0] empty_69_fu_430_p2;
wire   [3:0] add_ln74_fu_420_p2;
wire   [6:0] ii_cast_dup_fu_426_p1;
wire   [6:0] select_ln71_4_fu_386_p3;
wire   [6:0] empty_64_fu_336_p2;
wire   [6:0] p_mid146_fu_452_p2;
wire   [6:0] select_ln71_6_fu_458_p3;
wire   [6:0] empty_70_fu_466_p3;
wire   [11:0] zext_ln77_4_fu_482_p1;
wire   [11:0] p_mid1_fu_474_p3;
wire   [11:0] sum19_fu_486_p2;
wire   [2:0] indvars_iv_next34_fu_512_p2;
wire   [1:0] empty_65_fu_522_p1;
wire   [3:0] p_shl2_fu_526_p3;
wire   [3:0] indvars_iv_next34_cast_fu_518_p1;
wire   [3:0] sub_ln94_fu_534_p2;
wire   [5:0] add_ln83_1_fu_566_p2;
wire   [3:0] add_ln95_3_fu_540_p2;
wire   [0:0] icmp_ln89_fu_598_p2;
wire   [0:0] xor_ln83_fu_592_p2;
wire   [2:0] select_ln83_fu_558_p3;
wire   [0:0] and_ln83_fu_604_p2;
wire   [0:0] or_ln86_fu_616_p2;
wire   [2:0] indvars_iv_next34_mid1_fu_630_p2;
wire   [1:0] empty_67_fu_640_p1;
wire   [3:0] p_shl2_mid1_fu_644_p3;
wire   [3:0] indvars_iv_next34_cast_mid1_fu_636_p1;
wire   [2:0] indvars_iv_next34_dup_fu_610_p2;
wire  signed [3:0] sext_ln86_fu_666_p1;
wire   [3:0] add_ln86_fu_670_p2;
wire   [3:0] sub_ln94_2_fu_652_p2;
wire   [3:0] add_ln95_4_fu_679_p2;
wire   [3:0] select_ln83_6_fu_584_p3;
wire   [3:0] select_ln86_6_fu_685_p3;
wire  signed [3:0] sext_ln94_fu_697_p1;
wire   [3:0] add_ln95_5_fu_701_p2;
wire   [4:0] trunc_ln83_fu_580_p1;
wire   [13:0] shl_ln1_fu_707_p4;
wire   [13:0] add_ln98_2_fu_717_p2;
wire   [6:0] grp_fu_841_p3;
wire  signed [6:0] sext_ln91_fu_736_p1;
(* use_dsp48 = "no" *) wire   [6:0] add_ln91_fu_739_p2;
wire   [11:0] shl_ln_fu_744_p3;
wire   [11:0] zext_ln83_fu_733_p1;
wire   [11:0] add_ln98_fu_757_p2;
wire   [9:0] add_ln74_2_fu_779_p2;
wire   [31:0] bitcast_ln49_fu_792_p1;
wire   [7:0] tmp_s_fu_795_p4;
wire   [22:0] trunc_ln49_fu_805_p1;
wire   [0:0] icmp_ln49_7_fu_815_p2;
wire   [0:0] icmp_ln49_fu_809_p2;
wire   [0:0] or_ln49_fu_821_p2;
wire   [0:0] grp_fu_291_p2;
wire   [0:0] and_ln49_fu_827_p2;
wire   [3:0] grp_fu_841_p0;
wire   [4:0] grp_fu_841_p1;
wire   [3:0] grp_fu_841_p2;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    grp_fu_281_ce;
wire    grp_fu_286_ce;
wire    grp_fu_291_ce;
wire   [4:0] grp_fu_291_opcode;
reg   [15:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage0_00001;
wire   [6:0] grp_fu_841_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

infer_conv2d_1_layer_4_weights #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
layer_4_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_4_weights_address0),
    .ce0(layer_4_weights_ce0),
    .q0(layer_4_weights_q0)
);

infer_conv2d_1_layer_4_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_4_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_4_bias_address0),
    .ce0(layer_4_bias_ce0),
    .q0(layer_4_bias_q0)
);

infer_mac_muladd_4ns_5ns_4ns_7_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 7 ))
mac_muladd_4ns_5ns_4ns_7_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_841_p0),
    .din1(grp_fu_841_p1),
    .din2(grp_fu_841_p2),
    .ce(1'b1),
    .dout(grp_fu_841_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add4320_reg_271 <= grp_fu_1057_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        add4320_reg_271 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_reg_171 <= select_ln71_5_reg_862;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_171 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ii_reg_194 <= ii_cast_mid2_reg_875;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_194 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        iii_reg_205 <= add_ln77_reg_996;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_205 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten36_reg_216 <= add_ln83_reg_906;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten36_reg_216 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        indvar_flatten50_reg_182 <= select_ln74_reg_1001;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten50_reg_182 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        indvar_flatten80_reg_160 <= add_ln71_2_reg_849;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten80_reg_160 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_238 <= select_ln86_7_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_238 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iv_reg_227 <= select_ln83_5_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_reg_227 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v_reg_249 <= select_ln86_5_reg_931;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_249 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vi_reg_260 <= add_ln95_reg_961;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vi_reg_260 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln71_2_reg_849 <= add_ln71_2_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln77_reg_996 <= add_ln77_fu_774_p2;
        select_ln74_reg_1001 <= select_ln74_fu_785_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln83_reg_906 <= add_ln83_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_546_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln86_3_reg_951 <= add_ln86_3_fu_727_p2;
        icmp_ln86_reg_915 <= icmp_ln86_fu_552_p2;
        select_ln86_reg_926 <= select_ln86_fu_622_p3;
        trunc_ln91_reg_941 <= trunc_ln91_fu_693_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln95_reg_961 <= add_ln95_fu_752_p2;
        select_ln86_7_reg_971 <= select_ln86_7_fu_768_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_reg_1011 <= grp_fu_1057_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln74_reg_857 <= icmp_ln74_fu_354_p2;
        ii_cast_mid2_reg_875 <= ii_cast_mid2_fu_444_p3;
        iii_mid2_reg_868 <= iii_mid2_fu_436_p3;
        output_addr_reg_881 <= sum19_cast_fu_492_p1;
        select_ln71_5_reg_862 <= select_ln71_5_fu_412_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln83_reg_911 <= icmp_ln83_fu_546_p2;
        icmp_ln83_reg_911_pp0_iter1_reg <= icmp_ln83_reg_911;
        icmp_ln83_reg_911_pp0_iter2_reg <= icmp_ln83_reg_911_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ii_cast_mid2_cast_reg_886[3 : 0] <= ii_cast_mid2_cast_fu_497_p1[3 : 0];
        zext_ln77_3_reg_896[5 : 0] <= zext_ln77_3_fu_503_p1[5 : 0];
        zext_ln77_reg_891[5 : 0] <= zext_ln77_fu_500_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        layer_4_bias_load_reg_1006 <= layer_4_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        layer_4_weights_load_reg_956 <= layer_4_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln83_reg_911_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_reg_981 <= grp_fu_1064_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_fu_546_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln83_5_reg_920 <= select_ln83_5_fu_572_p3;
        select_ln86_5_reg_931 <= select_ln86_5_fu_658_p3;
    end
end

always @ (*) begin
    if ((icmp_ln83_reg_911 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln71_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_add4320_phi_fu_274_p4 = grp_fu_1057_p_dout0;
    end else begin
        ap_phi_mux_add4320_phi_fu_274_p4 = add4320_reg_271;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten36_phi_fu_220_p4 = add_ln83_reg_906;
    end else begin
        ap_phi_mux_indvar_flatten36_phi_fu_220_p4 = indvar_flatten36_reg_216;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_242_p4 = select_ln86_7_reg_971;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_242_p4 = indvar_flatten_reg_238;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_iv_phi_fu_231_p4 = select_ln83_5_reg_920;
    end else begin
        ap_phi_mux_iv_phi_fu_231_p4 = iv_reg_227;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_v_phi_fu_253_p4 = select_ln86_5_reg_931;
    end else begin
        ap_phi_mux_v_phi_fu_253_p4 = v_reg_249;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln83_reg_911 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_vi_phi_fu_264_p4 = add_ln95_reg_961;
    end else begin
        ap_phi_mux_vi_phi_fu_264_p4 = vi_reg_260;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_281_p0 = add4320_reg_271;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_281_p0 = ap_phi_mux_add4320_phi_fu_274_p4;
    end else begin
        grp_fu_281_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_281_p1 = layer_4_bias_load_reg_1006;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_281_p1 = mul_reg_981;
    end else begin
        grp_fu_281_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        layer_4_bias_ce0 = 1'b1;
    end else begin
        layer_4_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        layer_4_weights_ce0 = 1'b1;
    end else begin
        layer_4_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_address0 = output_addr_reg_881;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = sum19_cast_fu_492_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state25))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln71_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_reg_911 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln83_reg_911 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_2_fu_296_p2 = (indvar_flatten80_reg_160 + 12'd1);

assign add_ln71_fu_342_p2 = (i_reg_171 + 4'd1);

assign add_ln74_2_fu_779_p2 = (indvar_flatten50_reg_182 + 10'd1);

assign add_ln74_fu_420_p2 = (select_ln71_fu_360_p3 + 4'd1);

assign add_ln77_fu_774_p2 = (iii_mid2_reg_868 + 6'd1);

assign add_ln83_1_fu_566_p2 = (ap_phi_mux_iv_phi_fu_231_p4 + 6'd1);

assign add_ln83_fu_506_p2 = (ap_phi_mux_indvar_flatten36_phi_fu_220_p4 + 9'd1);

assign add_ln86_3_fu_727_p2 = (ap_phi_mux_indvar_flatten_phi_fu_242_p4 + 4'd1);

assign add_ln86_fu_670_p2 = ($signed(select_ln71_5_reg_862) + $signed(sext_ln86_fu_666_p1));

assign add_ln91_fu_739_p2 = ($signed(grp_fu_841_p3) + $signed(sext_ln91_fu_736_p1));

assign add_ln95_3_fu_540_p2 = (sub_ln94_fu_534_p2 + 4'd1);

assign add_ln95_4_fu_679_p2 = (sub_ln94_2_fu_652_p2 + 4'd1);

assign add_ln95_5_fu_701_p2 = ($signed(select_ln86_6_fu_685_p3) + $signed(sext_ln94_fu_697_p1));

assign add_ln95_fu_752_p2 = (select_ln86_reg_926 + 3'd1);

assign add_ln98_2_fu_717_p2 = (shl_ln1_fu_707_p4 + zext_ln77_3_reg_896);

assign add_ln98_fu_757_p2 = (shl_ln_fu_744_p3 + zext_ln83_fu_733_p1);

assign and_ln49_fu_827_p2 = (or_ln49_fu_821_p2 & grp_fu_1083_p_dout0);

assign and_ln71_fu_406_p2 = (xor_ln71_fu_394_p2 & icmp_ln77_fu_400_p2);

assign and_ln83_fu_604_p2 = (xor_ln83_fu_592_p2 & icmp_ln89_fu_598_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln49_fu_792_p1 = add_reg_1011;

assign empty_64_fu_336_p2 = (tmp3_cast_fu_332_p1 + tmp_fu_320_p2);

assign empty_65_fu_522_p1 = indvars_iv_next34_fu_512_p2[1:0];

assign empty_67_fu_640_p1 = indvars_iv_next34_mid1_fu_630_p2[1:0];

assign empty_69_fu_430_p2 = (icmp_ln74_fu_354_p2 | and_ln71_fu_406_p2);

assign empty_70_fu_466_p3 = ((and_ln71_fu_406_p2[0:0] == 1'b1) ? p_mid146_fu_452_p2 : select_ln71_6_fu_458_p3);

assign empty_fu_302_p2 = ($signed(i_reg_171) + $signed(4'd15));

assign grp_fu_1057_p_ce = 1'b1;

assign grp_fu_1057_p_din0 = grp_fu_281_p0;

assign grp_fu_1057_p_din1 = grp_fu_281_p1;

assign grp_fu_1057_p_opcode = 2'd0;

assign grp_fu_1064_p_ce = 1'b1;

assign grp_fu_1064_p_din0 = input_r_q0;

assign grp_fu_1064_p_din1 = layer_4_weights_load_reg_956;

assign grp_fu_1083_p_ce = 1'b1;

assign grp_fu_1083_p_din0 = add_reg_1011;

assign grp_fu_1083_p_din1 = 32'd0;

assign grp_fu_1083_p_opcode = 5'd2;

assign grp_fu_281_ce = 1'b1;

assign grp_fu_281_p2 = grp_fu_1057_p_dout0;

assign grp_fu_286_ce = 1'b1;

assign grp_fu_286_p0 = input_r_q0;

assign grp_fu_286_p1 = layer_4_weights_load_reg_956;

assign grp_fu_286_p2 = grp_fu_1064_p_dout0;

assign grp_fu_291_ce = 1'b1;

assign grp_fu_291_opcode = 5'd2;

assign grp_fu_291_p0 = add_reg_1011;

assign grp_fu_291_p1 = 32'd0;

assign grp_fu_291_p2 = grp_fu_1083_p_dout0;

assign grp_fu_841_p0 = grp_fu_841_p00;

assign grp_fu_841_p00 = add_ln86_fu_670_p2;

assign grp_fu_841_p1 = 7'd11;

assign grp_fu_841_p2 = ii_cast_mid2_cast_reg_886;

assign icmp_ln49_7_fu_815_p2 = ((trunc_ln49_fu_805_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_809_p2 = ((tmp_s_fu_795_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_348_p2 = ((indvar_flatten80_reg_160 == 12'd2592) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_354_p2 = ((indvar_flatten50_reg_182 == 10'd288) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_400_p2 = ((iii_reg_205 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_546_p2 = ((ap_phi_mux_indvar_flatten36_phi_fu_220_p4 == 9'd288) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_552_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_242_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_598_p2 = ((ap_phi_mux_vi_phi_fu_264_p4 == 3'd2) ? 1'b1 : 1'b0);

assign ii_cast_dup_fu_426_p1 = select_ln71_fu_360_p3;

assign ii_cast_mid2_cast_fu_497_p1 = ii_cast_mid2_reg_875;

assign ii_cast_mid2_fu_444_p3 = ((and_ln71_fu_406_p2[0:0] == 1'b1) ? add_ln74_fu_420_p2 : select_ln71_fu_360_p3);

assign iii_mid2_fu_436_p3 = ((empty_69_fu_430_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_205);

assign indvars_iv_next34_cast_fu_518_p1 = indvars_iv_next34_fu_512_p2;

assign indvars_iv_next34_cast_mid1_fu_636_p1 = indvars_iv_next34_mid1_fu_630_p2;

assign indvars_iv_next34_dup_fu_610_p2 = (select_ln83_fu_558_p3 + 3'd1);

assign indvars_iv_next34_fu_512_p2 = (ap_phi_mux_v_phi_fu_253_p4 + 3'd1);

assign indvars_iv_next34_mid1_fu_630_p2 = (select_ln83_fu_558_p3 + 3'd2);

assign input_r_address0 = zext_ln98_fu_763_p1;

assign layer_4_bias_address0 = zext_ln77_reg_891;

assign layer_4_weights_address0 = zext_ln98_2_fu_722_p1;

assign or_ln49_fu_821_p2 = (icmp_ln49_fu_809_p2 | icmp_ln49_7_fu_815_p2);

assign or_ln86_fu_616_p2 = (icmp_ln86_fu_552_p2 | and_ln83_fu_604_p2);

assign output_r_d0 = ((and_ln49_fu_827_p2[0:0] == 1'b1) ? add_reg_1011 : 32'd0);

assign p_cast_fu_308_p1 = empty_fu_302_p2;

assign p_cast_mid1_fu_368_p1 = i_reg_171;

assign p_mid146_fu_452_p2 = (ii_cast_dup_fu_426_p1 + select_ln71_4_fu_386_p3);

assign p_mid1_fu_474_p3 = {{empty_70_fu_466_p3}, {5'd0}};

assign p_mid_fu_372_p3 = {{i_reg_171}, {3'd0}};

assign p_shl2_fu_526_p3 = {{empty_65_fu_522_p1}, {2'd0}};

assign p_shl2_mid1_fu_644_p3 = {{empty_67_fu_640_p1}, {2'd0}};

assign select_ln71_4_fu_386_p3 = ((icmp_ln74_fu_354_p2[0:0] == 1'b1) ? tmp_mid1_fu_380_p2 : tmp_fu_320_p2);

assign select_ln71_5_fu_412_p3 = ((icmp_ln74_fu_354_p2[0:0] == 1'b1) ? add_ln71_fu_342_p2 : i_reg_171);

assign select_ln71_6_fu_458_p3 = ((icmp_ln74_fu_354_p2[0:0] == 1'b1) ? tmp_mid1_fu_380_p2 : empty_64_fu_336_p2);

assign select_ln71_fu_360_p3 = ((icmp_ln74_fu_354_p2[0:0] == 1'b1) ? 4'd1 : ii_reg_194);

assign select_ln74_fu_785_p3 = ((icmp_ln74_reg_857[0:0] == 1'b1) ? 10'd1 : add_ln74_2_fu_779_p2);

assign select_ln83_5_fu_572_p3 = ((icmp_ln86_fu_552_p2[0:0] == 1'b1) ? add_ln83_1_fu_566_p2 : ap_phi_mux_iv_phi_fu_231_p4);

assign select_ln83_6_fu_584_p3 = ((icmp_ln86_fu_552_p2[0:0] == 1'b1) ? 4'd1 : add_ln95_3_fu_540_p2);

assign select_ln83_fu_558_p3 = ((icmp_ln86_fu_552_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_253_p4);

assign select_ln86_5_fu_658_p3 = ((and_ln83_fu_604_p2[0:0] == 1'b1) ? indvars_iv_next34_dup_fu_610_p2 : select_ln83_fu_558_p3);

assign select_ln86_6_fu_685_p3 = ((and_ln83_fu_604_p2[0:0] == 1'b1) ? add_ln95_4_fu_679_p2 : select_ln83_6_fu_584_p3);

assign select_ln86_7_fu_768_p3 = ((icmp_ln86_reg_915[0:0] == 1'b1) ? 4'd1 : add_ln86_3_reg_951);

assign select_ln86_fu_622_p3 = ((or_ln86_fu_616_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_264_p4);

assign sext_ln86_fu_666_p1 = select_ln86_5_fu_658_p3;

assign sext_ln91_fu_736_p1 = trunc_ln91_reg_941;

assign sext_ln94_fu_697_p1 = trunc_ln91_fu_693_p1;

assign shl_ln1_fu_707_p4 = {{{add_ln95_5_fu_701_p2}, {trunc_ln83_fu_580_p1}}, {5'd0}};

assign shl_ln_fu_744_p3 = {{add_ln91_fu_739_p2}, {5'd0}};

assign sub_ln94_2_fu_652_p2 = (p_shl2_mid1_fu_644_p3 - indvars_iv_next34_cast_mid1_fu_636_p1);

assign sub_ln94_fu_534_p2 = (p_shl2_fu_526_p3 - indvars_iv_next34_cast_fu_518_p1);

assign sum19_cast_fu_492_p1 = sum19_fu_486_p2;

assign sum19_fu_486_p2 = (zext_ln77_4_fu_482_p1 + p_mid1_fu_474_p3);

assign tmp3_cast_fu_332_p1 = tmp3_fu_326_p2;

assign tmp3_fu_326_p2 = ($signed(ii_reg_194) + $signed(4'd15));

assign tmp_46_fu_312_p3 = {{empty_fu_302_p2}, {3'd0}};

assign tmp_fu_320_p2 = (tmp_46_fu_312_p3 + p_cast_fu_308_p1);

assign tmp_mid1_fu_380_p2 = (p_mid_fu_372_p3 + p_cast_mid1_fu_368_p1);

assign tmp_s_fu_795_p4 = {{bitcast_ln49_fu_792_p1[30:23]}};

assign trunc_ln49_fu_805_p1 = bitcast_ln49_fu_792_p1[22:0];

assign trunc_ln83_fu_580_p1 = select_ln83_5_fu_572_p3[4:0];

assign trunc_ln91_fu_693_p1 = select_ln86_fu_622_p3[1:0];

assign xor_ln71_fu_394_p2 = (icmp_ln74_fu_354_p2 ^ 1'd1);

assign xor_ln83_fu_592_p2 = (icmp_ln86_fu_552_p2 ^ 1'd1);

assign zext_ln77_3_fu_503_p1 = iii_mid2_reg_868;

assign zext_ln77_4_fu_482_p1 = iii_mid2_fu_436_p3;

assign zext_ln77_fu_500_p1 = iii_mid2_reg_868;

assign zext_ln83_fu_733_p1 = select_ln83_5_reg_920;

assign zext_ln98_2_fu_722_p1 = add_ln98_2_fu_717_p2;

assign zext_ln98_fu_763_p1 = add_ln98_fu_757_p2;

always @ (posedge ap_clk) begin
    ii_cast_mid2_cast_reg_886[6:4] <= 3'b000;
    zext_ln77_reg_891[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln77_3_reg_896[13:6] <= 8'b00000000;
end

endmodule //infer_conv2d_1

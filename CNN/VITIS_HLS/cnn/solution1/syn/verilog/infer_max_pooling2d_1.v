// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_max_pooling2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_788_p_din0,
        grp_fu_788_p_din1,
        grp_fu_788_p_opcode,
        grp_fu_788_p_dout0,
        grp_fu_788_p_ce,
        grp_fu_1839_p_din0,
        grp_fu_1839_p_din1,
        grp_fu_1839_p_opcode,
        grp_fu_1839_p_dout0,
        grp_fu_1839_p_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_788_p_din0;
output  [31:0] grp_fu_788_p_din1;
output  [4:0] grp_fu_788_p_opcode;
input  [0:0] grp_fu_788_p_dout0;
output   grp_fu_788_p_ce;
output  [31:0] grp_fu_1839_p_din0;
output  [31:0] grp_fu_1839_p_din1;
output  [4:0] grp_fu_1839_p_opcode;
input  [0:0] grp_fu_1839_p_dout0;
output   grp_fu_1839_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] input_r_address0;
reg input_r_ce0;
reg[11:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten58_reg_160;
reg   [3:0] i_reg_171;
reg   [8:0] indvar_flatten_reg_182;
reg   [3:0] ii_reg_193;
reg   [5:0] iii_reg_204;
reg   [31:0] reg_226;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln121_reg_1131;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln121_reg_1131_pp0_iter1_reg;
wire   [9:0] add_ln121_fu_232_p2;
reg   [9:0] add_ln121_reg_1126;
wire   [0:0] icmp_ln121_fu_334_p2;
reg   [0:0] icmp_ln121_reg_1131_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_1131_pp0_iter3_reg;
wire   [0:0] icmp_ln124_fu_340_p2;
reg   [0:0] icmp_ln124_reg_1135;
wire   [3:0] select_ln121_13_fu_492_p3;
reg   [3:0] select_ln121_13_reg_1140;
wire   [5:0] select_ln124_fu_522_p3;
reg   [5:0] select_ln124_reg_1145;
wire   [6:0] select_ln124_9_fu_640_p3;
reg   [6:0] select_ln124_9_reg_1150;
reg   [6:0] select_ln124_9_reg_1150_pp0_iter1_reg;
wire   [3:0] select_ln124_10_fu_648_p3;
reg   [3:0] select_ln124_10_reg_1156;
wire   [11:0] iii_cast_fu_660_p1;
reg   [11:0] iii_cast_reg_1161;
reg   [11:0] iii_cast_reg_1161_pp0_iter1_reg;
wire   [8:0] add_ln142_fu_742_p2;
reg   [8:0] add_ln142_reg_1177;
reg   [8:0] add_ln142_reg_1177_pp0_iter1_reg;
reg   [8:0] add_ln142_reg_1177_pp0_iter2_reg;
reg   [8:0] add_ln142_reg_1177_pp0_iter3_reg;
wire   [8:0] add_ln124_3_fu_748_p2;
reg   [8:0] add_ln124_3_reg_1182;
reg   [31:0] input_load_4_reg_1187;
wire   [5:0] add_ln127_fu_754_p2;
reg   [5:0] add_ln127_reg_1194;
wire   [8:0] select_ln124_12_fu_759_p3;
reg   [8:0] select_ln124_12_reg_1199;
wire   [31:0] select_ln136_fu_807_p3;
reg   [31:0] select_ln136_reg_1204;
wire   [31:0] select_ln136_4_fu_918_p3;
reg   [31:0] select_ln136_4_reg_1211;
wire   [11:0] add_ln136_11_fu_934_p2;
reg   [11:0] add_ln136_11_reg_1223;
wire   [31:0] select_ln136_5_fu_1022_p3;
reg   [31:0] select_ln136_5_reg_1228;
reg   [31:0] select_ln136_5_reg_1228_pp0_iter3_reg;
reg   [31:0] input_load_6_reg_1240;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter4;
reg   [9:0] ap_phi_mux_indvar_flatten58_phi_fu_164_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i_phi_fu_175_p4;
reg   [8:0] ap_phi_mux_indvar_flatten_phi_fu_186_p4;
reg   [3:0] ap_phi_mux_ii_phi_fu_197_p4;
reg   [5:0] ap_phi_mux_iii_phi_fu_208_p4;
wire   [63:0] zext_ln136_6_fu_726_p1;
wire   [63:0] zext_ln136_7_fu_737_p1;
wire   [63:0] zext_ln136_8_fu_929_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln136_9_fu_1029_p1;
wire   [63:0] zext_ln142_fu_1122_p1;
reg   [31:0] grp_fu_215_p0;
reg   [31:0] grp_fu_215_p1;
reg   [31:0] grp_fu_221_p0;
reg   [31:0] grp_fu_221_p1;
wire   [2:0] empty_fu_238_p1;
wire   [5:0] tmp_10_fu_252_p3;
wire   [5:0] p_shl_fu_260_p2;
wire   [2:0] empty_35_fu_270_p2;
wire   [1:0] p_lshr_f9_cast_fu_242_p4;
wire   [1:0] p_lshr_f_cast_fu_280_p4;
wire   [3:0] add_ln136_fu_298_p2;
wire   [3:0] zext_ln124_fu_276_p1;
wire   [3:0] add_ln136_6_fu_312_p2;
wire   [6:0] zext_ln136_fu_318_p1;
wire   [6:0] p_shl_cast_fu_266_p1;
wire   [3:0] i_1_fu_328_p2;
wire   [1:0] p_lshr_f9_cast_mid1_fu_358_p4;
wire   [2:0] empty_37_fu_354_p1;
wire   [5:0] p_mid1_fu_376_p3;
wire   [5:0] p_shl_mid1_fu_384_p2;
wire   [5:0] select_ln121_9_fu_390_p3;
wire   [2:0] p_mid110_fu_402_p2;
wire   [2:0] select_ln121_10_fu_408_p3;
wire   [5:0] tmp_16_mid_fu_428_p3;
wire   [5:0] tmp_s_fu_304_p3;
wire   [2:0] tmp_12_fu_444_p4;
wire   [5:0] tmp_13_fu_454_p3;
wire   [6:0] zext_ln136_4_fu_462_p1;
wire   [6:0] add_ln136_7_fu_322_p2;
wire   [0:0] icmp_ln127_fu_480_p2;
wire   [0:0] xor_ln121_fu_474_p2;
wire   [3:0] select_ln121_fu_346_p3;
wire   [0:0] and_ln121_fu_486_p2;
wire   [0:0] or_ln124_fu_516_p2;
wire   [3:0] ii_4_fu_500_p2;
wire   [1:0] select_ln121_8_fu_368_p3;
wire   [1:0] p_lshr_f_cast_mid1_fu_530_p4;
wire   [3:0] mul_mid_fu_420_p3;
wire   [3:0] mul_fu_290_p3;
wire   [3:0] mul_mid1_fu_540_p3;
wire   [3:0] select_ln121_14_fu_548_p3;
wire   [3:0] select_ln124_6_fu_556_p3;
wire   [1:0] tmp_dup_fu_506_p4;
wire   [3:0] add_ln136_8_fu_572_p2;
wire   [5:0] tmp_16_mid1_fu_586_p3;
wire   [5:0] select_ln121_11_fu_436_p3;
wire   [5:0] select_ln124_8_fu_594_p3;
wire   [5:0] or_ln124_3_fu_608_p2;
wire   [3:0] zext_ln124_2_fu_416_p1;
wire   [3:0] add_ln136_12_fu_624_p2;
wire   [6:0] zext_ln136_5_fu_630_p1;
wire   [6:0] select_ln121_9_cast_fu_398_p1;
wire   [6:0] add_ln136_13_fu_634_p2;
wire   [6:0] select_ln121_12_fu_466_p3;
wire   [5:0] shl_ln124_fu_602_p2;
wire   [2:0] tmp_15_fu_680_p4;
wire   [2:0] tmp_16_fu_690_p4;
wire   [2:0] tmp_14_fu_670_p4;
wire   [2:0] select_ln121_15_fu_700_p3;
wire   [1:0] select_ln124_7_fu_578_p3;
wire   [2:0] select_ln124_11_fu_708_p3;
wire   [5:0] or_ln136_fu_664_p2;
wire   [10:0] tmp_17_fu_716_p4;
wire   [11:0] shl_ln136_2_mid2_fu_614_p4;
wire   [11:0] add_ln136_9_fu_731_p2;
wire   [8:0] iii_cast9_fu_656_p1;
wire   [8:0] add40_mid2_fu_564_p3;
wire   [31:0] bitcast_ln136_fu_765_p1;
wire   [7:0] tmp_18_fu_769_p4;
wire   [22:0] trunc_ln136_fu_779_p1;
wire   [0:0] icmp_ln136_14_fu_789_p2;
wire   [0:0] icmp_ln136_fu_783_p2;
wire   [0:0] or_ln136_7_fu_795_p2;
wire   [0:0] grp_fu_215_p2;
wire   [0:0] and_ln136_fu_801_p2;
wire   [6:0] add_ln124_2_fu_823_p2;
wire   [31:0] bitcast_ln136_7_fu_836_p1;
wire   [31:0] bitcast_ln136_8_fu_853_p1;
wire   [7:0] tmp_20_fu_839_p4;
wire   [22:0] trunc_ln136_7_fu_849_p1;
wire   [0:0] icmp_ln136_16_fu_876_p2;
wire   [0:0] icmp_ln136_15_fu_870_p2;
wire   [7:0] tmp_21_fu_856_p4;
wire   [22:0] trunc_ln136_8_fu_866_p1;
wire   [0:0] icmp_ln136_18_fu_894_p2;
wire   [0:0] icmp_ln136_17_fu_888_p2;
wire   [0:0] or_ln136_8_fu_882_p2;
wire   [0:0] or_ln136_9_fu_900_p2;
wire   [0:0] and_ln136_7_fu_906_p2;
wire   [0:0] and_ln136_8_fu_912_p2;
wire   [11:0] shl_ln136_3_mid2_fu_816_p3;
wire   [11:0] add_ln136_10_fu_924_p2;
wire   [11:0] shl_ln136_4_mid2_fu_828_p3;
wire   [31:0] bitcast_ln136_9_fu_939_p1;
wire   [31:0] bitcast_ln136_10_fu_957_p1;
wire   [7:0] tmp_23_fu_943_p4;
wire   [22:0] trunc_ln136_9_fu_953_p1;
wire   [0:0] icmp_ln136_20_fu_980_p2;
wire   [0:0] icmp_ln136_19_fu_974_p2;
wire   [7:0] tmp_24_fu_960_p4;
wire   [22:0] trunc_ln136_10_fu_970_p1;
wire   [0:0] icmp_ln136_22_fu_998_p2;
wire   [0:0] icmp_ln136_21_fu_992_p2;
wire   [0:0] or_ln136_10_fu_986_p2;
wire   [0:0] or_ln136_11_fu_1004_p2;
wire   [0:0] and_ln136_9_fu_1010_p2;
wire   [0:0] grp_fu_221_p2;
wire   [0:0] and_ln136_10_fu_1016_p2;
wire   [31:0] bitcast_ln136_11_fu_1033_p1;
wire   [31:0] bitcast_ln136_12_fu_1050_p1;
wire   [7:0] tmp_26_fu_1036_p4;
wire   [22:0] trunc_ln136_11_fu_1046_p1;
wire   [0:0] icmp_ln136_24_fu_1073_p2;
wire   [0:0] icmp_ln136_23_fu_1067_p2;
wire   [7:0] tmp_27_fu_1053_p4;
wire   [22:0] trunc_ln136_12_fu_1063_p1;
wire   [0:0] icmp_ln136_26_fu_1091_p2;
wire   [0:0] icmp_ln136_25_fu_1085_p2;
wire   [0:0] or_ln136_12_fu_1079_p2;
wire   [0:0] or_ln136_13_fu_1097_p2;
wire   [0:0] and_ln136_11_fu_1103_p2;
wire   [0:0] and_ln136_12_fu_1109_p2;
wire    grp_fu_215_ce;
wire   [4:0] grp_fu_215_opcode;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    grp_fu_221_ce;
wire   [4:0] grp_fu_221_opcode;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_171 <= select_ln121_13_reg_1140;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_171 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ii_reg_193 <= select_ln124_10_reg_1156;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_193 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        iii_reg_204 <= add_ln127_reg_1194;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_204 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten58_reg_160 <= add_ln121_reg_1126;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten58_reg_160 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_182 <= select_ln124_12_reg_1199;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_182 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln121_reg_1126 <= add_ln121_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_334_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln124_3_reg_1182 <= add_ln124_3_fu_748_p2;
        add_ln142_reg_1177 <= add_ln142_fu_742_p2;
        icmp_ln124_reg_1135 <= icmp_ln124_fu_340_p2;
        iii_cast_reg_1161[5 : 0] <= iii_cast_fu_660_p1[5 : 0];
        select_ln124_9_reg_1150 <= select_ln124_9_fu_640_p3;
        select_ln124_reg_1145 <= select_ln124_fu_522_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln127_reg_1194 <= add_ln127_fu_754_p2;
        input_load_4_reg_1187 <= input_r_q0;
        select_ln124_12_reg_1199 <= select_ln124_12_fu_759_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln136_11_reg_1223 <= add_ln136_11_fu_934_p2;
        select_ln136_4_reg_1211 <= select_ln136_4_fu_918_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln142_reg_1177_pp0_iter1_reg <= add_ln142_reg_1177;
        add_ln142_reg_1177_pp0_iter2_reg <= add_ln142_reg_1177_pp0_iter1_reg;
        add_ln142_reg_1177_pp0_iter3_reg <= add_ln142_reg_1177_pp0_iter2_reg;
        icmp_ln121_reg_1131 <= icmp_ln121_fu_334_p2;
        icmp_ln121_reg_1131_pp0_iter1_reg <= icmp_ln121_reg_1131;
        icmp_ln121_reg_1131_pp0_iter2_reg <= icmp_ln121_reg_1131_pp0_iter1_reg;
        icmp_ln121_reg_1131_pp0_iter3_reg <= icmp_ln121_reg_1131_pp0_iter2_reg;
        iii_cast_reg_1161_pp0_iter1_reg[5 : 0] <= iii_cast_reg_1161[5 : 0];
        select_ln124_9_reg_1150_pp0_iter1_reg <= select_ln124_9_reg_1150;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln121_reg_1131_pp0_iter2_reg == 1'd0))) begin
        input_load_6_reg_1240 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln121_reg_1131_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_226 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_334_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln121_13_reg_1140 <= select_ln121_13_fu_492_p3;
        select_ln124_10_reg_1156 <= select_ln124_10_fu_648_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln121_reg_1131_pp0_iter2_reg == 1'd0))) begin
        select_ln136_5_reg_1228 <= select_ln136_5_fu_1022_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln136_5_reg_1228_pp0_iter3_reg <= select_ln136_5_reg_1228;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln136_reg_1204 <= select_ln136_fu_807_p3;
    end
end

always @ (*) begin
    if ((icmp_ln121_fu_334_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_175_p4 = select_ln121_13_reg_1140;
    end else begin
        ap_phi_mux_i_phi_fu_175_p4 = i_reg_171;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_ii_phi_fu_197_p4 = select_ln124_10_reg_1156;
    end else begin
        ap_phi_mux_ii_phi_fu_197_p4 = ii_reg_193;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_iii_phi_fu_208_p4 = add_ln127_reg_1194;
    end else begin
        ap_phi_mux_iii_phi_fu_208_p4 = iii_reg_204;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten58_phi_fu_164_p4 = add_ln121_reg_1126;
    end else begin
        ap_phi_mux_indvar_flatten58_phi_fu_164_p4 = indvar_flatten58_reg_160;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_1131 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_186_p4 = select_ln124_12_reg_1199;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_186_p4 = indvar_flatten_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_215_p0 = input_load_4_reg_1187;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_215_p0 = input_r_q1;
    end else begin
        grp_fu_215_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_215_p1 = select_ln136_fu_807_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_215_p1 = 32'd0;
    end else begin
        grp_fu_215_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_221_p0 = input_load_6_reg_1240;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_221_p0 = input_r_q1;
    end else begin
        grp_fu_221_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_221_p1 = select_ln136_5_reg_1228;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_221_p1 = select_ln136_4_reg_1211;
    end else begin
        grp_fu_221_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln136_9_fu_1029_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln136_7_fu_737_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address1 = zext_ln136_8_fu_929_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln136_6_fu_726_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln121_reg_1131_pp0_iter3_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln121_fu_334_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((icmp_ln121_fu_334_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add40_mid2_fu_564_p3 = {{select_ln124_6_fu_556_p3}, {5'd0}};

assign add_ln121_fu_232_p2 = (ap_phi_mux_indvar_flatten58_phi_fu_164_p4 + 10'd1);

assign add_ln124_2_fu_823_p2 = (select_ln124_9_reg_1150_pp0_iter1_reg + 7'd1);

assign add_ln124_3_fu_748_p2 = (ap_phi_mux_indvar_flatten_phi_fu_186_p4 + 9'd1);

assign add_ln127_fu_754_p2 = (select_ln124_reg_1145 + 6'd1);

assign add_ln136_10_fu_924_p2 = (shl_ln136_3_mid2_fu_816_p3 + iii_cast_reg_1161_pp0_iter1_reg);

assign add_ln136_11_fu_934_p2 = (shl_ln136_4_mid2_fu_828_p3 + iii_cast_reg_1161_pp0_iter1_reg);

assign add_ln136_12_fu_624_p2 = (zext_ln124_2_fu_416_p1 + ii_4_fu_500_p2);

assign add_ln136_13_fu_634_p2 = (zext_ln136_5_fu_630_p1 + select_ln121_9_cast_fu_398_p1);

assign add_ln136_6_fu_312_p2 = (zext_ln124_fu_276_p1 + ap_phi_mux_ii_phi_fu_197_p4);

assign add_ln136_7_fu_322_p2 = (zext_ln136_fu_318_p1 + p_shl_cast_fu_266_p1);

assign add_ln136_8_fu_572_p2 = (select_ln121_13_fu_492_p3 + ii_4_fu_500_p2);

assign add_ln136_9_fu_731_p2 = (shl_ln136_2_mid2_fu_614_p4 + iii_cast_fu_660_p1);

assign add_ln136_fu_298_p2 = (ap_phi_mux_i_phi_fu_175_p4 + ap_phi_mux_ii_phi_fu_197_p4);

assign add_ln142_fu_742_p2 = (iii_cast9_fu_656_p1 + add40_mid2_fu_564_p3);

assign and_ln121_fu_486_p2 = (xor_ln121_fu_474_p2 & icmp_ln127_fu_480_p2);

assign and_ln136_10_fu_1016_p2 = (grp_fu_1839_p_dout0 & and_ln136_9_fu_1010_p2);

assign and_ln136_11_fu_1103_p2 = (or_ln136_13_fu_1097_p2 & or_ln136_12_fu_1079_p2);

assign and_ln136_12_fu_1109_p2 = (grp_fu_1839_p_dout0 & and_ln136_11_fu_1103_p2);

assign and_ln136_7_fu_906_p2 = (or_ln136_9_fu_900_p2 & or_ln136_8_fu_882_p2);

assign and_ln136_8_fu_912_p2 = (grp_fu_788_p_dout0 & and_ln136_7_fu_906_p2);

assign and_ln136_9_fu_1010_p2 = (or_ln136_11_fu_1004_p2 & or_ln136_10_fu_986_p2);

assign and_ln136_fu_801_p2 = (or_ln136_7_fu_795_p2 & grp_fu_788_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln136_10_fu_957_p1 = select_ln136_4_reg_1211;

assign bitcast_ln136_11_fu_1033_p1 = input_load_6_reg_1240;

assign bitcast_ln136_12_fu_1050_p1 = select_ln136_5_reg_1228_pp0_iter3_reg;

assign bitcast_ln136_7_fu_836_p1 = input_load_4_reg_1187;

assign bitcast_ln136_8_fu_853_p1 = select_ln136_reg_1204;

assign bitcast_ln136_9_fu_939_p1 = reg_226;

assign bitcast_ln136_fu_765_p1 = reg_226;

assign empty_35_fu_270_p2 = (empty_fu_238_p1 | 3'd1);

assign empty_37_fu_354_p1 = i_1_fu_328_p2[2:0];

assign empty_fu_238_p1 = ap_phi_mux_i_phi_fu_175_p4[2:0];

assign grp_fu_1839_p_ce = 1'b1;

assign grp_fu_1839_p_din0 = grp_fu_221_p0;

assign grp_fu_1839_p_din1 = grp_fu_221_p1;

assign grp_fu_1839_p_opcode = 5'd2;

assign grp_fu_215_ce = 1'b1;

assign grp_fu_215_opcode = 5'd2;

assign grp_fu_215_p2 = grp_fu_788_p_dout0;

assign grp_fu_221_ce = 1'b1;

assign grp_fu_221_opcode = 5'd2;

assign grp_fu_221_p2 = grp_fu_1839_p_dout0;

assign grp_fu_788_p_ce = 1'b1;

assign grp_fu_788_p_din0 = grp_fu_215_p0;

assign grp_fu_788_p_din1 = grp_fu_215_p1;

assign grp_fu_788_p_opcode = 5'd2;

assign i_1_fu_328_p2 = (ap_phi_mux_i_phi_fu_175_p4 + 4'd2);

assign icmp_ln121_fu_334_p2 = ((ap_phi_mux_indvar_flatten58_phi_fu_164_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_340_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_186_p4 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_480_p2 = ((ap_phi_mux_iii_phi_fu_208_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln136_14_fu_789_p2 = ((trunc_ln136_fu_779_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_15_fu_870_p2 = ((tmp_20_fu_839_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_16_fu_876_p2 = ((trunc_ln136_7_fu_849_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_17_fu_888_p2 = ((tmp_21_fu_856_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_18_fu_894_p2 = ((trunc_ln136_8_fu_866_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_19_fu_974_p2 = ((tmp_23_fu_943_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_20_fu_980_p2 = ((trunc_ln136_9_fu_953_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_21_fu_992_p2 = ((tmp_24_fu_960_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_22_fu_998_p2 = ((trunc_ln136_10_fu_970_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_23_fu_1067_p2 = ((tmp_26_fu_1036_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_24_fu_1073_p2 = ((trunc_ln136_11_fu_1046_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_25_fu_1085_p2 = ((tmp_27_fu_1053_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_26_fu_1091_p2 = ((trunc_ln136_12_fu_1063_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_783_p2 = ((tmp_18_fu_769_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ii_4_fu_500_p2 = (select_ln121_fu_346_p3 + 4'd2);

assign iii_cast9_fu_656_p1 = select_ln124_fu_522_p3;

assign iii_cast_fu_660_p1 = select_ln124_fu_522_p3;

assign mul_fu_290_p3 = {{p_lshr_f9_cast_fu_242_p4}, {p_lshr_f_cast_fu_280_p4}};

assign mul_mid1_fu_540_p3 = {{select_ln121_8_fu_368_p3}, {p_lshr_f_cast_mid1_fu_530_p4}};

assign mul_mid_fu_420_p3 = {{p_lshr_f9_cast_mid1_fu_358_p4}, {2'd0}};

assign or_ln124_3_fu_608_p2 = (select_ln124_8_fu_594_p3 | 6'd1);

assign or_ln124_fu_516_p2 = (icmp_ln124_fu_340_p2 | and_ln121_fu_486_p2);

assign or_ln136_10_fu_986_p2 = (icmp_ln136_20_fu_980_p2 | icmp_ln136_19_fu_974_p2);

assign or_ln136_11_fu_1004_p2 = (icmp_ln136_22_fu_998_p2 | icmp_ln136_21_fu_992_p2);

assign or_ln136_12_fu_1079_p2 = (icmp_ln136_24_fu_1073_p2 | icmp_ln136_23_fu_1067_p2);

assign or_ln136_13_fu_1097_p2 = (icmp_ln136_26_fu_1091_p2 | icmp_ln136_25_fu_1085_p2);

assign or_ln136_7_fu_795_p2 = (icmp_ln136_fu_783_p2 | icmp_ln136_14_fu_789_p2);

assign or_ln136_8_fu_882_p2 = (icmp_ln136_16_fu_876_p2 | icmp_ln136_15_fu_870_p2);

assign or_ln136_9_fu_900_p2 = (icmp_ln136_18_fu_894_p2 | icmp_ln136_17_fu_888_p2);

assign or_ln136_fu_664_p2 = (shl_ln124_fu_602_p2 | select_ln124_fu_522_p3);

assign output_r_address0 = zext_ln142_fu_1122_p1;

assign output_r_d0 = ((and_ln136_12_fu_1109_p2[0:0] == 1'b1) ? input_load_6_reg_1240 : select_ln136_5_reg_1228_pp0_iter3_reg);

assign p_lshr_f9_cast_fu_242_p4 = {{ap_phi_mux_i_phi_fu_175_p4[2:1]}};

assign p_lshr_f9_cast_mid1_fu_358_p4 = {{i_1_fu_328_p2[2:1]}};

assign p_lshr_f_cast_fu_280_p4 = {{ap_phi_mux_ii_phi_fu_197_p4[2:1]}};

assign p_lshr_f_cast_mid1_fu_530_p4 = {{ii_4_fu_500_p2[2:1]}};

assign p_mid110_fu_402_p2 = (empty_37_fu_354_p1 | 3'd1);

assign p_mid1_fu_376_p3 = {{empty_37_fu_354_p1}, {3'd0}};

assign p_shl_cast_fu_266_p1 = p_shl_fu_260_p2;

assign p_shl_fu_260_p2 = (tmp_10_fu_252_p3 | 6'd8);

assign p_shl_mid1_fu_384_p2 = (p_mid1_fu_376_p3 | 6'd8);

assign select_ln121_10_fu_408_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? p_mid110_fu_402_p2 : empty_35_fu_270_p2);

assign select_ln121_11_fu_436_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? tmp_16_mid_fu_428_p3 : tmp_s_fu_304_p3);

assign select_ln121_12_fu_466_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? zext_ln136_4_fu_462_p1 : add_ln136_7_fu_322_p2);

assign select_ln121_13_fu_492_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? i_1_fu_328_p2 : ap_phi_mux_i_phi_fu_175_p4);

assign select_ln121_14_fu_548_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? mul_mid_fu_420_p3 : mul_fu_290_p3);

assign select_ln121_15_fu_700_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? tmp_15_fu_680_p4 : tmp_16_fu_690_p4);

assign select_ln121_8_fu_368_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? p_lshr_f9_cast_mid1_fu_358_p4 : p_lshr_f9_cast_fu_242_p4);

assign select_ln121_9_cast_fu_398_p1 = select_ln121_9_fu_390_p3;

assign select_ln121_9_fu_390_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? p_shl_mid1_fu_384_p2 : p_shl_fu_260_p2);

assign select_ln121_fu_346_p3 = ((icmp_ln124_fu_340_p2[0:0] == 1'b1) ? 4'd0 : ap_phi_mux_ii_phi_fu_197_p4);

assign select_ln124_10_fu_648_p3 = ((and_ln121_fu_486_p2[0:0] == 1'b1) ? ii_4_fu_500_p2 : select_ln121_fu_346_p3);

assign select_ln124_11_fu_708_p3 = ((and_ln121_fu_486_p2[0:0] == 1'b1) ? tmp_14_fu_670_p4 : select_ln121_15_fu_700_p3);

assign select_ln124_12_fu_759_p3 = ((icmp_ln124_reg_1135[0:0] == 1'b1) ? 9'd1 : add_ln124_3_reg_1182);

assign select_ln124_6_fu_556_p3 = ((and_ln121_fu_486_p2[0:0] == 1'b1) ? mul_mid1_fu_540_p3 : select_ln121_14_fu_548_p3);

assign select_ln124_7_fu_578_p3 = ((and_ln121_fu_486_p2[0:0] == 1'b1) ? tmp_dup_fu_506_p4 : select_ln121_8_fu_368_p3);

assign select_ln124_8_fu_594_p3 = ((and_ln121_fu_486_p2[0:0] == 1'b1) ? tmp_16_mid1_fu_586_p3 : select_ln121_11_fu_436_p3);

assign select_ln124_9_fu_640_p3 = ((and_ln121_fu_486_p2[0:0] == 1'b1) ? add_ln136_13_fu_634_p2 : select_ln121_12_fu_466_p3);

assign select_ln124_fu_522_p3 = ((or_ln124_fu_516_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_iii_phi_fu_208_p4);

assign select_ln136_4_fu_918_p3 = ((and_ln136_8_fu_912_p2[0:0] == 1'b1) ? input_load_4_reg_1187 : select_ln136_reg_1204);

assign select_ln136_5_fu_1022_p3 = ((and_ln136_10_fu_1016_p2[0:0] == 1'b1) ? reg_226 : select_ln136_4_reg_1211);

assign select_ln136_fu_807_p3 = ((and_ln136_fu_801_p2[0:0] == 1'b1) ? reg_226 : 32'd0);

assign shl_ln124_fu_602_p2 = select_ln124_8_fu_594_p3 << 6'd5;

assign shl_ln136_2_mid2_fu_614_p4 = {{{{1'd0}, {or_ln124_3_fu_608_p2}}}, {5'd0}};

assign shl_ln136_3_mid2_fu_816_p3 = {{select_ln124_9_reg_1150_pp0_iter1_reg}, {5'd0}};

assign shl_ln136_4_mid2_fu_828_p3 = {{add_ln124_2_fu_823_p2}, {5'd0}};

assign tmp_10_fu_252_p3 = {{empty_fu_238_p1}, {3'd0}};

assign tmp_12_fu_444_p4 = {{p_shl_mid1_fu_384_p2[5:3]}};

assign tmp_13_fu_454_p3 = {{tmp_12_fu_444_p4}, {p_mid110_fu_402_p2}};

assign tmp_14_fu_670_p4 = {{add_ln136_8_fu_572_p2[3:1]}};

assign tmp_15_fu_680_p4 = {{i_1_fu_328_p2[3:1]}};

assign tmp_16_fu_690_p4 = {{add_ln136_fu_298_p2[3:1]}};

assign tmp_16_mid1_fu_586_p3 = {{tmp_dup_fu_506_p4}, {add_ln136_8_fu_572_p2}};

assign tmp_16_mid_fu_428_p3 = {{p_lshr_f9_cast_mid1_fu_358_p4}, {i_1_fu_328_p2}};

assign tmp_17_fu_716_p4 = {{{select_ln124_7_fu_578_p3}, {select_ln124_11_fu_708_p3}}, {or_ln136_fu_664_p2}};

assign tmp_18_fu_769_p4 = {{bitcast_ln136_fu_765_p1[30:23]}};

assign tmp_20_fu_839_p4 = {{bitcast_ln136_7_fu_836_p1[30:23]}};

assign tmp_21_fu_856_p4 = {{bitcast_ln136_8_fu_853_p1[30:23]}};

assign tmp_23_fu_943_p4 = {{bitcast_ln136_9_fu_939_p1[30:23]}};

assign tmp_24_fu_960_p4 = {{bitcast_ln136_10_fu_957_p1[30:23]}};

assign tmp_26_fu_1036_p4 = {{bitcast_ln136_11_fu_1033_p1[30:23]}};

assign tmp_27_fu_1053_p4 = {{bitcast_ln136_12_fu_1050_p1[30:23]}};

assign tmp_dup_fu_506_p4 = {{select_ln121_13_fu_492_p3[2:1]}};

assign tmp_s_fu_304_p3 = {{p_lshr_f9_cast_fu_242_p4}, {add_ln136_fu_298_p2}};

assign trunc_ln136_10_fu_970_p1 = bitcast_ln136_10_fu_957_p1[22:0];

assign trunc_ln136_11_fu_1046_p1 = bitcast_ln136_11_fu_1033_p1[22:0];

assign trunc_ln136_12_fu_1063_p1 = bitcast_ln136_12_fu_1050_p1[22:0];

assign trunc_ln136_7_fu_849_p1 = bitcast_ln136_7_fu_836_p1[22:0];

assign trunc_ln136_8_fu_866_p1 = bitcast_ln136_8_fu_853_p1[22:0];

assign trunc_ln136_9_fu_953_p1 = bitcast_ln136_9_fu_939_p1[22:0];

assign trunc_ln136_fu_779_p1 = bitcast_ln136_fu_765_p1[22:0];

assign xor_ln121_fu_474_p2 = (icmp_ln124_fu_340_p2 ^ 1'd1);

assign zext_ln124_2_fu_416_p1 = select_ln121_10_fu_408_p3;

assign zext_ln124_fu_276_p1 = empty_35_fu_270_p2;

assign zext_ln136_4_fu_462_p1 = tmp_13_fu_454_p3;

assign zext_ln136_5_fu_630_p1 = add_ln136_12_fu_624_p2;

assign zext_ln136_6_fu_726_p1 = tmp_17_fu_716_p4;

assign zext_ln136_7_fu_737_p1 = add_ln136_9_fu_731_p2;

assign zext_ln136_8_fu_929_p1 = add_ln136_10_fu_924_p2;

assign zext_ln136_9_fu_1029_p1 = add_ln136_11_reg_1223;

assign zext_ln136_fu_318_p1 = add_ln136_6_fu_312_p2;

assign zext_ln142_fu_1122_p1 = add_ln142_reg_1177_pp0_iter3_reg;

always @ (posedge ap_clk) begin
    iii_cast_reg_1161[11:6] <= 6'b000000;
    iii_cast_reg_1161_pp0_iter1_reg[11:6] <= 6'b000000;
end

endmodule //infer_max_pooling2d_1

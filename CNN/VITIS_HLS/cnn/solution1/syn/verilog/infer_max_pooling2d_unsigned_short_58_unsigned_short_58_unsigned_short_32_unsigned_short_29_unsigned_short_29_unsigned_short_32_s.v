// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_max_pooling2d_unsigned_short_58_unsigned_short_58_unsigned_short_32_unsigned_short_29_unsigned_short_29_unsigned_short_32_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_dim1,
        in_dim2,
        convolution_output_V_address0,
        convolution_output_V_ce0,
        convolution_output_V_q0,
        convolution_output_V_address1,
        convolution_output_V_ce1,
        convolution_output_V_q1,
        max_pooling_output_V_address0,
        max_pooling_output_V_ce0,
        max_pooling_output_V_we0,
        max_pooling_output_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_pp0_stage0 = 9'd64;
parameter    ap_ST_fsm_pp0_stage1 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] in_dim1;
input  [5:0] in_dim2;
output  [16:0] convolution_output_V_address0;
output   convolution_output_V_ce0;
input  [20:0] convolution_output_V_q0;
output  [16:0] convolution_output_V_address1;
output   convolution_output_V_ce1;
input  [20:0] convolution_output_V_q1;
output  [14:0] max_pooling_output_V_address0;
output   max_pooling_output_V_ce0;
output   max_pooling_output_V_we0;
output  [20:0] max_pooling_output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] convolution_output_V_address0;
reg convolution_output_V_ce0;
reg[16:0] convolution_output_V_address1;
reg convolution_output_V_ce1;
reg max_pooling_output_V_ce0;
reg max_pooling_output_V_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] iii_reg_170;
wire   [15:0] sub_cast1_fu_188_p1;
reg   [15:0] sub_cast1_reg_518;
wire   [15:0] zext_ln88_fu_198_p1;
reg   [15:0] zext_ln88_reg_523;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln88_fu_202_p2;
wire   [9:0] mul_ln110_fu_229_p2;
reg   [9:0] mul_ln110_reg_536;
wire    ap_CS_fsm_state5;
wire   [21:0] grp_fu_512_p2;
reg   [21:0] mul_ln103_reg_541;
wire   [11:0] mul_ln103_1_fu_245_p2;
reg   [11:0] mul_ln103_1_reg_547;
wire   [16:0] zext_ln91_fu_251_p1;
reg   [16:0] zext_ln91_reg_552;
wire   [0:0] icmp_ln91_fu_255_p2;
wire    ap_CS_fsm_state6;
wire   [14:0] tmp_3_cast_fu_279_p3;
reg   [14:0] tmp_3_cast_reg_561;
(* use_dsp48 = "no" *) wire   [21:0] add_ln103_fu_295_p2;
reg   [21:0] add_ln103_reg_566;
wire   [16:0] add_ln103_1_fu_300_p2;
reg   [16:0] add_ln103_1_reg_571;
wire   [16:0] tmp_7_cast_fu_324_p3;
reg   [16:0] tmp_7_cast_reg_576;
wire   [16:0] tmp_9_cast_fu_337_p3;
reg   [16:0] tmp_9_cast_reg_581;
wire   [15:0] i_1_fu_345_p2;
wire   [0:0] icmp_ln94_fu_351_p2;
reg   [0:0] icmp_ln94_reg_591;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [16:0] add_ln103_5_fu_393_p2;
reg   [16:0] add_ln103_5_reg_605;
wire   [5:0] add_ln94_fu_398_p2;
reg   [5:0] add_ln94_reg_610;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [14:0] add_ln110_1_fu_434_p2;
reg   [14:0] add_ln110_1_reg_625;
wire   [20:0] select_ln104_1_fu_467_p3;
reg   [20:0] select_ln104_1_reg_630;
wire   [15:0] ii_1_fu_506_p2;
wire    ap_CS_fsm_state10;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] i_reg_146;
reg   [15:0] ii_reg_158;
reg   [5:0] ap_phi_mux_iii_phi_fu_174_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln103_7_fu_378_p1;
wire   [63:0] zext_ln103_8_fu_388_p1;
wire   [63:0] zext_ln103_9_fu_425_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln103_10_fu_430_p1;
wire   [63:0] zext_ln110_2_fu_475_p1;
wire   [5:0] sub_fu_182_p2;
wire   [5:0] sub4_fu_192_p2;
wire   [4:0] tmp_fu_215_p4;
wire   [4:0] mul_ln110_fu_229_p0;
wire   [5:0] mul_ln110_fu_229_p1;
wire   [5:0] trunc_ln88_fu_211_p1;
wire   [5:0] empty_fu_235_p2;
wire   [5:0] mul_ln103_1_fu_245_p0;
wire   [6:0] mul_ln103_1_fu_245_p1;
wire   [4:0] tmp_1_fu_260_p4;
wire   [9:0] zext_ln110_1_fu_270_p1;
wire   [9:0] add_ln110_fu_274_p2;
wire   [21:0] zext_ln103_4_fu_291_p1;
wire   [16:0] zext_ln103_3_fu_287_p1;
wire   [11:0] trunc_ln103_fu_305_p1;
wire   [11:0] trunc_ln103_1_fu_315_p1;
wire   [11:0] or_ln103_fu_309_p2;
wire   [11:0] add_ln103_2_fu_318_p2;
wire   [11:0] add_ln103_3_fu_332_p2;
wire   [20:0] tmp_2_fu_361_p4;
wire   [26:0] tmp_3_fu_370_p3;
wire   [16:0] zext_ln103_6_fu_357_p1;
wire   [16:0] add_ln103_4_fu_383_p2;
wire   [15:0] tmp_4_fu_408_p4;
wire   [21:0] tmp_5_fu_417_p3;
wire   [14:0] zext_ln103_5_fu_404_p1;
wire   [0:0] icmp_ln1494_fu_443_p2;
wire   [19:0] trunc_ln1494_fu_439_p1;
wire   [19:0] select_ln104_fu_449_p3;
wire   [20:0] zext_ln103_fu_457_p1;
wire   [0:0] icmp_ln1494_1_fu_461_p2;
wire   [0:0] icmp_ln1494_2_fu_479_p2;
wire   [20:0] select_ln104_2_fu_484_p3;
wire   [0:0] icmp_ln1494_3_fu_491_p2;
wire   [15:0] grp_fu_512_p0;
wire   [6:0] grp_fu_512_p1;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [21:0] grp_fu_512_p00;
wire   [11:0] mul_ln103_1_fu_245_p00;
wire   [9:0] mul_ln110_fu_229_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

infer_mul_5ns_6ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_5ns_6ns_10_1_1_U368(
    .din0(mul_ln110_fu_229_p0),
    .din1(mul_ln110_fu_229_p1),
    .dout(mul_ln110_fu_229_p2)
);

infer_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U369(
    .din0(mul_ln103_1_fu_245_p0),
    .din1(mul_ln103_1_fu_245_p1),
    .dout(mul_ln103_1_fu_245_p2)
);

infer_mul_mul_16ns_7ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 22 ))
mul_mul_16ns_7ns_22_4_1_U370(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_512_p0),
    .din1(grp_fu_512_p1),
    .ce(1'b1),
    .dout(grp_fu_512_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln91_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln91_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_146 <= i_1_fu_345_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_146 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ii_reg_158 <= ii_1_fu_506_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ii_reg_158 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln94_reg_591 == 1'd0))) begin
        iii_reg_170 <= add_ln94_reg_610;
    end else if (((icmp_ln91_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        iii_reg_170 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln103_1_reg_571 <= add_ln103_1_fu_300_p2;
        add_ln103_reg_566 <= add_ln103_fu_295_p2;
        tmp_3_cast_reg_561[14 : 5] <= tmp_3_cast_fu_279_p3[14 : 5];
        tmp_7_cast_reg_576[16 : 5] <= tmp_7_cast_fu_324_p3[16 : 5];
        tmp_9_cast_reg_581[16 : 5] <= tmp_9_cast_fu_337_p3[16 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln94_fu_351_p2 == 1'd0))) begin
        add_ln103_5_reg_605 <= add_ln103_5_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln94_reg_591 == 1'd0))) begin
        add_ln110_1_reg_625 <= add_ln110_1_fu_434_p2;
        select_ln104_1_reg_630 <= select_ln104_1_fu_467_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln94_reg_610 <= add_ln94_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln94_reg_591 <= icmp_ln94_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln103_1_reg_547 <= mul_ln103_1_fu_245_p2;
        mul_ln103_reg_541 <= grp_fu_512_p2;
        mul_ln110_reg_536 <= mul_ln110_fu_229_p2;
        zext_ln91_reg_552[11 : 0] <= zext_ln91_fu_251_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_cast1_reg_518[5 : 0] <= sub_cast1_fu_188_p1[5 : 0];
        zext_ln88_reg_523[5 : 0] <= zext_ln88_fu_198_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln94_reg_591 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln88_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln94_reg_591 == 1'd0))) begin
        ap_phi_mux_iii_phi_fu_174_p4 = add_ln94_reg_610;
    end else begin
        ap_phi_mux_iii_phi_fu_174_p4 = iii_reg_170;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            convolution_output_V_address0 = zext_ln103_10_fu_430_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            convolution_output_V_address0 = zext_ln103_8_fu_388_p1;
        end else begin
            convolution_output_V_address0 = 'bx;
        end
    end else begin
        convolution_output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            convolution_output_V_address1 = zext_ln103_9_fu_425_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            convolution_output_V_address1 = zext_ln103_7_fu_378_p1;
        end else begin
            convolution_output_V_address1 = 'bx;
        end
    end else begin
        convolution_output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        convolution_output_V_ce0 = 1'b1;
    end else begin
        convolution_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        convolution_output_V_ce1 = 1'b1;
    end else begin
        convolution_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pooling_output_V_ce0 = 1'b1;
    end else begin
        max_pooling_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln94_reg_591 == 1'd0))) begin
        max_pooling_output_V_we0 = 1'b1;
    end else begin
        max_pooling_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln88_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln91_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln94_reg_591 == 1'd1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln94_reg_591 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_1_fu_300_p2 = (zext_ln91_reg_552 + zext_ln103_3_fu_287_p1);

assign add_ln103_2_fu_318_p2 = (trunc_ln103_1_fu_315_p1 + or_ln103_fu_309_p2);

assign add_ln103_3_fu_332_p2 = (mul_ln103_1_reg_547 + or_ln103_fu_309_p2);

assign add_ln103_4_fu_383_p2 = (tmp_7_cast_reg_576 + zext_ln103_6_fu_357_p1);

assign add_ln103_5_fu_393_p2 = (tmp_9_cast_reg_581 + zext_ln103_6_fu_357_p1);

assign add_ln103_fu_295_p2 = (mul_ln103_reg_541 + zext_ln103_4_fu_291_p1);

assign add_ln110_1_fu_434_p2 = (tmp_3_cast_reg_561 + zext_ln103_5_fu_404_p1);

assign add_ln110_fu_274_p2 = (mul_ln110_reg_536 + zext_ln110_1_fu_270_p1);

assign add_ln94_fu_398_p2 = (iii_reg_170 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_fu_235_p2 = (trunc_ln88_fu_211_p1 | 6'd1);

assign grp_fu_512_p0 = grp_fu_512_p00;

assign grp_fu_512_p00 = i_reg_146;

assign grp_fu_512_p1 = 22'd58;

assign i_1_fu_345_p2 = (i_reg_146 + 16'd2);

assign icmp_ln1494_1_fu_461_p2 = (($signed(convolution_output_V_q0) > $signed(zext_ln103_fu_457_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_479_p2 = (($signed(convolution_output_V_q1) > $signed(select_ln104_1_reg_630)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_491_p2 = (($signed(convolution_output_V_q0) > $signed(select_ln104_2_fu_484_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_443_p2 = (($signed(convolution_output_V_q1) > $signed(21'd0)) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_202_p2 = ((i_reg_146 < sub_cast1_reg_518) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_255_p2 = ((ii_reg_158 < zext_ln88_reg_523) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_351_p2 = ((ap_phi_mux_iii_phi_fu_174_p4 == 6'd32) ? 1'b1 : 1'b0);

assign ii_1_fu_506_p2 = (ii_reg_158 + 16'd2);

assign max_pooling_output_V_address0 = zext_ln110_2_fu_475_p1;

assign max_pooling_output_V_d0 = ((icmp_ln1494_3_fu_491_p2[0:0] == 1'b1) ? convolution_output_V_q0 : select_ln104_2_fu_484_p3);

assign mul_ln103_1_fu_245_p0 = mul_ln103_1_fu_245_p00;

assign mul_ln103_1_fu_245_p00 = empty_fu_235_p2;

assign mul_ln103_1_fu_245_p1 = 12'd58;

assign mul_ln110_fu_229_p0 = mul_ln110_fu_229_p00;

assign mul_ln110_fu_229_p00 = tmp_fu_215_p4;

assign mul_ln110_fu_229_p1 = 10'd29;

assign or_ln103_fu_309_p2 = (trunc_ln103_fu_305_p1 | 12'd1);

assign select_ln104_1_fu_467_p3 = ((icmp_ln1494_1_fu_461_p2[0:0] == 1'b1) ? convolution_output_V_q0 : zext_ln103_fu_457_p1);

assign select_ln104_2_fu_484_p3 = ((icmp_ln1494_2_fu_479_p2[0:0] == 1'b1) ? convolution_output_V_q1 : select_ln104_1_reg_630);

assign select_ln104_fu_449_p3 = ((icmp_ln1494_fu_443_p2[0:0] == 1'b1) ? trunc_ln1494_fu_439_p1 : 20'd0);

assign sub4_fu_192_p2 = ($signed(in_dim2) + $signed(6'd63));

assign sub_cast1_fu_188_p1 = sub_fu_182_p2;

assign sub_fu_182_p2 = ($signed(in_dim1) + $signed(6'd63));

assign tmp_1_fu_260_p4 = {{ii_reg_158[5:1]}};

assign tmp_2_fu_361_p4 = {{add_ln103_reg_566[21:1]}};

assign tmp_3_cast_fu_279_p3 = {{add_ln110_fu_274_p2}, {5'd0}};

assign tmp_3_fu_370_p3 = {{tmp_2_fu_361_p4}, {ap_phi_mux_iii_phi_fu_174_p4}};

assign tmp_4_fu_408_p4 = {{add_ln103_1_reg_571[16:1]}};

assign tmp_5_fu_417_p3 = {{tmp_4_fu_408_p4}, {iii_reg_170}};

assign tmp_7_cast_fu_324_p3 = {{add_ln103_2_fu_318_p2}, {5'd0}};

assign tmp_9_cast_fu_337_p3 = {{add_ln103_3_fu_332_p2}, {5'd0}};

assign tmp_fu_215_p4 = {{i_reg_146[5:1]}};

assign trunc_ln103_1_fu_315_p1 = mul_ln103_reg_541[11:0];

assign trunc_ln103_fu_305_p1 = ii_reg_158[11:0];

assign trunc_ln1494_fu_439_p1 = convolution_output_V_q1[19:0];

assign trunc_ln88_fu_211_p1 = i_reg_146[5:0];

assign zext_ln103_10_fu_430_p1 = add_ln103_5_reg_605;

assign zext_ln103_3_fu_287_p1 = ii_reg_158;

assign zext_ln103_4_fu_291_p1 = ii_reg_158;

assign zext_ln103_5_fu_404_p1 = iii_reg_170;

assign zext_ln103_6_fu_357_p1 = ap_phi_mux_iii_phi_fu_174_p4;

assign zext_ln103_7_fu_378_p1 = tmp_3_fu_370_p3;

assign zext_ln103_8_fu_388_p1 = add_ln103_4_fu_383_p2;

assign zext_ln103_9_fu_425_p1 = tmp_5_fu_417_p3;

assign zext_ln103_fu_457_p1 = select_ln104_fu_449_p3;

assign zext_ln110_1_fu_270_p1 = tmp_1_fu_260_p4;

assign zext_ln110_2_fu_475_p1 = add_ln110_1_reg_625;

assign zext_ln88_fu_198_p1 = sub4_fu_192_p2;

assign zext_ln91_fu_251_p1 = mul_ln103_1_fu_245_p2;

always @ (posedge ap_clk) begin
    sub_cast1_reg_518[15:6] <= 10'b0000000000;
    zext_ln88_reg_523[15:6] <= 10'b0000000000;
    zext_ln91_reg_552[16:12] <= 5'b00000;
    tmp_3_cast_reg_561[4:0] <= 5'b00000;
    tmp_7_cast_reg_576[4:0] <= 5'b00000;
    tmp_9_cast_reg_581[4:0] <= 5'b00000;
end

endmodule //infer_max_pooling2d_unsigned_short_58_unsigned_short_58_unsigned_short_32_unsigned_short_29_unsigned_short_29_unsigned_short_32_s

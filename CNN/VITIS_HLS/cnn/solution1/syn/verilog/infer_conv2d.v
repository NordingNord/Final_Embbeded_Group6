// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer_conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        input_6_address0,
        input_6_ce0,
        input_6_q0,
        input_7_address0,
        input_7_ce0,
        input_7_q0,
        input_8_address0,
        input_8_ce0,
        input_8_q0,
        input_9_address0,
        input_9_ce0,
        input_9_q0,
        input_10_address0,
        input_10_ce0,
        input_10_q0,
        input_11_address0,
        input_11_ce0,
        input_11_q0,
        input_12_address0,
        input_12_ce0,
        input_12_q0,
        input_13_address0,
        input_13_ce0,
        input_13_q0,
        input_14_address0,
        input_14_ce0,
        input_14_q0,
        input_15_address0,
        input_15_ce0,
        input_15_q0,
        input_16_address0,
        input_16_ce0,
        input_16_q0,
        input_17_address0,
        input_17_ce0,
        input_17_q0,
        input_18_address0,
        input_18_ce0,
        input_18_q0,
        input_19_address0,
        input_19_ce0,
        input_19_q0,
        input_20_address0,
        input_20_ce0,
        input_20_q0,
        input_21_address0,
        input_21_ce0,
        input_21_q0,
        input_22_address0,
        input_22_ce0,
        input_22_q0,
        input_23_address0,
        input_23_ce0,
        input_23_q0,
        input_24_address0,
        input_24_ce0,
        input_24_q0,
        input_25_address0,
        input_25_ce0,
        input_25_q0,
        input_26_address0,
        input_26_ce0,
        input_26_q0,
        input_27_address0,
        input_27_ce0,
        input_27_q0,
        input_28_address0,
        input_28_ce0,
        input_28_q0,
        input_29_address0,
        input_29_ce0,
        input_29_q0,
        input_30_address0,
        input_30_ce0,
        input_30_q0,
        input_31_address0,
        input_31_ce0,
        input_31_q0,
        input_32_address0,
        input_32_ce0,
        input_32_q0,
        input_33_address0,
        input_33_ce0,
        input_33_q0,
        input_34_address0,
        input_34_ce0,
        input_34_q0,
        input_35_address0,
        input_35_ce0,
        input_35_q0,
        input_36_address0,
        input_36_ce0,
        input_36_q0,
        input_37_address0,
        input_37_ce0,
        input_37_q0,
        input_38_address0,
        input_38_ce0,
        input_38_q0,
        input_39_address0,
        input_39_ce0,
        input_39_q0,
        input_40_address0,
        input_40_ce0,
        input_40_q0,
        input_41_address0,
        input_41_ce0,
        input_41_q0,
        input_42_address0,
        input_42_ce0,
        input_42_q0,
        input_43_address0,
        input_43_ce0,
        input_43_q0,
        input_44_address0,
        input_44_ce0,
        input_44_q0,
        input_45_address0,
        input_45_ce0,
        input_45_q0,
        input_46_address0,
        input_46_ce0,
        input_46_q0,
        input_47_address0,
        input_47_ce0,
        input_47_q0,
        input_48_address0,
        input_48_ce0,
        input_48_q0,
        input_49_address0,
        input_49_ce0,
        input_49_q0,
        input_50_address0,
        input_50_ce0,
        input_50_q0,
        input_51_address0,
        input_51_ce0,
        input_51_q0,
        input_52_address0,
        input_52_ce0,
        input_52_q0,
        input_53_address0,
        input_53_ce0,
        input_53_q0,
        input_54_address0,
        input_54_ce0,
        input_54_q0,
        input_55_address0,
        input_55_ce0,
        input_55_q0,
        input_56_address0,
        input_56_ce0,
        input_56_q0,
        input_57_address0,
        input_57_ce0,
        input_57_q0,
        input_58_address0,
        input_58_ce0,
        input_58_q0,
        input_59_address0,
        input_59_ce0,
        input_59_q0,
        input_60_address0,
        input_60_ce0,
        input_60_q0,
        input_61_address0,
        input_61_ce0,
        input_61_q0,
        input_62_address0,
        input_62_ce0,
        input_62_q0,
        input_63_address0,
        input_63_ce0,
        input_63_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0,
        output_8_address0,
        output_8_ce0,
        output_8_we0,
        output_8_d0,
        output_9_address0,
        output_9_ce0,
        output_9_we0,
        output_9_d0,
        output_10_address0,
        output_10_ce0,
        output_10_we0,
        output_10_d0,
        output_11_address0,
        output_11_ce0,
        output_11_we0,
        output_11_d0,
        output_12_address0,
        output_12_ce0,
        output_12_we0,
        output_12_d0,
        output_13_address0,
        output_13_ce0,
        output_13_we0,
        output_13_d0,
        output_14_address0,
        output_14_ce0,
        output_14_we0,
        output_14_d0,
        output_15_address0,
        output_15_ce0,
        output_15_we0,
        output_15_d0,
        output_16_address0,
        output_16_ce0,
        output_16_we0,
        output_16_d0,
        output_17_address0,
        output_17_ce0,
        output_17_we0,
        output_17_d0,
        output_18_address0,
        output_18_ce0,
        output_18_we0,
        output_18_d0,
        output_19_address0,
        output_19_ce0,
        output_19_we0,
        output_19_d0,
        output_20_address0,
        output_20_ce0,
        output_20_we0,
        output_20_d0,
        output_21_address0,
        output_21_ce0,
        output_21_we0,
        output_21_d0,
        output_22_address0,
        output_22_ce0,
        output_22_we0,
        output_22_d0,
        output_23_address0,
        output_23_ce0,
        output_23_we0,
        output_23_d0,
        output_24_address0,
        output_24_ce0,
        output_24_we0,
        output_24_d0,
        output_25_address0,
        output_25_ce0,
        output_25_we0,
        output_25_d0,
        output_26_address0,
        output_26_ce0,
        output_26_we0,
        output_26_d0,
        output_27_address0,
        output_27_ce0,
        output_27_we0,
        output_27_d0,
        output_28_address0,
        output_28_ce0,
        output_28_we0,
        output_28_d0,
        output_29_address0,
        output_29_ce0,
        output_29_we0,
        output_29_d0,
        output_30_address0,
        output_30_ce0,
        output_30_we0,
        output_30_d0,
        output_31_address0,
        output_31_ce0,
        output_31_we0,
        output_31_d0,
        output_32_address0,
        output_32_ce0,
        output_32_we0,
        output_32_d0,
        output_33_address0,
        output_33_ce0,
        output_33_we0,
        output_33_d0,
        output_34_address0,
        output_34_ce0,
        output_34_we0,
        output_34_d0,
        output_35_address0,
        output_35_ce0,
        output_35_we0,
        output_35_d0,
        output_36_address0,
        output_36_ce0,
        output_36_we0,
        output_36_d0,
        output_37_address0,
        output_37_ce0,
        output_37_we0,
        output_37_d0,
        output_38_address0,
        output_38_ce0,
        output_38_we0,
        output_38_d0,
        output_39_address0,
        output_39_ce0,
        output_39_we0,
        output_39_d0,
        output_40_address0,
        output_40_ce0,
        output_40_we0,
        output_40_d0,
        output_41_address0,
        output_41_ce0,
        output_41_we0,
        output_41_d0,
        output_42_address0,
        output_42_ce0,
        output_42_we0,
        output_42_d0,
        output_43_address0,
        output_43_ce0,
        output_43_we0,
        output_43_d0,
        output_44_address0,
        output_44_ce0,
        output_44_we0,
        output_44_d0,
        output_45_address0,
        output_45_ce0,
        output_45_we0,
        output_45_d0,
        output_46_address0,
        output_46_ce0,
        output_46_we0,
        output_46_d0,
        output_47_address0,
        output_47_ce0,
        output_47_we0,
        output_47_d0,
        output_48_address0,
        output_48_ce0,
        output_48_we0,
        output_48_d0,
        output_49_address0,
        output_49_ce0,
        output_49_we0,
        output_49_d0,
        output_50_address0,
        output_50_ce0,
        output_50_we0,
        output_50_d0,
        output_51_address0,
        output_51_ce0,
        output_51_we0,
        output_51_d0,
        output_52_address0,
        output_52_ce0,
        output_52_we0,
        output_52_d0,
        output_53_address0,
        output_53_ce0,
        output_53_we0,
        output_53_d0,
        output_54_address0,
        output_54_ce0,
        output_54_we0,
        output_54_d0,
        output_55_address0,
        output_55_ce0,
        output_55_we0,
        output_55_d0,
        output_56_address0,
        output_56_ce0,
        output_56_we0,
        output_56_d0,
        output_57_address0,
        output_57_ce0,
        output_57_we0,
        output_57_d0,
        output_58_address0,
        output_58_ce0,
        output_58_we0,
        output_58_d0,
        output_59_address0,
        output_59_ce0,
        output_59_we0,
        output_59_d0,
        output_60_address0,
        output_60_ce0,
        output_60_we0,
        output_60_d0,
        output_61_address0,
        output_61_ce0,
        output_61_we0,
        output_61_d0,
        output_62_address0,
        output_62_ce0,
        output_62_we0,
        output_62_d0,
        output_63_address0,
        output_63_ce0,
        output_63_we0,
        output_63_d0,
        grp_fu_3337_p_din0,
        grp_fu_3337_p_din1,
        grp_fu_3337_p_opcode,
        grp_fu_3337_p_dout0,
        grp_fu_3337_p_ce,
        grp_fu_3341_p_din0,
        grp_fu_3341_p_din1,
        grp_fu_3341_p_dout0,
        grp_fu_3341_p_ce,
        grp_fu_4439_p_din0,
        grp_fu_4439_p_din1,
        grp_fu_4439_p_opcode,
        grp_fu_4439_p_dout0,
        grp_fu_4439_p_ce
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_pp0_stage0 = 24'd8;
parameter    ap_ST_fsm_pp0_stage1 = 24'd16;
parameter    ap_ST_fsm_pp0_stage2 = 24'd32;
parameter    ap_ST_fsm_pp0_stage3 = 24'd64;
parameter    ap_ST_fsm_state33 = 24'd128;
parameter    ap_ST_fsm_state34 = 24'd256;
parameter    ap_ST_fsm_state35 = 24'd512;
parameter    ap_ST_fsm_state36 = 24'd1024;
parameter    ap_ST_fsm_state37 = 24'd2048;
parameter    ap_ST_fsm_state38 = 24'd4096;
parameter    ap_ST_fsm_state39 = 24'd8192;
parameter    ap_ST_fsm_state40 = 24'd16384;
parameter    ap_ST_fsm_state41 = 24'd32768;
parameter    ap_ST_fsm_state42 = 24'd65536;
parameter    ap_ST_fsm_state43 = 24'd131072;
parameter    ap_ST_fsm_state44 = 24'd262144;
parameter    ap_ST_fsm_state45 = 24'd524288;
parameter    ap_ST_fsm_state46 = 24'd1048576;
parameter    ap_ST_fsm_state47 = 24'd2097152;
parameter    ap_ST_fsm_state48 = 24'd4194304;
parameter    ap_ST_fsm_state49 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [6:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [6:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [6:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [6:0] input_4_address0;
output   input_4_ce0;
input  [31:0] input_4_q0;
output  [6:0] input_5_address0;
output   input_5_ce0;
input  [31:0] input_5_q0;
output  [6:0] input_6_address0;
output   input_6_ce0;
input  [31:0] input_6_q0;
output  [6:0] input_7_address0;
output   input_7_ce0;
input  [31:0] input_7_q0;
output  [6:0] input_8_address0;
output   input_8_ce0;
input  [31:0] input_8_q0;
output  [6:0] input_9_address0;
output   input_9_ce0;
input  [31:0] input_9_q0;
output  [6:0] input_10_address0;
output   input_10_ce0;
input  [31:0] input_10_q0;
output  [6:0] input_11_address0;
output   input_11_ce0;
input  [31:0] input_11_q0;
output  [6:0] input_12_address0;
output   input_12_ce0;
input  [31:0] input_12_q0;
output  [6:0] input_13_address0;
output   input_13_ce0;
input  [31:0] input_13_q0;
output  [6:0] input_14_address0;
output   input_14_ce0;
input  [31:0] input_14_q0;
output  [6:0] input_15_address0;
output   input_15_ce0;
input  [31:0] input_15_q0;
output  [6:0] input_16_address0;
output   input_16_ce0;
input  [31:0] input_16_q0;
output  [6:0] input_17_address0;
output   input_17_ce0;
input  [31:0] input_17_q0;
output  [6:0] input_18_address0;
output   input_18_ce0;
input  [31:0] input_18_q0;
output  [6:0] input_19_address0;
output   input_19_ce0;
input  [31:0] input_19_q0;
output  [6:0] input_20_address0;
output   input_20_ce0;
input  [31:0] input_20_q0;
output  [6:0] input_21_address0;
output   input_21_ce0;
input  [31:0] input_21_q0;
output  [6:0] input_22_address0;
output   input_22_ce0;
input  [31:0] input_22_q0;
output  [6:0] input_23_address0;
output   input_23_ce0;
input  [31:0] input_23_q0;
output  [6:0] input_24_address0;
output   input_24_ce0;
input  [31:0] input_24_q0;
output  [6:0] input_25_address0;
output   input_25_ce0;
input  [31:0] input_25_q0;
output  [6:0] input_26_address0;
output   input_26_ce0;
input  [31:0] input_26_q0;
output  [6:0] input_27_address0;
output   input_27_ce0;
input  [31:0] input_27_q0;
output  [6:0] input_28_address0;
output   input_28_ce0;
input  [31:0] input_28_q0;
output  [6:0] input_29_address0;
output   input_29_ce0;
input  [31:0] input_29_q0;
output  [6:0] input_30_address0;
output   input_30_ce0;
input  [31:0] input_30_q0;
output  [6:0] input_31_address0;
output   input_31_ce0;
input  [31:0] input_31_q0;
output  [6:0] input_32_address0;
output   input_32_ce0;
input  [31:0] input_32_q0;
output  [6:0] input_33_address0;
output   input_33_ce0;
input  [31:0] input_33_q0;
output  [6:0] input_34_address0;
output   input_34_ce0;
input  [31:0] input_34_q0;
output  [6:0] input_35_address0;
output   input_35_ce0;
input  [31:0] input_35_q0;
output  [6:0] input_36_address0;
output   input_36_ce0;
input  [31:0] input_36_q0;
output  [6:0] input_37_address0;
output   input_37_ce0;
input  [31:0] input_37_q0;
output  [6:0] input_38_address0;
output   input_38_ce0;
input  [31:0] input_38_q0;
output  [6:0] input_39_address0;
output   input_39_ce0;
input  [31:0] input_39_q0;
output  [6:0] input_40_address0;
output   input_40_ce0;
input  [31:0] input_40_q0;
output  [6:0] input_41_address0;
output   input_41_ce0;
input  [31:0] input_41_q0;
output  [6:0] input_42_address0;
output   input_42_ce0;
input  [31:0] input_42_q0;
output  [6:0] input_43_address0;
output   input_43_ce0;
input  [31:0] input_43_q0;
output  [6:0] input_44_address0;
output   input_44_ce0;
input  [31:0] input_44_q0;
output  [6:0] input_45_address0;
output   input_45_ce0;
input  [31:0] input_45_q0;
output  [6:0] input_46_address0;
output   input_46_ce0;
input  [31:0] input_46_q0;
output  [6:0] input_47_address0;
output   input_47_ce0;
input  [31:0] input_47_q0;
output  [6:0] input_48_address0;
output   input_48_ce0;
input  [31:0] input_48_q0;
output  [6:0] input_49_address0;
output   input_49_ce0;
input  [31:0] input_49_q0;
output  [6:0] input_50_address0;
output   input_50_ce0;
input  [31:0] input_50_q0;
output  [6:0] input_51_address0;
output   input_51_ce0;
input  [31:0] input_51_q0;
output  [6:0] input_52_address0;
output   input_52_ce0;
input  [31:0] input_52_q0;
output  [6:0] input_53_address0;
output   input_53_ce0;
input  [31:0] input_53_q0;
output  [6:0] input_54_address0;
output   input_54_ce0;
input  [31:0] input_54_q0;
output  [6:0] input_55_address0;
output   input_55_ce0;
input  [31:0] input_55_q0;
output  [6:0] input_56_address0;
output   input_56_ce0;
input  [31:0] input_56_q0;
output  [6:0] input_57_address0;
output   input_57_ce0;
input  [31:0] input_57_q0;
output  [6:0] input_58_address0;
output   input_58_ce0;
input  [31:0] input_58_q0;
output  [6:0] input_59_address0;
output   input_59_ce0;
input  [31:0] input_59_q0;
output  [6:0] input_60_address0;
output   input_60_ce0;
input  [31:0] input_60_q0;
output  [6:0] input_61_address0;
output   input_61_ce0;
input  [31:0] input_61_q0;
output  [6:0] input_62_address0;
output   input_62_ce0;
input  [31:0] input_62_q0;
output  [5:0] input_63_address0;
output   input_63_ce0;
input  [31:0] input_63_q0;
output  [5:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;
output  [5:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [31:0] output_1_d0;
output  [5:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [31:0] output_2_d0;
output  [5:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [31:0] output_3_d0;
output  [5:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [31:0] output_4_d0;
output  [5:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [31:0] output_5_d0;
output  [5:0] output_6_address0;
output   output_6_ce0;
output   output_6_we0;
output  [31:0] output_6_d0;
output  [5:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [31:0] output_7_d0;
output  [5:0] output_8_address0;
output   output_8_ce0;
output   output_8_we0;
output  [31:0] output_8_d0;
output  [5:0] output_9_address0;
output   output_9_ce0;
output   output_9_we0;
output  [31:0] output_9_d0;
output  [5:0] output_10_address0;
output   output_10_ce0;
output   output_10_we0;
output  [31:0] output_10_d0;
output  [5:0] output_11_address0;
output   output_11_ce0;
output   output_11_we0;
output  [31:0] output_11_d0;
output  [5:0] output_12_address0;
output   output_12_ce0;
output   output_12_we0;
output  [31:0] output_12_d0;
output  [5:0] output_13_address0;
output   output_13_ce0;
output   output_13_we0;
output  [31:0] output_13_d0;
output  [5:0] output_14_address0;
output   output_14_ce0;
output   output_14_we0;
output  [31:0] output_14_d0;
output  [5:0] output_15_address0;
output   output_15_ce0;
output   output_15_we0;
output  [31:0] output_15_d0;
output  [5:0] output_16_address0;
output   output_16_ce0;
output   output_16_we0;
output  [31:0] output_16_d0;
output  [5:0] output_17_address0;
output   output_17_ce0;
output   output_17_we0;
output  [31:0] output_17_d0;
output  [5:0] output_18_address0;
output   output_18_ce0;
output   output_18_we0;
output  [31:0] output_18_d0;
output  [5:0] output_19_address0;
output   output_19_ce0;
output   output_19_we0;
output  [31:0] output_19_d0;
output  [5:0] output_20_address0;
output   output_20_ce0;
output   output_20_we0;
output  [31:0] output_20_d0;
output  [5:0] output_21_address0;
output   output_21_ce0;
output   output_21_we0;
output  [31:0] output_21_d0;
output  [5:0] output_22_address0;
output   output_22_ce0;
output   output_22_we0;
output  [31:0] output_22_d0;
output  [5:0] output_23_address0;
output   output_23_ce0;
output   output_23_we0;
output  [31:0] output_23_d0;
output  [5:0] output_24_address0;
output   output_24_ce0;
output   output_24_we0;
output  [31:0] output_24_d0;
output  [5:0] output_25_address0;
output   output_25_ce0;
output   output_25_we0;
output  [31:0] output_25_d0;
output  [5:0] output_26_address0;
output   output_26_ce0;
output   output_26_we0;
output  [31:0] output_26_d0;
output  [5:0] output_27_address0;
output   output_27_ce0;
output   output_27_we0;
output  [31:0] output_27_d0;
output  [5:0] output_28_address0;
output   output_28_ce0;
output   output_28_we0;
output  [31:0] output_28_d0;
output  [5:0] output_29_address0;
output   output_29_ce0;
output   output_29_we0;
output  [31:0] output_29_d0;
output  [5:0] output_30_address0;
output   output_30_ce0;
output   output_30_we0;
output  [31:0] output_30_d0;
output  [5:0] output_31_address0;
output   output_31_ce0;
output   output_31_we0;
output  [31:0] output_31_d0;
output  [5:0] output_32_address0;
output   output_32_ce0;
output   output_32_we0;
output  [31:0] output_32_d0;
output  [5:0] output_33_address0;
output   output_33_ce0;
output   output_33_we0;
output  [31:0] output_33_d0;
output  [5:0] output_34_address0;
output   output_34_ce0;
output   output_34_we0;
output  [31:0] output_34_d0;
output  [5:0] output_35_address0;
output   output_35_ce0;
output   output_35_we0;
output  [31:0] output_35_d0;
output  [5:0] output_36_address0;
output   output_36_ce0;
output   output_36_we0;
output  [31:0] output_36_d0;
output  [5:0] output_37_address0;
output   output_37_ce0;
output   output_37_we0;
output  [31:0] output_37_d0;
output  [5:0] output_38_address0;
output   output_38_ce0;
output   output_38_we0;
output  [31:0] output_38_d0;
output  [5:0] output_39_address0;
output   output_39_ce0;
output   output_39_we0;
output  [31:0] output_39_d0;
output  [5:0] output_40_address0;
output   output_40_ce0;
output   output_40_we0;
output  [31:0] output_40_d0;
output  [5:0] output_41_address0;
output   output_41_ce0;
output   output_41_we0;
output  [31:0] output_41_d0;
output  [5:0] output_42_address0;
output   output_42_ce0;
output   output_42_we0;
output  [31:0] output_42_d0;
output  [5:0] output_43_address0;
output   output_43_ce0;
output   output_43_we0;
output  [31:0] output_43_d0;
output  [5:0] output_44_address0;
output   output_44_ce0;
output   output_44_we0;
output  [31:0] output_44_d0;
output  [5:0] output_45_address0;
output   output_45_ce0;
output   output_45_we0;
output  [31:0] output_45_d0;
output  [5:0] output_46_address0;
output   output_46_ce0;
output   output_46_we0;
output  [31:0] output_46_d0;
output  [5:0] output_47_address0;
output   output_47_ce0;
output   output_47_we0;
output  [31:0] output_47_d0;
output  [5:0] output_48_address0;
output   output_48_ce0;
output   output_48_we0;
output  [31:0] output_48_d0;
output  [5:0] output_49_address0;
output   output_49_ce0;
output   output_49_we0;
output  [31:0] output_49_d0;
output  [5:0] output_50_address0;
output   output_50_ce0;
output   output_50_we0;
output  [31:0] output_50_d0;
output  [5:0] output_51_address0;
output   output_51_ce0;
output   output_51_we0;
output  [31:0] output_51_d0;
output  [5:0] output_52_address0;
output   output_52_ce0;
output   output_52_we0;
output  [31:0] output_52_d0;
output  [5:0] output_53_address0;
output   output_53_ce0;
output   output_53_we0;
output  [31:0] output_53_d0;
output  [5:0] output_54_address0;
output   output_54_ce0;
output   output_54_we0;
output  [31:0] output_54_d0;
output  [5:0] output_55_address0;
output   output_55_ce0;
output   output_55_we0;
output  [31:0] output_55_d0;
output  [5:0] output_56_address0;
output   output_56_ce0;
output   output_56_we0;
output  [31:0] output_56_d0;
output  [5:0] output_57_address0;
output   output_57_ce0;
output   output_57_we0;
output  [31:0] output_57_d0;
output  [5:0] output_58_address0;
output   output_58_ce0;
output   output_58_we0;
output  [31:0] output_58_d0;
output  [5:0] output_59_address0;
output   output_59_ce0;
output   output_59_we0;
output  [31:0] output_59_d0;
output  [5:0] output_60_address0;
output   output_60_ce0;
output   output_60_we0;
output  [31:0] output_60_d0;
output  [5:0] output_61_address0;
output   output_61_ce0;
output   output_61_we0;
output  [31:0] output_61_d0;
output  [5:0] output_62_address0;
output   output_62_ce0;
output   output_62_we0;
output  [31:0] output_62_d0;
output  [4:0] output_63_address0;
output   output_63_ce0;
output   output_63_we0;
output  [31:0] output_63_d0;
output  [31:0] grp_fu_3337_p_din0;
output  [31:0] grp_fu_3337_p_din1;
output  [1:0] grp_fu_3337_p_opcode;
input  [31:0] grp_fu_3337_p_dout0;
output   grp_fu_3337_p_ce;
output  [31:0] grp_fu_3341_p_din0;
output  [31:0] grp_fu_3341_p_din1;
input  [31:0] grp_fu_3341_p_dout0;
output   grp_fu_3341_p_ce;
output  [31:0] grp_fu_4439_p_din0;
output  [31:0] grp_fu_4439_p_din1;
output  [4:0] grp_fu_4439_p_opcode;
input  [0:0] grp_fu_4439_p_dout0;
output   grp_fu_4439_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg input_6_ce0;
reg input_7_ce0;
reg input_8_ce0;
reg input_9_ce0;
reg input_10_ce0;
reg input_11_ce0;
reg input_12_ce0;
reg input_13_ce0;
reg input_14_ce0;
reg input_15_ce0;
reg input_16_ce0;
reg input_17_ce0;
reg input_18_ce0;
reg input_19_ce0;
reg input_20_ce0;
reg input_21_ce0;
reg input_22_ce0;
reg input_23_ce0;
reg input_24_ce0;
reg input_25_ce0;
reg input_26_ce0;
reg input_27_ce0;
reg input_28_ce0;
reg input_29_ce0;
reg input_30_ce0;
reg input_31_ce0;
reg input_32_ce0;
reg input_33_ce0;
reg input_34_ce0;
reg input_35_ce0;
reg input_36_ce0;
reg input_37_ce0;
reg input_38_ce0;
reg input_39_ce0;
reg input_40_ce0;
reg input_41_ce0;
reg input_42_ce0;
reg input_43_ce0;
reg input_44_ce0;
reg input_45_ce0;
reg input_46_ce0;
reg input_47_ce0;
reg input_48_ce0;
reg input_49_ce0;
reg input_50_ce0;
reg input_51_ce0;
reg input_52_ce0;
reg input_53_ce0;
reg input_54_ce0;
reg input_55_ce0;
reg input_56_ce0;
reg input_57_ce0;
reg input_58_ce0;
reg input_59_ce0;
reg input_60_ce0;
reg input_61_ce0;
reg input_62_ce0;
reg input_63_ce0;
reg output_0_ce0;
reg output_0_we0;
reg output_1_ce0;
reg output_1_we0;
reg output_2_ce0;
reg output_2_we0;
reg output_3_ce0;
reg output_3_we0;
reg output_4_ce0;
reg output_4_we0;
reg output_5_ce0;
reg output_5_we0;
reg output_6_ce0;
reg output_6_we0;
reg output_7_ce0;
reg output_7_we0;
reg output_8_ce0;
reg output_8_we0;
reg output_9_ce0;
reg output_9_we0;
reg output_10_ce0;
reg output_10_we0;
reg output_11_ce0;
reg output_11_we0;
reg output_12_ce0;
reg output_12_we0;
reg output_13_ce0;
reg output_13_we0;
reg output_14_ce0;
reg output_14_we0;
reg output_15_ce0;
reg output_15_we0;
reg output_16_ce0;
reg output_16_we0;
reg output_17_ce0;
reg output_17_we0;
reg output_18_ce0;
reg output_18_we0;
reg output_19_ce0;
reg output_19_we0;
reg output_20_ce0;
reg output_20_we0;
reg output_21_ce0;
reg output_21_we0;
reg output_22_ce0;
reg output_22_we0;
reg output_23_ce0;
reg output_23_we0;
reg output_24_ce0;
reg output_24_we0;
reg output_25_ce0;
reg output_25_we0;
reg output_26_ce0;
reg output_26_we0;
reg output_27_ce0;
reg output_27_we0;
reg output_28_ce0;
reg output_28_we0;
reg output_29_ce0;
reg output_29_we0;
reg output_30_ce0;
reg output_30_we0;
reg output_31_ce0;
reg output_31_we0;
reg output_32_ce0;
reg output_32_we0;
reg output_33_ce0;
reg output_33_we0;
reg output_34_ce0;
reg output_34_we0;
reg output_35_ce0;
reg output_35_we0;
reg output_36_ce0;
reg output_36_we0;
reg output_37_ce0;
reg output_37_we0;
reg output_38_ce0;
reg output_38_we0;
reg output_39_ce0;
reg output_39_we0;
reg output_40_ce0;
reg output_40_we0;
reg output_41_ce0;
reg output_41_we0;
reg output_42_ce0;
reg output_42_we0;
reg output_43_ce0;
reg output_43_we0;
reg output_44_ce0;
reg output_44_we0;
reg output_45_ce0;
reg output_45_we0;
reg output_46_ce0;
reg output_46_we0;
reg output_47_ce0;
reg output_47_we0;
reg output_48_ce0;
reg output_48_we0;
reg output_49_ce0;
reg output_49_we0;
reg output_50_ce0;
reg output_50_we0;
reg output_51_ce0;
reg output_51_we0;
reg output_52_ce0;
reg output_52_we0;
reg output_53_ce0;
reg output_53_we0;
reg output_54_ce0;
reg output_54_we0;
reg output_55_ce0;
reg output_55_we0;
reg output_56_ce0;
reg output_56_we0;
reg output_57_ce0;
reg output_57_we0;
reg output_58_ce0;
reg output_58_we0;
reg output_59_ce0;
reg output_59_we0;
reg output_60_ce0;
reg output_60_we0;
reg output_61_ce0;
reg output_61_we0;
reg output_62_ce0;
reg output_62_we0;
reg output_63_ce0;
reg output_63_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] layer_6_weights_address0;
reg    layer_6_weights_ce0;
wire   [31:0] layer_6_weights_q0;
wire   [4:0] layer_6_bias_address0;
reg    layer_6_bias_ce0;
wire   [31:0] layer_6_bias_q0;
reg   [8:0] indvar_flatten36_reg_2246;
reg   [3:0] indvar_flatten_reg_2258;
reg   [2:0] v_reg_2269;
reg   [2:0] vi_reg_2280;
reg   [5:0] iv_reg_2291;
reg   [31:0] add4115_reg_2302;
wire   [11:0] add_ln67_fu_2526_p2;
reg   [11:0] add_ln67_reg_3251;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln70_fu_2568_p2;
reg   [0:0] icmp_ln70_reg_3259;
wire   [0:0] icmp_ln67_fu_2562_p2;
wire   [3:0] select_ln67_8_fu_2630_p3;
reg   [3:0] select_ln67_8_reg_3264;
wire   [5:0] iii_mid2_fu_2650_p3;
reg   [5:0] iii_mid2_reg_3270;
wire   [3:0] ii_cast5_mid2_fu_2658_p3;
reg   [3:0] ii_cast5_mid2_reg_3277;
wire   [6:0] empty_87_fu_2694_p3;
reg   [6:0] empty_87_reg_3283;
wire   [7:0] ii_cast5_mid2_cast_fu_2707_p1;
reg   [7:0] ii_cast5_mid2_cast_reg_3293;
wire    ap_CS_fsm_state3;
wire   [11:0] add52_mid2_fu_2710_p3;
reg   [11:0] add52_mid2_reg_3298;
wire   [13:0] zext_ln73_5_fu_2717_p1;
reg   [13:0] zext_ln73_5_reg_3303;
wire   [11:0] zext_ln73_6_fu_2720_p1;
reg   [11:0] zext_ln73_6_reg_3308;
wire   [0:0] icmp_ln78_fu_2757_p2;
reg   [0:0] icmp_ln78_reg_3318;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_state20_pp0_stage0_iter4;
wire    ap_block_state24_pp0_stage0_iter5;
wire    ap_block_state28_pp0_stage0_iter6;
wire    ap_block_state32_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln78_reg_3318_pp0_iter1_reg;
reg   [0:0] icmp_ln78_reg_3318_pp0_iter2_reg;
reg   [0:0] icmp_ln78_reg_3318_pp0_iter3_reg;
reg   [0:0] icmp_ln78_reg_3318_pp0_iter4_reg;
reg   [0:0] icmp_ln78_reg_3318_pp0_iter5_reg;
reg   [0:0] icmp_ln78_reg_3318_pp0_iter6_reg;
wire   [0:0] icmp_ln81_fu_2763_p2;
reg   [0:0] icmp_ln81_reg_3322;
wire   [2:0] select_ln81_fu_2815_p3;
reg   [2:0] select_ln81_reg_3328;
wire  signed [2:0] select_ln81_8_fu_2851_p3;
reg  signed [2:0] select_ln81_8_reg_3333;
reg    ap_enable_reg_pp0_iter0;
wire  signed [1:0] trunc_ln88_fu_2886_p1;
reg  signed [1:0] trunc_ln88_reg_3343;
wire   [3:0] add_ln93_7_fu_2894_p2;
reg   [3:0] add_ln93_7_reg_3348;
reg   [3:0] add_ln93_7_reg_3348_pp0_iter1_reg;
reg   [3:0] add_ln93_7_reg_3348_pp0_iter2_reg;
reg   [3:0] add_ln93_7_reg_3348_pp0_iter3_reg;
wire   [3:0] add_ln81_5_fu_2900_p2;
reg   [3:0] add_ln81_5_reg_3353;
wire   [8:0] add_ln78_fu_2906_p2;
reg   [8:0] add_ln78_reg_3358;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_state19_pp0_stage3_iter3;
wire    ap_block_state23_pp0_stage3_iter4;
wire    ap_block_state27_pp0_stage3_iter5;
wire    ap_block_state31_pp0_stage3_iter6;
wire    ap_block_pp0_stage3_11001;
wire   [5:0] select_ln78_7_fu_2918_p3;
reg   [5:0] select_ln78_7_reg_3363;
wire   [4:0] trunc_ln78_fu_2929_p1;
reg   [4:0] trunc_ln78_reg_3368;
reg   [4:0] trunc_ln78_reg_3368_pp0_iter1_reg;
reg   [4:0] trunc_ln78_reg_3368_pp0_iter2_reg;
reg   [4:0] trunc_ln78_reg_3368_pp0_iter3_reg;
wire   [12:0] add_ln88_3_fu_2949_p2;
reg   [12:0] add_ln88_3_reg_3373;
reg   [12:0] add_ln88_3_reg_3373_pp0_iter1_reg;
reg   [12:0] add_ln88_3_reg_3373_pp0_iter2_reg;
wire   [2:0] add_ln93_fu_2961_p2;
reg   [2:0] add_ln93_reg_3379;
wire   [3:0] select_ln81_10_fu_2966_p3;
reg   [3:0] select_ln81_10_reg_3384;
reg   [31:0] layer_6_weights_load_reg_3399;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_state17_pp0_stage1_iter3;
wire    ap_block_state21_pp0_stage1_iter4;
wire    ap_block_state25_pp0_stage1_iter5;
wire    ap_block_state29_pp0_stage1_iter6;
wire    ap_block_pp0_stage1_11001;
reg   [5:0] trunc_ln88_2_reg_3404;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_state18_pp0_stage2_iter3;
wire    ap_block_state22_pp0_stage2_iter4;
wire    ap_block_state26_pp0_stage2_iter5;
wire    ap_block_state30_pp0_stage2_iter6;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_2515_p2;
reg   [31:0] mul_reg_3728;
wire   [31:0] grp_fu_2510_p2;
reg    ap_enable_reg_pp0_iter7;
wire   [11:0] add_ln103_fu_3070_p2;
wire    ap_CS_fsm_state33;
reg   [5:0] trunc_ln_reg_3748;
wire    ap_CS_fsm_state36;
wire   [31:0] output_sum_3_fu_3135_p3;
reg   [31:0] output_sum_3_reg_3752;
wire    ap_CS_fsm_state45;
wire   [5:0] add_ln73_fu_3211_p2;
wire    ap_CS_fsm_state49;
wire   [9:0] select_ln70_fu_3222_p3;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_condition_pp0_exit_iter2_state15;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [11:0] indvar_flatten70_reg_2190;
reg   [3:0] i_reg_2201;
reg   [9:0] indvar_flatten44_reg_2212;
reg   [3:0] ii_reg_2224;
reg   [5:0] iii_reg_2235;
reg   [8:0] ap_phi_mux_indvar_flatten36_phi_fu_2250_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_2262_p4;
reg   [2:0] ap_phi_mux_v_phi_fu_2273_p4;
reg   [2:0] ap_phi_mux_vi_phi_fu_2284_p4;
reg   [5:0] ap_phi_mux_iv_phi_fu_2295_p4;
wire    ap_block_pp0_stage3;
reg   [31:0] ap_phi_mux_add4115_phi_fu_2305_p4;
reg   [31:0] ap_phi_mux_phi_ln88_phi_fu_2315_p128;
wire   [31:0] ap_phi_reg_pp0_iter5_phi_ln88_reg_2312;
wire   [63:0] zext_ln73_fu_2702_p1;
wire   [63:0] zext_ln92_fu_2988_p1;
wire   [63:0] zext_ln88_2_fu_3002_p1;
wire   [63:0] zext_ln103_fu_3143_p1;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_2510_p0;
wire   [31:0] grp_fu_2510_p1;
wire   [31:0] grp_fu_2515_p0;
wire   [31:0] grp_fu_2515_p1;
wire   [31:0] grp_fu_2520_p0;
wire   [31:0] grp_fu_2520_p1;
wire    ap_CS_fsm_state44;
wire   [3:0] mul_ln70_fu_2536_p0;
wire   [4:0] mul_ln70_fu_2536_p1;
wire   [4:0] ii_cast_fu_2542_p1;
wire   [4:0] tmp_fu_2546_p2;
wire  signed [6:0] tmp_cast_fu_2552_p1;
wire   [6:0] mul_ln70_fu_2536_p2;
wire   [3:0] add_ln67_3_fu_2582_p2;
wire   [3:0] mul_ln70_1_fu_2592_p0;
wire   [4:0] mul_ln70_1_fu_2592_p1;
wire   [6:0] mul_ln70_1_fu_2592_p2;
wire   [0:0] icmp_ln73_fu_2618_p2;
wire   [0:0] xor_ln67_fu_2612_p2;
wire   [3:0] select_ln67_fu_2574_p3;
wire   [0:0] and_ln67_fu_2624_p2;
wire   [0:0] empty_86_fu_2644_p2;
wire   [3:0] add_ln70_fu_2638_p2;
wire   [4:0] ii_cast_mid1_fu_2666_p1;
wire   [4:0] tmp_mid1_fu_2670_p2;
wire  signed [6:0] tmp_cast_mid1_fu_2676_p1;
wire   [6:0] select_ln67_7_fu_2598_p3;
wire   [6:0] mul4811_mid162_fu_2606_p2;
wire   [6:0] mul4811_fu_2556_p2;
wire   [6:0] mul4811_mid1_fu_2680_p2;
wire   [6:0] select_ln67_9_fu_2686_p3;
wire   [2:0] indvars_iv_next37_fu_2723_p2;
wire   [1:0] empty_fu_2733_p1;
wire   [3:0] p_shl_fu_2737_p3;
wire   [3:0] indvars_iv_next37_cast_fu_2729_p1;
wire   [3:0] sub_ln92_fu_2745_p2;
wire   [3:0] add_ln93_6_fu_2751_p2;
wire   [0:0] icmp_ln84_fu_2791_p2;
wire   [0:0] xor_ln78_fu_2785_p2;
wire   [2:0] select_ln78_fu_2769_p3;
wire   [0:0] and_ln78_fu_2797_p2;
wire   [0:0] or_ln81_fu_2809_p2;
wire   [2:0] indvars_iv_next37_mid1_fu_2823_p2;
wire   [1:0] empty_84_fu_2833_p1;
wire   [3:0] p_shl_mid1_fu_2837_p3;
wire   [3:0] indvars_iv_next37_cast_mid1_fu_2829_p1;
wire   [2:0] indvars_iv_next37_dup_fu_2803_p2;
wire  signed [3:0] sext_ln81_fu_2859_p1;
wire   [3:0] add_ln81_fu_2863_p2;
wire   [3:0] sub_ln92_3_fu_2845_p2;
wire   [3:0] add_ln93_8_fu_2872_p2;
wire   [3:0] select_ln78_8_fu_2777_p3;
wire   [3:0] select_ln81_9_fu_2878_p3;
wire  signed [3:0] sext_ln92_fu_2890_p1;
wire   [5:0] add_ln78_2_fu_2912_p2;
wire   [7:0] grp_fu_3229_p3;
wire  signed [7:0] sext_ln88_fu_2933_p1;
(* use_dsp48 = "no" *) wire   [7:0] add_ln88_fu_2936_p2;
wire   [12:0] shl_ln_fu_2941_p3;
wire   [12:0] zext_ln78_fu_2925_p1;
wire   [12:0] grp_fu_2955_p0;
wire   [7:0] grp_fu_2955_p1;
wire   [13:0] shl_ln2_fu_2975_p4;
wire   [13:0] add_ln92_fu_2983_p2;
wire   [26:0] grp_fu_3237_p2;
wire    ap_block_pp0_stage2;
wire   [12:0] grp_fu_2955_p2;
wire   [6:0] grp_fu_3078_p1;
wire   [24:0] grp_fu_3244_p2;
wire   [31:0] bitcast_ln49_fu_3093_p1;
wire   [7:0] tmp_s_fu_3097_p4;
wire   [22:0] trunc_ln49_fu_3107_p1;
wire   [0:0] icmp_ln49_6_fu_3117_p2;
wire   [0:0] icmp_ln49_fu_3111_p2;
wire   [0:0] or_ln49_fu_3123_p2;
wire   [0:0] grp_fu_2520_p2;
wire   [0:0] and_ln49_fu_3129_p2;
wire   [11:0] grp_fu_3078_p2;
wire   [9:0] add_ln70_3_fu_3216_p2;
wire   [3:0] grp_fu_3229_p0;
wire   [4:0] grp_fu_3229_p1;
wire   [3:0] grp_fu_3229_p2;
wire   [12:0] grp_fu_3237_p0;
wire   [14:0] grp_fu_3237_p1;
wire   [11:0] grp_fu_3244_p0;
wire   [13:0] grp_fu_3244_p1;
wire    grp_fu_2510_ce;
wire    grp_fu_2515_ce;
wire    grp_fu_2520_ce;
wire   [4:0] grp_fu_2520_opcode;
reg    grp_fu_3078_ap_start;
wire    grp_fu_3078_ap_done;
reg   [23:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_block_pp0_stage0_00001;
wire   [7:0] grp_fu_3229_p00;
wire   [26:0] grp_fu_3237_p00;
wire   [24:0] grp_fu_3244_p00;
wire   [6:0] mul_ln70_1_fu_2592_p00;
wire   [6:0] mul_ln70_fu_2536_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

infer_conv2d_layer_6_weights #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
layer_6_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_6_weights_address0),
    .ce0(layer_6_weights_ce0),
    .q0(layer_6_weights_q0)
);

infer_conv2d_layer_6_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
layer_6_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_6_bias_address0),
    .ce0(layer_6_bias_ce0),
    .q0(layer_6_bias_q0)
);

infer_mul_4ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_4ns_5ns_7_1_1_U871(
    .din0(mul_ln70_fu_2536_p0),
    .din1(mul_ln70_fu_2536_p1),
    .dout(mul_ln70_fu_2536_p2)
);

infer_mul_4ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_4ns_5ns_7_1_1_U872(
    .din0(mul_ln70_1_fu_2592_p0),
    .din1(mul_ln70_1_fu_2592_p1),
    .dout(mul_ln70_1_fu_2592_p2)
);

infer_urem_13ns_8ns_13_17_1 #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
urem_13ns_8ns_13_17_1_U873(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2955_p0),
    .din1(grp_fu_2955_p1),
    .ce(1'b1),
    .dout(grp_fu_2955_p2)
);

infer_urem_12ns_7ns_12_16_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
urem_12ns_7ns_12_16_seq_1_U874(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_3078_ap_start),
    .done(grp_fu_3078_ap_done),
    .din0(add_ln103_fu_3070_p2),
    .din1(grp_fu_3078_p1),
    .ce(1'b1),
    .dout(grp_fu_3078_p2)
);

infer_mac_muladd_4ns_5ns_4ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
mac_muladd_4ns_5ns_4ns_8_4_1_U875(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3229_p0),
    .din1(grp_fu_3229_p1),
    .din2(grp_fu_3229_p2),
    .ce(1'b1),
    .dout(grp_fu_3229_p3)
);

infer_mul_mul_13ns_15ns_27_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 27 ))
mul_mul_13ns_15ns_27_4_1_U876(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3237_p0),
    .din1(grp_fu_3237_p1),
    .ce(1'b1),
    .dout(grp_fu_3237_p2)
);

infer_mul_mul_12ns_14ns_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 25 ))
mul_mul_12ns_14ns_25_4_1_U877(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3244_p0),
    .din1(grp_fu_3244_p1),
    .ce(1'b1),
    .dout(grp_fu_3244_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter2_state15)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b0)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_3318_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        add4115_reg_2302 <= grp_fu_3337_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        add4115_reg_2302 <= layer_6_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        i_reg_2201 <= select_ln67_8_reg_3264;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_2201 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        ii_reg_2224 <= ii_cast5_mid2_reg_3277;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_2224 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        iii_reg_2235 <= add_ln73_fu_3211_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iii_reg_2235 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten36_reg_2246 <= add_ln78_reg_3358;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten36_reg_2246 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        indvar_flatten44_reg_2212 <= select_ln70_fu_3222_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten44_reg_2212 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        indvar_flatten70_reg_2190 <= add_ln67_reg_3251;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten70_reg_2190 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_2258 <= select_ln81_10_reg_3384;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_2258 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_3318_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        iv_reg_2291 <= select_ln78_7_reg_3363;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_reg_2291 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v_reg_2269 <= select_ln81_8_reg_3333;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_2269 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        vi_reg_2280 <= add_ln93_reg_3379;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vi_reg_2280 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add52_mid2_reg_3298[11 : 5] <= add52_mid2_fu_2710_p3[11 : 5];
        ii_cast5_mid2_cast_reg_3293[3 : 0] <= ii_cast5_mid2_cast_fu_2707_p1[3 : 0];
        zext_ln73_5_reg_3303[5 : 0] <= zext_ln73_5_fu_2717_p1[5 : 0];
        zext_ln73_6_reg_3308[5 : 0] <= zext_ln73_6_fu_2720_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln67_reg_3251 <= add_ln67_fu_2526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln78_reg_3358 <= add_ln78_fu_2906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_2757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln81_5_reg_3353 <= add_ln81_5_fu_2900_p2;
        add_ln93_7_reg_3348 <= add_ln93_7_fu_2894_p2;
        icmp_ln81_reg_3322 <= icmp_ln81_fu_2763_p2;
        select_ln81_reg_3328 <= select_ln81_fu_2815_p3;
        trunc_ln88_reg_3343 <= trunc_ln88_fu_2886_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln88_3_reg_3373 <= add_ln88_3_fu_2949_p2;
        trunc_ln78_reg_3368 <= trunc_ln78_fu_2929_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln88_3_reg_3373_pp0_iter1_reg <= add_ln88_3_reg_3373;
        add_ln88_3_reg_3373_pp0_iter2_reg <= add_ln88_3_reg_3373_pp0_iter1_reg;
        trunc_ln78_reg_3368_pp0_iter1_reg <= trunc_ln78_reg_3368;
        trunc_ln78_reg_3368_pp0_iter2_reg <= trunc_ln78_reg_3368_pp0_iter1_reg;
        trunc_ln78_reg_3368_pp0_iter3_reg <= trunc_ln78_reg_3368_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln93_7_reg_3348_pp0_iter1_reg <= add_ln93_7_reg_3348;
        add_ln93_7_reg_3348_pp0_iter2_reg <= add_ln93_7_reg_3348_pp0_iter1_reg;
        add_ln93_7_reg_3348_pp0_iter3_reg <= add_ln93_7_reg_3348_pp0_iter2_reg;
        icmp_ln78_reg_3318 <= icmp_ln78_fu_2757_p2;
        icmp_ln78_reg_3318_pp0_iter1_reg <= icmp_ln78_reg_3318;
        icmp_ln78_reg_3318_pp0_iter2_reg <= icmp_ln78_reg_3318_pp0_iter1_reg;
        icmp_ln78_reg_3318_pp0_iter3_reg <= icmp_ln78_reg_3318_pp0_iter2_reg;
        icmp_ln78_reg_3318_pp0_iter4_reg <= icmp_ln78_reg_3318_pp0_iter3_reg;
        icmp_ln78_reg_3318_pp0_iter5_reg <= icmp_ln78_reg_3318_pp0_iter4_reg;
        icmp_ln78_reg_3318_pp0_iter6_reg <= icmp_ln78_reg_3318_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln93_reg_3379 <= add_ln93_fu_2961_p2;
        select_ln78_7_reg_3363 <= select_ln78_7_fu_2918_p3;
        select_ln81_10_reg_3384 <= select_ln81_10_fu_2966_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_2562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_87_reg_3283 <= empty_87_fu_2694_p3;
        icmp_ln70_reg_3259 <= icmp_ln70_fu_2568_p2;
        ii_cast5_mid2_reg_3277 <= ii_cast5_mid2_fu_2658_p3;
        iii_mid2_reg_3270 <= iii_mid2_fu_2650_p3;
        select_ln67_8_reg_3264 <= select_ln67_8_fu_2630_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_3318_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer_6_weights_load_reg_3399 <= layer_6_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_3318_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_reg_3728 <= grp_fu_3341_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        output_sum_3_reg_3752 <= output_sum_3_fu_3135_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_2757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln81_8_reg_3333 <= select_ln81_8_fu_2851_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_3318_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln88_2_reg_3404 <= {{grp_fu_3237_p2[25:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        trunc_ln_reg_3748 <= {{grp_fu_3244_p2[23:18]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln78_reg_3318 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln67_fu_2562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_3318_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_phi_mux_add4115_phi_fu_2305_p4 = grp_fu_3337_p_dout0;
    end else begin
        ap_phi_mux_add4115_phi_fu_2305_p4 = add4115_reg_2302;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten36_phi_fu_2250_p4 = add_ln78_reg_3358;
    end else begin
        ap_phi_mux_indvar_flatten36_phi_fu_2250_p4 = indvar_flatten36_reg_2246;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_2262_p4 = select_ln81_10_reg_3384;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_2262_p4 = indvar_flatten_reg_2258;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_3318_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_iv_phi_fu_2295_p4 = select_ln78_7_reg_3363;
    end else begin
        ap_phi_mux_iv_phi_fu_2295_p4 = iv_reg_2291;
    end
end

always @ (*) begin
    if ((icmp_ln78_reg_3318_pp0_iter4_reg == 1'd0)) begin
        if ((trunc_ln88_2_reg_3404 == 6'd63)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_63_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd62)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_62_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd61)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_61_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd60)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_60_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd59)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_59_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd58)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_58_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd57)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_57_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd56)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_56_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd55)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_55_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd54)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_54_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd53)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_53_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd52)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_52_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd51)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_51_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd50)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_50_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd49)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_49_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd48)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_48_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd47)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_47_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd46)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_46_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd45)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_45_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd44)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_44_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd43)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_43_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd42)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_42_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd41)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_41_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd40)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_40_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd39)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_39_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd38)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_38_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd37)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_37_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd36)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_36_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd35)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_35_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd34)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_34_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd33)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_33_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd32)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_32_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd31)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_31_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd30)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_30_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd29)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_29_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd28)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_28_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd27)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_27_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd26)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_26_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd25)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_25_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd24)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_24_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd23)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_23_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd22)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_22_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd21)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_21_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd20)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_20_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd19)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_19_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd18)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_18_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd17)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_17_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd16)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_16_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd15)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_15_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd14)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_14_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd13)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_13_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd12)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_12_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd11)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_11_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd10)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_10_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd9)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_9_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd8)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_8_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd7)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_7_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd6)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_6_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd5)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_5_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd4)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_4_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd3)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_3_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd2)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_2_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd1)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_1_q0;
        end else if ((trunc_ln88_2_reg_3404 == 6'd0)) begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = input_0_q0;
        end else begin
            ap_phi_mux_phi_ln88_phi_fu_2315_p128 = ap_phi_reg_pp0_iter5_phi_ln88_reg_2312;
        end
    end else begin
        ap_phi_mux_phi_ln88_phi_fu_2315_p128 = ap_phi_reg_pp0_iter5_phi_ln88_reg_2312;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_v_phi_fu_2273_p4 = select_ln81_8_reg_3333;
    end else begin
        ap_phi_mux_v_phi_fu_2273_p4 = v_reg_2269;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln78_reg_3318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_vi_phi_fu_2284_p4 = add_ln93_reg_3379;
    end else begin
        ap_phi_mux_vi_phi_fu_2284_p4 = vi_reg_2280;
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_2562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_3078_ap_start = 1'b1;
    end else begin
        grp_fu_3078_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_10_ce0 = 1'b1;
    end else begin
        input_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_11_ce0 = 1'b1;
    end else begin
        input_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_12_ce0 = 1'b1;
    end else begin
        input_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_13_ce0 = 1'b1;
    end else begin
        input_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_14_ce0 = 1'b1;
    end else begin
        input_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_15_ce0 = 1'b1;
    end else begin
        input_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_16_ce0 = 1'b1;
    end else begin
        input_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_17_ce0 = 1'b1;
    end else begin
        input_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_18_ce0 = 1'b1;
    end else begin
        input_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_19_ce0 = 1'b1;
    end else begin
        input_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_20_ce0 = 1'b1;
    end else begin
        input_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_21_ce0 = 1'b1;
    end else begin
        input_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_22_ce0 = 1'b1;
    end else begin
        input_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_23_ce0 = 1'b1;
    end else begin
        input_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_24_ce0 = 1'b1;
    end else begin
        input_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_25_ce0 = 1'b1;
    end else begin
        input_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_26_ce0 = 1'b1;
    end else begin
        input_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_27_ce0 = 1'b1;
    end else begin
        input_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_28_ce0 = 1'b1;
    end else begin
        input_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_29_ce0 = 1'b1;
    end else begin
        input_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_30_ce0 = 1'b1;
    end else begin
        input_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_31_ce0 = 1'b1;
    end else begin
        input_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_32_ce0 = 1'b1;
    end else begin
        input_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_33_ce0 = 1'b1;
    end else begin
        input_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_34_ce0 = 1'b1;
    end else begin
        input_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_35_ce0 = 1'b1;
    end else begin
        input_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_36_ce0 = 1'b1;
    end else begin
        input_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_37_ce0 = 1'b1;
    end else begin
        input_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_38_ce0 = 1'b1;
    end else begin
        input_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_39_ce0 = 1'b1;
    end else begin
        input_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_40_ce0 = 1'b1;
    end else begin
        input_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_41_ce0 = 1'b1;
    end else begin
        input_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_42_ce0 = 1'b1;
    end else begin
        input_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_43_ce0 = 1'b1;
    end else begin
        input_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_44_ce0 = 1'b1;
    end else begin
        input_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_45_ce0 = 1'b1;
    end else begin
        input_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_46_ce0 = 1'b1;
    end else begin
        input_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_47_ce0 = 1'b1;
    end else begin
        input_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_48_ce0 = 1'b1;
    end else begin
        input_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_49_ce0 = 1'b1;
    end else begin
        input_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_50_ce0 = 1'b1;
    end else begin
        input_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_51_ce0 = 1'b1;
    end else begin
        input_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_52_ce0 = 1'b1;
    end else begin
        input_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_53_ce0 = 1'b1;
    end else begin
        input_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_54_ce0 = 1'b1;
    end else begin
        input_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_55_ce0 = 1'b1;
    end else begin
        input_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_56_ce0 = 1'b1;
    end else begin
        input_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_57_ce0 = 1'b1;
    end else begin
        input_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_58_ce0 = 1'b1;
    end else begin
        input_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_59_ce0 = 1'b1;
    end else begin
        input_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_60_ce0 = 1'b1;
    end else begin
        input_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_61_ce0 = 1'b1;
    end else begin
        input_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_62_ce0 = 1'b1;
    end else begin
        input_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_63_ce0 = 1'b1;
    end else begin
        input_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_6_ce0 = 1'b1;
    end else begin
        input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_7_ce0 = 1'b1;
    end else begin
        input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_8_ce0 = 1'b1;
    end else begin
        input_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_9_ce0 = 1'b1;
    end else begin
        input_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_6_bias_ce0 = 1'b1;
    end else begin
        layer_6_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer_6_weights_ce0 = 1'b1;
    end else begin
        layer_6_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd0))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_10_ce0 = 1'b1;
    end else begin
        output_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd10))) begin
        output_10_we0 = 1'b1;
    end else begin
        output_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_11_ce0 = 1'b1;
    end else begin
        output_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd11))) begin
        output_11_we0 = 1'b1;
    end else begin
        output_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_12_ce0 = 1'b1;
    end else begin
        output_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd12))) begin
        output_12_we0 = 1'b1;
    end else begin
        output_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_13_ce0 = 1'b1;
    end else begin
        output_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd13))) begin
        output_13_we0 = 1'b1;
    end else begin
        output_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_14_ce0 = 1'b1;
    end else begin
        output_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd14))) begin
        output_14_we0 = 1'b1;
    end else begin
        output_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_15_ce0 = 1'b1;
    end else begin
        output_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd15))) begin
        output_15_we0 = 1'b1;
    end else begin
        output_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_16_ce0 = 1'b1;
    end else begin
        output_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd16))) begin
        output_16_we0 = 1'b1;
    end else begin
        output_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_17_ce0 = 1'b1;
    end else begin
        output_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd17))) begin
        output_17_we0 = 1'b1;
    end else begin
        output_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_18_ce0 = 1'b1;
    end else begin
        output_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd18))) begin
        output_18_we0 = 1'b1;
    end else begin
        output_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_19_ce0 = 1'b1;
    end else begin
        output_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd19))) begin
        output_19_we0 = 1'b1;
    end else begin
        output_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd1))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_20_ce0 = 1'b1;
    end else begin
        output_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd20))) begin
        output_20_we0 = 1'b1;
    end else begin
        output_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_21_ce0 = 1'b1;
    end else begin
        output_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd21))) begin
        output_21_we0 = 1'b1;
    end else begin
        output_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_22_ce0 = 1'b1;
    end else begin
        output_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd22))) begin
        output_22_we0 = 1'b1;
    end else begin
        output_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_23_ce0 = 1'b1;
    end else begin
        output_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd23))) begin
        output_23_we0 = 1'b1;
    end else begin
        output_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_24_ce0 = 1'b1;
    end else begin
        output_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd24))) begin
        output_24_we0 = 1'b1;
    end else begin
        output_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_25_ce0 = 1'b1;
    end else begin
        output_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd25))) begin
        output_25_we0 = 1'b1;
    end else begin
        output_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_26_ce0 = 1'b1;
    end else begin
        output_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd26))) begin
        output_26_we0 = 1'b1;
    end else begin
        output_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_27_ce0 = 1'b1;
    end else begin
        output_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd27))) begin
        output_27_we0 = 1'b1;
    end else begin
        output_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_28_ce0 = 1'b1;
    end else begin
        output_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd28))) begin
        output_28_we0 = 1'b1;
    end else begin
        output_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_29_ce0 = 1'b1;
    end else begin
        output_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd29))) begin
        output_29_we0 = 1'b1;
    end else begin
        output_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd2))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_30_ce0 = 1'b1;
    end else begin
        output_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd30))) begin
        output_30_we0 = 1'b1;
    end else begin
        output_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_31_ce0 = 1'b1;
    end else begin
        output_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd31))) begin
        output_31_we0 = 1'b1;
    end else begin
        output_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_32_ce0 = 1'b1;
    end else begin
        output_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd32))) begin
        output_32_we0 = 1'b1;
    end else begin
        output_32_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_33_ce0 = 1'b1;
    end else begin
        output_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd33))) begin
        output_33_we0 = 1'b1;
    end else begin
        output_33_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_34_ce0 = 1'b1;
    end else begin
        output_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd34))) begin
        output_34_we0 = 1'b1;
    end else begin
        output_34_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_35_ce0 = 1'b1;
    end else begin
        output_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd35))) begin
        output_35_we0 = 1'b1;
    end else begin
        output_35_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_36_ce0 = 1'b1;
    end else begin
        output_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd36))) begin
        output_36_we0 = 1'b1;
    end else begin
        output_36_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_37_ce0 = 1'b1;
    end else begin
        output_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd37))) begin
        output_37_we0 = 1'b1;
    end else begin
        output_37_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_38_ce0 = 1'b1;
    end else begin
        output_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd38))) begin
        output_38_we0 = 1'b1;
    end else begin
        output_38_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_39_ce0 = 1'b1;
    end else begin
        output_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd39))) begin
        output_39_we0 = 1'b1;
    end else begin
        output_39_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd3))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_40_ce0 = 1'b1;
    end else begin
        output_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd40))) begin
        output_40_we0 = 1'b1;
    end else begin
        output_40_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_41_ce0 = 1'b1;
    end else begin
        output_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd41))) begin
        output_41_we0 = 1'b1;
    end else begin
        output_41_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_42_ce0 = 1'b1;
    end else begin
        output_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd42))) begin
        output_42_we0 = 1'b1;
    end else begin
        output_42_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_43_ce0 = 1'b1;
    end else begin
        output_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd43))) begin
        output_43_we0 = 1'b1;
    end else begin
        output_43_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_44_ce0 = 1'b1;
    end else begin
        output_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd44))) begin
        output_44_we0 = 1'b1;
    end else begin
        output_44_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_45_ce0 = 1'b1;
    end else begin
        output_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd45))) begin
        output_45_we0 = 1'b1;
    end else begin
        output_45_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_46_ce0 = 1'b1;
    end else begin
        output_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd46))) begin
        output_46_we0 = 1'b1;
    end else begin
        output_46_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_47_ce0 = 1'b1;
    end else begin
        output_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd47))) begin
        output_47_we0 = 1'b1;
    end else begin
        output_47_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_48_ce0 = 1'b1;
    end else begin
        output_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd48))) begin
        output_48_we0 = 1'b1;
    end else begin
        output_48_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_49_ce0 = 1'b1;
    end else begin
        output_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd49))) begin
        output_49_we0 = 1'b1;
    end else begin
        output_49_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd4))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_50_ce0 = 1'b1;
    end else begin
        output_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd50))) begin
        output_50_we0 = 1'b1;
    end else begin
        output_50_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_51_ce0 = 1'b1;
    end else begin
        output_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd51))) begin
        output_51_we0 = 1'b1;
    end else begin
        output_51_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_52_ce0 = 1'b1;
    end else begin
        output_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd52))) begin
        output_52_we0 = 1'b1;
    end else begin
        output_52_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_53_ce0 = 1'b1;
    end else begin
        output_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd53))) begin
        output_53_we0 = 1'b1;
    end else begin
        output_53_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_54_ce0 = 1'b1;
    end else begin
        output_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd54))) begin
        output_54_we0 = 1'b1;
    end else begin
        output_54_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_55_ce0 = 1'b1;
    end else begin
        output_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd55))) begin
        output_55_we0 = 1'b1;
    end else begin
        output_55_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_56_ce0 = 1'b1;
    end else begin
        output_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd56))) begin
        output_56_we0 = 1'b1;
    end else begin
        output_56_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_57_ce0 = 1'b1;
    end else begin
        output_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd57))) begin
        output_57_we0 = 1'b1;
    end else begin
        output_57_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_58_ce0 = 1'b1;
    end else begin
        output_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd58))) begin
        output_58_we0 = 1'b1;
    end else begin
        output_58_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_59_ce0 = 1'b1;
    end else begin
        output_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd59))) begin
        output_59_we0 = 1'b1;
    end else begin
        output_59_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd5))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_60_ce0 = 1'b1;
    end else begin
        output_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd60))) begin
        output_60_we0 = 1'b1;
    end else begin
        output_60_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_61_ce0 = 1'b1;
    end else begin
        output_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd61))) begin
        output_61_we0 = 1'b1;
    end else begin
        output_61_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_62_ce0 = 1'b1;
    end else begin
        output_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd62))) begin
        output_62_we0 = 1'b1;
    end else begin
        output_62_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_63_ce0 = 1'b1;
    end else begin
        output_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd63))) begin
        output_63_we0 = 1'b1;
    end else begin
        output_63_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd6))) begin
        output_6_we0 = 1'b1;
    end else begin
        output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd7))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_8_ce0 = 1'b1;
    end else begin
        output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd8))) begin
        output_8_we0 = 1'b1;
    end else begin
        output_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        output_9_ce0 = 1'b1;
    end else begin
        output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (trunc_ln_reg_3748 == 6'd9))) begin
        output_9_we0 = 1'b1;
    end else begin
        output_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln67_fu_2562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add52_mid2_fu_2710_p3 = {{empty_87_reg_3283}, {5'd0}};

assign add_ln103_fu_3070_p2 = (zext_ln73_6_reg_3308 + add52_mid2_reg_3298);

assign add_ln67_3_fu_2582_p2 = (i_reg_2201 + 4'd1);

assign add_ln67_fu_2526_p2 = (indvar_flatten70_reg_2190 + 12'd1);

assign add_ln70_3_fu_3216_p2 = (indvar_flatten44_reg_2212 + 10'd1);

assign add_ln70_fu_2638_p2 = (select_ln67_fu_2574_p3 + 4'd1);

assign add_ln73_fu_3211_p2 = (iii_mid2_reg_3270 + 6'd1);

assign add_ln78_2_fu_2912_p2 = (ap_phi_mux_iv_phi_fu_2295_p4 + 6'd1);

assign add_ln78_fu_2906_p2 = (indvar_flatten36_reg_2246 + 9'd1);

assign add_ln81_5_fu_2900_p2 = (ap_phi_mux_indvar_flatten_phi_fu_2262_p4 + 4'd1);

assign add_ln81_fu_2863_p2 = ($signed(select_ln67_8_reg_3264) + $signed(sext_ln81_fu_2859_p1));

assign add_ln88_3_fu_2949_p2 = (shl_ln_fu_2941_p3 + zext_ln78_fu_2925_p1);

assign add_ln88_fu_2936_p2 = ($signed(grp_fu_3229_p3) + $signed(sext_ln88_fu_2933_p1));

assign add_ln92_fu_2983_p2 = (shl_ln2_fu_2975_p4 + zext_ln73_5_reg_3303);

assign add_ln93_6_fu_2751_p2 = (sub_ln92_fu_2745_p2 + 4'd1);

assign add_ln93_7_fu_2894_p2 = ($signed(select_ln81_9_fu_2878_p3) + $signed(sext_ln92_fu_2890_p1));

assign add_ln93_8_fu_2872_p2 = (sub_ln92_3_fu_2845_p2 + 4'd1);

assign add_ln93_fu_2961_p2 = (select_ln81_reg_3328 + 3'd1);

assign and_ln49_fu_3129_p2 = (or_ln49_fu_3123_p2 & grp_fu_4439_p_dout0);

assign and_ln67_fu_2624_p2 = (xor_ln67_fu_2612_p2 & icmp_ln73_fu_2618_p2);

assign and_ln78_fu_2797_p2 = (xor_ln78_fu_2785_p2 & icmp_ln84_fu_2791_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd23];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter5_phi_ln88_reg_2312 = 'bx;

assign bitcast_ln49_fu_3093_p1 = add4115_reg_2302;

assign empty_84_fu_2833_p1 = indvars_iv_next37_mid1_fu_2823_p2[1:0];

assign empty_86_fu_2644_p2 = (icmp_ln70_fu_2568_p2 | and_ln67_fu_2624_p2);

assign empty_87_fu_2694_p3 = ((and_ln67_fu_2624_p2[0:0] == 1'b1) ? mul4811_mid1_fu_2680_p2 : select_ln67_9_fu_2686_p3);

assign empty_fu_2733_p1 = indvars_iv_next37_fu_2723_p2[1:0];

assign grp_fu_2510_ce = 1'b1;

assign grp_fu_2510_p0 = ap_phi_mux_add4115_phi_fu_2305_p4;

assign grp_fu_2510_p1 = mul_reg_3728;

assign grp_fu_2510_p2 = grp_fu_3337_p_dout0;

assign grp_fu_2515_ce = 1'b1;

assign grp_fu_2515_p0 = ap_phi_mux_phi_ln88_phi_fu_2315_p128;

assign grp_fu_2515_p1 = layer_6_weights_load_reg_3399;

assign grp_fu_2515_p2 = grp_fu_3341_p_dout0;

assign grp_fu_2520_ce = 1'b1;

assign grp_fu_2520_opcode = 5'd4;

assign grp_fu_2520_p0 = add4115_reg_2302;

assign grp_fu_2520_p1 = 32'd0;

assign grp_fu_2520_p2 = grp_fu_4439_p_dout0;

assign grp_fu_2955_p0 = (shl_ln_fu_2941_p3 + zext_ln78_fu_2925_p1);

assign grp_fu_2955_p1 = 13'd85;

assign grp_fu_3078_p1 = 12'd61;

assign grp_fu_3229_p0 = grp_fu_3229_p00;

assign grp_fu_3229_p00 = add_ln81_fu_2863_p2;

assign grp_fu_3229_p1 = 8'd13;

assign grp_fu_3229_p2 = ii_cast5_mid2_cast_reg_3293;

assign grp_fu_3237_p0 = grp_fu_3237_p00;

assign grp_fu_3237_p00 = add_ln88_3_reg_3373_pp0_iter2_reg;

assign grp_fu_3237_p1 = 27'd12337;

assign grp_fu_3244_p0 = grp_fu_3244_p00;

assign grp_fu_3244_p00 = add_ln103_fu_3070_p2;

assign grp_fu_3244_p1 = 25'd4298;

assign grp_fu_3337_p_ce = 1'b1;

assign grp_fu_3337_p_din0 = ap_phi_mux_add4115_phi_fu_2305_p4;

assign grp_fu_3337_p_din1 = mul_reg_3728;

assign grp_fu_3337_p_opcode = 2'd0;

assign grp_fu_3341_p_ce = 1'b1;

assign grp_fu_3341_p_din0 = ap_phi_mux_phi_ln88_phi_fu_2315_p128;

assign grp_fu_3341_p_din1 = layer_6_weights_load_reg_3399;

assign grp_fu_4439_p_ce = 1'b1;

assign grp_fu_4439_p_din0 = add4115_reg_2302;

assign grp_fu_4439_p_din1 = 32'd0;

assign grp_fu_4439_p_opcode = 5'd4;

assign icmp_ln49_6_fu_3117_p2 = ((trunc_ln49_fu_3107_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_3111_p2 = ((tmp_s_fu_3097_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_2562_p2 = ((indvar_flatten70_reg_2190 == 12'd3872) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_2568_p2 = ((indvar_flatten44_reg_2212 == 10'd352) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_2618_p2 = ((iii_reg_2235 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_2757_p2 = ((ap_phi_mux_indvar_flatten36_phi_fu_2250_p4 == 9'd288) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_2763_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_2262_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_2791_p2 = ((ap_phi_mux_vi_phi_fu_2284_p4 == 3'd2) ? 1'b1 : 1'b0);

assign ii_cast5_mid2_cast_fu_2707_p1 = ii_cast5_mid2_reg_3277;

assign ii_cast5_mid2_fu_2658_p3 = ((and_ln67_fu_2624_p2[0:0] == 1'b1) ? add_ln70_fu_2638_p2 : select_ln67_fu_2574_p3);

assign ii_cast_fu_2542_p1 = ii_reg_2224;

assign ii_cast_mid1_fu_2666_p1 = add_ln70_fu_2638_p2;

assign iii_mid2_fu_2650_p3 = ((empty_86_fu_2644_p2[0:0] == 1'b1) ? 6'd0 : iii_reg_2235);

assign indvars_iv_next37_cast_fu_2729_p1 = indvars_iv_next37_fu_2723_p2;

assign indvars_iv_next37_cast_mid1_fu_2829_p1 = indvars_iv_next37_mid1_fu_2823_p2;

assign indvars_iv_next37_dup_fu_2803_p2 = (select_ln78_fu_2769_p3 + 3'd1);

assign indvars_iv_next37_fu_2723_p2 = (ap_phi_mux_v_phi_fu_2273_p4 + 3'd1);

assign indvars_iv_next37_mid1_fu_2823_p2 = (select_ln78_fu_2769_p3 + 3'd2);

assign input_0_address0 = zext_ln88_2_fu_3002_p1;

assign input_10_address0 = zext_ln88_2_fu_3002_p1;

assign input_11_address0 = zext_ln88_2_fu_3002_p1;

assign input_12_address0 = zext_ln88_2_fu_3002_p1;

assign input_13_address0 = zext_ln88_2_fu_3002_p1;

assign input_14_address0 = zext_ln88_2_fu_3002_p1;

assign input_15_address0 = zext_ln88_2_fu_3002_p1;

assign input_16_address0 = zext_ln88_2_fu_3002_p1;

assign input_17_address0 = zext_ln88_2_fu_3002_p1;

assign input_18_address0 = zext_ln88_2_fu_3002_p1;

assign input_19_address0 = zext_ln88_2_fu_3002_p1;

assign input_1_address0 = zext_ln88_2_fu_3002_p1;

assign input_20_address0 = zext_ln88_2_fu_3002_p1;

assign input_21_address0 = zext_ln88_2_fu_3002_p1;

assign input_22_address0 = zext_ln88_2_fu_3002_p1;

assign input_23_address0 = zext_ln88_2_fu_3002_p1;

assign input_24_address0 = zext_ln88_2_fu_3002_p1;

assign input_25_address0 = zext_ln88_2_fu_3002_p1;

assign input_26_address0 = zext_ln88_2_fu_3002_p1;

assign input_27_address0 = zext_ln88_2_fu_3002_p1;

assign input_28_address0 = zext_ln88_2_fu_3002_p1;

assign input_29_address0 = zext_ln88_2_fu_3002_p1;

assign input_2_address0 = zext_ln88_2_fu_3002_p1;

assign input_30_address0 = zext_ln88_2_fu_3002_p1;

assign input_31_address0 = zext_ln88_2_fu_3002_p1;

assign input_32_address0 = zext_ln88_2_fu_3002_p1;

assign input_33_address0 = zext_ln88_2_fu_3002_p1;

assign input_34_address0 = zext_ln88_2_fu_3002_p1;

assign input_35_address0 = zext_ln88_2_fu_3002_p1;

assign input_36_address0 = zext_ln88_2_fu_3002_p1;

assign input_37_address0 = zext_ln88_2_fu_3002_p1;

assign input_38_address0 = zext_ln88_2_fu_3002_p1;

assign input_39_address0 = zext_ln88_2_fu_3002_p1;

assign input_3_address0 = zext_ln88_2_fu_3002_p1;

assign input_40_address0 = zext_ln88_2_fu_3002_p1;

assign input_41_address0 = zext_ln88_2_fu_3002_p1;

assign input_42_address0 = zext_ln88_2_fu_3002_p1;

assign input_43_address0 = zext_ln88_2_fu_3002_p1;

assign input_44_address0 = zext_ln88_2_fu_3002_p1;

assign input_45_address0 = zext_ln88_2_fu_3002_p1;

assign input_46_address0 = zext_ln88_2_fu_3002_p1;

assign input_47_address0 = zext_ln88_2_fu_3002_p1;

assign input_48_address0 = zext_ln88_2_fu_3002_p1;

assign input_49_address0 = zext_ln88_2_fu_3002_p1;

assign input_4_address0 = zext_ln88_2_fu_3002_p1;

assign input_50_address0 = zext_ln88_2_fu_3002_p1;

assign input_51_address0 = zext_ln88_2_fu_3002_p1;

assign input_52_address0 = zext_ln88_2_fu_3002_p1;

assign input_53_address0 = zext_ln88_2_fu_3002_p1;

assign input_54_address0 = zext_ln88_2_fu_3002_p1;

assign input_55_address0 = zext_ln88_2_fu_3002_p1;

assign input_56_address0 = zext_ln88_2_fu_3002_p1;

assign input_57_address0 = zext_ln88_2_fu_3002_p1;

assign input_58_address0 = zext_ln88_2_fu_3002_p1;

assign input_59_address0 = zext_ln88_2_fu_3002_p1;

assign input_5_address0 = zext_ln88_2_fu_3002_p1;

assign input_60_address0 = zext_ln88_2_fu_3002_p1;

assign input_61_address0 = zext_ln88_2_fu_3002_p1;

assign input_62_address0 = zext_ln88_2_fu_3002_p1;

assign input_63_address0 = zext_ln88_2_fu_3002_p1;

assign input_6_address0 = zext_ln88_2_fu_3002_p1;

assign input_7_address0 = zext_ln88_2_fu_3002_p1;

assign input_8_address0 = zext_ln88_2_fu_3002_p1;

assign input_9_address0 = zext_ln88_2_fu_3002_p1;

assign layer_6_bias_address0 = zext_ln73_fu_2702_p1;

assign layer_6_weights_address0 = zext_ln92_fu_2988_p1;

assign mul4811_fu_2556_p2 = ($signed(tmp_cast_fu_2552_p1) + $signed(mul_ln70_fu_2536_p2));

assign mul4811_mid162_fu_2606_p2 = ($signed(mul_ln70_1_fu_2592_p2) + $signed(7'd117));

assign mul4811_mid1_fu_2680_p2 = ($signed(tmp_cast_mid1_fu_2676_p1) + $signed(select_ln67_7_fu_2598_p3));

assign mul_ln70_1_fu_2592_p0 = mul_ln70_1_fu_2592_p00;

assign mul_ln70_1_fu_2592_p00 = add_ln67_3_fu_2582_p2;

assign mul_ln70_1_fu_2592_p1 = 7'd11;

assign mul_ln70_fu_2536_p0 = mul_ln70_fu_2536_p00;

assign mul_ln70_fu_2536_p00 = i_reg_2201;

assign mul_ln70_fu_2536_p1 = 7'd11;

assign or_ln49_fu_3123_p2 = (icmp_ln49_fu_3111_p2 | icmp_ln49_6_fu_3117_p2);

assign or_ln81_fu_2809_p2 = (icmp_ln81_fu_2763_p2 | and_ln78_fu_2797_p2);

assign output_0_address0 = zext_ln103_fu_3143_p1;

assign output_0_d0 = output_sum_3_reg_3752;

assign output_10_address0 = zext_ln103_fu_3143_p1;

assign output_10_d0 = output_sum_3_reg_3752;

assign output_11_address0 = zext_ln103_fu_3143_p1;

assign output_11_d0 = output_sum_3_reg_3752;

assign output_12_address0 = zext_ln103_fu_3143_p1;

assign output_12_d0 = output_sum_3_reg_3752;

assign output_13_address0 = zext_ln103_fu_3143_p1;

assign output_13_d0 = output_sum_3_reg_3752;

assign output_14_address0 = zext_ln103_fu_3143_p1;

assign output_14_d0 = output_sum_3_reg_3752;

assign output_15_address0 = zext_ln103_fu_3143_p1;

assign output_15_d0 = output_sum_3_reg_3752;

assign output_16_address0 = zext_ln103_fu_3143_p1;

assign output_16_d0 = output_sum_3_reg_3752;

assign output_17_address0 = zext_ln103_fu_3143_p1;

assign output_17_d0 = output_sum_3_reg_3752;

assign output_18_address0 = zext_ln103_fu_3143_p1;

assign output_18_d0 = output_sum_3_reg_3752;

assign output_19_address0 = zext_ln103_fu_3143_p1;

assign output_19_d0 = output_sum_3_reg_3752;

assign output_1_address0 = zext_ln103_fu_3143_p1;

assign output_1_d0 = output_sum_3_reg_3752;

assign output_20_address0 = zext_ln103_fu_3143_p1;

assign output_20_d0 = output_sum_3_reg_3752;

assign output_21_address0 = zext_ln103_fu_3143_p1;

assign output_21_d0 = output_sum_3_reg_3752;

assign output_22_address0 = zext_ln103_fu_3143_p1;

assign output_22_d0 = output_sum_3_reg_3752;

assign output_23_address0 = zext_ln103_fu_3143_p1;

assign output_23_d0 = output_sum_3_reg_3752;

assign output_24_address0 = zext_ln103_fu_3143_p1;

assign output_24_d0 = output_sum_3_reg_3752;

assign output_25_address0 = zext_ln103_fu_3143_p1;

assign output_25_d0 = output_sum_3_reg_3752;

assign output_26_address0 = zext_ln103_fu_3143_p1;

assign output_26_d0 = output_sum_3_reg_3752;

assign output_27_address0 = zext_ln103_fu_3143_p1;

assign output_27_d0 = output_sum_3_reg_3752;

assign output_28_address0 = zext_ln103_fu_3143_p1;

assign output_28_d0 = output_sum_3_reg_3752;

assign output_29_address0 = zext_ln103_fu_3143_p1;

assign output_29_d0 = output_sum_3_reg_3752;

assign output_2_address0 = zext_ln103_fu_3143_p1;

assign output_2_d0 = output_sum_3_reg_3752;

assign output_30_address0 = zext_ln103_fu_3143_p1;

assign output_30_d0 = output_sum_3_reg_3752;

assign output_31_address0 = zext_ln103_fu_3143_p1;

assign output_31_d0 = output_sum_3_reg_3752;

assign output_32_address0 = zext_ln103_fu_3143_p1;

assign output_32_d0 = output_sum_3_reg_3752;

assign output_33_address0 = zext_ln103_fu_3143_p1;

assign output_33_d0 = output_sum_3_reg_3752;

assign output_34_address0 = zext_ln103_fu_3143_p1;

assign output_34_d0 = output_sum_3_reg_3752;

assign output_35_address0 = zext_ln103_fu_3143_p1;

assign output_35_d0 = output_sum_3_reg_3752;

assign output_36_address0 = zext_ln103_fu_3143_p1;

assign output_36_d0 = output_sum_3_reg_3752;

assign output_37_address0 = zext_ln103_fu_3143_p1;

assign output_37_d0 = output_sum_3_reg_3752;

assign output_38_address0 = zext_ln103_fu_3143_p1;

assign output_38_d0 = output_sum_3_reg_3752;

assign output_39_address0 = zext_ln103_fu_3143_p1;

assign output_39_d0 = output_sum_3_reg_3752;

assign output_3_address0 = zext_ln103_fu_3143_p1;

assign output_3_d0 = output_sum_3_reg_3752;

assign output_40_address0 = zext_ln103_fu_3143_p1;

assign output_40_d0 = output_sum_3_reg_3752;

assign output_41_address0 = zext_ln103_fu_3143_p1;

assign output_41_d0 = output_sum_3_reg_3752;

assign output_42_address0 = zext_ln103_fu_3143_p1;

assign output_42_d0 = output_sum_3_reg_3752;

assign output_43_address0 = zext_ln103_fu_3143_p1;

assign output_43_d0 = output_sum_3_reg_3752;

assign output_44_address0 = zext_ln103_fu_3143_p1;

assign output_44_d0 = output_sum_3_reg_3752;

assign output_45_address0 = zext_ln103_fu_3143_p1;

assign output_45_d0 = output_sum_3_reg_3752;

assign output_46_address0 = zext_ln103_fu_3143_p1;

assign output_46_d0 = output_sum_3_reg_3752;

assign output_47_address0 = zext_ln103_fu_3143_p1;

assign output_47_d0 = output_sum_3_reg_3752;

assign output_48_address0 = zext_ln103_fu_3143_p1;

assign output_48_d0 = output_sum_3_reg_3752;

assign output_49_address0 = zext_ln103_fu_3143_p1;

assign output_49_d0 = output_sum_3_reg_3752;

assign output_4_address0 = zext_ln103_fu_3143_p1;

assign output_4_d0 = output_sum_3_reg_3752;

assign output_50_address0 = zext_ln103_fu_3143_p1;

assign output_50_d0 = output_sum_3_reg_3752;

assign output_51_address0 = zext_ln103_fu_3143_p1;

assign output_51_d0 = output_sum_3_reg_3752;

assign output_52_address0 = zext_ln103_fu_3143_p1;

assign output_52_d0 = output_sum_3_reg_3752;

assign output_53_address0 = zext_ln103_fu_3143_p1;

assign output_53_d0 = output_sum_3_reg_3752;

assign output_54_address0 = zext_ln103_fu_3143_p1;

assign output_54_d0 = output_sum_3_reg_3752;

assign output_55_address0 = zext_ln103_fu_3143_p1;

assign output_55_d0 = output_sum_3_reg_3752;

assign output_56_address0 = zext_ln103_fu_3143_p1;

assign output_56_d0 = output_sum_3_reg_3752;

assign output_57_address0 = zext_ln103_fu_3143_p1;

assign output_57_d0 = output_sum_3_reg_3752;

assign output_58_address0 = zext_ln103_fu_3143_p1;

assign output_58_d0 = output_sum_3_reg_3752;

assign output_59_address0 = zext_ln103_fu_3143_p1;

assign output_59_d0 = output_sum_3_reg_3752;

assign output_5_address0 = zext_ln103_fu_3143_p1;

assign output_5_d0 = output_sum_3_reg_3752;

assign output_60_address0 = zext_ln103_fu_3143_p1;

assign output_60_d0 = output_sum_3_reg_3752;

assign output_61_address0 = zext_ln103_fu_3143_p1;

assign output_61_d0 = output_sum_3_reg_3752;

assign output_62_address0 = zext_ln103_fu_3143_p1;

assign output_62_d0 = output_sum_3_reg_3752;

assign output_63_address0 = zext_ln103_fu_3143_p1;

assign output_63_d0 = output_sum_3_reg_3752;

assign output_6_address0 = zext_ln103_fu_3143_p1;

assign output_6_d0 = output_sum_3_reg_3752;

assign output_7_address0 = zext_ln103_fu_3143_p1;

assign output_7_d0 = output_sum_3_reg_3752;

assign output_8_address0 = zext_ln103_fu_3143_p1;

assign output_8_d0 = output_sum_3_reg_3752;

assign output_9_address0 = zext_ln103_fu_3143_p1;

assign output_9_d0 = output_sum_3_reg_3752;

assign output_sum_3_fu_3135_p3 = ((and_ln49_fu_3129_p2[0:0] == 1'b1) ? 32'd0 : add4115_reg_2302);

assign p_shl_fu_2737_p3 = {{empty_fu_2733_p1}, {2'd0}};

assign p_shl_mid1_fu_2837_p3 = {{empty_84_fu_2833_p1}, {2'd0}};

assign select_ln67_7_fu_2598_p3 = ((icmp_ln70_fu_2568_p2[0:0] == 1'b1) ? mul_ln70_1_fu_2592_p2 : mul_ln70_fu_2536_p2);

assign select_ln67_8_fu_2630_p3 = ((icmp_ln70_fu_2568_p2[0:0] == 1'b1) ? add_ln67_3_fu_2582_p2 : i_reg_2201);

assign select_ln67_9_fu_2686_p3 = ((icmp_ln70_fu_2568_p2[0:0] == 1'b1) ? mul4811_mid162_fu_2606_p2 : mul4811_fu_2556_p2);

assign select_ln67_fu_2574_p3 = ((icmp_ln70_fu_2568_p2[0:0] == 1'b1) ? 4'd1 : ii_reg_2224);

assign select_ln70_fu_3222_p3 = ((icmp_ln70_reg_3259[0:0] == 1'b1) ? 10'd1 : add_ln70_3_fu_3216_p2);

assign select_ln78_7_fu_2918_p3 = ((icmp_ln81_reg_3322[0:0] == 1'b1) ? add_ln78_2_fu_2912_p2 : ap_phi_mux_iv_phi_fu_2295_p4);

assign select_ln78_8_fu_2777_p3 = ((icmp_ln81_fu_2763_p2[0:0] == 1'b1) ? 4'd1 : add_ln93_6_fu_2751_p2);

assign select_ln78_fu_2769_p3 = ((icmp_ln81_fu_2763_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_v_phi_fu_2273_p4);

assign select_ln81_10_fu_2966_p3 = ((icmp_ln81_reg_3322[0:0] == 1'b1) ? 4'd1 : add_ln81_5_reg_3353);

assign select_ln81_8_fu_2851_p3 = ((and_ln78_fu_2797_p2[0:0] == 1'b1) ? indvars_iv_next37_dup_fu_2803_p2 : select_ln78_fu_2769_p3);

assign select_ln81_9_fu_2878_p3 = ((and_ln78_fu_2797_p2[0:0] == 1'b1) ? add_ln93_8_fu_2872_p2 : select_ln78_8_fu_2777_p3);

assign select_ln81_fu_2815_p3 = ((or_ln81_fu_2809_p2[0:0] == 1'b1) ? 3'd7 : ap_phi_mux_vi_phi_fu_2284_p4);

assign sext_ln81_fu_2859_p1 = select_ln81_8_fu_2851_p3;

assign sext_ln88_fu_2933_p1 = trunc_ln88_reg_3343;

assign sext_ln92_fu_2890_p1 = trunc_ln88_fu_2886_p1;

assign shl_ln2_fu_2975_p4 = {{{add_ln93_7_reg_3348_pp0_iter3_reg}, {trunc_ln78_reg_3368_pp0_iter3_reg}}, {5'd0}};

assign shl_ln_fu_2941_p3 = {{add_ln88_fu_2936_p2}, {5'd0}};

assign sub_ln92_3_fu_2845_p2 = (p_shl_mid1_fu_2837_p3 - indvars_iv_next37_cast_mid1_fu_2829_p1);

assign sub_ln92_fu_2745_p2 = (p_shl_fu_2737_p3 - indvars_iv_next37_cast_fu_2729_p1);

assign tmp_cast_fu_2552_p1 = $signed(tmp_fu_2546_p2);

assign tmp_cast_mid1_fu_2676_p1 = $signed(tmp_mid1_fu_2670_p2);

assign tmp_fu_2546_p2 = ($signed(ii_cast_fu_2542_p1) + $signed(5'd20));

assign tmp_mid1_fu_2670_p2 = ($signed(ii_cast_mid1_fu_2666_p1) + $signed(5'd20));

assign tmp_s_fu_3097_p4 = {{bitcast_ln49_fu_3093_p1[30:23]}};

assign trunc_ln49_fu_3107_p1 = bitcast_ln49_fu_3093_p1[22:0];

assign trunc_ln78_fu_2929_p1 = select_ln78_7_fu_2918_p3[4:0];

assign trunc_ln88_fu_2886_p1 = select_ln81_fu_2815_p3[1:0];

assign xor_ln67_fu_2612_p2 = (icmp_ln70_fu_2568_p2 ^ 1'd1);

assign xor_ln78_fu_2785_p2 = (icmp_ln81_fu_2763_p2 ^ 1'd1);

assign zext_ln103_fu_3143_p1 = grp_fu_3078_p2;

assign zext_ln73_5_fu_2717_p1 = iii_mid2_reg_3270;

assign zext_ln73_6_fu_2720_p1 = iii_mid2_reg_3270;

assign zext_ln73_fu_2702_p1 = iii_mid2_fu_2650_p3;

assign zext_ln78_fu_2925_p1 = select_ln78_7_fu_2918_p3;

assign zext_ln88_2_fu_3002_p1 = grp_fu_2955_p2;

assign zext_ln92_fu_2988_p1 = add_ln92_fu_2983_p2;

always @ (posedge ap_clk) begin
    ii_cast5_mid2_cast_reg_3293[7:4] <= 4'b0000;
    add52_mid2_reg_3298[4:0] <= 5'b00000;
    zext_ln73_5_reg_3303[13:6] <= 8'b00000000;
    zext_ln73_6_reg_3308[11:6] <= 6'b000000;
end

endmodule //infer_conv2d

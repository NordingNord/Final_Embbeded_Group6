-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_17_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_17_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111100101110010", 1 => "1111110100000101", 2 => "1111011110111111", 
    3 => "0001000000110111", 4 => "1110111111001010", 5 => "0001011100000011", 
    6 => "1111111111110111", 7 => "1110101001110001", 8 => "1110110111110011", 
    9 => "1111101100000000", 10 => "0001011011101000", 11 => "1111011100100000", 
    12 => "0000001010111001", 13 => "1110100111111100", 14 => "0000111000000110", 
    15 => "1101111011001000", 16 => "1110010000110000", 17 => "0000011111101010", 
    18 => "1111001100011110", 19 => "0000100001001011", 20 => "0001001101110000", 
    21 => "1111110101101010", 22 => "1111101110111001", 23 => "0000010001010000", 
    24 => "1111000110010101", 25 => "0000010000011110", 26 => "1111010010110111", 
    27 => "1111010111000011", 28 => "0000001000010001", 29 => "0000000101101100", 
    30 => "1111000110110101", 31 => "0000000110101100", 32 => "1110110110001110", 
    33 => "1110110000010011", 34 => "0000111110000110", 35 => "0000000110111100", 
    36 => "0001011100011000", 37 => "1110110011011000", 38 => "0000101010001110", 
    39 => "0000101010111011", 40 => "0001010100110000", 41 => "0001000110010011", 
    42 => "1111101110001111", 43 => "1110011000000111", 44 => "0000000001111011", 
    45 => "0000001010100001", 46 => "0000011100000110", 47 => "1111101010110101", 
    48 => "0001000011001110", 49 => "0000000000110011", 50 => "1111001001110101", 
    51 => "1111101111111011", 52 => "1110111001010101", 53 => "1111000110010000", 
    54 => "0000100000001001", 55 => "0000010111010111", 56 => "1111010000001001", 
    57 => "1110100010101111", 58 => "1110010110011100", 59 => "0001100001100000", 
    60 => "0001100001001001", 61 => "0001010011010010", 62 => "1110011111010110", 
    63 => "0001000001111111", 64 => "1110011001001011", 65 => "1111101101011001", 
    66 => "1111110111000101", 67 => "1111111100101100", 68 => "1111101001110011", 
    69 => "1111000011111110", 70 => "1111011001001010", 71 => "0000110010011001", 
    72 => "1111100101001001", 73 => "1110100011010111", 74 => "0000110100101110", 
    75 => "1110011001010110", 76 => "0000101111001001", 77 => "0000100001110100", 
    78 => "0000101010000111", 79 => "0000100011011001", 80 => "1110111001001001", 
    81 => "0000010110010000", 82 => "1111010010000110", 83 => "0000001010110111", 
    84 => "1111001110101011", 85 => "1110100111010111", 86 => "0001000011100111", 
    87 => "1110001011011001", 88 => "1111110011100011", 89 => "1111010110111110", 
    90 => "1110001111101010", 91 => "1111110101100110", 92 => "1111011110100001", 
    93 => "1111101000001100", 94 => "0000011010001011", 95 => "1110111101011110", 
    96 => "0000101000101010", 97 => "0001010110000000", 98 => "0000000001010110", 
    99 => "1111111100001000", 100 => "0001010100110111", 101 => "1110011011010010", 
    102 => "0000001110010100", 103 => "1111101011010110", 104 => "1111101011110011", 
    105 => "0000110110001001", 106 => "1110100001010000", 107 => "1111100000101001", 
    108 => "0000110100001010", 109 => "1111110100010111", 110 => "0000101010011100", 
    111 => "0000111000000111", 112 => "1111001000001100", 113 => "0001001001110110", 
    114 => "1111110001100011", 115 => "1111110110000010", 116 => "0000101000001001", 
    117 => "1110111001010000", 118 => "0000010010100010", 119 => "1110110110100101", 
    120 => "1110001010010100", 121 => "1110111001011101", 122 => "1110111011000011", 
    123 => "1110011111010011", 124 => "1111011111010100", 125 => "1110111000000101", 
    126 => "1111100010100111", 127 => "0000111010101011", 128 => "1111001101110110", 
    129 => "0000011011010000", 130 => "1111001011011100", 131 => "0001001110010001", 
    132 => "0000101010101110", 133 => "1110111000010101", 134 => "1110011011001100", 
    135 => "1110111101110101", 136 => "0000000000011010", 137 => "0000110011101100", 
    138 => "1111000011011011", 139 => "1111100101001101", 140 => "0000001010010100", 
    141 => "1111001011011010", 142 => "1111000101100011", 143 => "1110010101101111", 
    144 => "1110011100100110", 145 => "1111011110111001", 146 => "1110110010101000", 
    147 => "0000100110100101", 148 => "0000001011100101", 149 => "0000010111101001", 
    150 => "1111111011110010", 151 => "1110011111110111", 152 => "0000010110011010", 
    153 => "1111001000100001", 154 => "0000001101111011", 155 => "1110100111110100", 
    156 => "1110101011001110", 157 => "1110100101100110", 158 => "0000001011110100", 
    159 => "0001010111100010", 160 => "0000100100110101", 161 => "0000001110000100", 
    162 => "0000111111001101", 163 => "0000010000010100", 164 => "1111101001110111", 
    165 => "0001001001010100", 166 => "0001001010000010", 167 => "0001010100100000", 
    168 => "1110111010000010", 169 => "0000100110100100", 170 => "1111011001001100", 
    171 => "1110101010111100", 172 => "1111001111011001", 173 => "1110101111101101", 
    174 => "1111011000100110", 175 => "0000010001101111", 176 => "1110111001111010", 
    177 => "1111011001111110", 178 => "1111000011100101", 179 => "0000000001000010", 
    180 => "0001001000011110", 181 => "1111001101101100", 182 => "1110010100100110", 
    183 => "1110010110111001", 184 => "0000001010111100", 185 => "1111001100000101", 
    186 => "1110011000000010", 187 => "0000100101111010", 188 => "0000011001010001", 
    189 => "1111111010100101", 190 => "0001100111101100", 191 => "0000001001100000", 
    192 => "0001000010101000", 193 => "0001100000011001", 194 => "1110001101101100", 
    195 => "1111011011011010", 196 => "0001010011100011", 197 => "0000001101100100", 
    198 => "0000110101001111", 199 => "1110111011000010", 200 => "0001100100110111", 
    201 => "0000011011100101", 202 => "0001100111001110", 203 => "1110110110101000", 
    204 => "1110000110011001", 205 => "1111001011011001", 206 => "1111010001110101", 
    207 => "0000000000100110", 208 => "1110101111101110", 209 => "1110011010100100", 
    210 => "1111110001000010", 211 => "1111100100100010", 212 => "1111100100001001", 
    213 => "1111001011110001", 214 => "1111110000000111", 215 => "1110001001100101", 
    216 => "1110000110111001", 217 => "1111100111101110", 218 => "0001010011011010", 
    219 => "0001010101100100", 220 => "0000011010001001", 221 => "0000111000011111", 
    222 => "0000110111110110", 223 => "1110110101101000", 224 => "1110111101011010", 
    225 => "0000000001111010", 226 => "1110101111111100", 227 => "0001011110000000", 
    228 => "0000110011011000", 229 => "0001011110110010", 230 => "0000101100101100", 
    231 => "0001010101011111", 232 => "0000111001111010", 233 => "0001100101001101", 
    234 => "0000111111001000", 235 => "0000010100101010", 236 => "0000001010100100", 
    237 => "1110101110111001", 238 => "0001001011000110", 239 => "0000000001101000", 
    240 => "0000011111100110", 241 => "1110100110110001", 242 => "0001001110001111", 
    243 => "1111110010011101", 244 => "1111011100011110", 245 => "0000100001111001", 
    246 => "0000111010011111", 247 => "0000010001111010", 248 => "1111001111010001", 
    249 => "0000111011001000", 250 => "1111100101010010", 251 => "0000010101001010", 
    252 => "0001011101110111", 253 => "1110011001100001", 254 => "1110110100101110", 
    255 => "0000111111111111", 256 => "1110111011001011", 257 => "0000011000100011", 
    258 => "0000110101101111", 259 => "1110111110100000", 260 => "1110110100100100", 
    261 => "1110110001000101", 262 => "1110011101101100", 263 => "1110011000110000", 
    264 => "1111001011010001", 265 => "0000111111101001", 266 => "0000001001011110", 
    267 => "0000101100000001", 268 => "0000011001100000", 269 => "0000110111110010", 
    270 => "1110010111110111", 271 => "0000001111000101", 272 => "1110100001101010", 
    273 => "0000000001111001", 274 => "0000010100010010", 275 => "0000000111011001", 
    276 => "0000010010000110", 277 => "0000000000001110", 278 => "1110011010001011", 
    279 => "0000110000111101", 280 => "0000011100001101", 281 => "0000010001001111", 
    282 => "1110101101101110", 283 => "0001000010001001", 284 => "0000010111010100", 
    285 => "1111111101110001", 286 => "1110101110110010", 287 => "0001000000110100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_17 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_17 is
    component infer_layer_6_weights_V_17_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_17_rom_U :  component infer_layer_6_weights_V_17_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1057_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1057_p_ce : OUT STD_LOGIC;
    grp_fu_1064_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1064_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1064_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1064_p_ce : OUT STD_LOGIC;
    grp_fu_1083_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1083_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1083_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_conv2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_6_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal layer_6_weights_ce0 : STD_LOGIC;
    signal layer_6_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_6_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_6_bias_ce0 : STD_LOGIC;
    signal layer_6_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten27_reg_212 : STD_LOGIC_VECTOR (8 downto 0);
    signal iv_reg_223 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_234 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_245 : STD_LOGIC_VECTOR (2 downto 0);
    signal vi_reg_256 : STD_LOGIC_VECTOR (2 downto 0);
    signal add4320_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln71_fu_293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln74_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_8_fu_381_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln71_8_reg_838 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln74_fu_401_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_reg_844 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_2_fu_445_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln74_2_reg_851 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_addr_reg_857 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln77_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_reg_862 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln77_5_fu_471_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln77_5_reg_867 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln83_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_reg_877 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln83_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_882_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_882_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_7_fu_544_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_7_reg_891 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_fu_606_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_reg_896 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_10_fu_673_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_10_reg_901 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln86_4_fu_741_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_4_reg_916 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln95_fu_747_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln95_reg_931 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln86_11_fu_752_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_11_reg_936 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln77_fu_758_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln77_reg_956 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_3_fu_769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln74_3_reg_961 : STD_LOGIC_VECTOR (7 downto 0);
    signal layer_6_bias_load_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_reg_971 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten61_reg_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_reg_167 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten38_reg_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal iii_reg_201 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten27_phi_fu_216_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_iv_phi_fu_227_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_238_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v_phi_fu_249_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_vi_phi_fu_260_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_add4320_phi_fu_270_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sum19_cast_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_3_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_fu_305_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_299_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln71_3_fu_337_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_76_fu_343_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln77_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln71_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_329_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln71_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_fu_409_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln71_7_fu_349_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid153_fu_357_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_71_fu_311_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid1_fu_415_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln71_9_fu_421_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln74_1_fu_429_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln74_fu_389_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln77_6_fu_453_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid2_fu_437_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum19_fu_457_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvars_iv_next34_fu_484_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_72_fu_494_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_498_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_fu_490_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_fu_506_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_2_fu_538_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln92_fu_480_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln95_6_fu_512_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln89_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln83_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_530_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln83_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next34_dup_fu_594_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln92_1_fu_614_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln83_8_fu_560_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln86_8_fu_618_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_next34_mid1_fu_631_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_74_fu_641_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_mid1_fu_645_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_mid1_fu_637_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_3_fu_653_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_8_fu_659_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_9_fu_568_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln91_fu_681_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln86_fu_626_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln91_fu_685_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln86_9_fu_665_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln94_fu_700_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_7_fu_704_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln83_fu_556_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_690_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_fu_552_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln98_fu_720_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln2_fu_710_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln98_3_fu_731_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln74_3_fu_763_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln49_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_779_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_789_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_8_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_288_ce : STD_LOGIC;
    signal grp_fu_288_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_conv2d_layer_6_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_conv2d_layer_6_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_6_weights_U : component infer_conv2d_layer_6_weights
    generic map (
        DataWidth => 32,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_6_weights_address0,
        ce0 => layer_6_weights_ce0,
        q0 => layer_6_weights_q0);

    layer_6_bias_U : component infer_conv2d_layer_6_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_6_bias_address0,
        ce0 => layer_6_bias_ce0,
        q0 => layer_6_bias_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4320_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln83_reg_882_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                add4320_reg_267 <= grp_fu_1057_p_dout0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                add4320_reg_267 <= output_r_q0;
            end if; 
        end if;
    end process;

    i_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_reg_167 <= select_ln71_8_reg_838;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_167 <= ap_const_lv2_1;
            end if; 
        end if;
    end process;

    ii_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                ii_reg_190 <= select_ln74_2_reg_851;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_190 <= ap_const_lv2_1;
            end if; 
        end if;
    end process;

    iii_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                iii_reg_201 <= add_ln77_reg_956;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_201 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten27_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten27_reg_212 <= add_ln83_reg_877;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten27_reg_212 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten38_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten38_reg_178 <= select_ln74_3_reg_961;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten38_reg_178 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten61_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten61_reg_156 <= add_ln71_reg_825;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten61_reg_156 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_234 <= select_ln86_11_reg_936;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_234 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iv_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                iv_reg_223 <= select_ln83_7_reg_891;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                iv_reg_223 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    v_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                v_reg_245 <= select_ln86_10_reg_901;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_reg_245 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    vi_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                vi_reg_256 <= add_ln95_reg_931;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vi_reg_256 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln71_reg_825 <= add_ln71_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln77_reg_956 <= add_ln77_fu_758_p2;
                select_ln74_3_reg_961 <= select_ln74_3_fu_769_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln83_reg_877 <= add_ln83_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_fu_518_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln86_4_reg_916 <= add_ln86_4_fu_741_p2;
                icmp_ln86_reg_886 <= icmp_ln86_fu_524_p2;
                select_ln86_reg_896 <= select_ln86_fu_606_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln95_reg_931 <= add_ln95_fu_747_p2;
                select_ln86_11_reg_936 <= select_ln86_11_fu_752_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_reg_971 <= grp_fu_1057_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln74_reg_833 <= icmp_ln74_fu_323_p2;
                output_addr_reg_857 <= sum19_cast_fu_463_p1(7 - 1 downto 0);
                select_ln71_8_reg_838 <= select_ln71_8_fu_381_p3;
                select_ln74_2_reg_851 <= select_ln74_2_fu_445_p3;
                select_ln74_reg_844 <= select_ln74_fu_401_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln83_reg_882 <= icmp_ln83_fu_518_p2;
                icmp_ln83_reg_882_pp0_iter1_reg <= icmp_ln83_reg_882;
                icmp_ln83_reg_882_pp0_iter2_reg <= icmp_ln83_reg_882_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                layer_6_bias_load_reg_966 <= layer_6_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_reg_941 <= grp_fu_1064_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_fu_518_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln83_7_reg_891 <= select_ln83_7_fu_544_p3;
                select_ln86_10_reg_901 <= select_ln86_10_fu_673_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln77_5_reg_867(5 downto 0) <= zext_ln77_5_fu_471_p1(5 downto 0);
                    zext_ln77_reg_862(5 downto 0) <= zext_ln77_fu_468_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln77_reg_862(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln77_5_reg_867(13 downto 6) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_317_p2, ap_enable_reg_pp0_iter0, icmp_ln83_fu_518_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln71_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_fu_518_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_fu_518_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln71_3_fu_337_p2 <= std_logic_vector(unsigned(i_reg_167) + unsigned(ap_const_lv2_1));
    add_ln71_fu_293_p2 <= std_logic_vector(unsigned(indvar_flatten61_reg_156) + unsigned(ap_const_lv8_1));
    add_ln74_3_fu_763_p2 <= std_logic_vector(unsigned(indvar_flatten38_reg_178) + unsigned(ap_const_lv8_1));
    add_ln74_fu_389_p2 <= std_logic_vector(unsigned(select_ln71_fu_329_p3) + unsigned(ap_const_lv2_1));
    add_ln77_fu_758_p2 <= std_logic_vector(unsigned(select_ln74_reg_844) + unsigned(ap_const_lv6_1));
    add_ln83_2_fu_538_p2 <= std_logic_vector(unsigned(ap_phi_mux_iv_phi_fu_227_p4) + unsigned(ap_const_lv6_1));
    add_ln83_fu_474_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten27_phi_fu_216_p4) + unsigned(ap_const_lv9_1));
    add_ln86_4_fu_741_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_238_p4) + unsigned(ap_const_lv4_1));
    add_ln86_fu_626_p2 <= std_logic_vector(unsigned(select_ln71_8_reg_838) + unsigned(select_ln86_8_fu_618_p3));
    add_ln91_fu_685_p2 <= std_logic_vector(unsigned(select_ln74_2_reg_851) + unsigned(trunc_ln91_fu_681_p1));
    add_ln95_6_fu_512_p2 <= std_logic_vector(unsigned(sub_ln94_fu_506_p2) + unsigned(ap_const_lv4_1));
    add_ln95_7_fu_704_p2 <= std_logic_vector(unsigned(select_ln86_9_fu_665_p3) + unsigned(sext_ln94_fu_700_p1));
    add_ln95_8_fu_659_p2 <= std_logic_vector(unsigned(sub_ln94_3_fu_653_p2) + unsigned(ap_const_lv4_1));
    add_ln95_fu_747_p2 <= std_logic_vector(unsigned(select_ln86_reg_896) + unsigned(ap_const_lv3_1));
    add_ln98_3_fu_731_p2 <= std_logic_vector(unsigned(shl_ln2_fu_710_p4) + unsigned(zext_ln77_5_reg_867));
    add_ln98_fu_720_p2 <= std_logic_vector(unsigned(shl_ln_fu_690_p4) + unsigned(zext_ln83_fu_552_p1));
    and_ln49_fu_811_p2 <= (or_ln49_fu_805_p2 and grp_fu_1083_p_dout0);
    and_ln71_fu_375_p2 <= (xor_ln71_fu_363_p2 and icmp_ln77_fu_369_p2);
    and_ln83_fu_588_p2 <= (xor_ln83_fu_576_p2 and icmp_ln89_fu_582_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(8);
    ap_CS_fsm_state16 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
    ap_CS_fsm_state21 <= ap_CS_fsm(14);
    ap_CS_fsm_state22 <= ap_CS_fsm(15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln83_fu_518_p2)
    begin
        if ((icmp_ln83_fu_518_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_317_p2)
    begin
        if ((((icmp_ln71_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add4320_phi_fu_270_p4_assign_proc : process(add4320_reg_267, icmp_ln83_reg_882_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, grp_fu_1057_p_dout0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln83_reg_882_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_add4320_phi_fu_270_p4 <= grp_fu_1057_p_dout0;
        else 
            ap_phi_mux_add4320_phi_fu_270_p4 <= add4320_reg_267;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten27_phi_fu_216_p4_assign_proc : process(indvar_flatten27_reg_212, add_ln83_reg_877, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_882, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten27_phi_fu_216_p4 <= add_ln83_reg_877;
        else 
            ap_phi_mux_indvar_flatten27_phi_fu_216_p4 <= indvar_flatten27_reg_212;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_238_p4_assign_proc : process(indvar_flatten_reg_234, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_882, select_ln86_11_reg_936, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_238_p4 <= select_ln86_11_reg_936;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_238_p4 <= indvar_flatten_reg_234;
        end if; 
    end process;


    ap_phi_mux_iv_phi_fu_227_p4_assign_proc : process(iv_reg_223, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_882, select_ln83_7_reg_891, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_iv_phi_fu_227_p4 <= select_ln83_7_reg_891;
        else 
            ap_phi_mux_iv_phi_fu_227_p4 <= iv_reg_223;
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_249_p4_assign_proc : process(v_reg_245, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_882, select_ln86_10_reg_901, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_v_phi_fu_249_p4 <= select_ln86_10_reg_901;
        else 
            ap_phi_mux_v_phi_fu_249_p4 <= v_reg_245;
        end if; 
    end process;


    ap_phi_mux_vi_phi_fu_260_p4_assign_proc : process(vi_reg_256, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_882, add_ln95_reg_931, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_vi_phi_fu_260_p4 <= add_ln95_reg_931;
        else 
            ap_phi_mux_vi_phi_fu_260_p4 <= vi_reg_256;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_317_p2)
    begin
        if (((icmp_ln71_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_fu_776_p1 <= add_reg_971;
    empty_71_fu_311_p2 <= std_logic_vector(unsigned(tmp_fu_305_p2) + unsigned(empty_fu_299_p2));
    empty_72_fu_494_p1 <= indvars_iv_next34_fu_484_p2(2 - 1 downto 0);
    empty_74_fu_641_p1 <= indvars_iv_next34_mid1_fu_631_p2(2 - 1 downto 0);
    empty_76_fu_343_p2 <= std_logic_vector(shift_left(unsigned(add_ln71_3_fu_337_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    empty_fu_299_p2 <= std_logic_vector(shift_left(unsigned(i_reg_167),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    grp_fu_1057_p_ce <= ap_const_logic_1;
    grp_fu_1057_p_din0 <= grp_fu_277_p0;
    grp_fu_1057_p_din1 <= grp_fu_277_p1;
    grp_fu_1057_p_opcode <= ap_const_lv2_0;
    grp_fu_1064_p_ce <= ap_const_logic_1;
    grp_fu_1064_p_din0 <= input_r_q0;
    grp_fu_1064_p_din1 <= layer_6_weights_q0;
    grp_fu_1083_p_ce <= ap_const_logic_1;
    grp_fu_1083_p_din0 <= add_reg_971;
    grp_fu_1083_p_din1 <= ap_const_lv32_0;
    grp_fu_1083_p_opcode <= ap_const_lv5_2;
    grp_fu_277_ce <= ap_const_logic_1;

    grp_fu_277_p0_assign_proc : process(add4320_reg_267, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_phi_mux_add4320_phi_fu_270_p4, ap_block_pp0_stage1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_277_p0 <= add4320_reg_267;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_277_p0 <= ap_phi_mux_add4320_phi_fu_270_p4;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_277_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, mul_reg_941, layer_6_bias_load_reg_966, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_277_p1 <= layer_6_bias_load_reg_966;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_277_p1 <= mul_reg_941;
        else 
            grp_fu_277_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_277_p2 <= grp_fu_1057_p_dout0;
    grp_fu_282_ce <= ap_const_logic_1;
    grp_fu_282_p0 <= input_r_q0;
    grp_fu_282_p1 <= layer_6_weights_q0;
    grp_fu_282_p2 <= grp_fu_1064_p_dout0;
    grp_fu_288_ce <= ap_const_logic_1;
    grp_fu_288_opcode <= ap_const_lv5_2;
    grp_fu_288_p0 <= add_reg_971;
    grp_fu_288_p1 <= ap_const_lv32_0;
    grp_fu_288_p2 <= grp_fu_1083_p_dout0;
    icmp_ln49_8_fu_799_p2 <= "1" when (trunc_ln49_fu_789_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_793_p2 <= "0" when (tmp_s_fu_779_p4 = ap_const_lv8_FF) else "1";
    icmp_ln71_fu_317_p2 <= "1" when (indvar_flatten61_reg_156 = ap_const_lv8_80) else "0";
    icmp_ln74_fu_323_p2 <= "1" when (indvar_flatten38_reg_178 = ap_const_lv8_40) else "0";
    icmp_ln77_fu_369_p2 <= "1" when (iii_reg_201 = ap_const_lv6_20) else "0";
    icmp_ln83_fu_518_p2 <= "1" when (ap_phi_mux_indvar_flatten27_phi_fu_216_p4 = ap_const_lv9_120) else "0";
    icmp_ln86_fu_524_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_238_p4 = ap_const_lv4_9) else "0";
    icmp_ln89_fu_582_p2 <= "1" when (ap_phi_mux_vi_phi_fu_260_p4 = ap_const_lv3_2) else "0";
    indvars_iv_next34_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_fu_484_p2),4));
    indvars_iv_next34_cast_mid1_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_mid1_fu_631_p2),4));
    indvars_iv_next34_dup_fu_594_p2 <= std_logic_vector(unsigned(select_ln83_fu_530_p3) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_fu_484_p2 <= std_logic_vector(unsigned(ap_phi_mux_v_phi_fu_249_p4) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_mid1_fu_631_p2 <= std_logic_vector(unsigned(select_ln83_fu_530_p3) + unsigned(ap_const_lv3_2));
    input_r_address0 <= zext_ln98_fu_726_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_6_bias_address0 <= zext_ln77_reg_862(5 - 1 downto 0);

    layer_6_bias_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_6_bias_ce0 <= ap_const_logic_1;
        else 
            layer_6_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_6_weights_address0 <= zext_ln98_3_fu_736_p1(14 - 1 downto 0);

    layer_6_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            layer_6_weights_ce0 <= ap_const_logic_1;
        else 
            layer_6_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln49_fu_805_p2 <= (icmp_ln49_fu_793_p2 or icmp_ln49_8_fu_799_p2);
    or_ln74_fu_395_p2 <= (icmp_ln74_fu_323_p2 or and_ln71_fu_375_p2);
    or_ln86_fu_600_p2 <= (icmp_ln86_fu_524_p2 or and_ln83_fu_588_p2);

    output_r_address0_assign_proc : process(ap_CS_fsm_state2, output_addr_reg_857, ap_CS_fsm_state22, sum19_cast_fu_463_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_address0 <= output_addr_reg_857;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= sum19_cast_fu_463_p1(7 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        add_reg_971 when (and_ln49_fu_811_p2(0) = '1') else 
        ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid153_fu_357_p2 <= (empty_76_fu_343_p2 xor ap_const_lv2_2);
    p_mid1_fu_415_p2 <= std_logic_vector(unsigned(tmp_mid1_fu_409_p2) + unsigned(select_ln71_7_fu_349_p3));
    p_mid2_fu_437_p3 <= (select_ln74_1_fu_429_p3 & ap_const_lv5_0);
    p_shl_fu_498_p3 <= (empty_72_fu_494_p1 & ap_const_lv2_0);
    p_shl_mid1_fu_645_p3 <= (empty_74_fu_641_p1 & ap_const_lv2_0);
    select_ln71_7_fu_349_p3 <= 
        empty_76_fu_343_p2 when (icmp_ln74_fu_323_p2(0) = '1') else 
        empty_fu_299_p2;
    select_ln71_8_fu_381_p3 <= 
        add_ln71_3_fu_337_p2 when (icmp_ln74_fu_323_p2(0) = '1') else 
        i_reg_167;
    select_ln71_9_fu_421_p3 <= 
        p_mid153_fu_357_p2 when (icmp_ln74_fu_323_p2(0) = '1') else 
        empty_71_fu_311_p2;
    select_ln71_fu_329_p3 <= 
        ap_const_lv2_1 when (icmp_ln74_fu_323_p2(0) = '1') else 
        ii_reg_190;
    select_ln74_1_fu_429_p3 <= 
        p_mid1_fu_415_p2 when (and_ln71_fu_375_p2(0) = '1') else 
        select_ln71_9_fu_421_p3;
    select_ln74_2_fu_445_p3 <= 
        add_ln74_fu_389_p2 when (and_ln71_fu_375_p2(0) = '1') else 
        select_ln71_fu_329_p3;
    select_ln74_3_fu_769_p3 <= 
        ap_const_lv8_1 when (icmp_ln74_reg_833(0) = '1') else 
        add_ln74_3_fu_763_p2;
    select_ln74_fu_401_p3 <= 
        ap_const_lv6_0 when (or_ln74_fu_395_p2(0) = '1') else 
        iii_reg_201;
    select_ln83_7_fu_544_p3 <= 
        add_ln83_2_fu_538_p2 when (icmp_ln86_fu_524_p2(0) = '1') else 
        ap_phi_mux_iv_phi_fu_227_p4;
    select_ln83_8_fu_560_p3 <= 
        ap_const_lv2_3 when (icmp_ln86_fu_524_p2(0) = '1') else 
        trunc_ln92_fu_480_p1;
    select_ln83_9_fu_568_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_fu_524_p2(0) = '1') else 
        add_ln95_6_fu_512_p2;
    select_ln83_fu_530_p3 <= 
        ap_const_lv3_7 when (icmp_ln86_fu_524_p2(0) = '1') else 
        ap_phi_mux_v_phi_fu_249_p4;
    select_ln86_10_fu_673_p3 <= 
        indvars_iv_next34_dup_fu_594_p2 when (and_ln83_fu_588_p2(0) = '1') else 
        select_ln83_fu_530_p3;
    select_ln86_11_fu_752_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_reg_886(0) = '1') else 
        add_ln86_4_reg_916;
    select_ln86_8_fu_618_p3 <= 
        trunc_ln92_1_fu_614_p1 when (and_ln83_fu_588_p2(0) = '1') else 
        select_ln83_8_fu_560_p3;
    select_ln86_9_fu_665_p3 <= 
        add_ln95_8_fu_659_p2 when (and_ln83_fu_588_p2(0) = '1') else 
        select_ln83_9_fu_568_p3;
    select_ln86_fu_606_p3 <= 
        ap_const_lv3_7 when (or_ln86_fu_600_p2(0) = '1') else 
        ap_phi_mux_vi_phi_fu_260_p4;
        sext_ln94_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln91_fu_681_p1),4));

    shl_ln2_fu_710_p4 <= ((add_ln95_7_fu_704_p2 & trunc_ln83_fu_556_p1) & ap_const_lv5_0);
    shl_ln_fu_690_p4 <= ((add_ln86_fu_626_p2 & add_ln91_fu_685_p2) & ap_const_lv5_0);
    sub_ln94_3_fu_653_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_645_p3) - unsigned(indvars_iv_next34_cast_mid1_fu_637_p1));
    sub_ln94_fu_506_p2 <= std_logic_vector(unsigned(p_shl_fu_498_p3) - unsigned(indvars_iv_next34_cast_fu_490_p1));
    sum19_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum19_fu_457_p2),64));
    sum19_fu_457_p2 <= std_logic_vector(unsigned(zext_ln77_6_fu_453_p1) + unsigned(p_mid2_fu_437_p3));
    tmp_fu_305_p2 <= std_logic_vector(unsigned(ii_reg_190) + unsigned(ap_const_lv2_1));
    tmp_mid1_fu_409_p2 <= (select_ln71_fu_329_p3 xor ap_const_lv2_2);
    tmp_s_fu_779_p4 <= bitcast_ln49_fu_776_p1(30 downto 23);
    trunc_ln49_fu_789_p1 <= bitcast_ln49_fu_776_p1(23 - 1 downto 0);
    trunc_ln83_fu_556_p1 <= select_ln83_7_fu_544_p3(5 - 1 downto 0);
    trunc_ln91_fu_681_p1 <= select_ln86_fu_606_p3(2 - 1 downto 0);
    trunc_ln92_1_fu_614_p1 <= indvars_iv_next34_dup_fu_594_p2(2 - 1 downto 0);
    trunc_ln92_fu_480_p1 <= ap_phi_mux_v_phi_fu_249_p4(2 - 1 downto 0);
    xor_ln71_fu_363_p2 <= (icmp_ln74_fu_323_p2 xor ap_const_lv1_1);
    xor_ln83_fu_576_p2 <= (icmp_ln86_fu_524_p2 xor ap_const_lv1_1);
    zext_ln77_5_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_reg_844),14));
    zext_ln77_6_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_fu_401_p3),7));
    zext_ln77_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_reg_844),64));
    zext_ln83_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_7_fu_544_p3),9));
    zext_ln98_3_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_3_fu_731_p2),64));
    zext_ln98_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_720_p2),64));
end behav;

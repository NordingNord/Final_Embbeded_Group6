-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_3097_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3097_p_ce : OUT STD_LOGIC;
    grp_fu_3101_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3101_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3101_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3101_p_ce : OUT STD_LOGIC;
    grp_fu_866_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_866_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_866_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_866_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_866_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_conv2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_A20 : STD_LOGIC_VECTOR (11 downto 0) := "101000100000";
    constant ap_const_lv10_120 : STD_LOGIC_VECTOR (9 downto 0) := "0100100000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_510 : STD_LOGIC_VECTOR (11 downto 0) := "010100010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_790 : STD_LOGIC_VECTOR (11 downto 0) := "011110010000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_4_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal layer_4_weights_ce0 : STD_LOGIC;
    signal layer_4_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_4_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_4_bias_ce0 : STD_LOGIC;
    signal layer_4_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten36_reg_250 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_273 : STD_LOGIC_VECTOR (2 downto 0);
    signal vi_reg_284 : STD_LOGIC_VECTOR (2 downto 0);
    signal iv_reg_295 : STD_LOGIC_VECTOR (5 downto 0);
    signal add4320_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln71_2_fu_352_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln71_2_reg_952 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln74_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_5_fu_468_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln71_5_reg_965 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_mid2_fu_492_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_mid2_reg_971 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast_mid2_fu_500_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_cast_mid2_reg_978 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum19_fu_542_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln98_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_0_addr_reg_995 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal output_1_addr_reg_1000 : STD_LOGIC_VECTOR (10 downto 0);
    signal ii_cast_mid2_cast_fu_566_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_cast_mid2_cast_reg_1005 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln77_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_reg_1010 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_3_fu_572_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln77_3_reg_1015 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_0_load_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_load_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_fu_575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln83_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state19_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln83_reg_1035_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1035_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1035_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1035_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1035_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1035_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_674_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_reg_1045 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_5_fu_710_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_5_reg_1050 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln91_fu_745_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln91_reg_1060 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln95_5_fu_753_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_5_reg_1065 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_5_reg_1065_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_5_reg_1065_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_5_reg_1065_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_3_fu_759_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_3_reg_1070 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_fu_765_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_reg_1075 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state22_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state30_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state34_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state38_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state42_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state46_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln83_4_fu_777_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_4_reg_1080 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln83_fu_788_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_reg_1085 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_reg_1085_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_reg_1085_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_reg_1085_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_fu_808_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln95_reg_1090 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln98_fu_813_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln98_1_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_reg_1100_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_reg_1100_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_reg_1100_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_7_fu_831_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_7_reg_1105 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer_4_weights_load_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state20_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state21_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state29_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state37_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state41_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state45_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln98_2_fu_861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal layer_4_bias_load_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal select_ln98_1_fu_869_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln98_1_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal add_ln77_fu_926_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal select_ln74_fu_937_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state37 : STD_LOGIC;
    signal indvar_flatten80_reg_194 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_205 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten50_reg_216 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_reg_239 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten36_phi_fu_254_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_266_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v_phi_fu_277_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_vi_phi_fu_288_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_iv_phi_fu_299_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_phi_mux_add4320_phi_fu_311_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_load_2_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_load_2_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal newIndex9_cast_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_2_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal select_ln49_fu_917_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_343_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal empty_fu_358_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_368_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast_fu_364_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_fu_382_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp5_cast_fu_388_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid_fu_428_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast_mid1_fu_424_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid1_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln77_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln71_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_fu_398_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln71_fu_416_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln71_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_476_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_cast_dup_fu_482_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln71_4_fu_442_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_36_fu_392_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid146_fu_508_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln71_6_fu_514_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_42_fu_522_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln77_4_fu_538_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid1_fu_530_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_548_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvars_iv_next34_fu_582_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_37_fu_592_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl2_fu_596_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_fu_588_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_fu_604_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_3_fu_610_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln89_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln83_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_628_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln83_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next34_mid1_fu_682_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_39_fu_692_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl2_mid1_fu_696_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_mid1_fu_688_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_dup_fu_662_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln86_fu_718_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_fu_722_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_2_fu_704_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_4_fu_731_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_5_fu_636_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_6_fu_737_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln94_fu_749_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_3_fu_771_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_944_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln91_fu_792_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln91_fu_795_p2 : STD_LOGIC_VECTOR (6 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln91_fu_795_p2 : signal is "no";
    signal shl_ln_fu_800_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_fu_784_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1_fu_837_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln98_2_fu_845_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_819_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln49_fu_876_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_879_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_889_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_2_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_2_fu_931_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_944_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_944_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_944_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_338_ce : STD_LOGIC;
    signal grp_fu_343_ce : STD_LOGIC;
    signal grp_fu_347_ce : STD_LOGIC;
    signal grp_fu_347_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_548_ap_start : STD_LOGIC;
    signal grp_fu_548_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal grp_fu_944_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_urem_12ns_12ns_12_16_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component infer_urem_12ns_12ns_12_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component infer_mac_muladd_4ns_5ns_4ns_7_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component infer_conv2d_layer_4_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_conv2d_layer_4_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_4_weights_U : component infer_conv2d_layer_4_weights
    generic map (
        DataWidth => 32,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_4_weights_address0,
        ce0 => layer_4_weights_ce0,
        q0 => layer_4_weights_q0);

    layer_4_bias_U : component infer_conv2d_layer_4_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_4_bias_address0,
        ce0 => layer_4_bias_ce0,
        q0 => layer_4_bias_q0);

    urem_12ns_12ns_12_16_seq_1_U54 : component infer_urem_12ns_12ns_12_16_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_548_ap_start,
        done => grp_fu_548_ap_done,
        din0 => sum19_fu_542_p2,
        din1 => ap_const_lv12_510,
        ce => ap_const_logic_1,
        dout => grp_fu_548_p2);

    urem_12ns_12ns_12_16_1_U55 : component infer_urem_12ns_12ns_12_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln98_fu_813_p2,
        din1 => ap_const_lv12_790,
        ce => ap_const_logic_1,
        dout => grp_fu_819_p2);

    mac_muladd_4ns_5ns_4ns_7_4_1_U56 : component infer_mac_muladd_4ns_5ns_4ns_7_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_944_p0,
        din1 => grp_fu_944_p1,
        din2 => grp_fu_944_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_944_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state37)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4320_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_1035_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                add4320_reg_306 <= grp_fu_3097_p_dout0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                add4320_reg_306 <= select_ln98_fu_575_p3;
            end if; 
        end if;
    end process;

    i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                i_reg_205 <= select_ln71_5_reg_965;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_205 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    ii_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                ii_reg_228 <= ii_cast_mid2_reg_978;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_228 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    iii_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                iii_reg_239 <= add_ln77_fu_926_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_239 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten36_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
                indvar_flatten36_reg_250 <= add_ln83_reg_1075;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten36_reg_250 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten50_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                indvar_flatten50_reg_216 <= select_ln74_fu_937_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten50_reg_216 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten80_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                indvar_flatten80_reg_194 <= add_ln71_2_reg_952;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten80_reg_194 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
                indvar_flatten_reg_262 <= select_ln86_7_reg_1105;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten_reg_262 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iv_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_1035_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                iv_reg_295 <= select_ln83_4_reg_1080;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                iv_reg_295 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    output_0_load_2_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                if ((icmp_ln98_reg_989 = ap_const_lv1_0)) then 
                    output_0_load_2_reg_328 <= output_0_load_reg_1020;
                elsif ((icmp_ln98_reg_989 = ap_const_lv1_1)) then 
                    output_0_load_2_reg_328 <= add4320_reg_306;
                end if;
            end if; 
        end if;
    end process;

    output_1_load_2_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                if ((icmp_ln98_reg_989 = ap_const_lv1_0)) then 
                    output_1_load_2_reg_318 <= add4320_reg_306;
                elsif ((icmp_ln98_reg_989 = ap_const_lv1_1)) then 
                    output_1_load_2_reg_318 <= output_1_load_reg_1025;
                end if;
            end if; 
        end if;
    end process;

    v_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
                v_reg_273 <= select_ln86_5_reg_1050;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                v_reg_273 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    vi_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
                vi_reg_284 <= add_ln95_reg_1090;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                vi_reg_284 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln71_2_reg_952 <= add_ln71_2_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln83_reg_1075 <= add_ln83_fu_765_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln83_fu_616_p2 = ap_const_lv1_0))) then
                add_ln86_3_reg_1070 <= add_ln86_3_fu_759_p2;
                add_ln95_5_reg_1065 <= add_ln95_5_fu_753_p2;
                icmp_ln86_reg_1039 <= icmp_ln86_fu_622_p2;
                select_ln86_reg_1045 <= select_ln86_fu_674_p3;
                trunc_ln91_reg_1060 <= trunc_ln91_fu_745_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln95_5_reg_1065_pp0_iter1_reg <= add_ln95_5_reg_1065;
                add_ln95_5_reg_1065_pp0_iter2_reg <= add_ln95_5_reg_1065_pp0_iter1_reg;
                add_ln95_5_reg_1065_pp0_iter3_reg <= add_ln95_5_reg_1065_pp0_iter2_reg;
                icmp_ln83_reg_1035 <= icmp_ln83_fu_616_p2;
                icmp_ln83_reg_1035_pp0_iter1_reg <= icmp_ln83_reg_1035;
                icmp_ln83_reg_1035_pp0_iter2_reg <= icmp_ln83_reg_1035_pp0_iter1_reg;
                icmp_ln83_reg_1035_pp0_iter3_reg <= icmp_ln83_reg_1035_pp0_iter2_reg;
                icmp_ln83_reg_1035_pp0_iter4_reg <= icmp_ln83_reg_1035_pp0_iter3_reg;
                icmp_ln83_reg_1035_pp0_iter5_reg <= icmp_ln83_reg_1035_pp0_iter4_reg;
                icmp_ln83_reg_1035_pp0_iter6_reg <= icmp_ln83_reg_1035_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then
                add_ln95_reg_1090 <= add_ln95_fu_808_p2;
                select_ln83_4_reg_1080 <= select_ln83_4_fu_777_p3;
                select_ln86_7_reg_1105 <= select_ln86_7_fu_831_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                add_reg_1160 <= grp_fu_3097_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_404_p2 = ap_const_lv1_0))) then
                icmp_ln74_reg_960 <= icmp_ln74_fu_410_p2;
                icmp_ln98_reg_989 <= icmp_ln98_fu_554_p2;
                ii_cast_mid2_reg_978 <= ii_cast_mid2_fu_500_p3;
                iii_mid2_reg_971 <= iii_mid2_fu_492_p3;
                select_ln71_5_reg_965 <= select_ln71_5_fu_468_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then
                icmp_ln98_1_reg_1100 <= icmp_ln98_1_fu_825_p2;
                trunc_ln83_reg_1085 <= trunc_ln83_fu_788_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                icmp_ln98_1_reg_1100_pp0_iter1_reg <= icmp_ln98_1_reg_1100;
                icmp_ln98_1_reg_1100_pp0_iter2_reg <= icmp_ln98_1_reg_1100_pp0_iter1_reg;
                icmp_ln98_1_reg_1100_pp0_iter3_reg <= icmp_ln98_1_reg_1100_pp0_iter2_reg;
                trunc_ln83_reg_1085_pp0_iter1_reg <= trunc_ln83_reg_1085;
                trunc_ln83_reg_1085_pp0_iter2_reg <= trunc_ln83_reg_1085_pp0_iter1_reg;
                trunc_ln83_reg_1085_pp0_iter3_reg <= trunc_ln83_reg_1085_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                    ii_cast_mid2_cast_reg_1005(3 downto 0) <= ii_cast_mid2_cast_fu_566_p1(3 downto 0);
                output_0_load_reg_1020 <= output_0_q0;
                output_1_load_reg_1025 <= output_1_q0;
                    zext_ln77_3_reg_1015(5 downto 0) <= zext_ln77_3_fu_572_p1(5 downto 0);
                    zext_ln77_reg_1010(5 downto 0) <= zext_ln77_fu_569_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                layer_4_bias_load_reg_1150 <= layer_4_bias_q0;
                select_ln98_1_reg_1155 <= select_ln98_1_fu_869_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln83_reg_1035_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                layer_4_weights_load_reg_1115 <= layer_4_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln83_reg_1035_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul_reg_1135 <= grp_fu_3101_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                output_0_addr_reg_995 <= newIndex9_cast_fu_560_p1(11 - 1 downto 0);
                output_1_addr_reg_1000 <= newIndex9_cast_fu_560_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln83_fu_616_p2 = ap_const_lv1_0))) then
                select_ln86_5_reg_1050 <= select_ln86_5_fu_710_p3;
            end if;
        end if;
    end process;
    ii_cast_mid2_cast_reg_1005(6 downto 4) <= "000";
    zext_ln77_reg_1010(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln77_3_reg_1015(13 downto 6) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_404_p2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter6, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_404_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln71_2_fu_352_p2 <= std_logic_vector(unsigned(indvar_flatten80_reg_194) + unsigned(ap_const_lv12_1));
    add_ln71_fu_398_p2 <= std_logic_vector(unsigned(i_reg_205) + unsigned(ap_const_lv4_1));
    add_ln74_2_fu_931_p2 <= std_logic_vector(unsigned(indvar_flatten50_reg_216) + unsigned(ap_const_lv10_1));
    add_ln74_fu_476_p2 <= std_logic_vector(unsigned(select_ln71_fu_416_p3) + unsigned(ap_const_lv4_1));
    add_ln77_fu_926_p2 <= std_logic_vector(unsigned(iii_mid2_reg_971) + unsigned(ap_const_lv6_1));
    add_ln83_3_fu_771_p2 <= std_logic_vector(unsigned(ap_phi_mux_iv_phi_fu_299_p4) + unsigned(ap_const_lv6_1));
    add_ln83_fu_765_p2 <= std_logic_vector(unsigned(indvar_flatten36_reg_250) + unsigned(ap_const_lv9_1));
    add_ln86_3_fu_759_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_266_p4) + unsigned(ap_const_lv4_1));
    add_ln86_fu_722_p2 <= std_logic_vector(unsigned(select_ln71_5_reg_965) + unsigned(sext_ln86_fu_718_p1));
    add_ln91_fu_795_p2 <= std_logic_vector(unsigned(grp_fu_944_p3) + unsigned(sext_ln91_fu_792_p1));
    add_ln95_3_fu_610_p2 <= std_logic_vector(unsigned(sub_ln94_fu_604_p2) + unsigned(ap_const_lv4_1));
    add_ln95_4_fu_731_p2 <= std_logic_vector(unsigned(sub_ln94_2_fu_704_p2) + unsigned(ap_const_lv4_1));
    add_ln95_5_fu_753_p2 <= std_logic_vector(unsigned(select_ln86_6_fu_737_p3) + unsigned(sext_ln94_fu_749_p1));
    add_ln95_fu_808_p2 <= std_logic_vector(unsigned(select_ln86_reg_1045) + unsigned(ap_const_lv3_1));
    add_ln98_2_fu_845_p2 <= std_logic_vector(unsigned(shl_ln1_fu_837_p4) + unsigned(zext_ln77_3_reg_1015));
    add_ln98_fu_813_p2 <= std_logic_vector(unsigned(shl_ln_fu_800_p3) + unsigned(zext_ln83_fu_784_p1));
    and_ln49_fu_911_p2 <= (or_ln49_fu_905_p2 and grp_fu_866_p_dout0);
    and_ln71_fu_462_p2 <= (xor_ln71_fu_450_p2 and icmp_ln77_fu_456_p2);
    and_ln83_fu_656_p2 <= (xor_ln83_fu_644_p2 and icmp_ln89_fu_650_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(21);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state47 <= ap_CS_fsm(22);
    ap_CS_fsm_state48 <= ap_CS_fsm(23);
    ap_CS_fsm_state49 <= ap_CS_fsm(24);
    ap_CS_fsm_state53 <= ap_CS_fsm(28);
    ap_CS_fsm_state54 <= ap_CS_fsm(29);
    ap_CS_fsm_state55 <= ap_CS_fsm(30);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter4_state37_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter4_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln83_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (icmp_ln83_reg_1035 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_404_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_404_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add4320_phi_fu_311_p4_assign_proc : process(add4320_reg_306, icmp_ln83_reg_1035_pp0_iter6_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter6, ap_block_pp0_stage3, grp_fu_3097_p_dout0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_1035_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            ap_phi_mux_add4320_phi_fu_311_p4 <= grp_fu_3097_p_dout0;
        else 
            ap_phi_mux_add4320_phi_fu_311_p4 <= add4320_reg_306;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten36_phi_fu_254_p4_assign_proc : process(indvar_flatten36_reg_250, icmp_ln83_reg_1035, ap_CS_fsm_pp0_stage0, add_ln83_reg_1075, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten36_phi_fu_254_p4 <= add_ln83_reg_1075;
        else 
            ap_phi_mux_indvar_flatten36_phi_fu_254_p4 <= indvar_flatten36_reg_250;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_266_p4_assign_proc : process(indvar_flatten_reg_262, icmp_ln83_reg_1035, ap_CS_fsm_pp0_stage0, select_ln86_7_reg_1105, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_266_p4 <= select_ln86_7_reg_1105;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_266_p4 <= indvar_flatten_reg_262;
        end if; 
    end process;


    ap_phi_mux_iv_phi_fu_299_p4_assign_proc : process(iv_reg_295, icmp_ln83_reg_1035_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, select_ln83_4_reg_1080, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_1035_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            ap_phi_mux_iv_phi_fu_299_p4 <= select_ln83_4_reg_1080;
        else 
            ap_phi_mux_iv_phi_fu_299_p4 <= iv_reg_295;
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_277_p4_assign_proc : process(v_reg_273, icmp_ln83_reg_1035, ap_CS_fsm_pp0_stage0, select_ln86_5_reg_1050, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_v_phi_fu_277_p4 <= select_ln86_5_reg_1050;
        else 
            ap_phi_mux_v_phi_fu_277_p4 <= v_reg_273;
        end if; 
    end process;


    ap_phi_mux_vi_phi_fu_288_p4_assign_proc : process(vi_reg_284, icmp_ln83_reg_1035, ap_CS_fsm_pp0_stage0, add_ln95_reg_1090, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln83_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_vi_phi_fu_288_p4 <= add_ln95_reg_1090;
        else 
            ap_phi_mux_vi_phi_fu_288_p4 <= vi_reg_284;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_404_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_404_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_fu_876_p1 <= add_reg_1160;
    empty_36_fu_392_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_388_p1) + unsigned(tmp_fu_376_p2));
    empty_37_fu_592_p1 <= indvars_iv_next34_fu_582_p2(2 - 1 downto 0);
    empty_39_fu_692_p1 <= indvars_iv_next34_mid1_fu_682_p2(2 - 1 downto 0);
    empty_41_fu_486_p2 <= (icmp_ln74_fu_410_p2 or and_ln71_fu_462_p2);
    empty_42_fu_522_p3 <= 
        p_mid146_fu_508_p2 when (and_ln71_fu_462_p2(0) = '1') else 
        select_ln71_6_fu_514_p3;
    empty_fu_358_p2 <= std_logic_vector(unsigned(i_reg_205) + unsigned(ap_const_lv4_F));
    grp_fu_3097_p_ce <= ap_const_logic_1;
    grp_fu_3097_p_din0 <= grp_fu_338_p0;
    grp_fu_3097_p_din1 <= grp_fu_338_p1;
    grp_fu_3097_p_opcode <= ap_const_lv2_0;
    grp_fu_3101_p_ce <= ap_const_logic_1;
    grp_fu_3101_p_din0 <= select_ln98_2_fu_861_p3;
    grp_fu_3101_p_din1 <= layer_4_weights_load_reg_1115;
    grp_fu_338_ce <= ap_const_logic_1;

    grp_fu_338_p0_assign_proc : process(ap_CS_fsm_pp0_stage3, select_ln98_1_reg_1155, ap_enable_reg_pp0_iter5, ap_block_pp0_stage3, ap_phi_mux_add4320_phi_fu_311_p4, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_338_p0 <= select_ln98_1_reg_1155;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_338_p0 <= ap_phi_mux_add4320_phi_fu_311_p4;
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, mul_reg_1135, layer_4_bias_load_reg_1150, ap_enable_reg_pp0_iter5, ap_block_pp0_stage3, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_338_p1 <= layer_4_bias_load_reg_1150;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_338_p1 <= mul_reg_1135;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_338_p2 <= grp_fu_3097_p_dout0;
    grp_fu_343_ce <= ap_const_logic_1;
    grp_fu_343_p0 <= select_ln98_2_fu_861_p3;
    grp_fu_343_p1 <= layer_4_weights_load_reg_1115;
    grp_fu_343_p2 <= grp_fu_3101_p_dout0;
    grp_fu_347_ce <= ap_const_logic_1;
    grp_fu_347_opcode <= ap_const_lv5_2;
    grp_fu_347_p0 <= add_reg_1160;
    grp_fu_347_p1 <= ap_const_lv32_0;
    grp_fu_347_p2 <= grp_fu_866_p_dout0;

    grp_fu_548_ap_start_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_404_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln71_fu_404_p2 = ap_const_lv1_0))) then 
            grp_fu_548_ap_start <= ap_const_logic_1;
        else 
            grp_fu_548_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_866_p_ce <= ap_const_logic_1;
    grp_fu_866_p_din0 <= add_reg_1160;
    grp_fu_866_p_din1 <= ap_const_lv32_0;
    grp_fu_866_p_opcode <= ap_const_lv5_2;
    grp_fu_944_p0 <= grp_fu_944_p00(4 - 1 downto 0);
    grp_fu_944_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_fu_722_p2),7));
    grp_fu_944_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    grp_fu_944_p2 <= ii_cast_mid2_cast_reg_1005(4 - 1 downto 0);
    icmp_ln49_2_fu_899_p2 <= "1" when (trunc_ln49_fu_889_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_893_p2 <= "0" when (tmp_s_fu_879_p4 = ap_const_lv8_FF) else "1";
    icmp_ln71_fu_404_p2 <= "1" when (indvar_flatten80_reg_194 = ap_const_lv12_A20) else "0";
    icmp_ln74_fu_410_p2 <= "1" when (indvar_flatten50_reg_216 = ap_const_lv10_120) else "0";
    icmp_ln77_fu_456_p2 <= "1" when (iii_reg_239 = ap_const_lv6_20) else "0";
    icmp_ln83_fu_616_p2 <= "1" when (ap_phi_mux_indvar_flatten36_phi_fu_254_p4 = ap_const_lv9_120) else "0";
    icmp_ln86_fu_622_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_266_p4 = ap_const_lv4_9) else "0";
    icmp_ln89_fu_650_p2 <= "1" when (ap_phi_mux_vi_phi_fu_288_p4 = ap_const_lv3_2) else "0";
    icmp_ln98_1_fu_825_p2 <= "1" when (unsigned(add_ln98_fu_813_p2) < unsigned(ap_const_lv12_790)) else "0";
    icmp_ln98_fu_554_p2 <= "1" when (unsigned(sum19_fu_542_p2) < unsigned(ap_const_lv12_510)) else "0";
    ii_cast_dup_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln71_fu_416_p3),7));
    ii_cast_mid2_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_cast_mid2_reg_978),7));
    ii_cast_mid2_fu_500_p3 <= 
        add_ln74_fu_476_p2 when (and_ln71_fu_462_p2(0) = '1') else 
        select_ln71_fu_416_p3;
    iii_mid2_fu_492_p3 <= 
        ap_const_lv6_0 when (empty_41_fu_486_p2(0) = '1') else 
        iii_reg_239;
    indvars_iv_next34_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_fu_582_p2),4));
    indvars_iv_next34_cast_mid1_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_mid1_fu_682_p2),4));
    indvars_iv_next34_dup_fu_662_p2 <= std_logic_vector(unsigned(select_ln83_fu_628_p3) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_fu_582_p2 <= std_logic_vector(unsigned(ap_phi_mux_v_phi_fu_277_p4) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_mid1_fu_682_p2 <= std_logic_vector(unsigned(select_ln83_fu_628_p3) + unsigned(ap_const_lv3_2));
    input_0_address0 <= zext_ln98_fu_855_p1(11 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln98_fu_855_p1(11 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_4_bias_address0 <= zext_ln77_reg_1010(5 - 1 downto 0);

    layer_4_bias_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer_4_bias_ce0 <= ap_const_logic_1;
        else 
            layer_4_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_4_weights_address0 <= zext_ln98_2_fu_850_p1(14 - 1 downto 0);

    layer_4_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer_4_weights_ce0 <= ap_const_logic_1;
        else 
            layer_4_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex9_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_548_p2),64));
    or_ln49_fu_905_p2 <= (icmp_ln49_fu_893_p2 or icmp_ln49_2_fu_899_p2);
    or_ln86_fu_668_p2 <= (icmp_ln86_fu_622_p2 or and_ln83_fu_656_p2);

    output_0_address0_assign_proc : process(output_0_addr_reg_995, ap_CS_fsm_state17, ap_CS_fsm_state47, ap_CS_fsm_state55, newIndex9_cast_fu_560_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            output_0_address0 <= output_0_addr_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_0_address0 <= newIndex9_cast_fu_560_p1(11 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state47, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(add4320_reg_306, ap_CS_fsm_state47, ap_CS_fsm_state55, select_ln49_fu_917_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_0_d0 <= select_ln49_fu_917_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            output_0_d0 <= add4320_reg_306;
        else 
            output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we0_assign_proc : process(icmp_ln98_reg_989, ap_CS_fsm_state47, ap_CS_fsm_state55)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln98_reg_989 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln98_reg_989 = ap_const_lv1_1)))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(ap_CS_fsm_state17, output_1_addr_reg_1000, ap_CS_fsm_state47, ap_CS_fsm_state55, newIndex9_cast_fu_560_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            output_1_address0 <= output_1_addr_reg_1000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_1_address0 <= newIndex9_cast_fu_560_p1(11 - 1 downto 0);
        else 
            output_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state47, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d0_assign_proc : process(add4320_reg_306, ap_CS_fsm_state47, ap_CS_fsm_state55, select_ln49_fu_917_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_1_d0 <= select_ln49_fu_917_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            output_1_d0 <= add4320_reg_306;
        else 
            output_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_1_we0_assign_proc : process(icmp_ln98_reg_989, ap_CS_fsm_state47, ap_CS_fsm_state55)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln98_reg_989 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln98_reg_989 = ap_const_lv1_0)))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_358_p2),7));
    p_cast_mid1_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_205),7));
    p_mid146_fu_508_p2 <= std_logic_vector(unsigned(ii_cast_dup_fu_482_p1) + unsigned(select_ln71_4_fu_442_p3));
    p_mid1_fu_530_p3 <= (empty_42_fu_522_p3 & ap_const_lv5_0);
    p_mid_fu_428_p3 <= (i_reg_205 & ap_const_lv3_0);
    p_shl2_fu_596_p3 <= (empty_37_fu_592_p1 & ap_const_lv2_0);
    p_shl2_mid1_fu_696_p3 <= (empty_39_fu_692_p1 & ap_const_lv2_0);
    select_ln49_fu_917_p3 <= 
        add_reg_1160 when (and_ln49_fu_911_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln71_4_fu_442_p3 <= 
        tmp_mid1_fu_436_p2 when (icmp_ln74_fu_410_p2(0) = '1') else 
        tmp_fu_376_p2;
    select_ln71_5_fu_468_p3 <= 
        add_ln71_fu_398_p2 when (icmp_ln74_fu_410_p2(0) = '1') else 
        i_reg_205;
    select_ln71_6_fu_514_p3 <= 
        tmp_mid1_fu_436_p2 when (icmp_ln74_fu_410_p2(0) = '1') else 
        empty_36_fu_392_p2;
    select_ln71_fu_416_p3 <= 
        ap_const_lv4_1 when (icmp_ln74_fu_410_p2(0) = '1') else 
        ii_reg_228;
    select_ln74_fu_937_p3 <= 
        ap_const_lv10_1 when (icmp_ln74_reg_960(0) = '1') else 
        add_ln74_2_fu_931_p2;
    select_ln83_4_fu_777_p3 <= 
        add_ln83_3_fu_771_p2 when (icmp_ln86_reg_1039(0) = '1') else 
        ap_phi_mux_iv_phi_fu_299_p4;
    select_ln83_5_fu_636_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_fu_622_p2(0) = '1') else 
        add_ln95_3_fu_610_p2;
    select_ln83_fu_628_p3 <= 
        ap_const_lv3_7 when (icmp_ln86_fu_622_p2(0) = '1') else 
        ap_phi_mux_v_phi_fu_277_p4;
    select_ln86_5_fu_710_p3 <= 
        indvars_iv_next34_dup_fu_662_p2 when (and_ln83_fu_656_p2(0) = '1') else 
        select_ln83_fu_628_p3;
    select_ln86_6_fu_737_p3 <= 
        add_ln95_4_fu_731_p2 when (and_ln83_fu_656_p2(0) = '1') else 
        select_ln83_5_fu_636_p3;
    select_ln86_7_fu_831_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_reg_1039(0) = '1') else 
        add_ln86_3_reg_1070;
    select_ln86_fu_674_p3 <= 
        ap_const_lv3_7 when (or_ln86_fu_668_p2(0) = '1') else 
        ap_phi_mux_vi_phi_fu_288_p4;
    select_ln98_1_fu_869_p3 <= 
        output_0_load_2_reg_328 when (icmp_ln98_reg_989(0) = '1') else 
        output_1_load_2_reg_318;
    select_ln98_2_fu_861_p3 <= 
        input_0_q0 when (icmp_ln98_1_reg_1100_pp0_iter3_reg(0) = '1') else 
        input_1_q0;
    select_ln98_fu_575_p3 <= 
        output_0_q0 when (icmp_ln98_reg_989(0) = '1') else 
        output_1_q0;
        sext_ln86_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln86_5_fu_710_p3),4));

        sext_ln91_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln91_reg_1060),7));

        sext_ln94_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln91_fu_745_p1),4));

    shl_ln1_fu_837_p4 <= ((add_ln95_5_reg_1065_pp0_iter3_reg & trunc_ln83_reg_1085_pp0_iter3_reg) & ap_const_lv5_0);
    shl_ln_fu_800_p3 <= (add_ln91_fu_795_p2 & ap_const_lv5_0);
    sub_ln94_2_fu_704_p2 <= std_logic_vector(unsigned(p_shl2_mid1_fu_696_p3) - unsigned(indvars_iv_next34_cast_mid1_fu_688_p1));
    sub_ln94_fu_604_p2 <= std_logic_vector(unsigned(p_shl2_fu_596_p3) - unsigned(indvars_iv_next34_cast_fu_588_p1));
    sum19_fu_542_p2 <= std_logic_vector(unsigned(zext_ln77_4_fu_538_p1) + unsigned(p_mid1_fu_530_p3));
    tmp5_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_382_p2),7));
    tmp5_fu_382_p2 <= std_logic_vector(unsigned(ii_reg_228) + unsigned(ap_const_lv4_F));
    tmp_5_fu_368_p3 <= (empty_fu_358_p2 & ap_const_lv3_0);
    tmp_fu_376_p2 <= std_logic_vector(unsigned(tmp_5_fu_368_p3) + unsigned(p_cast_fu_364_p1));
    tmp_mid1_fu_436_p2 <= std_logic_vector(unsigned(p_mid_fu_428_p3) + unsigned(p_cast_mid1_fu_424_p1));
    tmp_s_fu_879_p4 <= bitcast_ln49_fu_876_p1(30 downto 23);
    trunc_ln49_fu_889_p1 <= bitcast_ln49_fu_876_p1(23 - 1 downto 0);
    trunc_ln83_fu_788_p1 <= select_ln83_4_fu_777_p3(5 - 1 downto 0);
    trunc_ln91_fu_745_p1 <= select_ln86_fu_674_p3(2 - 1 downto 0);
    xor_ln71_fu_450_p2 <= (icmp_ln74_fu_410_p2 xor ap_const_lv1_1);
    xor_ln83_fu_644_p2 <= (icmp_ln86_fu_622_p2 xor ap_const_lv1_1);
    zext_ln77_3_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_971),14));
    zext_ln77_4_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_fu_492_p3),12));
    zext_ln77_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_971),64));
    zext_ln83_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_4_fu_777_p3),12));
    zext_ln98_2_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_2_fu_845_p2),64));
    zext_ln98_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_819_p2),64));
end behav;

-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_19_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_19_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101111000011", 1 => "01001110011100", 2 => "00001010011001", 
    3 => "01001111111011", 4 => "11111101111000", 5 => "01001110010001", 
    6 => "10110100000011", 7 => "01010100101001", 8 => "10011011001010", 
    9 => "01010010001010", 10 => "00001000110011", 11 => "10101001101000", 
    12 => "10111111001101", 13 => "00011010010100", 14 => "11010111100001", 
    15 => "11011011001011", 16 => "11101101100011", 17 => "11100001100100", 
    18 => "00101101110110", 19 => "00010111011110", 20 => "00000101111101", 
    21 => "10110111011101", 22 => "11110101000100", 23 => "01001001111001", 
    24 => "00101101000000", 25 => "01010001001110", 26 => "11000010110001", 
    27 => "01000001110101", 28 => "11100011100010", 29 => "00101111111111", 
    30 => "01000101101101", 31 => "11101011000111", 32 => "11100101110011", 
    33 => "01000011000101", 34 => "01010010111110", 35 => "00111100000010", 
    36 => "11100010100001", 37 => "00111011101010", 38 => "10101101100010", 
    39 => "11100100011000", 40 => "11011111000010", 41 => "11110001111000", 
    42 => "00011011101100", 43 => "01010010001110", 44 => "00100101001100", 
    45 => "11011110111100", 46 => "10100010110110", 47 => "10101000011011", 
    48 => "00100011011000", 49 => "00100110110001", 50 => "10111000111110", 
    51 => "00100111111100", 52 => "11100111111000", 53 => "10101110111001", 
    54 => "01011100000101", 55 => "11000010001111", 56 => "00101010110011", 
    57 => "10110101001011", 58 => "01001000100001", 59 => "00100110111011", 
    60 => "11011000011001", 61 => "10011111101011", 62 => "10101011100001", 
    63 => "01010110000111", 64 => "10010110110011", 65 => "01000100110110", 
    66 => "10110101011100", 67 => "10110100111011", 68 => "01100011110100", 
    69 => "01011000111100", 70 => "00010010011111", 71 => "11011000101101", 
    72 => "11000000101101", 73 => "01001110000110", 74 => "01100100011111", 
    75 => "00111011001110", 76 => "00110010000101", 77 => "11111000110100", 
    78 => "00111000010011", 79 => "11110100011000", 80 => "11101111001110", 
    81 => "00000001000100", 82 => "00000101101110", 83 => "00000001010100", 
    84 => "10111110110110", 85 => "11101011110111", 86 => "10111000101001", 
    87 => "01000100101011", 88 => "10111001101100", 89 => "00011101111110", 
    90 => "11101111001011", 91 => "00101001110110", 92 => "01010111011001", 
    93 => "00111100000011", 94 => "00101001101101", 95 => "00001100110001", 
    96 => "00010110100011", 97 => "11011100110000", 98 => "01011100001111", 
    99 => "00100001101110", 100 => "01000111110011", 101 => "11100100000101", 
    102 => "01000111101111", 103 => "11111001011101", 104 => "10011110100001", 
    105 => "11010100111000", 106 => "00000010010011", 107 => "01001001001010", 
    108 => "11100000101010", 109 => "10111101001001", 110 => "01001010110100", 
    111 => "00010001011111", 112 => "00000110111110", 113 => "11100101010001", 
    114 => "00010110101010", 115 => "11001001111110", 116 => "11110001001101", 
    117 => "10010110111111", 118 => "00001000010000", 119 => "10011101110001", 
    120 => "01011000100000", 121 => "00111000010001", 122 => "00111010001110", 
    123 => "01000101100010", 124 => "00100011111110", 125 => "11110010011111", 
    126 => "10111011000000", 127 => "01001111000001", 128 => "10110101000101", 
    129 => "00011101000111", 130 => "10011010000001", 131 => "11011000100110", 
    132 => "11011100100001", 133 => "11110101010110", 134 => "11011110000001", 
    135 => "10101110100000", 136 => "11110000000010", 137 => "11010010001011", 
    138 => "11110010010011", 139 => "00010101101101", 140 => "11111110100000", 
    141 => "11011000011110", 142 => "11010011011000", 143 => "10110001000111", 
    144 => "00101010010011", 145 => "00101101010000", 146 => "00110000100000", 
    147 => "11110011100101", 148 => "11001100111001", 149 => "11110001011010", 
    150 => "10101110001000", 151 => "11011011111100", 152 => "11101000011011", 
    153 => "01010101010100", 154 => "01000100010011", 155 => "01100000000110", 
    156 => "10101000010111", 157 => "00101100101101", 158 => "00000010110000", 
    159 => "10110111011011", 160 => "00101000010111", 161 => "00011111100110", 
    162 => "00001011110010", 163 => "10100001111100", 164 => "00111101000010", 
    165 => "11100001010111", 166 => "11110001111000", 167 => "00110000110000", 
    168 => "00110100000001", 169 => "01011011000110", 170 => "00000011111011", 
    171 => "01011000011001", 172 => "10100111000001", 173 => "01001100000000", 
    174 => "00001011010110", 175 => "00000001110001", 176 => "11000011000010", 
    177 => "11111101101011", 178 => "01001001100011", 179 => "00101100111110", 
    180 => "01001110110110", 181 => "01000110111111", 182 => "00110011110100", 
    183 => "00001001101000", 184 => "01010101111110", 185 => "10110111010111", 
    186 => "11100001000011", 187 => "01010100000100", 188 => "00000011100100", 
    189 => "01011000001100", 190 => "11000101010000", 191 => "10110011111110", 
    192 => "10100111001010", 193 => "01001011111001", 194 => "11101111011010", 
    195 => "11110100001000", 196 => "11111111000100", 197 => "10101000100010", 
    198 => "11101111001101", 199 => "00100111111110", 200 => "00001110111010", 
    201 => "00001000110110", 202 => "11110010001001", 203 => "00000010111011", 
    204 => "11010001101010", 205 => "00010000100010", 206 => "10110011001101", 
    207 => "10110100011010", 208 => "00100010101110", 209 => "00001110110100", 
    210 => "00011110001001", 211 => "10110110011001", 212 => "10111000111100", 
    213 => "00010001011010", 214 => "10110100101010", 215 => "00111000010110", 
    216 => "11111111100110", 217 => "10101100000011", 218 => "11100000100100", 
    219 => "00001001011010", 220 => "01001101101000", 221 => "01001110111101", 
    222 => "00110011111100", 223 => "01000110000010", 224 => "01100000010010", 
    225 => "01000111101001", 226 => "10101111001000", 227 => "10101100101011", 
    228 => "10111011100000", 229 => "01000011011100", 230 => "01100101010011", 
    231 => "01010100101110", 232 => "00001100101010", 233 => "01011101010110", 
    234 => "01011000111000", 235 => "01001001011011", 236 => "01001100100000", 
    237 => "01000001111100", 238 => "01100100000110", 239 => "11110011111111", 
    240 => "11001000011010", 241 => "00001111110001", 242 => "11100000110100", 
    243 => "01010010100011", 244 => "00000111010111", 245 => "11001111000100", 
    246 => "11110001110000", 247 => "10110011011100", 248 => "11100100101010", 
    249 => "11111011111111", 250 => "10101011100111", 251 => "00100010011000", 
    252 => "11110101000111", 253 => "00000111011000", 254 => "10100101100101", 
    255 => "01100000001110", 256 => "11010100110001", 257 => "00111110001010", 
    258 => "11110111100010", 259 => "10011011100110", 260 => "01001011010011", 
    261 => "10101111111010", 262 => "00101010101001", 263 => "10100100111111", 
    264 => "10100100101010", 265 => "10110010010111", 266 => "11010111111101", 
    267 => "11000110111001", 268 => "00101110111101", 269 => "11100101000000", 
    270 => "11010011000010", 271 => "10011011110001", 272 => "00100001001010", 
    273 => "11101101111001", 274 => "11000101100110", 275 => "10011001111110", 
    276 => "00101111111100", 277 => "11110110110110", 278 => "01001001000100", 
    279 => "11101001011100", 280 => "00111101001100", 281 => "00001111101100", 
    282 => "01010100011111", 283 => "00000101010011", 284 => "11101001001101", 
    285 => "10110111011101", 286 => "11011010000100", 287 => "10111110110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_19 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_19 is
    component infer_layer_4_weights_V_19_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_19_rom_U :  component infer_layer_4_weights_V_19_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



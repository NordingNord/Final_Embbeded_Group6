-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_max_pooling2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2244_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2244_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2244_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2244_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2244_p_ce : OUT STD_LOGIC;
    grp_fu_2248_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2248_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2248_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2248_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2248_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_max_pooling2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten54_reg_144 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_168 : STD_LOGIC_VECTOR (8 downto 0);
    signal ii_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_reg_191 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln118_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln118_reg_1030_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln121_1_fu_251_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln121_1_reg_1025 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln121_1_reg_1025_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln118_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_1030_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_1030_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1034_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11861_fu_311_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln11861_reg_1042 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln11861_reg_1042_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln124_mid253_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_mid253_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_mid253_reg_1048_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_fu_421_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln121_reg_1053 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln121_4_fu_429_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln121_4_reg_1058 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln121_4_reg_1058_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_14_fu_515_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_14_reg_1063 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_cast_fu_527_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal iii_cast_reg_1068 : STD_LOGIC_VECTOR (11 downto 0);
    signal iii_cast_reg_1068_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln140_fu_565_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln140_reg_1084 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln140_reg_1084_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln140_reg_1084_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln140_reg_1084_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln118_fu_571_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln118_reg_1089 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_37_fu_577_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_37_reg_1094 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_fu_583_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_1099 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_load_7_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln124_fu_589_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln124_reg_1111 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln121_15_fu_600_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln121_15_reg_1116 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln134_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln134_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln134_7_fu_817_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln134_7_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln133_17_fu_833_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln133_17_reg_1140 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln134_8_fu_921_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln134_8_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln134_8_reg_1145_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_9_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten54_phi_fu_148_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_160_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_172_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_ii_phi_fu_184_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_iii_phi_fu_195_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln133_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln133_7_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln133_8_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln133_9_fu_928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_223_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_245_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_245_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_fu_255_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_36_cast_fu_233_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_37_cast_fu_265_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_269_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_275_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_237_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_245_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid_fu_321_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid213_fu_331_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_mid1_fu_343_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid114_fu_359_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid114_fu_359_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid114_fu_359_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_mid124_fu_373_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln133_fu_285_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln124_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_mid210_fu_303_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln121_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln121_fu_409_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid1_fu_433_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid213_cast_fu_339_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid1_cast_fu_443_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid1_fu_447_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_mid1_fu_453_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_mid2_fu_351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul2212_mid126_fu_377_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul2212_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul2212_mid1_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_39_fu_463_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln121_11_fu_471_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid215_fu_365_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln133_13_fu_487_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln133_mid233_fu_383_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_12_fu_493_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln121_4_fu_501_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_531_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln133_s_fu_541_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln133_mid2_fu_507_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln133_14_fu_554_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal iii_cast8_fu_523_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add26_mid2_fu_479_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln121_5_fu_594_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln134_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_611_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_621_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln134_27_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln134_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln121_fu_661_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln121_fu_661_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln121_fu_661_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid116_fu_672_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln121_1_fu_681_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln121_1_fu_681_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln121_1_fu_681_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln133_12_fu_667_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln121_mid2_fu_687_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln133_15_fu_701_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln133_4_mid245_v_v_fu_694_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_13_fu_706_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln121_4_fu_721_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln134_13_fu_735_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln134_14_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_738_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_13_fu_748_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln134_29_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_28_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_755_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_14_fu_765_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln134_31_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_30_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_13_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_14_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln134_13_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln134_14_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln133_4_mid2_fu_713_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln133_16_fu_823_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln133_5_mid2_fu_727_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln134_15_fu_838_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln134_16_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_842_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_15_fu_852_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln134_33_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_32_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_859_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_16_fu_869_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln134_35_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_34_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_15_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_16_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln134_15_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln134_16_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln134_17_fu_932_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln134_18_fu_949_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_935_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_17_fu_945_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln134_37_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_36_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_952_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_18_fu_962_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln134_39_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_38_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_17_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_18_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln134_17_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln134_18_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_202_ce : STD_LOGIC;
    signal grp_fu_202_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_208_ce : STD_LOGIC;
    signal grp_fu_208_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal empty_fu_245_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln121_1_fu_681_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln121_fu_661_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid114_fu_359_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mul_4ns_5ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    mul_4ns_5ns_7_1_1_U61 : component infer_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => empty_fu_245_p0,
        din1 => empty_fu_245_p1,
        dout => empty_fu_245_p2);

    mul_4ns_5ns_7_1_1_U62 : component infer_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => p_mid114_fu_359_p0,
        din1 => p_mid114_fu_359_p1,
        dout => p_mid114_fu_359_p2);

    mul_4ns_5ns_7_1_1_U63 : component infer_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln121_fu_661_p0,
        din1 => mul_ln121_fu_661_p1,
        dout => mul_ln121_fu_661_p2);

    mul_4ns_5ns_7_1_1_U64 : component infer_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln121_1_fu_681_p0,
        din1 => mul_ln121_1_fu_681_p1,
        dout => mul_ln121_1_fu_681_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state5)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_156 <= select_ln118_reg_1099;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_156 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ii_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ii_reg_180 <= select_ln121_14_reg_1063;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_180 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iii_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                iii_reg_191 <= add_ln124_reg_1111;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_191 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten54_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten54_reg_144 <= add_ln118_reg_1089;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten54_reg_144 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_168 <= select_ln121_15_reg_1116;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_168 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_fu_291_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln11861_reg_1042 <= add_ln11861_fu_311_p2;
                add_ln140_reg_1084 <= add_ln140_fu_565_p2;
                icmp_ln121_reg_1034 <= icmp_ln121_fu_297_p2;
                icmp_ln124_mid253_reg_1048 <= icmp_ln124_mid253_fu_403_p2;
                    iii_cast_reg_1068(5 downto 0) <= iii_cast_fu_527_p1(5 downto 0);
                select_ln121_reg_1053 <= select_ln121_fu_421_p3;
                    zext_ln121_4_reg_1058(3 downto 0) <= zext_ln121_4_fu_429_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln11861_reg_1042_pp0_iter1_reg <= add_ln11861_reg_1042;
                add_ln140_reg_1084_pp0_iter1_reg <= add_ln140_reg_1084;
                add_ln140_reg_1084_pp0_iter2_reg <= add_ln140_reg_1084_pp0_iter1_reg;
                add_ln140_reg_1084_pp0_iter3_reg <= add_ln140_reg_1084_pp0_iter2_reg;
                icmp_ln118_reg_1030 <= icmp_ln118_fu_291_p2;
                icmp_ln118_reg_1030_pp0_iter1_reg <= icmp_ln118_reg_1030;
                icmp_ln118_reg_1030_pp0_iter2_reg <= icmp_ln118_reg_1030_pp0_iter1_reg;
                icmp_ln118_reg_1030_pp0_iter3_reg <= icmp_ln118_reg_1030_pp0_iter2_reg;
                icmp_ln121_reg_1034_pp0_iter1_reg <= icmp_ln121_reg_1034;
                icmp_ln124_mid253_reg_1048_pp0_iter1_reg <= icmp_ln124_mid253_reg_1048;
                    iii_cast_reg_1068_pp0_iter1_reg(5 downto 0) <= iii_cast_reg_1068(5 downto 0);
                    zext_ln121_1_reg_1025(3 downto 0) <= zext_ln121_1_fu_251_p1(3 downto 0);
                    zext_ln121_1_reg_1025_pp0_iter1_reg(3 downto 0) <= zext_ln121_1_reg_1025(3 downto 0);
                    zext_ln121_4_reg_1058_pp0_iter1_reg(3 downto 0) <= zext_ln121_4_reg_1058(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln118_reg_1089 <= add_ln118_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln124_reg_1111 <= add_ln124_fu_589_p2;
                input_load_7_reg_1104 <= input_r_q0;
                select_ln118_reg_1099 <= select_ln118_fu_583_p3;
                select_ln121_15_reg_1116 <= select_ln121_15_fu_600_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln133_17_reg_1140 <= add_ln133_17_fu_833_p2;
                select_ln134_7_reg_1128 <= select_ln134_7_fu_817_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    empty_37_reg_1094(3 downto 1) <= empty_37_fu_577_p2(3 downto 1);
                select_ln134_8_reg_1145_pp0_iter3_reg <= select_ln134_8_reg_1145;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1030_pp0_iter2_reg = ap_const_lv1_0))) then
                input_load_9_reg_1157 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln118_reg_1030_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_213 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_fu_291_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln121_14_reg_1063 <= select_ln121_14_fu_515_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln118_reg_1030_pp0_iter2_reg = ap_const_lv1_0))) then
                select_ln134_8_reg_1145 <= select_ln134_8_fu_921_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln134_reg_1121 <= select_ln134_fu_649_p3;
            end if;
        end if;
    end process;
    zext_ln121_1_reg_1025(6 downto 4) <= "000";
    zext_ln121_1_reg_1025_pp0_iter1_reg(6 downto 4) <= "000";
    zext_ln121_4_reg_1058(6 downto 4) <= "000";
    zext_ln121_4_reg_1058_pp0_iter1_reg(6 downto 4) <= "000";
    iii_cast_reg_1068(11 downto 6) <= "000000";
    iii_cast_reg_1068_pp0_iter1_reg(11 downto 6) <= "000000";
    empty_37_reg_1094(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add26_mid2_fu_479_p3 <= (select_ln121_11_fu_471_p3 & ap_const_lv5_0);
    add_ln11861_fu_311_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_160_p4) + unsigned(ap_const_lv4_2));
    add_ln118_fu_571_p2 <= std_logic_vector(unsigned(indvar_flatten54_reg_144) + unsigned(ap_const_lv10_1));
    add_ln121_4_fu_721_p2 <= std_logic_vector(unsigned(select_ln121_13_fu_706_p3) + unsigned(ap_const_lv7_1));
    add_ln121_5_fu_594_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_168) + unsigned(ap_const_lv9_1));
    add_ln121_fu_409_p2 <= std_logic_vector(unsigned(ii_mid210_fu_303_p3) + unsigned(ap_const_lv4_2));
    add_ln124_fu_589_p2 <= std_logic_vector(unsigned(select_ln121_reg_1053) + unsigned(ap_const_lv6_1));
    add_ln133_12_fu_667_p2 <= std_logic_vector(unsigned(mul_ln121_fu_661_p2) + unsigned(zext_ln121_1_reg_1025_pp0_iter1_reg));
    add_ln133_13_fu_487_p2 <= std_logic_vector(unsigned(p_mid215_fu_365_p3) + unsigned(zext_ln121_4_fu_429_p1));
    add_ln133_14_fu_554_p2 <= std_logic_vector(unsigned(shl_ln133_mid2_fu_507_p3) + unsigned(iii_cast_fu_527_p1));
    add_ln133_15_fu_701_p2 <= std_logic_vector(unsigned(mul_ln121_mid2_fu_687_p3) + unsigned(zext_ln121_4_reg_1058_pp0_iter1_reg));
    add_ln133_16_fu_823_p2 <= std_logic_vector(unsigned(shl_ln133_4_mid2_fu_713_p3) + unsigned(iii_cast_reg_1068_pp0_iter1_reg));
    add_ln133_17_fu_833_p2 <= std_logic_vector(unsigned(shl_ln133_5_mid2_fu_727_p3) + unsigned(iii_cast_reg_1068_pp0_iter1_reg));
    add_ln133_fu_285_p2 <= std_logic_vector(unsigned(empty_fu_245_p2) + unsigned(zext_ln121_1_fu_251_p1));
    add_ln133_mid233_fu_383_p3 <= 
        p_mid114_fu_359_p2 when (icmp_ln121_fu_297_p2(0) = '1') else 
        add_ln133_fu_285_p2;
    add_ln133_s_fu_541_p3 <= (tmp_s_fu_531_p4 & select_ln121_fu_421_p3);
    add_ln140_fu_565_p2 <= std_logic_vector(unsigned(iii_cast8_fu_523_p1) + unsigned(add26_mid2_fu_479_p3));
    and_ln134_13_fu_805_p2 <= (or_ln134_14_fu_799_p2 and or_ln134_13_fu_781_p2);
    and_ln134_14_fu_811_p2 <= (grp_fu_2244_p_dout0 and and_ln134_13_fu_805_p2);
    and_ln134_15_fu_909_p2 <= (or_ln134_16_fu_903_p2 and or_ln134_15_fu_885_p2);
    and_ln134_16_fu_915_p2 <= (grp_fu_2248_p_dout0 and and_ln134_15_fu_909_p2);
    and_ln134_17_fu_1002_p2 <= (or_ln134_18_fu_996_p2 and or_ln134_17_fu_978_p2);
    and_ln134_18_fu_1008_p2 <= (grp_fu_2248_p_dout0 and and_ln134_17_fu_1002_p2);
    and_ln134_fu_643_p2 <= (or_ln134_fu_637_p2 and grp_fu_2244_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln118_reg_1030, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln118_reg_1030 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_160_p4_assign_proc : process(i_reg_156, icmp_ln118_reg_1030, ap_CS_fsm_pp0_stage0, select_ln118_reg_1099, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_160_p4 <= select_ln118_reg_1099;
        else 
            ap_phi_mux_i_phi_fu_160_p4 <= i_reg_156;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_184_p4_assign_proc : process(ii_reg_180, icmp_ln118_reg_1030, ap_CS_fsm_pp0_stage0, select_ln121_14_reg_1063, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ii_phi_fu_184_p4 <= select_ln121_14_reg_1063;
        else 
            ap_phi_mux_ii_phi_fu_184_p4 <= ii_reg_180;
        end if; 
    end process;


    ap_phi_mux_iii_phi_fu_195_p4_assign_proc : process(iii_reg_191, icmp_ln118_reg_1030, ap_CS_fsm_pp0_stage0, add_ln124_reg_1111, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_iii_phi_fu_195_p4 <= add_ln124_reg_1111;
        else 
            ap_phi_mux_iii_phi_fu_195_p4 <= iii_reg_191;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten54_phi_fu_148_p4_assign_proc : process(indvar_flatten54_reg_144, icmp_ln118_reg_1030, ap_CS_fsm_pp0_stage0, add_ln118_reg_1089, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten54_phi_fu_148_p4 <= add_ln118_reg_1089;
        else 
            ap_phi_mux_indvar_flatten54_phi_fu_148_p4 <= indvar_flatten54_reg_144;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_172_p4_assign_proc : process(indvar_flatten_reg_168, icmp_ln118_reg_1030, ap_CS_fsm_pp0_stage0, select_ln121_15_reg_1116, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln118_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_172_p4 <= select_ln121_15_reg_1116;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_172_p4 <= indvar_flatten_reg_168;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln134_13_fu_735_p1 <= input_load_7_reg_1104;
    bitcast_ln134_14_fu_752_p1 <= select_ln134_reg_1121;
    bitcast_ln134_15_fu_838_p1 <= reg_213;
    bitcast_ln134_16_fu_856_p1 <= select_ln134_7_reg_1128;
    bitcast_ln134_17_fu_932_p1 <= input_load_9_reg_1157;
    bitcast_ln134_18_fu_949_p1 <= select_ln134_8_reg_1145_pp0_iter3_reg;
    bitcast_ln134_fu_607_p1 <= reg_213;
    empty_37_fu_577_p2 <= (i_reg_156 or ap_const_lv4_1);
    empty_39_fu_463_p3 <= 
        mul2212_mid126_fu_377_p2 when (icmp_ln121_fu_297_p2(0) = '1') else 
        mul2212_fu_279_p2;
    empty_fu_245_p0 <= empty_fu_245_p00(4 - 1 downto 0);
    empty_fu_245_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_160_p4),7));
    empty_fu_245_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    grp_fu_202_ce <= ap_const_logic_1;
    grp_fu_202_opcode <= ap_const_lv5_2;

    grp_fu_202_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, input_load_7_reg_1104, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_202_p0 <= input_load_7_reg_1104;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_202_p0 <= input_r_q1;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, select_ln134_fu_649_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_202_p1 <= select_ln134_fu_649_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_202_p1 <= ap_const_lv32_0;
        else 
            grp_fu_202_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_202_p2 <= grp_fu_2244_p_dout0;
    grp_fu_208_ce <= ap_const_logic_1;
    grp_fu_208_opcode <= ap_const_lv5_2;

    grp_fu_208_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, input_load_9_reg_1157, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_208_p0 <= input_load_9_reg_1157;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_208_p0 <= input_r_q1;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, select_ln134_7_reg_1128, select_ln134_8_reg_1145, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_208_p1 <= select_ln134_8_reg_1145;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_208_p1 <= select_ln134_7_reg_1128;
        else 
            grp_fu_208_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_208_p2 <= grp_fu_2248_p_dout0;
    grp_fu_2244_p_ce <= ap_const_logic_1;
    grp_fu_2244_p_din0 <= grp_fu_202_p0;
    grp_fu_2244_p_din1 <= grp_fu_202_p1;
    grp_fu_2244_p_opcode <= ap_const_lv5_2;
    grp_fu_2248_p_ce <= ap_const_logic_1;
    grp_fu_2248_p_din0 <= grp_fu_208_p0;
    grp_fu_2248_p_din1 <= grp_fu_208_p1;
    grp_fu_2248_p_opcode <= ap_const_lv5_2;
    icmp_ln118_fu_291_p2 <= "1" when (ap_phi_mux_indvar_flatten54_phi_fu_148_p4 = ap_const_lv10_320) else "0";
    icmp_ln121_fu_297_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_172_p4 = ap_const_lv9_A0) else "0";
    icmp_ln124_fu_397_p2 <= "1" when (ap_phi_mux_iii_phi_fu_195_p4 = ap_const_lv6_20) else "0";
    icmp_ln124_mid253_fu_403_p2 <= (not_exitcond_flatten_fu_391_p2 and icmp_ln124_fu_397_p2);
    icmp_ln134_27_fu_631_p2 <= "1" when (trunc_ln134_fu_621_p1 = ap_const_lv23_0) else "0";
    icmp_ln134_28_fu_769_p2 <= "0" when (tmp_24_fu_738_p4 = ap_const_lv8_FF) else "1";
    icmp_ln134_29_fu_775_p2 <= "1" when (trunc_ln134_13_fu_748_p1 = ap_const_lv23_0) else "0";
    icmp_ln134_30_fu_787_p2 <= "0" when (tmp_25_fu_755_p4 = ap_const_lv8_FF) else "1";
    icmp_ln134_31_fu_793_p2 <= "1" when (trunc_ln134_14_fu_765_p1 = ap_const_lv23_0) else "0";
    icmp_ln134_32_fu_873_p2 <= "0" when (tmp_27_fu_842_p4 = ap_const_lv8_FF) else "1";
    icmp_ln134_33_fu_879_p2 <= "1" when (trunc_ln134_15_fu_852_p1 = ap_const_lv23_0) else "0";
    icmp_ln134_34_fu_891_p2 <= "0" when (tmp_28_fu_859_p4 = ap_const_lv8_FF) else "1";
    icmp_ln134_35_fu_897_p2 <= "1" when (trunc_ln134_16_fu_869_p1 = ap_const_lv23_0) else "0";
    icmp_ln134_36_fu_966_p2 <= "0" when (tmp_30_fu_935_p4 = ap_const_lv8_FF) else "1";
    icmp_ln134_37_fu_972_p2 <= "1" when (trunc_ln134_17_fu_945_p1 = ap_const_lv23_0) else "0";
    icmp_ln134_38_fu_984_p2 <= "0" when (tmp_31_fu_952_p4 = ap_const_lv8_FF) else "1";
    icmp_ln134_39_fu_990_p2 <= "1" when (trunc_ln134_18_fu_962_p1 = ap_const_lv23_0) else "0";
    icmp_ln134_fu_625_p2 <= "0" when (tmp_22_fu_611_p4 = ap_const_lv8_FF) else "1";
    ii_mid210_fu_303_p3 <= 
        ap_const_lv4_0 when (icmp_ln121_fu_297_p2(0) = '1') else 
        ap_phi_mux_ii_phi_fu_184_p4;
    iii_cast8_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln121_fu_421_p3),10));
    iii_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln121_fu_421_p3),12));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln133_7_fu_560_p1, ap_block_pp0_stage1, zext_ln133_9_fu_928_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln133_9_fu_928_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln133_7_fu_560_p1(12 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln133_fu_549_p1, zext_ln133_8_fu_828_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln133_8_fu_828_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln133_fu_549_p1(12 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul2212_fu_279_p2 <= std_logic_vector(unsigned(tmp_cast_fu_275_p1) + unsigned(p_shl_fu_237_p3));
    mul2212_mid126_fu_377_p2 <= std_logic_vector(unsigned(tmp_cast_mid124_fu_373_p1) + unsigned(p_shl_mid1_fu_343_p3));
    mul2212_mid1_fu_457_p2 <= std_logic_vector(unsigned(tmp_cast_mid1_fu_453_p1) + unsigned(p_shl_mid2_fu_351_p3));
    mul_ln121_1_fu_681_p0 <= mul_ln121_1_fu_681_p00(4 - 1 downto 0);
    mul_ln121_1_fu_681_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid116_fu_672_p2),7));
    mul_ln121_1_fu_681_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul_ln121_fu_661_p0 <= mul_ln121_fu_661_p00(4 - 1 downto 0);
    mul_ln121_fu_661_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_reg_1094),7));
    mul_ln121_fu_661_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul_ln121_mid2_fu_687_p3 <= 
        mul_ln121_1_fu_681_p2 when (icmp_ln121_reg_1034_pp0_iter1_reg(0) = '1') else 
        mul_ln121_fu_661_p2;
    not_exitcond_flatten_fu_391_p2 <= (icmp_ln121_fu_297_p2 xor ap_const_lv1_1);
    or_ln121_4_fu_501_p2 <= (select_ln121_12_fu_493_p3 or ap_const_lv7_1);
    or_ln121_fu_415_p2 <= (icmp_ln124_mid253_fu_403_p2 or icmp_ln121_fu_297_p2);
    or_ln134_13_fu_781_p2 <= (icmp_ln134_29_fu_775_p2 or icmp_ln134_28_fu_769_p2);
    or_ln134_14_fu_799_p2 <= (icmp_ln134_31_fu_793_p2 or icmp_ln134_30_fu_787_p2);
    or_ln134_15_fu_885_p2 <= (icmp_ln134_33_fu_879_p2 or icmp_ln134_32_fu_873_p2);
    or_ln134_16_fu_903_p2 <= (icmp_ln134_35_fu_897_p2 or icmp_ln134_34_fu_891_p2);
    or_ln134_17_fu_978_p2 <= (icmp_ln134_37_fu_972_p2 or icmp_ln134_36_fu_966_p2);
    or_ln134_18_fu_996_p2 <= (icmp_ln134_39_fu_990_p2 or icmp_ln134_38_fu_984_p2);
    or_ln134_fu_637_p2 <= (icmp_ln134_fu_625_p2 or icmp_ln134_27_fu_631_p2);
    output_r_address0 <= zext_ln140_fu_1021_p1(10 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        input_load_9_reg_1157 when (and_ln134_18_fu_1008_p2(0) = '1') else 
        select_ln134_8_reg_1145_pp0_iter3_reg;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln118_reg_1030_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln118_reg_1030_pp0_iter3_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid114_fu_359_p0 <= p_mid114_fu_359_p00(4 - 1 downto 0);
    p_mid114_fu_359_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11861_fu_311_p2),7));
    p_mid114_fu_359_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    p_mid116_fu_672_p2 <= (ap_const_lv4_1 or add_ln11861_reg_1042_pp0_iter1_reg);
    p_mid1_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_fu_433_p4),4));
    p_mid1_fu_433_p4 <= add_ln121_fu_409_p2(3 downto 1);
    p_mid213_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid213_fu_331_p3),4));
    p_mid213_fu_331_p3 <= 
        p_mid_fu_321_p4 when (icmp_ln121_fu_297_p2(0) = '1') else 
        tmp_33_fu_223_p4;
    p_mid215_fu_365_p3 <= 
        p_mid114_fu_359_p2 when (icmp_ln121_fu_297_p2(0) = '1') else 
        empty_fu_245_p2;
    p_mid_fu_321_p4 <= add_ln11861_fu_311_p2(3 downto 1);
    p_shl_fu_237_p3 <= (ap_phi_mux_i_phi_fu_160_p4 & ap_const_lv1_0);
    p_shl_mid1_fu_343_p3 <= (add_ln11861_fu_311_p2 & ap_const_lv1_0);
    p_shl_mid2_fu_351_p3 <= 
        p_shl_mid1_fu_343_p3 when (icmp_ln121_fu_297_p2(0) = '1') else 
        p_shl_fu_237_p3;
    select_ln118_fu_583_p3 <= 
        add_ln11861_reg_1042 when (icmp_ln121_reg_1034(0) = '1') else 
        i_reg_156;
    select_ln121_11_fu_471_p3 <= 
        mul2212_mid1_fu_457_p2 when (icmp_ln124_mid253_fu_403_p2(0) = '1') else 
        empty_39_fu_463_p3;
    select_ln121_12_fu_493_p3 <= 
        add_ln133_13_fu_487_p2 when (icmp_ln124_mid253_fu_403_p2(0) = '1') else 
        add_ln133_mid233_fu_383_p3;
    select_ln121_13_fu_706_p3 <= 
        add_ln133_15_fu_701_p2 when (icmp_ln124_mid253_reg_1048_pp0_iter1_reg(0) = '1') else 
        shl_ln133_4_mid245_v_v_fu_694_p3;
    select_ln121_14_fu_515_p3 <= 
        add_ln121_fu_409_p2 when (icmp_ln124_mid253_fu_403_p2(0) = '1') else 
        ii_mid210_fu_303_p3;
    select_ln121_15_fu_600_p3 <= 
        ap_const_lv9_1 when (icmp_ln121_reg_1034(0) = '1') else 
        add_ln121_5_fu_594_p2;
    select_ln121_fu_421_p3 <= 
        ap_const_lv6_0 when (or_ln121_fu_415_p2(0) = '1') else 
        ap_phi_mux_iii_phi_fu_195_p4;
    select_ln134_7_fu_817_p3 <= 
        input_load_7_reg_1104 when (and_ln134_14_fu_811_p2(0) = '1') else 
        select_ln134_reg_1121;
    select_ln134_8_fu_921_p3 <= 
        reg_213 when (and_ln134_16_fu_915_p2(0) = '1') else 
        select_ln134_7_reg_1128;
    select_ln134_fu_649_p3 <= 
        reg_213 when (and_ln134_fu_643_p2(0) = '1') else 
        ap_const_lv32_0;
    shl_ln133_4_mid245_v_v_fu_694_p3 <= 
        mul_ln121_1_fu_681_p2 when (icmp_ln121_reg_1034_pp0_iter1_reg(0) = '1') else 
        add_ln133_12_fu_667_p2;
    shl_ln133_4_mid2_fu_713_p3 <= (select_ln121_13_fu_706_p3 & ap_const_lv5_0);
    shl_ln133_5_mid2_fu_727_p3 <= (add_ln121_4_fu_721_p2 & ap_const_lv5_0);
    shl_ln133_mid2_fu_507_p3 <= (or_ln121_4_fu_501_p2 & ap_const_lv5_0);
    tmp_22_fu_611_p4 <= bitcast_ln134_fu_607_p1(30 downto 23);
    tmp_24_fu_738_p4 <= bitcast_ln134_13_fu_735_p1(30 downto 23);
    tmp_25_fu_755_p4 <= bitcast_ln134_14_fu_752_p1(30 downto 23);
    tmp_27_fu_842_p4 <= bitcast_ln134_15_fu_838_p1(30 downto 23);
    tmp_28_fu_859_p4 <= bitcast_ln134_16_fu_856_p1(30 downto 23);
    tmp_30_fu_935_p4 <= bitcast_ln134_17_fu_932_p1(30 downto 23);
    tmp_31_fu_952_p4 <= bitcast_ln134_18_fu_949_p1(30 downto 23);
    tmp_33_fu_223_p4 <= ap_phi_mux_i_phi_fu_160_p4(3 downto 1);
    tmp_34_fu_255_p4 <= ap_phi_mux_ii_phi_fu_184_p4(3 downto 1);
    tmp_36_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_223_p4),4));
    tmp_37_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_255_p4),4));
    tmp_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_269_p2),5));
    tmp_cast_mid124_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_321_p4),5));
    tmp_cast_mid1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid1_fu_447_p2),5));
    tmp_fu_269_p2 <= std_logic_vector(unsigned(tmp_36_cast_fu_233_p1) + unsigned(tmp_37_cast_fu_265_p1));
    tmp_mid1_fu_447_p2 <= std_logic_vector(unsigned(p_mid213_cast_fu_339_p1) + unsigned(p_mid1_cast_fu_443_p1));
    tmp_s_fu_531_p4 <= select_ln121_12_fu_493_p3(6 downto 1);
    trunc_ln134_13_fu_748_p1 <= bitcast_ln134_13_fu_735_p1(23 - 1 downto 0);
    trunc_ln134_14_fu_765_p1 <= bitcast_ln134_14_fu_752_p1(23 - 1 downto 0);
    trunc_ln134_15_fu_852_p1 <= bitcast_ln134_15_fu_838_p1(23 - 1 downto 0);
    trunc_ln134_16_fu_869_p1 <= bitcast_ln134_16_fu_856_p1(23 - 1 downto 0);
    trunc_ln134_17_fu_945_p1 <= bitcast_ln134_17_fu_932_p1(23 - 1 downto 0);
    trunc_ln134_18_fu_962_p1 <= bitcast_ln134_18_fu_949_p1(23 - 1 downto 0);
    trunc_ln134_fu_621_p1 <= bitcast_ln134_fu_607_p1(23 - 1 downto 0);
    zext_ln121_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ii_phi_fu_184_p4),7));
    zext_ln121_4_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_fu_409_p2),7));
    zext_ln133_7_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_14_fu_554_p2),64));
    zext_ln133_8_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_16_fu_823_p2),64));
    zext_ln133_9_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_17_reg_1140),64));
    zext_ln133_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_s_fu_541_p3),64));
    zext_ln140_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_reg_1084_pp0_iter3_reg),64));
end behav;

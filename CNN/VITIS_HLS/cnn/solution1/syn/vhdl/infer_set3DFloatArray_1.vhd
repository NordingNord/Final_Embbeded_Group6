-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_set3DFloatArray_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_we0 : OUT STD_LOGIC;
    array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of infer_set3DFloatArray_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln8_fu_123_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln8_4_fu_193_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln8_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_20_fu_245_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln12_fu_276_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln10_21_fu_288_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten17_reg_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_79 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_101 : STD_LOGIC_VECTOR (1 downto 0);
    signal iii_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_129_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_133_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_5_fu_187_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_fu_153_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln8_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_201_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_31_fu_221_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid1_fu_225_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln8_3_fu_161_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln10_19_fu_233_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln14_fu_253_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_fu_213_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_257_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln10_19_cast_fu_241_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln14_fu_265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln10_5_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_79 <= select_ln8_4_fu_193_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_79 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ii_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_reg_101 <= select_ln10_20_fu_245_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_101 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    iii_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iii_reg_112 <= add_ln12_fu_276_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_112 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten17_reg_68 <= add_ln8_fu_123_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten17_reg_68 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_90 <= select_ln10_21_fu_288_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_90 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_141_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_5_fu_282_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_90) + unsigned(ap_const_lv8_1));
    add_ln10_fu_201_p2 <= std_logic_vector(unsigned(select_ln8_fu_153_p3) + unsigned(ap_const_lv2_1));
    add_ln12_fu_276_p2 <= std_logic_vector(unsigned(select_ln10_fu_213_p3) + unsigned(ap_const_lv6_1));
    add_ln14_fu_265_p2 <= std_logic_vector(unsigned(tmp_fu_257_p3) + unsigned(select_ln10_19_cast_fu_241_p1));
    add_ln8_5_fu_187_p2 <= std_logic_vector(unsigned(i_reg_79) + unsigned(ap_const_lv2_1));
    add_ln8_fu_123_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_68) + unsigned(ap_const_lv8_1));
    and_ln8_fu_181_p2 <= (xor_ln8_fu_169_p2 and icmp_ln12_fu_175_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_r_address0 <= zext_ln14_fu_271_p1(7 - 1 downto 0);

    array_r_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_r_d0 <= ap_const_lv32_0;

    array_r_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_141_p2)
    begin
        if (((icmp_ln8_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            array_r_we0 <= ap_const_logic_1;
        else 
            array_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_31_fu_221_p1 <= add_ln10_fu_201_p2(1 - 1 downto 0);
    empty_fu_129_p1 <= ii_reg_101(1 - 1 downto 0);
    icmp_ln10_fu_147_p2 <= "1" when (indvar_flatten_reg_90 = ap_const_lv8_40) else "0";
    icmp_ln12_fu_175_p2 <= "1" when (iii_reg_112 = ap_const_lv6_20) else "0";
    icmp_ln8_fu_141_p2 <= "1" when (indvar_flatten17_reg_68 = ap_const_lv8_80) else "0";
    or_ln10_fu_207_p2 <= (icmp_ln10_fu_147_p2 or and_ln8_fu_181_p2);
    p_mid1_fu_225_p3 <= (empty_31_fu_221_p1 & ap_const_lv5_0);
    select_ln10_19_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_19_fu_233_p3),7));
    select_ln10_19_fu_233_p3 <= 
        p_mid1_fu_225_p3 when (and_ln8_fu_181_p2(0) = '1') else 
        select_ln8_3_fu_161_p3;
    select_ln10_20_fu_245_p3 <= 
        add_ln10_fu_201_p2 when (and_ln8_fu_181_p2(0) = '1') else 
        select_ln8_fu_153_p3;
    select_ln10_21_fu_288_p3 <= 
        ap_const_lv8_1 when (icmp_ln10_fu_147_p2(0) = '1') else 
        add_ln10_5_fu_282_p2;
    select_ln10_fu_213_p3 <= 
        ap_const_lv6_0 when (or_ln10_fu_207_p2(0) = '1') else 
        iii_reg_112;
    select_ln8_3_fu_161_p3 <= 
        ap_const_lv6_0 when (icmp_ln10_fu_147_p2(0) = '1') else 
        tmp_7_fu_133_p3;
    select_ln8_4_fu_193_p3 <= 
        add_ln8_5_fu_187_p2 when (icmp_ln10_fu_147_p2(0) = '1') else 
        i_reg_79;
    select_ln8_fu_153_p3 <= 
        ap_const_lv2_0 when (icmp_ln10_fu_147_p2(0) = '1') else 
        ii_reg_101;
    tmp_7_fu_133_p3 <= (empty_fu_129_p1 & ap_const_lv5_0);
    tmp_fu_257_p3 <= (trunc_ln14_fu_253_p1 & select_ln10_fu_213_p3);
    trunc_ln14_fu_253_p1 <= select_ln8_4_fu_193_p3(1 - 1 downto 0);
    xor_ln8_fu_169_p2 <= (icmp_ln10_fu_147_p2 xor ap_const_lv1_1);
    zext_ln14_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_265_p2),64));
end behav;

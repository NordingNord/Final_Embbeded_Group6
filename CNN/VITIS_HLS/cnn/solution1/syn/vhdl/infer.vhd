-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    infer_input_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    infer_input_V_empty_n : IN STD_LOGIC;
    infer_input_V_read : OUT STD_LOGIC;
    infer_output_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    infer_output_V_full_n : IN STD_LOGIC;
    infer_output_V_write : OUT STD_LOGIC );
end;


architecture behav of infer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "infer_infer,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.036000,HLS_SYN_LAT=4054532,HLS_SYN_TPT=none,HLS_SYN_MEM=104,HLS_SYN_DSP=0,HLS_SYN_FF=6155,HLS_SYN_LUT=11790,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage2 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage3 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_9_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer_9_bias_ce0 : STD_LOGIC;
    signal layer_9_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_9_weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer_9_weights_ce0 : STD_LOGIC;
    signal layer_9_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_10_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_10_bias_ce0 : STD_LOGIC;
    signal layer_10_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_10_weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer_10_weights_ce0 : STD_LOGIC;
    signal layer_10_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_11_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer_11_bias_ce0 : STD_LOGIC;
    signal layer_11_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_11_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_11_weights_ce0 : STD_LOGIC;
    signal layer_11_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal infer_input_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln197_reg_1523 : STD_LOGIC_VECTOR (0 downto 0);
    signal infer_output_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal icmp_ln298_reg_1830 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_422 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_422_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_422_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_422_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_422_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_422_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_reg_434 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_445 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_reg_456 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_4_reg_490 : STD_LOGIC_VECTOR (5 downto 0);
    signal add108_i_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_5_reg_534 : STD_LOGIC_VECTOR (6 downto 0);
    signal add108_i22667_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_6_reg_579 : STD_LOGIC_VECTOR (5 downto 0);
    signal add108_i22688_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_reg_659 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer_9_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_pp5_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage1 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state64_pp5_stage1_iter0 : BOOLEAN;
    signal ap_block_state68_pp5_stage1_iter1 : BOOLEAN;
    signal ap_block_state72_pp5_stage1_iter2 : BOOLEAN;
    signal ap_block_state76_pp5_stage1_iter3 : BOOLEAN;
    signal ap_block_pp5_stage1_11001 : BOOLEAN;
    signal icmp_ln159_1_reg_1679 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state41_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state49_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state53_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state57_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln159_reg_1614 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state63_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state67_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state71_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state75_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state79_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state85_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state89_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state93_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state97_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state101_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal icmp_ln159_2_reg_1754 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_state42_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state46_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_state50_pp3_stage1_iter2 : BOOLEAN;
    signal ap_block_state54_pp3_stage1_iter3 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal icmp_ln159_reg_1614_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage1 : signal is "none";
    signal ap_block_state86_pp7_stage1_iter0 : BOOLEAN;
    signal ap_block_state90_pp7_stage1_iter1 : BOOLEAN;
    signal ap_block_state94_pp7_stage1_iter2 : BOOLEAN;
    signal ap_block_state98_pp7_stage1_iter3 : BOOLEAN;
    signal ap_block_pp7_stage1_11001 : BOOLEAN;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal icmp_ln159_1_reg_1679_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal icmp_ln159_2_reg_1754_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_block_state43_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_state47_pp3_stage2_iter1 : BOOLEAN;
    signal ap_block_state51_pp3_stage2_iter2 : BOOLEAN;
    signal ap_block_state55_pp3_stage2_iter3 : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal ifzero_reg_1628 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1628_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage2 : signal is "none";
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_block_state65_pp5_stage2_iter0 : BOOLEAN;
    signal ap_block_state69_pp5_stage2_iter1 : BOOLEAN;
    signal ap_block_state73_pp5_stage2_iter2 : BOOLEAN;
    signal ap_block_state77_pp5_stage2_iter3 : BOOLEAN;
    signal ap_block_pp5_stage2_11001 : BOOLEAN;
    signal ifzero5_reg_1703 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero5_reg_1703_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage2 : signal is "none";
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal ap_block_state87_pp7_stage2_iter0 : BOOLEAN;
    signal ap_block_state91_pp7_stage2_iter1 : BOOLEAN;
    signal ap_block_state95_pp7_stage2_iter2 : BOOLEAN;
    signal ap_block_state99_pp7_stage2_iter3 : BOOLEAN;
    signal ap_block_pp7_stage2_11001 : BOOLEAN;
    signal ifzero9_reg_1768 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero9_reg_1768_pp7_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_10_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal add_ln197_fu_823_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln197_reg_1518 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln197_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_1523_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_1523_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_1523_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_1523_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_1523_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal single_pixel_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_1532 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_fu_840_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln31_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1542_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_2_fu_932_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal image_input_addr_1_reg_1551 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_addr_1_reg_1551_pp1_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_fu_955_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal image_input_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_input_load_reg_1562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal grp_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv12_i_reg_1567 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_fu_961_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal add_ln157_fu_978_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln157_reg_1580 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln157_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_9_output_addr_1_reg_1589 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln157_1_fu_996_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln157_1_reg_1599 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer_9_bias_load_reg_1604 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln159_fu_1000_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln159_reg_1609 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln159_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_reg_1614_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1628_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1628_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_7_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_1_fu_1096_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal add_ln157_1_fu_1113_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln157_1_reg_1650 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal icmp_ln157_1_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_10_output_addr_1_reg_1659 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln157_3_fu_1131_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln157_3_reg_1669 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer_10_bias_load_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln159_1_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_1679_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln159_1_fu_1168_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln159_1_reg_1698 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp5_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage3 : signal is "none";
    signal ap_block_state66_pp5_stage3_iter0 : BOOLEAN;
    signal ap_block_state70_pp5_stage3_iter1 : BOOLEAN;
    signal ap_block_state74_pp5_stage3_iter2 : BOOLEAN;
    signal ap_block_state78_pp5_stage3_iter3 : BOOLEAN;
    signal ap_block_pp5_stage3_11001 : BOOLEAN;
    signal ifzero5_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero5_reg_1703_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero5_reg_1703_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_2_fu_1231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal add_ln157_2_fu_1248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln157_2_reg_1715 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal icmp_ln157_2_fu_1254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_11_output_addr_1_reg_1724 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln157_5_fu_1266_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln157_5_reg_1734 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal layer_11_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_11_bias_load_reg_1744 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln159_2_fu_1270_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln159_2_reg_1749 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln159_2_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_2_reg_1754_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero9_fu_1309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero9_reg_1768_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero9_reg_1768_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_3_fu_1366_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal layer_12_output_0_1_fu_1416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_3_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_12_output_1_1_fu_1432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_2_1_fu_1440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_3_1_fu_1464_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_0_reg_1805 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal layer_12_output_1_reg_1810 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_2_reg_1815 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_3_reg_1820 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln298_fu_1488_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal ap_block_state106_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state107_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal icmp_ln298_fu_1494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln300_fu_1500_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln300_reg_1834 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp3_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage3 : signal is "none";
    signal ap_block_state44_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_state48_pp3_stage3_iter1 : BOOLEAN;
    signal ap_block_state52_pp3_stage3_iter2 : BOOLEAN;
    signal ap_block_state56_pp3_stage3_iter3 : BOOLEAN;
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter1_state46 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_block_pp5_stage3_subdone : BOOLEAN;
    signal ap_condition_pp5_flush_enable : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter1_state68 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp7_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage3 : signal is "none";
    signal ap_block_state88_pp7_stage3_iter0 : BOOLEAN;
    signal ap_block_state92_pp7_stage3_iter1 : BOOLEAN;
    signal ap_block_state96_pp7_stage3_iter2 : BOOLEAN;
    signal ap_block_state100_pp7_stage3_iter3 : BOOLEAN;
    signal ap_block_pp7_stage3_subdone : BOOLEAN;
    signal ap_condition_pp7_flush_enable : STD_LOGIC;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter1_state90 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal grp_dense_relu_fu_670_ap_ready : STD_LOGIC;
    signal grp_dense_relu_fu_670_ap_done : STD_LOGIC;
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state106 : STD_LOGIC;
    signal image_input_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_ce0 : STD_LOGIC;
    signal image_input_we0 : STD_LOGIC;
    signal image_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_input_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_input_ce1 : STD_LOGIC;
    signal layer_2_output_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal layer_2_output_ce0 : STD_LOGIC;
    signal layer_2_output_we0 : STD_LOGIC;
    signal layer_2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_2_output_ce1 : STD_LOGIC;
    signal layer_2_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_3_output_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer_3_output_ce0 : STD_LOGIC;
    signal layer_3_output_we0 : STD_LOGIC;
    signal layer_3_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_3_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_4_output_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer_4_output_ce0 : STD_LOGIC;
    signal layer_4_output_we0 : STD_LOGIC;
    signal layer_4_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_4_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_4_output_ce1 : STD_LOGIC;
    signal layer_4_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_5_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_5_output_ce0 : STD_LOGIC;
    signal layer_5_output_we0 : STD_LOGIC;
    signal layer_5_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_5_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_6_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_6_output_ce0 : STD_LOGIC;
    signal layer_6_output_we0 : STD_LOGIC;
    signal layer_6_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_6_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_6_output_ce1 : STD_LOGIC;
    signal layer_6_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_7_output_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_7_output_ce0 : STD_LOGIC;
    signal layer_7_output_we0 : STD_LOGIC;
    signal layer_7_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_9_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer_9_output_ce0 : STD_LOGIC;
    signal layer_9_output_we0 : STD_LOGIC;
    signal layer_9_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_10_output_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_10_output_ce0 : STD_LOGIC;
    signal layer_10_output_we0 : STD_LOGIC;
    signal layer_10_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_11_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer_11_output_ce0 : STD_LOGIC;
    signal layer_11_output_we0 : STD_LOGIC;
    signal layer_11_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_ap_start : STD_LOGIC;
    signal grp_dense_relu_fu_670_ap_idle : STD_LOGIC;
    signal grp_dense_relu_fu_670_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_relu_fu_670_input_r_ce0 : STD_LOGIC;
    signal grp_dense_relu_fu_670_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_763_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_763_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_763_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_763_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_763_p_ce : STD_LOGIC;
    signal grp_dense_relu_fu_670_grp_fu_770_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_770_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_770_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_770_p_ce : STD_LOGIC;
    signal grp_dense_relu_fu_670_grp_fu_788_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_788_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_788_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_788_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_relu_fu_670_grp_fu_788_p_ce : STD_LOGIC;
    signal grp_conv2d_2_fu_685_ap_start : STD_LOGIC;
    signal grp_conv2d_2_fu_685_ap_done : STD_LOGIC;
    signal grp_conv2d_2_fu_685_ap_idle : STD_LOGIC;
    signal grp_conv2d_2_fu_685_ap_ready : STD_LOGIC;
    signal grp_conv2d_2_fu_685_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv2d_2_fu_685_input_r_ce0 : STD_LOGIC;
    signal grp_conv2d_2_fu_685_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv2d_2_fu_685_output_r_ce0 : STD_LOGIC;
    signal grp_conv2d_2_fu_685_output_r_we0 : STD_LOGIC;
    signal grp_conv2d_2_fu_685_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_763_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_763_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_763_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_763_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_763_p_ce : STD_LOGIC;
    signal grp_conv2d_2_fu_685_grp_fu_770_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_770_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_770_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_770_p_ce : STD_LOGIC;
    signal grp_conv2d_2_fu_685_grp_fu_788_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_788_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_788_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_788_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2d_2_fu_685_grp_fu_788_p_ce : STD_LOGIC;
    signal grp_conv2d_1_fu_695_ap_start : STD_LOGIC;
    signal grp_conv2d_1_fu_695_ap_done : STD_LOGIC;
    signal grp_conv2d_1_fu_695_ap_idle : STD_LOGIC;
    signal grp_conv2d_1_fu_695_ap_ready : STD_LOGIC;
    signal grp_conv2d_1_fu_695_input_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv2d_1_fu_695_input_r_ce0 : STD_LOGIC;
    signal grp_conv2d_1_fu_695_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv2d_1_fu_695_output_r_ce0 : STD_LOGIC;
    signal grp_conv2d_1_fu_695_output_r_we0 : STD_LOGIC;
    signal grp_conv2d_1_fu_695_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_763_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_763_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_763_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_763_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_763_p_ce : STD_LOGIC;
    signal grp_conv2d_1_fu_695_grp_fu_770_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_770_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_770_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_770_p_ce : STD_LOGIC;
    signal grp_conv2d_1_fu_695_grp_fu_788_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_788_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_788_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_788_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2d_1_fu_695_grp_fu_788_p_ce : STD_LOGIC;
    signal grp_conv2d_fu_705_ap_start : STD_LOGIC;
    signal grp_conv2d_fu_705_ap_done : STD_LOGIC;
    signal grp_conv2d_fu_705_ap_idle : STD_LOGIC;
    signal grp_conv2d_fu_705_ap_ready : STD_LOGIC;
    signal grp_conv2d_fu_705_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv2d_fu_705_input_r_ce0 : STD_LOGIC;
    signal grp_conv2d_fu_705_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv2d_fu_705_output_r_ce0 : STD_LOGIC;
    signal grp_conv2d_fu_705_output_r_we0 : STD_LOGIC;
    signal grp_conv2d_fu_705_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_763_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_763_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_763_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2d_fu_705_grp_fu_763_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_763_p_ce : STD_LOGIC;
    signal grp_conv2d_fu_705_grp_fu_770_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_770_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_770_p_dout0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_770_p_ce : STD_LOGIC;
    signal grp_conv2d_fu_705_grp_fu_788_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_788_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_fu_705_grp_fu_788_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2d_fu_705_grp_fu_788_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2d_fu_705_grp_fu_788_p_ce : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_ap_start : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_ap_done : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_ap_idle : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_ap_ready : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_input_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pooling2d_2_fu_715_input_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_input_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pooling2d_2_fu_715_input_r_ce1 : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pooling2d_2_fu_715_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_788_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_788_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_788_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_788_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_788_p_ce : STD_LOGIC;
    signal grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_1839_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_1839_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pooling2d_2_fu_715_grp_fu_1839_p_ce : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_ap_start : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_ap_done : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_ap_idle : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_ap_ready : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_input_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pooling2d_1_fu_721_input_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_input_r_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pooling2d_1_fu_721_input_r_ce1 : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pooling2d_1_fu_721_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_788_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_788_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_788_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_788_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_788_p_ce : STD_LOGIC;
    signal grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_1839_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_1839_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pooling2d_1_fu_721_grp_fu_1839_p_ce : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_ap_start : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_ap_done : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_ap_idle : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_ap_ready : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_max_pooling2d_fu_727_input_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_input_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_max_pooling2d_fu_727_input_r_ce1 : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_max_pooling2d_fu_727_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_788_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_788_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_788_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_788_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_788_p_ce : STD_LOGIC;
    signal grp_max_pooling2d_fu_727_grp_fu_1839_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_1839_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_1839_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_1839_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pooling2d_fu_727_grp_fu_1839_p_ce : STD_LOGIC;
    signal grp_set3DFloatArray_5_fu_733_ap_start : STD_LOGIC;
    signal grp_set3DFloatArray_5_fu_733_ap_done : STD_LOGIC;
    signal grp_set3DFloatArray_5_fu_733_ap_idle : STD_LOGIC;
    signal grp_set3DFloatArray_5_fu_733_ap_ready : STD_LOGIC;
    signal grp_set3DFloatArray_5_fu_733_array_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_set3DFloatArray_5_fu_733_array_r_ce0 : STD_LOGIC;
    signal grp_set3DFloatArray_5_fu_733_array_r_we0 : STD_LOGIC;
    signal grp_set3DFloatArray_5_fu_733_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set3DFloatArray_3_fu_738_ap_start : STD_LOGIC;
    signal grp_set3DFloatArray_3_fu_738_ap_done : STD_LOGIC;
    signal grp_set3DFloatArray_3_fu_738_ap_idle : STD_LOGIC;
    signal grp_set3DFloatArray_3_fu_738_ap_ready : STD_LOGIC;
    signal grp_set3DFloatArray_3_fu_738_array_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_set3DFloatArray_3_fu_738_array_r_ce0 : STD_LOGIC;
    signal grp_set3DFloatArray_3_fu_738_array_r_we0 : STD_LOGIC;
    signal grp_set3DFloatArray_3_fu_738_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set3DFloatArray_4_fu_743_ap_start : STD_LOGIC;
    signal grp_set3DFloatArray_4_fu_743_ap_done : STD_LOGIC;
    signal grp_set3DFloatArray_4_fu_743_ap_idle : STD_LOGIC;
    signal grp_set3DFloatArray_4_fu_743_ap_ready : STD_LOGIC;
    signal grp_set3DFloatArray_4_fu_743_array_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_set3DFloatArray_4_fu_743_array_r_ce0 : STD_LOGIC;
    signal grp_set3DFloatArray_4_fu_743_array_r_we0 : STD_LOGIC;
    signal grp_set3DFloatArray_4_fu_743_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set3DFloatArray_2_fu_748_ap_start : STD_LOGIC;
    signal grp_set3DFloatArray_2_fu_748_ap_done : STD_LOGIC;
    signal grp_set3DFloatArray_2_fu_748_ap_idle : STD_LOGIC;
    signal grp_set3DFloatArray_2_fu_748_ap_ready : STD_LOGIC;
    signal grp_set3DFloatArray_2_fu_748_array_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_set3DFloatArray_2_fu_748_array_r_ce0 : STD_LOGIC;
    signal grp_set3DFloatArray_2_fu_748_array_r_we0 : STD_LOGIC;
    signal grp_set3DFloatArray_2_fu_748_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set3DFloatArray_1_fu_753_ap_start : STD_LOGIC;
    signal grp_set3DFloatArray_1_fu_753_ap_done : STD_LOGIC;
    signal grp_set3DFloatArray_1_fu_753_ap_idle : STD_LOGIC;
    signal grp_set3DFloatArray_1_fu_753_ap_ready : STD_LOGIC;
    signal grp_set3DFloatArray_1_fu_753_array_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_set3DFloatArray_1_fu_753_array_r_ce0 : STD_LOGIC;
    signal grp_set3DFloatArray_1_fu_753_array_r_we0 : STD_LOGIC;
    signal grp_set3DFloatArray_1_fu_753_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set3DFloatArray_fu_758_ap_start : STD_LOGIC;
    signal grp_set3DFloatArray_fu_758_ap_done : STD_LOGIC;
    signal grp_set3DFloatArray_fu_758_ap_idle : STD_LOGIC;
    signal grp_set3DFloatArray_fu_758_ap_ready : STD_LOGIC;
    signal grp_set3DFloatArray_fu_758_array_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_set3DFloatArray_fu_758_array_r_ce0 : STD_LOGIC;
    signal grp_set3DFloatArray_fu_758_array_r_we0 : STD_LOGIC;
    signal grp_set3DFloatArray_fu_758_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_phi_fu_426_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_467 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln22_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i_4_reg_478 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_phi_mux_ii_4_phi_fu_494_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_add108_i_phi_fu_504_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal i_5_reg_511 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln22_1_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_reg_522 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_phi_mux_ii_5_phi_fu_538_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_phi_mux_add108_i22667_phi_fu_549_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp5_stage1 : BOOLEAN;
    signal i_6_reg_556 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln22_2_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_reg_567 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_phi_mux_ii_6_phi_fu_583_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal ap_phi_mux_add108_i22688_phi_fu_593_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp7_stage1 : BOOLEAN;
    signal layer_12_output_3_0_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_2_0_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_1_0_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_12_output_0_0_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_648 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dense_relu_fu_670_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_conv2d_2_fu_685_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_conv2d_1_fu_695_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_conv2d_fu_705_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_max_pooling2d_2_fu_715_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_max_pooling2d_1_fu_721_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_max_pooling2d_fu_727_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_set3DFloatArray_5_fu_733_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_set3DFloatArray_3_fu_738_ap_start_reg : STD_LOGIC := '0';
    signal grp_set3DFloatArray_4_fu_743_ap_start_reg : STD_LOGIC := '0';
    signal grp_set3DFloatArray_2_fu_748_ap_start_reg : STD_LOGIC := '0';
    signal grp_set3DFloatArray_1_fu_753_ap_start_reg : STD_LOGIC := '0';
    signal grp_set3DFloatArray_fu_758_ap_start_reg : STD_LOGIC := '0';
    signal i_cast_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_4_cast_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln157_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ii_4_cast8_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_fu_1108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln157_2_fu_1125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ii_5_cast10_fu_1141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_1_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast_fu_1243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln157_4_fu_1260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ii_6_cast11_fu_1282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_2_fu_1304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp9_stage0_01001 : BOOLEAN;
    signal select_ln49_fu_1087_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_1_fu_1222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_2_fu_1357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_763_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal ap_block_pp5_stage2 : BOOLEAN;
    signal ap_block_pp7_stage2 : BOOLEAN;
    signal grp_fu_770_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_770_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage3 : BOOLEAN;
    signal ap_block_pp5_stage3 : BOOLEAN;
    signal ap_block_pp7_stage3 : BOOLEAN;
    signal p_shl1_fu_854_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_846_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl22625_cast_fu_862_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln33_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_1_fu_892_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl22625_mid1_fu_906_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid1_fu_898_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl22625_cast_mid1_fu_914_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid1_fu_918_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_38_fu_866_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_fu_884_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast_fu_940_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_1_fu_924_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_40_fu_944_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln161_fu_1017_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_1021_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln161_fu_1029_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln49_fu_1045_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1049_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_1059_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_1_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln161_1_fu_1146_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln161_1_fu_1150_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln161_1_fu_1158_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln49_1_fu_1180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_1184_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_1_fu_1194_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_3_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_2_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_1_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_1_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln161_2_fu_1287_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln161_2_fu_1291_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln161_2_fu_1299_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln49_2_fu_1315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_1319_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_2_fu_1329_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_5_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_4_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_2_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_2_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_fu_1378_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln24_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_1388_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_2_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_1_fu_1402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_2_fu_1424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_3_fu_1448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_4_fu_1456_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_1504_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_763_ce : STD_LOGIC;
    signal grp_fu_770_ce : STD_LOGIC;
    signal grp_fu_785_ce : STD_LOGIC;
    signal grp_fu_788_ce : STD_LOGIC;
    signal grp_fu_788_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp3_stage3_00001 : BOOLEAN;
    signal ap_block_pp5_stage3_00001 : BOOLEAN;
    signal ap_block_pp7_stage3_00001 : BOOLEAN;
    signal grp_fu_1839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1839_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1839_ce : STD_LOGIC;
    signal grp_fu_1839_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_block_state24_on_subcall_done : BOOLEAN;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal ap_block_pp5_stage1_subdone : BOOLEAN;
    signal ap_block_pp5_stage2_subdone : BOOLEAN;
    signal ap_block_pp7_stage1_subdone : BOOLEAN;
    signal ap_block_pp7_stage2_subdone : BOOLEAN;
    signal ap_block_pp7_stage3_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component infer_dense_relu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_ce : OUT STD_LOGIC;
        grp_fu_770_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_ce : OUT STD_LOGIC;
        grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_788_p_ce : OUT STD_LOGIC );
    end component;


    component infer_conv2d_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_ce : OUT STD_LOGIC;
        grp_fu_770_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_ce : OUT STD_LOGIC;
        grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_788_p_ce : OUT STD_LOGIC );
    end component;


    component infer_conv2d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_ce : OUT STD_LOGIC;
        grp_fu_770_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_ce : OUT STD_LOGIC;
        grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_788_p_ce : OUT STD_LOGIC );
    end component;


    component infer_conv2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_763_p_ce : OUT STD_LOGIC;
        grp_fu_770_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_770_p_ce : OUT STD_LOGIC;
        grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_788_p_ce : OUT STD_LOGIC );
    end component;


    component infer_max_pooling2d_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_788_p_ce : OUT STD_LOGIC;
        grp_fu_1839_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1839_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1839_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1839_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1839_p_ce : OUT STD_LOGIC );
    end component;


    component infer_max_pooling2d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_788_p_ce : OUT STD_LOGIC;
        grp_fu_1839_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1839_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1839_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1839_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1839_p_ce : OUT STD_LOGIC );
    end component;


    component infer_max_pooling2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_788_p_ce : OUT STD_LOGIC;
        grp_fu_1839_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1839_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1839_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1839_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1839_p_ce : OUT STD_LOGIC );
    end component;


    component infer_set3DFloatArray_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_set3DFloatArray_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_set3DFloatArray_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_set3DFloatArray_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_set3DFloatArray_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_set3DFloatArray IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fdiv_32ns_32ns_32_10_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_9_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_9_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_10_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_10_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_11_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_11_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_image_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_2_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_3_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_4_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_5_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_6_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_7_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_9_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_layer_11_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_9_bias_U : component infer_layer_9_bias
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_9_bias_address0,
        ce0 => layer_9_bias_ce0,
        q0 => layer_9_bias_q0);

    layer_9_weights_U : component infer_layer_9_weights
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_9_weights_address0,
        ce0 => layer_9_weights_ce0,
        q0 => layer_9_weights_q0);

    layer_10_bias_U : component infer_layer_10_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_10_bias_address0,
        ce0 => layer_10_bias_ce0,
        q0 => layer_10_bias_q0);

    layer_10_weights_U : component infer_layer_10_weights
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_10_weights_address0,
        ce0 => layer_10_weights_ce0,
        q0 => layer_10_weights_q0);

    layer_11_bias_U : component infer_layer_11_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_11_bias_address0,
        ce0 => layer_11_bias_ce0,
        q0 => layer_11_bias_q0);

    layer_11_weights_U : component infer_layer_11_weights
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_11_weights_address0,
        ce0 => layer_11_weights_ce0,
        q0 => layer_11_weights_q0);

    image_input_U : component infer_image_input
    generic map (
        DataWidth => 32,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_input_address0,
        ce0 => image_input_ce0,
        we0 => image_input_we0,
        d0 => image_input_d0,
        q0 => image_input_q0,
        address1 => image_input_address1,
        ce1 => image_input_ce1,
        q1 => image_input_q1);

    layer_2_output_U : component infer_layer_2_output
    generic map (
        DataWidth => 32,
        AddressRange => 15488,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_2_output_address0,
        ce0 => layer_2_output_ce0,
        we0 => layer_2_output_we0,
        d0 => layer_2_output_d0,
        q0 => layer_2_output_q0,
        address1 => grp_max_pooling2d_2_fu_715_input_r_address1,
        ce1 => layer_2_output_ce1,
        q1 => layer_2_output_q1);

    layer_3_output_U : component infer_layer_3_output
    generic map (
        DataWidth => 32,
        AddressRange => 3872,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_3_output_address0,
        ce0 => layer_3_output_ce0,
        we0 => layer_3_output_we0,
        d0 => layer_3_output_d0,
        q0 => layer_3_output_q0);

    layer_4_output_U : component infer_layer_4_output
    generic map (
        DataWidth => 32,
        AddressRange => 2592,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_4_output_address0,
        ce0 => layer_4_output_ce0,
        we0 => layer_4_output_we0,
        d0 => layer_4_output_d0,
        q0 => layer_4_output_q0,
        address1 => grp_max_pooling2d_1_fu_721_input_r_address1,
        ce1 => layer_4_output_ce1,
        q1 => layer_4_output_q1);

    layer_5_output_U : component infer_layer_5_output
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_5_output_address0,
        ce0 => layer_5_output_ce0,
        we0 => layer_5_output_we0,
        d0 => layer_5_output_d0,
        q0 => layer_5_output_q0);

    layer_6_output_U : component infer_layer_6_output
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_6_output_address0,
        ce0 => layer_6_output_ce0,
        we0 => layer_6_output_we0,
        d0 => layer_6_output_d0,
        q0 => layer_6_output_q0,
        address1 => grp_max_pooling2d_fu_727_input_r_address1,
        ce1 => layer_6_output_ce1,
        q1 => layer_6_output_q1);

    layer_7_output_U : component infer_layer_7_output
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_7_output_address0,
        ce0 => layer_7_output_ce0,
        we0 => layer_7_output_we0,
        d0 => layer_7_output_d0,
        q0 => layer_7_output_q0);

    layer_9_output_U : component infer_layer_9_output
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_9_output_address0,
        ce0 => layer_9_output_ce0,
        we0 => layer_9_output_we0,
        d0 => layer_9_output_d0,
        q0 => layer_9_output_q0);

    layer_10_output_U : component infer_layer_7_output
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_10_output_address0,
        ce0 => layer_10_output_ce0,
        we0 => layer_10_output_we0,
        d0 => layer_10_output_d0,
        q0 => layer_10_output_q0);

    layer_11_output_U : component infer_layer_11_output
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_11_output_address0,
        ce0 => layer_11_output_ce0,
        we0 => layer_11_output_we0,
        d0 => layer_11_output_d0,
        q0 => layer_11_output_q0);

    grp_dense_relu_fu_670 : component infer_dense_relu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_relu_fu_670_ap_start,
        ap_done => grp_dense_relu_fu_670_ap_done,
        ap_idle => grp_dense_relu_fu_670_ap_idle,
        ap_ready => grp_dense_relu_fu_670_ap_ready,
        input_r_address0 => grp_dense_relu_fu_670_input_r_address0,
        input_r_ce0 => grp_dense_relu_fu_670_input_r_ce0,
        input_r_q0 => layer_11_output_q0,
        output_0_read => layer_12_output_0_0_reg_636,
        output_1_read => layer_12_output_1_0_reg_624,
        output_2_read => layer_12_output_2_0_reg_612,
        output_3_read => layer_12_output_3_0_reg_600,
        ap_return_0 => grp_dense_relu_fu_670_ap_return_0,
        ap_return_1 => grp_dense_relu_fu_670_ap_return_1,
        ap_return_2 => grp_dense_relu_fu_670_ap_return_2,
        ap_return_3 => grp_dense_relu_fu_670_ap_return_3,
        grp_fu_763_p_din0 => grp_dense_relu_fu_670_grp_fu_763_p_din0,
        grp_fu_763_p_din1 => grp_dense_relu_fu_670_grp_fu_763_p_din1,
        grp_fu_763_p_opcode => grp_dense_relu_fu_670_grp_fu_763_p_opcode,
        grp_fu_763_p_dout0 => grp_dense_relu_fu_670_grp_fu_763_p_dout0,
        grp_fu_763_p_ce => grp_dense_relu_fu_670_grp_fu_763_p_ce,
        grp_fu_770_p_din0 => grp_dense_relu_fu_670_grp_fu_770_p_din0,
        grp_fu_770_p_din1 => grp_dense_relu_fu_670_grp_fu_770_p_din1,
        grp_fu_770_p_dout0 => grp_dense_relu_fu_670_grp_fu_770_p_dout0,
        grp_fu_770_p_ce => grp_dense_relu_fu_670_grp_fu_770_p_ce,
        grp_fu_788_p_din0 => grp_dense_relu_fu_670_grp_fu_788_p_din0,
        grp_fu_788_p_din1 => grp_dense_relu_fu_670_grp_fu_788_p_din1,
        grp_fu_788_p_opcode => grp_dense_relu_fu_670_grp_fu_788_p_opcode,
        grp_fu_788_p_dout0 => grp_dense_relu_fu_670_grp_fu_788_p_dout0,
        grp_fu_788_p_ce => grp_dense_relu_fu_670_grp_fu_788_p_ce);

    grp_conv2d_2_fu_685 : component infer_conv2d_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2d_2_fu_685_ap_start,
        ap_done => grp_conv2d_2_fu_685_ap_done,
        ap_idle => grp_conv2d_2_fu_685_ap_idle,
        ap_ready => grp_conv2d_2_fu_685_ap_ready,
        input_r_address0 => grp_conv2d_2_fu_685_input_r_address0,
        input_r_ce0 => grp_conv2d_2_fu_685_input_r_ce0,
        input_r_q0 => image_input_q0,
        output_r_address0 => grp_conv2d_2_fu_685_output_r_address0,
        output_r_ce0 => grp_conv2d_2_fu_685_output_r_ce0,
        output_r_we0 => grp_conv2d_2_fu_685_output_r_we0,
        output_r_d0 => grp_conv2d_2_fu_685_output_r_d0,
        output_r_q0 => layer_2_output_q0,
        grp_fu_763_p_din0 => grp_conv2d_2_fu_685_grp_fu_763_p_din0,
        grp_fu_763_p_din1 => grp_conv2d_2_fu_685_grp_fu_763_p_din1,
        grp_fu_763_p_opcode => grp_conv2d_2_fu_685_grp_fu_763_p_opcode,
        grp_fu_763_p_dout0 => grp_conv2d_2_fu_685_grp_fu_763_p_dout0,
        grp_fu_763_p_ce => grp_conv2d_2_fu_685_grp_fu_763_p_ce,
        grp_fu_770_p_din0 => grp_conv2d_2_fu_685_grp_fu_770_p_din0,
        grp_fu_770_p_din1 => grp_conv2d_2_fu_685_grp_fu_770_p_din1,
        grp_fu_770_p_dout0 => grp_conv2d_2_fu_685_grp_fu_770_p_dout0,
        grp_fu_770_p_ce => grp_conv2d_2_fu_685_grp_fu_770_p_ce,
        grp_fu_788_p_din0 => grp_conv2d_2_fu_685_grp_fu_788_p_din0,
        grp_fu_788_p_din1 => grp_conv2d_2_fu_685_grp_fu_788_p_din1,
        grp_fu_788_p_opcode => grp_conv2d_2_fu_685_grp_fu_788_p_opcode,
        grp_fu_788_p_dout0 => grp_conv2d_2_fu_685_grp_fu_788_p_dout0,
        grp_fu_788_p_ce => grp_conv2d_2_fu_685_grp_fu_788_p_ce);

    grp_conv2d_1_fu_695 : component infer_conv2d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2d_1_fu_695_ap_start,
        ap_done => grp_conv2d_1_fu_695_ap_done,
        ap_idle => grp_conv2d_1_fu_695_ap_idle,
        ap_ready => grp_conv2d_1_fu_695_ap_ready,
        input_r_address0 => grp_conv2d_1_fu_695_input_r_address0,
        input_r_ce0 => grp_conv2d_1_fu_695_input_r_ce0,
        input_r_q0 => layer_3_output_q0,
        output_r_address0 => grp_conv2d_1_fu_695_output_r_address0,
        output_r_ce0 => grp_conv2d_1_fu_695_output_r_ce0,
        output_r_we0 => grp_conv2d_1_fu_695_output_r_we0,
        output_r_d0 => grp_conv2d_1_fu_695_output_r_d0,
        output_r_q0 => layer_4_output_q0,
        grp_fu_763_p_din0 => grp_conv2d_1_fu_695_grp_fu_763_p_din0,
        grp_fu_763_p_din1 => grp_conv2d_1_fu_695_grp_fu_763_p_din1,
        grp_fu_763_p_opcode => grp_conv2d_1_fu_695_grp_fu_763_p_opcode,
        grp_fu_763_p_dout0 => grp_conv2d_1_fu_695_grp_fu_763_p_dout0,
        grp_fu_763_p_ce => grp_conv2d_1_fu_695_grp_fu_763_p_ce,
        grp_fu_770_p_din0 => grp_conv2d_1_fu_695_grp_fu_770_p_din0,
        grp_fu_770_p_din1 => grp_conv2d_1_fu_695_grp_fu_770_p_din1,
        grp_fu_770_p_dout0 => grp_conv2d_1_fu_695_grp_fu_770_p_dout0,
        grp_fu_770_p_ce => grp_conv2d_1_fu_695_grp_fu_770_p_ce,
        grp_fu_788_p_din0 => grp_conv2d_1_fu_695_grp_fu_788_p_din0,
        grp_fu_788_p_din1 => grp_conv2d_1_fu_695_grp_fu_788_p_din1,
        grp_fu_788_p_opcode => grp_conv2d_1_fu_695_grp_fu_788_p_opcode,
        grp_fu_788_p_dout0 => grp_conv2d_1_fu_695_grp_fu_788_p_dout0,
        grp_fu_788_p_ce => grp_conv2d_1_fu_695_grp_fu_788_p_ce);

    grp_conv2d_fu_705 : component infer_conv2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2d_fu_705_ap_start,
        ap_done => grp_conv2d_fu_705_ap_done,
        ap_idle => grp_conv2d_fu_705_ap_idle,
        ap_ready => grp_conv2d_fu_705_ap_ready,
        input_r_address0 => grp_conv2d_fu_705_input_r_address0,
        input_r_ce0 => grp_conv2d_fu_705_input_r_ce0,
        input_r_q0 => layer_5_output_q0,
        output_r_address0 => grp_conv2d_fu_705_output_r_address0,
        output_r_ce0 => grp_conv2d_fu_705_output_r_ce0,
        output_r_we0 => grp_conv2d_fu_705_output_r_we0,
        output_r_d0 => grp_conv2d_fu_705_output_r_d0,
        output_r_q0 => layer_6_output_q0,
        grp_fu_763_p_din0 => grp_conv2d_fu_705_grp_fu_763_p_din0,
        grp_fu_763_p_din1 => grp_conv2d_fu_705_grp_fu_763_p_din1,
        grp_fu_763_p_opcode => grp_conv2d_fu_705_grp_fu_763_p_opcode,
        grp_fu_763_p_dout0 => grp_conv2d_fu_705_grp_fu_763_p_dout0,
        grp_fu_763_p_ce => grp_conv2d_fu_705_grp_fu_763_p_ce,
        grp_fu_770_p_din0 => grp_conv2d_fu_705_grp_fu_770_p_din0,
        grp_fu_770_p_din1 => grp_conv2d_fu_705_grp_fu_770_p_din1,
        grp_fu_770_p_dout0 => grp_conv2d_fu_705_grp_fu_770_p_dout0,
        grp_fu_770_p_ce => grp_conv2d_fu_705_grp_fu_770_p_ce,
        grp_fu_788_p_din0 => grp_conv2d_fu_705_grp_fu_788_p_din0,
        grp_fu_788_p_din1 => grp_conv2d_fu_705_grp_fu_788_p_din1,
        grp_fu_788_p_opcode => grp_conv2d_fu_705_grp_fu_788_p_opcode,
        grp_fu_788_p_dout0 => grp_conv2d_fu_705_grp_fu_788_p_dout0,
        grp_fu_788_p_ce => grp_conv2d_fu_705_grp_fu_788_p_ce);

    grp_max_pooling2d_2_fu_715 : component infer_max_pooling2d_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pooling2d_2_fu_715_ap_start,
        ap_done => grp_max_pooling2d_2_fu_715_ap_done,
        ap_idle => grp_max_pooling2d_2_fu_715_ap_idle,
        ap_ready => grp_max_pooling2d_2_fu_715_ap_ready,
        input_r_address0 => grp_max_pooling2d_2_fu_715_input_r_address0,
        input_r_ce0 => grp_max_pooling2d_2_fu_715_input_r_ce0,
        input_r_q0 => layer_2_output_q0,
        input_r_address1 => grp_max_pooling2d_2_fu_715_input_r_address1,
        input_r_ce1 => grp_max_pooling2d_2_fu_715_input_r_ce1,
        input_r_q1 => layer_2_output_q1,
        output_r_address0 => grp_max_pooling2d_2_fu_715_output_r_address0,
        output_r_ce0 => grp_max_pooling2d_2_fu_715_output_r_ce0,
        output_r_we0 => grp_max_pooling2d_2_fu_715_output_r_we0,
        output_r_d0 => grp_max_pooling2d_2_fu_715_output_r_d0,
        grp_fu_788_p_din0 => grp_max_pooling2d_2_fu_715_grp_fu_788_p_din0,
        grp_fu_788_p_din1 => grp_max_pooling2d_2_fu_715_grp_fu_788_p_din1,
        grp_fu_788_p_opcode => grp_max_pooling2d_2_fu_715_grp_fu_788_p_opcode,
        grp_fu_788_p_dout0 => grp_max_pooling2d_2_fu_715_grp_fu_788_p_dout0,
        grp_fu_788_p_ce => grp_max_pooling2d_2_fu_715_grp_fu_788_p_ce,
        grp_fu_1839_p_din0 => grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din0,
        grp_fu_1839_p_din1 => grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din1,
        grp_fu_1839_p_opcode => grp_max_pooling2d_2_fu_715_grp_fu_1839_p_opcode,
        grp_fu_1839_p_dout0 => grp_max_pooling2d_2_fu_715_grp_fu_1839_p_dout0,
        grp_fu_1839_p_ce => grp_max_pooling2d_2_fu_715_grp_fu_1839_p_ce);

    grp_max_pooling2d_1_fu_721 : component infer_max_pooling2d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pooling2d_1_fu_721_ap_start,
        ap_done => grp_max_pooling2d_1_fu_721_ap_done,
        ap_idle => grp_max_pooling2d_1_fu_721_ap_idle,
        ap_ready => grp_max_pooling2d_1_fu_721_ap_ready,
        input_r_address0 => grp_max_pooling2d_1_fu_721_input_r_address0,
        input_r_ce0 => grp_max_pooling2d_1_fu_721_input_r_ce0,
        input_r_q0 => layer_4_output_q0,
        input_r_address1 => grp_max_pooling2d_1_fu_721_input_r_address1,
        input_r_ce1 => grp_max_pooling2d_1_fu_721_input_r_ce1,
        input_r_q1 => layer_4_output_q1,
        output_r_address0 => grp_max_pooling2d_1_fu_721_output_r_address0,
        output_r_ce0 => grp_max_pooling2d_1_fu_721_output_r_ce0,
        output_r_we0 => grp_max_pooling2d_1_fu_721_output_r_we0,
        output_r_d0 => grp_max_pooling2d_1_fu_721_output_r_d0,
        grp_fu_788_p_din0 => grp_max_pooling2d_1_fu_721_grp_fu_788_p_din0,
        grp_fu_788_p_din1 => grp_max_pooling2d_1_fu_721_grp_fu_788_p_din1,
        grp_fu_788_p_opcode => grp_max_pooling2d_1_fu_721_grp_fu_788_p_opcode,
        grp_fu_788_p_dout0 => grp_max_pooling2d_1_fu_721_grp_fu_788_p_dout0,
        grp_fu_788_p_ce => grp_max_pooling2d_1_fu_721_grp_fu_788_p_ce,
        grp_fu_1839_p_din0 => grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din0,
        grp_fu_1839_p_din1 => grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din1,
        grp_fu_1839_p_opcode => grp_max_pooling2d_1_fu_721_grp_fu_1839_p_opcode,
        grp_fu_1839_p_dout0 => grp_max_pooling2d_1_fu_721_grp_fu_1839_p_dout0,
        grp_fu_1839_p_ce => grp_max_pooling2d_1_fu_721_grp_fu_1839_p_ce);

    grp_max_pooling2d_fu_727 : component infer_max_pooling2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pooling2d_fu_727_ap_start,
        ap_done => grp_max_pooling2d_fu_727_ap_done,
        ap_idle => grp_max_pooling2d_fu_727_ap_idle,
        ap_ready => grp_max_pooling2d_fu_727_ap_ready,
        input_r_address0 => grp_max_pooling2d_fu_727_input_r_address0,
        input_r_ce0 => grp_max_pooling2d_fu_727_input_r_ce0,
        input_r_q0 => layer_6_output_q0,
        input_r_address1 => grp_max_pooling2d_fu_727_input_r_address1,
        input_r_ce1 => grp_max_pooling2d_fu_727_input_r_ce1,
        input_r_q1 => layer_6_output_q1,
        output_r_address0 => grp_max_pooling2d_fu_727_output_r_address0,
        output_r_ce0 => grp_max_pooling2d_fu_727_output_r_ce0,
        output_r_we0 => grp_max_pooling2d_fu_727_output_r_we0,
        output_r_d0 => grp_max_pooling2d_fu_727_output_r_d0,
        grp_fu_788_p_din0 => grp_max_pooling2d_fu_727_grp_fu_788_p_din0,
        grp_fu_788_p_din1 => grp_max_pooling2d_fu_727_grp_fu_788_p_din1,
        grp_fu_788_p_opcode => grp_max_pooling2d_fu_727_grp_fu_788_p_opcode,
        grp_fu_788_p_dout0 => grp_max_pooling2d_fu_727_grp_fu_788_p_dout0,
        grp_fu_788_p_ce => grp_max_pooling2d_fu_727_grp_fu_788_p_ce,
        grp_fu_1839_p_din0 => grp_max_pooling2d_fu_727_grp_fu_1839_p_din0,
        grp_fu_1839_p_din1 => grp_max_pooling2d_fu_727_grp_fu_1839_p_din1,
        grp_fu_1839_p_opcode => grp_max_pooling2d_fu_727_grp_fu_1839_p_opcode,
        grp_fu_1839_p_dout0 => grp_max_pooling2d_fu_727_grp_fu_1839_p_dout0,
        grp_fu_1839_p_ce => grp_max_pooling2d_fu_727_grp_fu_1839_p_ce);

    grp_set3DFloatArray_5_fu_733 : component infer_set3DFloatArray_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set3DFloatArray_5_fu_733_ap_start,
        ap_done => grp_set3DFloatArray_5_fu_733_ap_done,
        ap_idle => grp_set3DFloatArray_5_fu_733_ap_idle,
        ap_ready => grp_set3DFloatArray_5_fu_733_ap_ready,
        array_r_address0 => grp_set3DFloatArray_5_fu_733_array_r_address0,
        array_r_ce0 => grp_set3DFloatArray_5_fu_733_array_r_ce0,
        array_r_we0 => grp_set3DFloatArray_5_fu_733_array_r_we0,
        array_r_d0 => grp_set3DFloatArray_5_fu_733_array_r_d0);

    grp_set3DFloatArray_3_fu_738 : component infer_set3DFloatArray_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set3DFloatArray_3_fu_738_ap_start,
        ap_done => grp_set3DFloatArray_3_fu_738_ap_done,
        ap_idle => grp_set3DFloatArray_3_fu_738_ap_idle,
        ap_ready => grp_set3DFloatArray_3_fu_738_ap_ready,
        array_r_address0 => grp_set3DFloatArray_3_fu_738_array_r_address0,
        array_r_ce0 => grp_set3DFloatArray_3_fu_738_array_r_ce0,
        array_r_we0 => grp_set3DFloatArray_3_fu_738_array_r_we0,
        array_r_d0 => grp_set3DFloatArray_3_fu_738_array_r_d0);

    grp_set3DFloatArray_4_fu_743 : component infer_set3DFloatArray_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set3DFloatArray_4_fu_743_ap_start,
        ap_done => grp_set3DFloatArray_4_fu_743_ap_done,
        ap_idle => grp_set3DFloatArray_4_fu_743_ap_idle,
        ap_ready => grp_set3DFloatArray_4_fu_743_ap_ready,
        array_r_address0 => grp_set3DFloatArray_4_fu_743_array_r_address0,
        array_r_ce0 => grp_set3DFloatArray_4_fu_743_array_r_ce0,
        array_r_we0 => grp_set3DFloatArray_4_fu_743_array_r_we0,
        array_r_d0 => grp_set3DFloatArray_4_fu_743_array_r_d0);

    grp_set3DFloatArray_2_fu_748 : component infer_set3DFloatArray_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set3DFloatArray_2_fu_748_ap_start,
        ap_done => grp_set3DFloatArray_2_fu_748_ap_done,
        ap_idle => grp_set3DFloatArray_2_fu_748_ap_idle,
        ap_ready => grp_set3DFloatArray_2_fu_748_ap_ready,
        array_r_address0 => grp_set3DFloatArray_2_fu_748_array_r_address0,
        array_r_ce0 => grp_set3DFloatArray_2_fu_748_array_r_ce0,
        array_r_we0 => grp_set3DFloatArray_2_fu_748_array_r_we0,
        array_r_d0 => grp_set3DFloatArray_2_fu_748_array_r_d0);

    grp_set3DFloatArray_1_fu_753 : component infer_set3DFloatArray_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set3DFloatArray_1_fu_753_ap_start,
        ap_done => grp_set3DFloatArray_1_fu_753_ap_done,
        ap_idle => grp_set3DFloatArray_1_fu_753_ap_idle,
        ap_ready => grp_set3DFloatArray_1_fu_753_ap_ready,
        array_r_address0 => grp_set3DFloatArray_1_fu_753_array_r_address0,
        array_r_ce0 => grp_set3DFloatArray_1_fu_753_array_r_ce0,
        array_r_we0 => grp_set3DFloatArray_1_fu_753_array_r_we0,
        array_r_d0 => grp_set3DFloatArray_1_fu_753_array_r_d0);

    grp_set3DFloatArray_fu_758 : component infer_set3DFloatArray
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set3DFloatArray_fu_758_ap_start,
        ap_done => grp_set3DFloatArray_fu_758_ap_done,
        ap_idle => grp_set3DFloatArray_fu_758_ap_idle,
        ap_ready => grp_set3DFloatArray_fu_758_ap_ready,
        array_r_address0 => grp_set3DFloatArray_fu_758_array_r_address0,
        array_r_ce0 => grp_set3DFloatArray_fu_758_array_r_ce0,
        array_r_we0 => grp_set3DFloatArray_fu_758_array_r_we0,
        array_r_d0 => grp_set3DFloatArray_fu_758_array_r_d0);

    fadd_32ns_32ns_32_5_full_dsp_1_U72 : component infer_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_763_p0,
        din1 => grp_fu_763_p1,
        ce => grp_fu_763_ce,
        dout => grp_fu_763_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U73 : component infer_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_770_p0,
        din1 => grp_fu_770_p1,
        ce => grp_fu_770_ce,
        dout => grp_fu_770_p2);

    fdiv_32ns_32ns_32_10_no_dsp_1_U74 : component infer_fdiv_32ns_32ns_32_10_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => image_input_load_reg_1562,
        din1 => ap_const_lv32_437F0000,
        ce => ap_const_logic_1,
        dout => grp_fu_780_p2);

    sitofp_32ns_32_4_no_dsp_1_U75 : component infer_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => single_pixel_reg_1527,
        ce => grp_fu_785_ce,
        dout => grp_fu_785_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U76 : component infer_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_788_p0,
        din1 => grp_fu_788_p1,
        ce => grp_fu_788_ce,
        opcode => grp_fu_788_opcode,
        dout => grp_fu_788_p2);

    mux_42_32_1_1_U77 : component infer_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => layer_12_output_0_reg_1805,
        din1 => layer_12_output_1_reg_1810,
        din2 => layer_12_output_2_reg_1815,
        din3 => layer_12_output_3_reg_1820,
        din4 => trunc_ln300_reg_1834,
        dout => tmp_42_fu_1504_p6);

    fcmp_32ns_32ns_1_2_no_dsp_1_U78 : component infer_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1839_p0,
        din1 => grp_fu_1839_p1,
        ce => grp_fu_1839_ce,
        opcode => grp_fu_1839_opcode,
        dout => grp_fu_1839_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_subdone))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter1_state46)) then 
                        ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_subdone))) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_subdone)))) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp5_flush_enable)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_subdone))) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter1_state68)) then 
                        ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_subdone))) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_subdone)))) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp7_flush_enable)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3_subdone))) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter1_state90)) then 
                        ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3_subdone))) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3_subdone)))) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                    ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state106) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif (((grp_dense_relu_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state106) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then 
                    ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state106);
                elsif ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                elsif (((grp_dense_relu_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then 
                    ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2d_1_fu_695_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2d_1_fu_695_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    grp_conv2d_1_fu_695_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2d_1_fu_695_ap_ready = ap_const_logic_1)) then 
                    grp_conv2d_1_fu_695_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2d_2_fu_685_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2d_2_fu_685_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_conv2d_2_fu_685_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2d_2_fu_685_ap_ready = ap_const_logic_1)) then 
                    grp_conv2d_2_fu_685_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2d_fu_705_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2d_fu_705_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_conv2d_fu_705_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2d_fu_705_ap_ready = ap_const_logic_1)) then 
                    grp_conv2d_fu_705_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_relu_fu_670_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_relu_fu_670_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                    grp_dense_relu_fu_670_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_relu_fu_670_ap_ready = ap_const_logic_1)) then 
                    grp_dense_relu_fu_670_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2d_1_fu_721_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pooling2d_1_fu_721_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_max_pooling2d_1_fu_721_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2d_1_fu_721_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2d_1_fu_721_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2d_2_fu_715_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pooling2d_2_fu_715_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    grp_max_pooling2d_2_fu_715_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2d_2_fu_715_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2d_2_fu_715_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2d_fu_727_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pooling2d_fu_727_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_max_pooling2d_fu_727_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2d_fu_727_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2d_fu_727_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set3DFloatArray_1_fu_753_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set3DFloatArray_1_fu_753_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_set3DFloatArray_1_fu_753_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set3DFloatArray_1_fu_753_ap_ready = ap_const_logic_1)) then 
                    grp_set3DFloatArray_1_fu_753_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set3DFloatArray_2_fu_748_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set3DFloatArray_2_fu_748_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_set3DFloatArray_2_fu_748_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set3DFloatArray_2_fu_748_ap_ready = ap_const_logic_1)) then 
                    grp_set3DFloatArray_2_fu_748_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set3DFloatArray_3_fu_738_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set3DFloatArray_3_fu_738_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_set3DFloatArray_3_fu_738_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set3DFloatArray_3_fu_738_ap_ready = ap_const_logic_1)) then 
                    grp_set3DFloatArray_3_fu_738_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set3DFloatArray_4_fu_743_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set3DFloatArray_4_fu_743_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_set3DFloatArray_4_fu_743_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set3DFloatArray_4_fu_743_ap_ready = ap_const_logic_1)) then 
                    grp_set3DFloatArray_4_fu_743_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set3DFloatArray_5_fu_733_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set3DFloatArray_5_fu_733_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_set3DFloatArray_5_fu_733_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set3DFloatArray_5_fu_733_ap_ready = ap_const_logic_1)) then 
                    grp_set3DFloatArray_5_fu_733_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set3DFloatArray_fu_758_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set3DFloatArray_fu_758_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_set3DFloatArray_fu_758_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set3DFloatArray_fu_758_ap_ready = ap_const_logic_1)) then 
                    grp_set3DFloatArray_fu_758_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add108_i22667_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                add108_i22667_reg_546 <= layer_10_output_q0;
            elsif (((icmp_ln159_1_reg_1679_pp5_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1_11001))) then 
                add108_i22667_reg_546 <= grp_fu_763_p2;
            end if; 
        end if;
    end process;

    add108_i22688_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                add108_i22688_reg_590 <= layer_11_output_q0;
            elsif (((icmp_ln159_2_reg_1754_pp7_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1_11001))) then 
                add108_i22688_reg_590 <= grp_fu_763_p2;
            end if; 
        end if;
    end process;

    add108_i_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                add108_i_reg_501 <= layer_9_output_q0;
            elsif (((icmp_ln159_reg_1614_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then 
                add108_i_reg_501 <= grp_fu_763_p2;
            end if; 
        end if;
    end process;

    i_10_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                i_10_reg_567 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                i_10_reg_567 <= add_ln157_2_reg_1715;
            end if; 
        end if;
    end process;

    i_2_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_2_reg_445 <= ap_const_lv5_0;
            elsif (((icmp_ln31_fu_872_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_2_reg_445 <= select_ln31_2_fu_932_p3;
            end if; 
        end if;
    end process;

    i_3_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_max_pooling2d_fu_727_ap_done = ap_const_logic_1))) then 
                i_3_reg_467 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln22_fu_967_p2 = ap_const_lv1_0))) then 
                i_3_reg_467 <= add_ln22_fu_961_p2;
            end if; 
        end if;
    end process;

    i_4_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i_4_reg_478 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_4_reg_478 <= add_ln157_reg_1580;
            end if; 
        end if;
    end process;

    i_5_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_984_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i_5_reg_511 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln22_1_fu_1102_p2 = ap_const_lv1_0))) then 
                i_5_reg_511 <= add_ln22_1_fu_1096_p2;
            end if; 
        end if;
    end process;

    i_6_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_1_fu_1119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                i_6_reg_556 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state81) and (icmp_ln22_2_fu_1237_p2 = ap_const_lv1_0))) then 
                i_6_reg_556 <= add_ln22_2_fu_1231_p2;
            end if; 
        end if;
    end process;

    i_7_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_2_fu_1254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                i_7_reg_648 <= ap_const_lv3_0;
            elsif (((icmp_ln22_3_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
                i_7_reg_648 <= add_ln22_3_fu_1366_p2;
            end if; 
        end if;
    end process;

    i_8_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_dense_relu_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then 
                i_8_reg_659 <= ap_const_lv3_0;
            elsif (((icmp_ln298_fu_1494_p2 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
                i_8_reg_659 <= add_ln298_fu_1488_p2;
            end if; 
        end if;
    end process;

    i_9_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                i_9_reg_522 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                i_9_reg_522 <= add_ln157_1_reg_1650;
            end if; 
        end if;
    end process;

    i_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_422 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln197_reg_1523 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_422 <= add_ln197_reg_1518;
            end if; 
        end if;
    end process;

    ii_4_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                ii_4_reg_490 <= ap_const_lv6_0;
            elsif (((icmp_ln159_reg_1614 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                ii_4_reg_490 <= add_ln159_reg_1609;
            end if; 
        end if;
    end process;

    ii_5_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                ii_5_reg_534 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln159_1_reg_1679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                ii_5_reg_534 <= add_ln159_1_reg_1698;
            end if; 
        end if;
    end process;

    ii_6_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                ii_6_reg_579 <= ap_const_lv6_0;
            elsif (((icmp_ln159_2_reg_1754 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                ii_6_reg_579 <= add_ln159_2_reg_1749;
            end if; 
        end if;
    end process;

    ii_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ii_reg_456 <= ap_const_lv5_0;
            elsif (((icmp_ln31_fu_872_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                ii_reg_456 <= add_ln33_fu_955_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten_reg_434 <= ap_const_lv10_0;
            elsif (((icmp_ln31_fu_872_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_434 <= add_ln31_fu_840_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                add_ln157_1_reg_1650 <= add_ln157_1_fu_1113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                add_ln157_2_reg_1715 <= add_ln157_2_fu_1248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                add_ln157_reg_1580 <= add_ln157_fu_978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_11001))) then
                add_ln159_1_reg_1698 <= add_ln159_1_fu_1168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                add_ln159_2_reg_1749 <= add_ln159_2_fu_1270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln159_reg_1609 <= add_ln159_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln197_reg_1518 <= add_ln197_fu_823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1542_pp1_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                conv12_i_reg_1567 <= grp_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln197_reg_1523_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_reg_1532 <= grp_fu_785_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_422_pp0_iter1_reg <= i_reg_422;
                icmp_ln197_reg_1523 <= icmp_ln197_fu_829_p2;
                icmp_ln197_reg_1523_pp0_iter1_reg <= icmp_ln197_reg_1523;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_reg_422_pp0_iter2_reg <= i_reg_422_pp0_iter1_reg;
                i_reg_422_pp0_iter3_reg <= i_reg_422_pp0_iter2_reg;
                i_reg_422_pp0_iter4_reg <= i_reg_422_pp0_iter3_reg;
                i_reg_422_pp0_iter5_reg <= i_reg_422_pp0_iter4_reg;
                icmp_ln197_reg_1523_pp0_iter2_reg <= icmp_ln197_reg_1523_pp0_iter1_reg;
                icmp_ln197_reg_1523_pp0_iter3_reg <= icmp_ln197_reg_1523_pp0_iter2_reg;
                icmp_ln197_reg_1523_pp0_iter4_reg <= icmp_ln197_reg_1523_pp0_iter3_reg;
                icmp_ln197_reg_1523_pp0_iter5_reg <= icmp_ln197_reg_1523_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                icmp_ln159_1_reg_1679 <= icmp_ln159_1_fu_1135_p2;
                icmp_ln159_1_reg_1679_pp5_iter1_reg <= icmp_ln159_1_reg_1679;
                icmp_ln159_1_reg_1679_pp5_iter2_reg <= icmp_ln159_1_reg_1679_pp5_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                icmp_ln159_2_reg_1754 <= icmp_ln159_2_fu_1276_p2;
                icmp_ln159_2_reg_1754_pp7_iter1_reg <= icmp_ln159_2_reg_1754;
                icmp_ln159_2_reg_1754_pp7_iter2_reg <= icmp_ln159_2_reg_1754_pp7_iter1_reg;
                ifzero9_reg_1768_pp7_iter1_reg <= ifzero9_reg_1768;
                ifzero9_reg_1768_pp7_iter2_reg <= ifzero9_reg_1768_pp7_iter1_reg;
                ifzero9_reg_1768_pp7_iter3_reg <= ifzero9_reg_1768_pp7_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln159_reg_1614 <= icmp_ln159_fu_1006_p2;
                icmp_ln159_reg_1614_pp3_iter1_reg <= icmp_ln159_reg_1614;
                icmp_ln159_reg_1614_pp3_iter2_reg <= icmp_ln159_reg_1614_pp3_iter1_reg;
                ifzero_reg_1628_pp3_iter1_reg <= ifzero_reg_1628;
                ifzero_reg_1628_pp3_iter2_reg <= ifzero_reg_1628_pp3_iter1_reg;
                ifzero_reg_1628_pp3_iter3_reg <= ifzero_reg_1628_pp3_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                icmp_ln298_reg_1830 <= icmp_ln298_fu_1494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln31_reg_1542 <= icmp_ln31_fu_872_p2;
                icmp_ln31_reg_1542_pp1_iter1_reg <= icmp_ln31_reg_1542;
                image_input_addr_1_reg_1551_pp1_iter1_reg <= image_input_addr_1_reg_1551;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln31_reg_1542_pp1_iter10_reg <= icmp_ln31_reg_1542_pp1_iter9_reg;
                icmp_ln31_reg_1542_pp1_iter11_reg <= icmp_ln31_reg_1542_pp1_iter10_reg;
                icmp_ln31_reg_1542_pp1_iter2_reg <= icmp_ln31_reg_1542_pp1_iter1_reg;
                icmp_ln31_reg_1542_pp1_iter3_reg <= icmp_ln31_reg_1542_pp1_iter2_reg;
                icmp_ln31_reg_1542_pp1_iter4_reg <= icmp_ln31_reg_1542_pp1_iter3_reg;
                icmp_ln31_reg_1542_pp1_iter5_reg <= icmp_ln31_reg_1542_pp1_iter4_reg;
                icmp_ln31_reg_1542_pp1_iter6_reg <= icmp_ln31_reg_1542_pp1_iter5_reg;
                icmp_ln31_reg_1542_pp1_iter7_reg <= icmp_ln31_reg_1542_pp1_iter6_reg;
                icmp_ln31_reg_1542_pp1_iter8_reg <= icmp_ln31_reg_1542_pp1_iter7_reg;
                icmp_ln31_reg_1542_pp1_iter9_reg <= icmp_ln31_reg_1542_pp1_iter8_reg;
                image_input_addr_1_reg_1551_pp1_iter10_reg <= image_input_addr_1_reg_1551_pp1_iter9_reg;
                image_input_addr_1_reg_1551_pp1_iter11_reg <= image_input_addr_1_reg_1551_pp1_iter10_reg;
                image_input_addr_1_reg_1551_pp1_iter2_reg <= image_input_addr_1_reg_1551_pp1_iter1_reg;
                image_input_addr_1_reg_1551_pp1_iter3_reg <= image_input_addr_1_reg_1551_pp1_iter2_reg;
                image_input_addr_1_reg_1551_pp1_iter4_reg <= image_input_addr_1_reg_1551_pp1_iter3_reg;
                image_input_addr_1_reg_1551_pp1_iter5_reg <= image_input_addr_1_reg_1551_pp1_iter4_reg;
                image_input_addr_1_reg_1551_pp1_iter6_reg <= image_input_addr_1_reg_1551_pp1_iter5_reg;
                image_input_addr_1_reg_1551_pp1_iter7_reg <= image_input_addr_1_reg_1551_pp1_iter6_reg;
                image_input_addr_1_reg_1551_pp1_iter8_reg <= image_input_addr_1_reg_1551_pp1_iter7_reg;
                image_input_addr_1_reg_1551_pp1_iter9_reg <= image_input_addr_1_reg_1551_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_1_reg_1679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_11001))) then
                ifzero5_reg_1703 <= ifzero5_fu_1174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_11001))) then
                ifzero5_reg_1703_pp5_iter1_reg <= ifzero5_reg_1703;
                ifzero5_reg_1703_pp5_iter2_reg <= ifzero5_reg_1703_pp5_iter1_reg;
                ifzero5_reg_1703_pp5_iter3_reg <= ifzero5_reg_1703_pp5_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_2_fu_1276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                ifzero9_reg_1768 <= ifzero9_fu_1309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_fu_1006_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                ifzero_reg_1628 <= ifzero_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_872_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                image_input_addr_1_reg_1551 <= zext_ln37_fu_950_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln31_reg_1542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                image_input_load_reg_1562 <= image_input_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                layer_10_bias_load_reg_1674 <= layer_10_bias_q0;
                    zext_ln157_3_reg_1669(5 downto 0) <= zext_ln157_3_fu_1131_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_1_fu_1119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                layer_10_output_addr_1_reg_1659 <= zext_ln157_2_fu_1125_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                layer_11_bias_load_reg_1744 <= layer_11_bias_q0;
                    zext_ln157_5_reg_1734(4 downto 0) <= zext_ln157_5_fu_1266_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_2_fu_1254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                layer_11_output_addr_1_reg_1724 <= zext_ln157_4_fu_1260_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_3_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                layer_12_output_0_0_reg_636 <= layer_12_output_0_1_fu_1416_p3;
                layer_12_output_1_0_reg_624 <= layer_12_output_1_1_fu_1432_p3;
                layer_12_output_2_0_reg_612 <= layer_12_output_2_1_fu_1440_p3;
                layer_12_output_3_0_reg_600 <= layer_12_output_3_1_fu_1464_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                layer_12_output_0_reg_1805 <= grp_dense_relu_fu_670_ap_return_0;
                layer_12_output_1_reg_1810 <= grp_dense_relu_fu_670_ap_return_1;
                layer_12_output_2_reg_1815 <= grp_dense_relu_fu_670_ap_return_2;
                layer_12_output_3_reg_1820 <= grp_dense_relu_fu_670_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                layer_9_bias_load_reg_1604 <= layer_9_bias_q0;
                    zext_ln157_1_reg_1599(6 downto 0) <= zext_ln157_1_fu_996_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_984_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                layer_9_output_addr_1_reg_1589 <= zext_ln157_fu_990_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln159_2_reg_1754 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln159_1_reg_1679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((icmp_ln159_reg_1614 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then
                reg_799 <= grp_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln159_2_reg_1754_pp7_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1_11001)) or ((icmp_ln159_1_reg_1679_pp5_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1_11001)) or ((icmp_ln159_reg_1614_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)))) then
                reg_804 <= grp_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ifzero9_reg_1768_pp7_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage2) and (ap_const_boolean_0 = ap_block_pp7_stage2_11001)) or ((ifzero5_reg_1703_pp5_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_const_boolean_0 = ap_block_pp5_stage2_11001)) or ((ifzero_reg_1628_pp3_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)))) then
                reg_812 <= grp_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln197_reg_1523 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                single_pixel_reg_1527 <= infer_input_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln298_fu_1494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                trunc_ln300_reg_1834 <= trunc_ln300_fu_1500_p1;
            end if;
        end if;
    end process;
    zext_ln157_1_reg_1599(10 downto 7) <= "0000";
    zext_ln157_3_reg_1669(10 downto 6) <= "00000";
    zext_ln157_5_reg_1734(8 downto 5) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp5_stage1, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter2, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp7_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter0, ap_enable_reg_pp0_iter0, icmp_ln197_fu_829_p2, ap_enable_reg_pp1_iter0, icmp_ln31_fu_872_p2, ap_enable_reg_pp1_iter1, ap_CS_fsm_state37, ap_CS_fsm_state39, icmp_ln157_fu_984_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state59, ap_CS_fsm_state61, icmp_ln157_1_fu_1119_p2, ap_CS_fsm_state81, ap_CS_fsm_state83, icmp_ln157_2_fu_1254_p2, ap_CS_fsm_state103, icmp_ln22_3_fu_1372_p2, ap_CS_fsm_state105, ap_enable_reg_pp9_iter0, icmp_ln298_fu_1494_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_block_pp3_stage3_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter4, ap_block_pp5_stage3_subdone, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter4, ap_block_pp7_stage3_subdone, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter4, grp_dense_relu_fu_670_ap_done, ap_block_pp9_stage0_subdone, grp_conv2d_2_fu_685_ap_done, grp_conv2d_1_fu_695_ap_done, grp_conv2d_fu_705_ap_done, grp_max_pooling2d_2_fu_715_ap_done, grp_max_pooling2d_1_fu_721_ap_done, grp_max_pooling2d_fu_727_ap_done, icmp_ln22_fu_967_p2, ap_CS_fsm_state36, icmp_ln22_1_fu_1102_p2, icmp_ln22_2_fu_1237_p2, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state24, ap_block_state24_on_subcall_done, ap_block_pp3_stage1_subdone, ap_block_pp3_stage2_subdone, ap_block_pp5_stage1_subdone, ap_block_pp5_stage2_subdone, ap_block_pp7_stage1_subdone, ap_block_pp7_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln197_fu_829_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln197_fu_829_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln31_fu_872_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln31_fu_872_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_conv2d_2_fu_685_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_max_pooling2d_2_fu_715_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_conv2d_1_fu_695_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_max_pooling2d_1_fu_721_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_conv2d_fu_705_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_max_pooling2d_fu_727_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln22_fu_967_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((icmp_ln157_fu_984_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln22_1_fu_1102_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((icmp_ln157_1_fu_1119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage1;
                elsif (((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_pp5_stage1 => 
                if ((not(((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp5_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage2;
                elsif (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage1;
                end if;
            when ap_ST_fsm_pp5_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp5_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage2;
                end if;
            when ap_ST_fsm_pp5_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp5_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage3;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (icmp_ln22_2_fu_1237_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                if (((icmp_ln157_2_fu_1254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage1;
                elsif (((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_pp7_stage1 => 
                if ((not(((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage2;
                elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage1;
                end if;
            when ap_ST_fsm_pp7_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp7_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage2;
                end if;
            when ap_ST_fsm_pp7_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp7_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage3;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state103 => 
                if (((icmp_ln22_3_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                if (((grp_dense_relu_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_pp9_stage0 => 
                if (not(((icmp_ln298_fu_1494_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif (((icmp_ln298_fu_1494_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln157_1_fu_1113_p2 <= std_logic_vector(unsigned(i_9_reg_522) + unsigned(ap_const_lv6_1));
    add_ln157_2_fu_1248_p2 <= std_logic_vector(unsigned(i_10_reg_567) + unsigned(ap_const_lv5_1));
    add_ln157_fu_978_p2 <= std_logic_vector(unsigned(i_4_reg_478) + unsigned(ap_const_lv7_1));
    add_ln159_1_fu_1168_p2 <= std_logic_vector(unsigned(ii_5_reg_534) + unsigned(ap_const_lv7_1));
    add_ln159_2_fu_1270_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_6_phi_fu_583_p4) + unsigned(ap_const_lv6_1));
    add_ln159_fu_1000_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_4_phi_fu_494_p4) + unsigned(ap_const_lv6_1));
    add_ln161_1_fu_1158_p2 <= std_logic_vector(unsigned(shl_ln161_1_fu_1150_p3) + unsigned(zext_ln157_3_reg_1669));
    add_ln161_2_fu_1299_p2 <= std_logic_vector(unsigned(shl_ln161_2_fu_1291_p3) + unsigned(zext_ln157_5_reg_1734));
    add_ln161_fu_1029_p2 <= std_logic_vector(unsigned(shl_ln_fu_1021_p3) + unsigned(zext_ln157_1_reg_1599));
    add_ln197_fu_823_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_426_p4) + unsigned(ap_const_lv10_1));
    add_ln22_1_fu_1096_p2 <= std_logic_vector(unsigned(i_5_reg_511) + unsigned(ap_const_lv6_1));
    add_ln22_2_fu_1231_p2 <= std_logic_vector(unsigned(i_6_reg_556) + unsigned(ap_const_lv5_1));
    add_ln22_3_fu_1366_p2 <= std_logic_vector(unsigned(i_7_reg_648) + unsigned(ap_const_lv3_1));
    add_ln22_fu_961_p2 <= std_logic_vector(unsigned(i_3_reg_467) + unsigned(ap_const_lv7_1));
    add_ln298_fu_1488_p2 <= std_logic_vector(unsigned(i_8_reg_659) + unsigned(ap_const_lv3_1));
    add_ln31_1_fu_892_p2 <= std_logic_vector(unsigned(i_2_reg_445) + unsigned(ap_const_lv5_1));
    add_ln31_fu_840_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_434) + unsigned(ap_const_lv10_1));
    add_ln33_fu_955_p2 <= std_logic_vector(unsigned(select_ln31_fu_884_p3) + unsigned(ap_const_lv5_1));
    and_ln49_1_fu_1216_p2 <= (or_ln49_1_fu_1210_p2 and grp_fu_788_p2);
    and_ln49_2_fu_1351_p2 <= (or_ln49_2_fu_1345_p2 and grp_fu_788_p2);
    and_ln49_fu_1081_p2 <= (or_ln49_fu_1075_p2 and grp_fu_788_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage3 <= ap_CS_fsm(25);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp5_stage1 <= ap_CS_fsm(32);
    ap_CS_fsm_pp5_stage2 <= ap_CS_fsm(33);
    ap_CS_fsm_pp5_stage3 <= ap_CS_fsm(34);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_pp7_stage1 <= ap_CS_fsm(41);
    ap_CS_fsm_pp7_stage2 <= ap_CS_fsm(42);
    ap_CS_fsm_pp7_stage3 <= ap_CS_fsm(43);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(48);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state102 <= ap_CS_fsm(44);
    ap_CS_fsm_state103 <= ap_CS_fsm(45);
    ap_CS_fsm_state104 <= ap_CS_fsm(46);
    ap_CS_fsm_state105 <= ap_CS_fsm(47);
    ap_CS_fsm_state108 <= ap_CS_fsm(49);
    ap_CS_fsm_state23 <= ap_CS_fsm(4);
    ap_CS_fsm_state24 <= ap_CS_fsm(5);
    ap_CS_fsm_state25 <= ap_CS_fsm(6);
    ap_CS_fsm_state26 <= ap_CS_fsm(7);
    ap_CS_fsm_state27 <= ap_CS_fsm(8);
    ap_CS_fsm_state28 <= ap_CS_fsm(9);
    ap_CS_fsm_state29 <= ap_CS_fsm(10);
    ap_CS_fsm_state30 <= ap_CS_fsm(11);
    ap_CS_fsm_state31 <= ap_CS_fsm(12);
    ap_CS_fsm_state32 <= ap_CS_fsm(13);
    ap_CS_fsm_state33 <= ap_CS_fsm(14);
    ap_CS_fsm_state34 <= ap_CS_fsm(15);
    ap_CS_fsm_state35 <= ap_CS_fsm(16);
    ap_CS_fsm_state36 <= ap_CS_fsm(17);
    ap_CS_fsm_state37 <= ap_CS_fsm(18);
    ap_CS_fsm_state38 <= ap_CS_fsm(19);
    ap_CS_fsm_state39 <= ap_CS_fsm(20);
    ap_CS_fsm_state40 <= ap_CS_fsm(21);
    ap_CS_fsm_state58 <= ap_CS_fsm(26);
    ap_CS_fsm_state59 <= ap_CS_fsm(27);
    ap_CS_fsm_state60 <= ap_CS_fsm(28);
    ap_CS_fsm_state61 <= ap_CS_fsm(29);
    ap_CS_fsm_state62 <= ap_CS_fsm(30);
    ap_CS_fsm_state80 <= ap_CS_fsm(35);
    ap_CS_fsm_state81 <= ap_CS_fsm(36);
    ap_CS_fsm_state82 <= ap_CS_fsm(37);
    ap_CS_fsm_state83 <= ap_CS_fsm(38);
    ap_CS_fsm_state84 <= ap_CS_fsm(39);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(infer_input_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln197_reg_1523)
    begin
                ap_block_pp0_stage0_11001 <= ((infer_input_V_empty_n = ap_const_logic_0) and (icmp_ln197_reg_1523 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(infer_input_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln197_reg_1523)
    begin
                ap_block_pp0_stage0_subdone <= ((infer_input_V_empty_n = ap_const_logic_0) and (icmp_ln197_reg_1523 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp9_stage0_01001_assign_proc : process(infer_output_V_full_n, ap_enable_reg_pp9_iter1, icmp_ln298_reg_1830)
    begin
                ap_block_pp9_stage0_01001 <= ((infer_output_V_full_n = ap_const_logic_0) and (icmp_ln298_reg_1830 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp9_stage0_11001_assign_proc : process(infer_output_V_full_n, ap_enable_reg_pp9_iter1, icmp_ln298_reg_1830)
    begin
                ap_block_pp9_stage0_11001 <= ((infer_output_V_full_n = ap_const_logic_0) and (icmp_ln298_reg_1830 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp9_stage0_subdone_assign_proc : process(infer_output_V_full_n, ap_enable_reg_pp9_iter1, icmp_ln298_reg_1830)
    begin
                ap_block_pp9_stage0_subdone <= ((infer_output_V_full_n = ap_const_logic_0) and (icmp_ln298_reg_1830 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1));
    end process;

        ap_block_state100_pp7_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp7_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state107_pp9_stage0_iter1_assign_proc : process(infer_output_V_full_n, icmp_ln298_reg_1830)
    begin
                ap_block_state107_pp9_stage0_iter1 <= ((infer_output_V_full_n = ap_const_logic_0) and (icmp_ln298_reg_1830 = ap_const_lv1_0));
    end process;

        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_on_subcall_done_assign_proc : process(grp_set3DFloatArray_5_fu_733_ap_done, grp_set3DFloatArray_3_fu_738_ap_done, grp_set3DFloatArray_4_fu_743_ap_done, grp_set3DFloatArray_2_fu_748_ap_done, grp_set3DFloatArray_1_fu_753_ap_done, grp_set3DFloatArray_fu_758_ap_done)
    begin
                ap_block_state24_on_subcall_done <= ((grp_set3DFloatArray_fu_758_ap_done = ap_const_logic_0) or (grp_set3DFloatArray_1_fu_753_ap_done = ap_const_logic_0) or (grp_set3DFloatArray_2_fu_748_ap_done = ap_const_logic_0) or (grp_set3DFloatArray_4_fu_743_ap_done = ap_const_logic_0) or (grp_set3DFloatArray_3_fu_738_ap_done = ap_const_logic_0) or (grp_set3DFloatArray_5_fu_733_ap_done = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(infer_input_V_empty_n, icmp_ln197_reg_1523)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((infer_input_V_empty_n = ap_const_logic_0) and (icmp_ln197_reg_1523 = ap_const_lv1_0));
    end process;

        ap_block_state41_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp3_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp3_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp3_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp3_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp3_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp3_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp3_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp3_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp5_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp5_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp5_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp5_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp5_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp5_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp5_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp5_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp5_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp5_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp5_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp5_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp7_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp7_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp7_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp7_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp7_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp7_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp7_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp7_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp7_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp7_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp7_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln197_fu_829_p2)
    begin
        if ((icmp_ln197_fu_829_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln31_fu_872_p2)
    begin
        if ((icmp_ln31_fu_872_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter1_state46_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            ap_condition_pp3_exit_iter1_state46 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter1_state46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(icmp_ln159_reg_1614, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_subdone)
    begin
        if (((icmp_ln159_reg_1614 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_subdone))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter1_state68_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_condition_pp5_exit_iter1_state68 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter1_state68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_flush_enable_assign_proc : process(icmp_ln159_1_reg_1679, ap_CS_fsm_pp5_stage3, ap_block_pp5_stage3_subdone)
    begin
        if (((icmp_ln159_1_reg_1679 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_subdone))) then 
            ap_condition_pp5_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp5_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter1_state90_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
            ap_condition_pp7_exit_iter1_state90 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter1_state90 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_flush_enable_assign_proc : process(icmp_ln159_2_reg_1754, ap_CS_fsm_pp7_stage3, ap_block_pp7_stage3_subdone)
    begin
        if (((icmp_ln159_2_reg_1754 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3_subdone))) then 
            ap_condition_pp7_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp7_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state106_assign_proc : process(icmp_ln298_fu_1494_p2)
    begin
        if ((icmp_ln298_fu_1494_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state106 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state106 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter4)
    begin
        if (((ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter4)
    begin
        if (((ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter4)
    begin
        if (((ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter1, ap_enable_reg_pp9_iter0)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add108_i22667_phi_fu_549_p4_assign_proc : process(add108_i22667_reg_546, ap_CS_fsm_pp5_stage1, grp_fu_763_p2, ap_enable_reg_pp5_iter2, icmp_ln159_1_reg_1679_pp5_iter2_reg, ap_block_pp5_stage1)
    begin
        if (((icmp_ln159_1_reg_1679_pp5_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1))) then 
            ap_phi_mux_add108_i22667_phi_fu_549_p4 <= grp_fu_763_p2;
        else 
            ap_phi_mux_add108_i22667_phi_fu_549_p4 <= add108_i22667_reg_546;
        end if; 
    end process;


    ap_phi_mux_add108_i22688_phi_fu_593_p4_assign_proc : process(add108_i22688_reg_590, grp_fu_763_p2, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp7_iter2, icmp_ln159_2_reg_1754_pp7_iter2_reg, ap_block_pp7_stage1)
    begin
        if (((icmp_ln159_2_reg_1754_pp7_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1))) then 
            ap_phi_mux_add108_i22688_phi_fu_593_p4 <= grp_fu_763_p2;
        else 
            ap_phi_mux_add108_i22688_phi_fu_593_p4 <= add108_i22688_reg_590;
        end if; 
    end process;


    ap_phi_mux_add108_i_phi_fu_504_p4_assign_proc : process(add108_i_reg_501, grp_fu_763_p2, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter2, icmp_ln159_reg_1614_pp3_iter2_reg, ap_block_pp3_stage1)
    begin
        if (((icmp_ln159_reg_1614_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            ap_phi_mux_add108_i_phi_fu_504_p4 <= grp_fu_763_p2;
        else 
            ap_phi_mux_add108_i_phi_fu_504_p4 <= add108_i_reg_501;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_426_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln197_reg_1523, i_reg_422, add_ln197_reg_1518)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln197_reg_1523 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_426_p4 <= add_ln197_reg_1518;
        else 
            ap_phi_mux_i_phi_fu_426_p4 <= i_reg_422;
        end if; 
    end process;


    ap_phi_mux_ii_4_phi_fu_494_p4_assign_proc : process(ii_4_reg_490, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln159_reg_1614, add_ln159_reg_1609, ap_block_pp3_stage0)
    begin
        if (((icmp_ln159_reg_1614 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_ii_4_phi_fu_494_p4 <= add_ln159_reg_1609;
        else 
            ap_phi_mux_ii_4_phi_fu_494_p4 <= ii_4_reg_490;
        end if; 
    end process;


    ap_phi_mux_ii_5_phi_fu_538_p4_assign_proc : process(ii_5_reg_534, icmp_ln159_1_reg_1679, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, add_ln159_1_reg_1698, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln159_1_reg_1679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_ii_5_phi_fu_538_p4 <= add_ln159_1_reg_1698;
        else 
            ap_phi_mux_ii_5_phi_fu_538_p4 <= ii_5_reg_534;
        end if; 
    end process;


    ap_phi_mux_ii_6_phi_fu_583_p4_assign_proc : process(ii_6_reg_579, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, icmp_ln159_2_reg_1754, add_ln159_2_reg_1749, ap_block_pp7_stage0)
    begin
        if (((icmp_ln159_2_reg_1754 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            ap_phi_mux_ii_6_phi_fu_583_p4 <= add_ln159_2_reg_1749;
        else 
            ap_phi_mux_ii_6_phi_fu_583_p4 <= ii_6_reg_579;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_1_fu_1180_p1 <= reg_812;
    bitcast_ln49_2_fu_1315_p1 <= reg_812;
    bitcast_ln49_fu_1045_p1 <= reg_812;
    empty_38_fu_866_p2 <= std_logic_vector(unsigned(p_shl_fu_846_p3) - unsigned(p_shl22625_cast_fu_862_p1));
    empty_40_fu_944_p2 <= std_logic_vector(unsigned(ii_cast_fu_940_p1) + unsigned(select_ln31_1_fu_924_p3));
    grp_conv2d_1_fu_695_ap_start <= grp_conv2d_1_fu_695_ap_start_reg;
    grp_conv2d_1_fu_695_grp_fu_763_p_dout0 <= grp_fu_763_p2;
    grp_conv2d_1_fu_695_grp_fu_770_p_dout0 <= grp_fu_770_p2;
    grp_conv2d_1_fu_695_grp_fu_788_p_dout0 <= grp_fu_788_p2;
    grp_conv2d_2_fu_685_ap_start <= grp_conv2d_2_fu_685_ap_start_reg;
    grp_conv2d_2_fu_685_grp_fu_763_p_dout0 <= grp_fu_763_p2;
    grp_conv2d_2_fu_685_grp_fu_770_p_dout0 <= grp_fu_770_p2;
    grp_conv2d_2_fu_685_grp_fu_788_p_dout0 <= grp_fu_788_p2;
    grp_conv2d_fu_705_ap_start <= grp_conv2d_fu_705_ap_start_reg;
    grp_conv2d_fu_705_grp_fu_763_p_dout0 <= grp_fu_763_p2;
    grp_conv2d_fu_705_grp_fu_770_p_dout0 <= grp_fu_770_p2;
    grp_conv2d_fu_705_grp_fu_788_p_dout0 <= grp_fu_788_p2;
    grp_dense_relu_fu_670_ap_start <= grp_dense_relu_fu_670_ap_start_reg;
    grp_dense_relu_fu_670_grp_fu_763_p_dout0 <= grp_fu_763_p2;
    grp_dense_relu_fu_670_grp_fu_770_p_dout0 <= grp_fu_770_p2;
    grp_dense_relu_fu_670_grp_fu_788_p_dout0 <= grp_fu_788_p2;

    grp_fu_1839_ce_assign_proc : process(grp_max_pooling2d_2_fu_715_grp_fu_1839_p_ce, grp_max_pooling2d_1_fu_721_grp_fu_1839_p_ce, grp_max_pooling2d_fu_727_grp_fu_1839_p_ce, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_1839_ce <= grp_max_pooling2d_fu_727_grp_fu_1839_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_1839_ce <= grp_max_pooling2d_1_fu_721_grp_fu_1839_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_1839_ce <= grp_max_pooling2d_2_fu_715_grp_fu_1839_p_ce;
        else 
            grp_fu_1839_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1839_opcode_assign_proc : process(grp_max_pooling2d_2_fu_715_grp_fu_1839_p_opcode, grp_max_pooling2d_1_fu_721_grp_fu_1839_p_opcode, grp_max_pooling2d_fu_727_grp_fu_1839_p_opcode, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_1839_opcode <= grp_max_pooling2d_fu_727_grp_fu_1839_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_1839_opcode <= grp_max_pooling2d_1_fu_721_grp_fu_1839_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_1839_opcode <= grp_max_pooling2d_2_fu_715_grp_fu_1839_p_opcode;
        end if; 
    end process;


    grp_fu_1839_p0_assign_proc : process(grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din0, grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din0, grp_max_pooling2d_fu_727_grp_fu_1839_p_din0, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_1839_p0 <= grp_max_pooling2d_fu_727_grp_fu_1839_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_1839_p0 <= grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_1839_p0 <= grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din0;
        end if; 
    end process;


    grp_fu_1839_p1_assign_proc : process(grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din1, grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din1, grp_max_pooling2d_fu_727_grp_fu_1839_p_din1, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_1839_p1 <= grp_max_pooling2d_fu_727_grp_fu_1839_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_1839_p1 <= grp_max_pooling2d_1_fu_721_grp_fu_1839_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_1839_p1 <= grp_max_pooling2d_2_fu_715_grp_fu_1839_p_din1;
        end if; 
    end process;


    grp_fu_763_ce_assign_proc : process(ap_CS_fsm_state105, grp_dense_relu_fu_670_grp_fu_763_p_ce, grp_conv2d_2_fu_685_grp_fu_763_p_ce, grp_conv2d_1_fu_695_grp_fu_763_p_ce, grp_conv2d_fu_705_grp_fu_763_p_ce, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_763_ce <= grp_conv2d_fu_705_grp_fu_763_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_763_ce <= grp_conv2d_1_fu_695_grp_fu_763_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_763_ce <= grp_conv2d_2_fu_685_grp_fu_763_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_763_ce <= grp_dense_relu_fu_670_grp_fu_763_p_ce;
        else 
            grp_fu_763_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_763_p0_assign_proc : process(ap_CS_fsm_pp5_stage1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1, reg_804, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter2, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp7_iter2, ap_CS_fsm_pp3_stage2, ap_CS_fsm_pp5_stage2, ap_CS_fsm_pp7_stage2, ap_CS_fsm_state105, grp_dense_relu_fu_670_grp_fu_763_p_din0, grp_conv2d_2_fu_685_grp_fu_763_p_din0, grp_conv2d_1_fu_695_grp_fu_763_p_din0, grp_conv2d_fu_705_grp_fu_763_p_din0, ap_phi_mux_add108_i_phi_fu_504_p4, ap_block_pp3_stage1, ap_phi_mux_add108_i22667_phi_fu_549_p4, ap_block_pp5_stage1, ap_phi_mux_add108_i22688_phi_fu_593_p4, ap_block_pp7_stage1, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_block_pp3_stage2, ap_block_pp5_stage2, ap_block_pp7_stage2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_763_p0 <= grp_conv2d_fu_705_grp_fu_763_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_763_p0 <= grp_conv2d_1_fu_695_grp_fu_763_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_763_p0 <= grp_conv2d_2_fu_685_grp_fu_763_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_763_p0 <= grp_dense_relu_fu_670_grp_fu_763_p_din0;
        elsif (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1))) then 
            grp_fu_763_p0 <= ap_phi_mux_add108_i22688_phi_fu_593_p4;
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1))) then 
            grp_fu_763_p0 <= ap_phi_mux_add108_i22667_phi_fu_549_p4;
        elsif ((((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage2) and (ap_const_boolean_0 = ap_block_pp7_stage2)) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_const_boolean_0 = ap_block_pp5_stage2)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2)))) then 
            grp_fu_763_p0 <= reg_804;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            grp_fu_763_p0 <= ap_phi_mux_add108_i_phi_fu_504_p4;
        else 
            grp_fu_763_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_763_p1_assign_proc : process(ap_CS_fsm_pp5_stage1, reg_799, ap_enable_reg_pp3_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter1, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter2, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp7_iter2, ap_CS_fsm_pp3_stage2, ap_CS_fsm_pp5_stage2, ap_CS_fsm_pp7_stage2, layer_9_bias_load_reg_1604, layer_10_bias_load_reg_1674, layer_11_bias_load_reg_1744, ap_CS_fsm_state105, grp_dense_relu_fu_670_grp_fu_763_p_din1, grp_conv2d_2_fu_685_grp_fu_763_p_din1, grp_conv2d_1_fu_695_grp_fu_763_p_din1, grp_conv2d_fu_705_grp_fu_763_p_din1, ap_block_pp3_stage1, ap_block_pp5_stage1, ap_block_pp7_stage1, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_block_pp3_stage2, ap_block_pp5_stage2, ap_block_pp7_stage2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_763_p1 <= grp_conv2d_fu_705_grp_fu_763_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_763_p1 <= grp_conv2d_1_fu_695_grp_fu_763_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_763_p1 <= grp_conv2d_2_fu_685_grp_fu_763_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_763_p1 <= grp_dense_relu_fu_670_grp_fu_763_p_din1;
        elsif (((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage2) and (ap_const_boolean_0 = ap_block_pp7_stage2))) then 
            grp_fu_763_p1 <= layer_11_bias_load_reg_1744;
        elsif (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage2) and (ap_const_boolean_0 = ap_block_pp5_stage2))) then 
            grp_fu_763_p1 <= layer_10_bias_load_reg_1674;
        elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            grp_fu_763_p1 <= layer_9_bias_load_reg_1604;
        elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1)))) then 
            grp_fu_763_p1 <= reg_799;
        else 
            grp_fu_763_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_770_ce_assign_proc : process(ap_CS_fsm_state105, grp_dense_relu_fu_670_grp_fu_770_p_ce, grp_conv2d_2_fu_685_grp_fu_770_p_ce, grp_conv2d_1_fu_695_grp_fu_770_p_ce, grp_conv2d_fu_705_grp_fu_770_p_ce, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_770_ce <= grp_conv2d_fu_705_grp_fu_770_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_770_ce <= grp_conv2d_1_fu_695_grp_fu_770_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_770_ce <= grp_conv2d_2_fu_685_grp_fu_770_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_770_ce <= grp_dense_relu_fu_670_grp_fu_770_p_ce;
        else 
            grp_fu_770_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_770_p0_assign_proc : process(layer_9_output_q0, ap_CS_fsm_pp5_stage1, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp7_stage1, layer_10_output_q0, ap_enable_reg_pp7_iter0, ap_enable_reg_pp3_iter0, layer_7_output_q0, ap_CS_fsm_state105, grp_dense_relu_fu_670_grp_fu_770_p_din0, grp_conv2d_2_fu_685_grp_fu_770_p_din0, grp_conv2d_1_fu_695_grp_fu_770_p_din0, grp_conv2d_fu_705_grp_fu_770_p_din0, ap_block_pp3_stage1, ap_block_pp5_stage1, ap_block_pp7_stage1, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_770_p0 <= grp_conv2d_fu_705_grp_fu_770_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_770_p0 <= grp_conv2d_1_fu_695_grp_fu_770_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_770_p0 <= grp_conv2d_2_fu_685_grp_fu_770_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_770_p0 <= grp_dense_relu_fu_670_grp_fu_770_p_din0;
        elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1))) then 
            grp_fu_770_p0 <= layer_10_output_q0;
        elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1))) then 
            grp_fu_770_p0 <= layer_9_output_q0;
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            grp_fu_770_p0 <= layer_7_output_q0;
        else 
            grp_fu_770_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_770_p1_assign_proc : process(layer_9_weights_q0, layer_10_weights_q0, layer_11_weights_q0, ap_CS_fsm_pp5_stage1, ap_enable_reg_pp5_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp7_iter0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state105, grp_dense_relu_fu_670_grp_fu_770_p_din1, grp_conv2d_2_fu_685_grp_fu_770_p_din1, grp_conv2d_1_fu_695_grp_fu_770_p_din1, grp_conv2d_fu_705_grp_fu_770_p_din1, ap_block_pp3_stage1, ap_block_pp5_stage1, ap_block_pp7_stage1, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_770_p1 <= grp_conv2d_fu_705_grp_fu_770_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_770_p1 <= grp_conv2d_1_fu_695_grp_fu_770_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_770_p1 <= grp_conv2d_2_fu_685_grp_fu_770_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_770_p1 <= grp_dense_relu_fu_670_grp_fu_770_p_din1;
        elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1))) then 
            grp_fu_770_p1 <= layer_11_weights_q0;
        elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage1) and (ap_const_boolean_0 = ap_block_pp5_stage1))) then 
            grp_fu_770_p1 <= layer_10_weights_q0;
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            grp_fu_770_p1 <= layer_9_weights_q0;
        else 
            grp_fu_770_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_785_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_785_ce <= ap_const_logic_1;
        else 
            grp_fu_785_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_788_ce_assign_proc : process(ap_CS_fsm_state105, grp_dense_relu_fu_670_grp_fu_788_p_ce, grp_conv2d_2_fu_685_grp_fu_788_p_ce, grp_conv2d_1_fu_695_grp_fu_788_p_ce, grp_conv2d_fu_705_grp_fu_788_p_ce, grp_max_pooling2d_2_fu_715_grp_fu_788_p_ce, grp_max_pooling2d_1_fu_721_grp_fu_788_p_ce, grp_max_pooling2d_fu_727_grp_fu_788_p_ce, ap_CS_fsm_state36, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_788_ce <= grp_max_pooling2d_fu_727_grp_fu_788_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_788_ce <= grp_max_pooling2d_1_fu_721_grp_fu_788_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_788_ce <= grp_max_pooling2d_2_fu_715_grp_fu_788_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_788_ce <= grp_conv2d_fu_705_grp_fu_788_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_788_ce <= grp_conv2d_1_fu_695_grp_fu_788_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_788_ce <= grp_conv2d_2_fu_685_grp_fu_788_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_788_ce <= grp_dense_relu_fu_670_grp_fu_788_p_ce;
        else 
            grp_fu_788_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_788_opcode_assign_proc : process(ap_enable_reg_pp3_iter3, ifzero_reg_1628_pp3_iter3_reg, ap_enable_reg_pp5_iter3, ifzero5_reg_1703_pp5_iter2_reg, ap_enable_reg_pp7_iter3, ifzero9_reg_1768_pp7_iter3_reg, ap_CS_fsm_pp5_stage3, ap_CS_fsm_state105, ap_CS_fsm_pp3_stage3, ap_CS_fsm_pp7_stage3, grp_dense_relu_fu_670_grp_fu_788_p_opcode, grp_conv2d_2_fu_685_grp_fu_788_p_opcode, grp_conv2d_1_fu_695_grp_fu_788_p_opcode, grp_conv2d_fu_705_grp_fu_788_p_opcode, grp_max_pooling2d_2_fu_715_grp_fu_788_p_opcode, grp_max_pooling2d_1_fu_721_grp_fu_788_p_opcode, grp_max_pooling2d_fu_727_grp_fu_788_p_opcode, ap_CS_fsm_state36, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_block_pp3_stage3_00001, ap_block_pp5_stage3_00001, ap_block_pp7_stage3_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_788_opcode <= grp_max_pooling2d_fu_727_grp_fu_788_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_788_opcode <= grp_max_pooling2d_1_fu_721_grp_fu_788_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_788_opcode <= grp_max_pooling2d_2_fu_715_grp_fu_788_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_788_opcode <= grp_conv2d_fu_705_grp_fu_788_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_788_opcode <= grp_conv2d_1_fu_695_grp_fu_788_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_788_opcode <= grp_conv2d_2_fu_685_grp_fu_788_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_788_opcode <= grp_dense_relu_fu_670_grp_fu_788_p_opcode;
        elsif ((((ifzero9_reg_1768_pp7_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3_00001)) or ((ifzero5_reg_1703_pp5_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3_00001)) or ((ifzero_reg_1628_pp3_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_00001)))) then 
            grp_fu_788_opcode <= ap_const_lv5_2;
        else 
            grp_fu_788_opcode <= ap_const_lv5_2;
        end if; 
    end process;


    grp_fu_788_p0_assign_proc : process(reg_812, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_enable_reg_pp7_iter3, ap_CS_fsm_pp5_stage3, ap_CS_fsm_state105, ap_CS_fsm_pp3_stage3, ap_CS_fsm_pp7_stage3, grp_dense_relu_fu_670_grp_fu_788_p_din0, grp_conv2d_2_fu_685_grp_fu_788_p_din0, grp_conv2d_1_fu_695_grp_fu_788_p_din0, grp_conv2d_fu_705_grp_fu_788_p_din0, grp_max_pooling2d_2_fu_715_grp_fu_788_p_din0, grp_max_pooling2d_1_fu_721_grp_fu_788_p_din0, grp_max_pooling2d_fu_727_grp_fu_788_p_din0, ap_CS_fsm_state36, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_block_pp3_stage3, ap_block_pp5_stage3, ap_block_pp7_stage3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_788_p0 <= grp_max_pooling2d_fu_727_grp_fu_788_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_788_p0 <= grp_max_pooling2d_1_fu_721_grp_fu_788_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_788_p0 <= grp_max_pooling2d_2_fu_715_grp_fu_788_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_788_p0 <= grp_conv2d_fu_705_grp_fu_788_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_788_p0 <= grp_conv2d_1_fu_695_grp_fu_788_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_788_p0 <= grp_conv2d_2_fu_685_grp_fu_788_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_788_p0 <= grp_dense_relu_fu_670_grp_fu_788_p_din0;
        elsif ((((ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3)) or ((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3)) or ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3)))) then 
            grp_fu_788_p0 <= reg_812;
        else 
            grp_fu_788_p0 <= reg_812;
        end if; 
    end process;


    grp_fu_788_p1_assign_proc : process(ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_enable_reg_pp7_iter3, ap_CS_fsm_pp5_stage3, ap_CS_fsm_state105, ap_CS_fsm_pp3_stage3, ap_CS_fsm_pp7_stage3, grp_dense_relu_fu_670_grp_fu_788_p_din1, grp_conv2d_2_fu_685_grp_fu_788_p_din1, grp_conv2d_1_fu_695_grp_fu_788_p_din1, grp_conv2d_fu_705_grp_fu_788_p_din1, grp_max_pooling2d_2_fu_715_grp_fu_788_p_din1, grp_max_pooling2d_1_fu_721_grp_fu_788_p_din1, grp_max_pooling2d_fu_727_grp_fu_788_p_din1, ap_CS_fsm_state36, ap_CS_fsm_state104, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_block_pp3_stage3, ap_block_pp5_stage3, ap_block_pp7_stage3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_788_p1 <= grp_max_pooling2d_fu_727_grp_fu_788_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_788_p1 <= grp_max_pooling2d_1_fu_721_grp_fu_788_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_788_p1 <= grp_max_pooling2d_2_fu_715_grp_fu_788_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_788_p1 <= grp_conv2d_fu_705_grp_fu_788_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_788_p1 <= grp_conv2d_1_fu_695_grp_fu_788_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_788_p1 <= grp_conv2d_2_fu_685_grp_fu_788_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_788_p1 <= grp_dense_relu_fu_670_grp_fu_788_p_din1;
        elsif ((((ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage3) and (ap_const_boolean_0 = ap_block_pp7_stage3)) or ((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage3) and (ap_const_boolean_0 = ap_block_pp5_stage3)) or ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3)))) then 
            grp_fu_788_p1 <= ap_const_lv32_0;
        else 
            grp_fu_788_p1 <= ap_const_lv32_0;
        end if; 
    end process;

    grp_max_pooling2d_1_fu_721_ap_start <= grp_max_pooling2d_1_fu_721_ap_start_reg;
    grp_max_pooling2d_1_fu_721_grp_fu_1839_p_dout0 <= grp_fu_1839_p2;
    grp_max_pooling2d_1_fu_721_grp_fu_788_p_dout0 <= grp_fu_788_p2;
    grp_max_pooling2d_2_fu_715_ap_start <= grp_max_pooling2d_2_fu_715_ap_start_reg;
    grp_max_pooling2d_2_fu_715_grp_fu_1839_p_dout0 <= grp_fu_1839_p2;
    grp_max_pooling2d_2_fu_715_grp_fu_788_p_dout0 <= grp_fu_788_p2;
    grp_max_pooling2d_fu_727_ap_start <= grp_max_pooling2d_fu_727_ap_start_reg;
    grp_max_pooling2d_fu_727_grp_fu_1839_p_dout0 <= grp_fu_1839_p2;
    grp_max_pooling2d_fu_727_grp_fu_788_p_dout0 <= grp_fu_788_p2;
    grp_set3DFloatArray_1_fu_753_ap_start <= grp_set3DFloatArray_1_fu_753_ap_start_reg;
    grp_set3DFloatArray_2_fu_748_ap_start <= grp_set3DFloatArray_2_fu_748_ap_start_reg;
    grp_set3DFloatArray_3_fu_738_ap_start <= grp_set3DFloatArray_3_fu_738_ap_start_reg;
    grp_set3DFloatArray_4_fu_743_ap_start <= grp_set3DFloatArray_4_fu_743_ap_start_reg;
    grp_set3DFloatArray_5_fu_733_ap_start <= grp_set3DFloatArray_5_fu_733_ap_start_reg;
    grp_set3DFloatArray_fu_758_ap_start <= grp_set3DFloatArray_fu_758_ap_start_reg;
    i_4_cast_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_467),64));
    i_5_cast_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_511),64));
    i_6_cast_fu_1243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_556),64));
    i_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_422_pp0_iter5_reg),64));
    icmp_ln157_1_fu_1119_p2 <= "1" when (i_9_reg_522 = ap_const_lv6_20) else "0";
    icmp_ln157_2_fu_1254_p2 <= "1" when (i_10_reg_567 = ap_const_lv5_10) else "0";
    icmp_ln157_fu_984_p2 <= "1" when (i_4_reg_478 = ap_const_lv7_40) else "0";
    icmp_ln159_1_fu_1135_p2 <= "1" when (ap_phi_mux_ii_5_phi_fu_538_p4 = ap_const_lv7_40) else "0";
    icmp_ln159_2_fu_1276_p2 <= "1" when (ap_phi_mux_ii_6_phi_fu_583_p4 = ap_const_lv6_20) else "0";
    icmp_ln159_fu_1006_p2 <= "1" when (ap_phi_mux_ii_4_phi_fu_494_p4 = ap_const_lv6_20) else "0";
    icmp_ln197_fu_829_p2 <= "1" when (ap_phi_mux_i_phi_fu_426_p4 = ap_const_lv10_240) else "0";
    icmp_ln22_1_fu_1102_p2 <= "1" when (i_5_reg_511 = ap_const_lv6_20) else "0";
    icmp_ln22_2_fu_1237_p2 <= "1" when (i_6_reg_556 = ap_const_lv5_10) else "0";
    icmp_ln22_3_fu_1372_p2 <= "1" when (i_7_reg_648 = ap_const_lv3_4) else "0";
    icmp_ln22_fu_967_p2 <= "1" when (i_3_reg_467 = ap_const_lv7_40) else "0";
    icmp_ln24_1_fu_1396_p2 <= "1" when (trunc_ln24_fu_1378_p1 = ap_const_lv2_1) else "0";
    icmp_ln24_2_fu_1410_p2 <= "1" when (trunc_ln24_fu_1378_p1 = ap_const_lv2_2) else "0";
    icmp_ln24_fu_1382_p2 <= "1" when (trunc_ln24_fu_1378_p1 = ap_const_lv2_0) else "0";
    icmp_ln298_fu_1494_p2 <= "1" when (i_8_reg_659 = ap_const_lv3_4) else "0";
    icmp_ln31_fu_872_p2 <= "1" when (indvar_flatten_reg_434 = ap_const_lv10_240) else "0";
    icmp_ln33_fu_878_p2 <= "1" when (ii_reg_456 = ap_const_lv5_18) else "0";
    icmp_ln49_1_fu_1069_p2 <= "1" when (trunc_ln49_fu_1059_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_2_fu_1198_p2 <= "0" when (tmp_38_fu_1184_p4 = ap_const_lv8_FF) else "1";
    icmp_ln49_3_fu_1204_p2 <= "1" when (trunc_ln49_1_fu_1194_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_4_fu_1333_p2 <= "0" when (tmp_40_fu_1319_p4 = ap_const_lv8_FF) else "1";
    icmp_ln49_5_fu_1339_p2 <= "1" when (trunc_ln49_2_fu_1329_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_1063_p2 <= "0" when (tmp_fu_1049_p4 = ap_const_lv8_FF) else "1";
    ifzero5_fu_1174_p2 <= "1" when (add_ln159_1_fu_1168_p2 = ap_const_lv7_40) else "0";
    ifzero9_fu_1309_p2 <= "1" when (add_ln159_2_fu_1270_p2 = ap_const_lv6_20) else "0";
    ifzero_fu_1039_p2 <= "1" when (add_ln159_fu_1000_p2 = ap_const_lv6_20) else "0";
    ii_4_cast8_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ii_4_phi_fu_494_p4),64));
    ii_5_cast10_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ii_5_phi_fu_538_p4),64));
    ii_6_cast11_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ii_6_phi_fu_583_p4),64));
    ii_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_fu_884_p3),10));

    image_input_address0_assign_proc : process(ap_block_pp0_stage0, image_input_addr_1_reg_1551_pp1_iter11_reg, ap_enable_reg_pp0_iter6, ap_enable_reg_pp1_iter12, grp_conv2d_2_fu_685_input_r_address0, ap_CS_fsm_state26, i_cast_fu_835_p1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            image_input_address0 <= image_input_addr_1_reg_1551_pp1_iter11_reg;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_input_address0 <= i_cast_fu_835_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            image_input_address0 <= grp_conv2d_2_fu_685_input_r_address0;
        else 
            image_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    image_input_address1 <= zext_ln37_fu_950_p1(10 - 1 downto 0);

    image_input_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp1_iter12, grp_conv2d_2_fu_685_input_r_ce0, ap_CS_fsm_state26)
    begin
        if ((((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            image_input_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            image_input_ce0 <= grp_conv2d_2_fu_685_input_r_ce0;
        else 
            image_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_input_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            image_input_ce1 <= ap_const_logic_1;
        else 
            image_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_input_d0_assign_proc : process(ap_block_pp0_stage0, conv_reg_1532, conv12_i_reg_1567, ap_enable_reg_pp0_iter6, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            image_input_d0 <= conv12_i_reg_1567;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_input_d0 <= conv_reg_1532;
        else 
            image_input_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_input_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln197_reg_1523_pp0_iter5_reg, ap_block_pp1_stage0_11001, icmp_ln31_reg_1542_pp1_iter11_reg, ap_enable_reg_pp0_iter6, ap_enable_reg_pp1_iter12)
    begin
        if ((((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (icmp_ln31_reg_1542_pp1_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln197_reg_1523_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            image_input_we0 <= ap_const_logic_1;
        else 
            image_input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    infer_input_V_blk_n_assign_proc : process(infer_input_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln197_reg_1523)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln197_reg_1523 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            infer_input_V_blk_n <= infer_input_V_empty_n;
        else 
            infer_input_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    infer_input_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln197_reg_1523, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln197_reg_1523 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            infer_input_V_read <= ap_const_logic_1;
        else 
            infer_input_V_read <= ap_const_logic_0;
        end if; 
    end process;


    infer_output_V_blk_n_assign_proc : process(infer_output_V_full_n, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter1, ap_block_pp9_stage0, icmp_ln298_reg_1830)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (icmp_ln298_reg_1830 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0))) then 
            infer_output_V_blk_n <= infer_output_V_full_n;
        else 
            infer_output_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    infer_output_V_din <= tmp_42_fu_1504_p6;

    infer_output_V_write_assign_proc : process(ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter1, icmp_ln298_reg_1830, ap_block_pp9_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (icmp_ln298_reg_1830 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
            infer_output_V_write <= ap_const_logic_1;
        else 
            infer_output_V_write <= ap_const_logic_0;
        end if; 
    end process;

    layer_10_bias_address0 <= zext_ln157_2_fu_1125_p1(5 - 1 downto 0);

    layer_10_bias_ce0_assign_proc : process(ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            layer_10_bias_ce0 <= ap_const_logic_1;
        else 
            layer_10_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_10_output_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_CS_fsm_state59, ap_CS_fsm_state61, layer_10_output_addr_1_reg_1659, ap_enable_reg_pp5_iter4, ap_block_pp5_stage0, ap_block_pp7_stage0, i_5_cast_fu_1108_p1, zext_ln157_2_fu_1125_p1, ii_6_cast11_fu_1282_p1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            layer_10_output_address0 <= ii_6_cast11_fu_1282_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            layer_10_output_address0 <= layer_10_output_addr_1_reg_1659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            layer_10_output_address0 <= zext_ln157_2_fu_1125_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer_10_output_address0 <= i_5_cast_fu_1108_p1(5 - 1 downto 0);
        else 
            layer_10_output_address0 <= "XXXXX";
        end if; 
    end process;


    layer_10_output_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_enable_reg_pp5_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or ((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)) or ((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            layer_10_output_ce0 <= ap_const_logic_1;
        else 
            layer_10_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_10_output_d0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_CS_fsm_state59, ap_enable_reg_pp5_iter4, ap_block_pp5_stage0, select_ln49_1_fu_1222_p3)
    begin
        if (((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            layer_10_output_d0 <= select_ln49_1_fu_1222_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer_10_output_d0 <= ap_const_lv32_0;
        else 
            layer_10_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_10_output_we0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state59, ifzero5_reg_1703_pp5_iter3_reg, ap_enable_reg_pp5_iter4, icmp_ln22_1_fu_1102_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln22_1_fu_1102_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ifzero5_reg_1703_pp5_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            layer_10_output_we0 <= ap_const_logic_1;
        else 
            layer_10_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_10_weights_address0 <= zext_ln161_1_fu_1163_p1(11 - 1 downto 0);

    layer_10_weights_ce0_assign_proc : process(ap_enable_reg_pp5_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            layer_10_weights_ce0 <= ap_const_logic_1;
        else 
            layer_10_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_11_bias_address0 <= zext_ln157_4_fu_1260_p1(4 - 1 downto 0);

    layer_11_bias_ce0_assign_proc : process(ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            layer_11_bias_ce0 <= ap_const_logic_1;
        else 
            layer_11_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_11_output_address0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_CS_fsm_state81, ap_CS_fsm_state83, layer_11_output_addr_1_reg_1724, ap_CS_fsm_state105, ap_enable_reg_pp7_iter4, grp_dense_relu_fu_670_input_r_address0, ap_block_pp7_stage0, i_6_cast_fu_1243_p1, zext_ln157_4_fu_1260_p1)
    begin
        if (((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            layer_11_output_address0 <= layer_11_output_addr_1_reg_1724;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            layer_11_output_address0 <= zext_ln157_4_fu_1260_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            layer_11_output_address0 <= i_6_cast_fu_1243_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            layer_11_output_address0 <= grp_dense_relu_fu_670_input_r_address0;
        else 
            layer_11_output_address0 <= "XXXX";
        end if; 
    end process;


    layer_11_output_ce0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state105, ap_enable_reg_pp7_iter4, grp_dense_relu_fu_670_input_r_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or ((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)))) then 
            layer_11_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            layer_11_output_ce0 <= grp_dense_relu_fu_670_input_r_ce0;
        else 
            layer_11_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_11_output_d0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_CS_fsm_state81, ap_enable_reg_pp7_iter4, ap_block_pp7_stage0, select_ln49_2_fu_1357_p3)
    begin
        if (((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            layer_11_output_d0 <= select_ln49_2_fu_1357_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            layer_11_output_d0 <= ap_const_lv32_0;
        else 
            layer_11_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_11_output_we0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ifzero9_reg_1768_pp7_iter3_reg, ap_CS_fsm_state81, ap_enable_reg_pp7_iter4, icmp_ln22_2_fu_1237_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state81) and (icmp_ln22_2_fu_1237_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ifzero9_reg_1768_pp7_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)))) then 
            layer_11_output_we0 <= ap_const_logic_1;
        else 
            layer_11_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_11_weights_address0 <= zext_ln161_2_fu_1304_p1(9 - 1 downto 0);

    layer_11_weights_ce0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
            layer_11_weights_ce0 <= ap_const_logic_1;
        else 
            layer_11_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_12_output_0_1_fu_1416_p3 <= 
        layer_12_output_0_0_reg_636 when (icmp_ln24_2_fu_1410_p2(0) = '1') else 
        select_ln24_1_fu_1402_p3;
    layer_12_output_1_1_fu_1432_p3 <= 
        layer_12_output_1_0_reg_624 when (icmp_ln24_2_fu_1410_p2(0) = '1') else 
        select_ln24_2_fu_1424_p3;
    layer_12_output_2_1_fu_1440_p3 <= 
        ap_const_lv32_0 when (icmp_ln24_2_fu_1410_p2(0) = '1') else 
        layer_12_output_2_0_reg_612;
    layer_12_output_3_1_fu_1464_p3 <= 
        layer_12_output_3_0_reg_600 when (icmp_ln24_2_fu_1410_p2(0) = '1') else 
        select_ln24_4_fu_1456_p3;

    layer_2_output_address0_assign_proc : process(grp_conv2d_2_fu_685_output_r_address0, grp_max_pooling2d_2_fu_715_input_r_address0, grp_set3DFloatArray_5_fu_733_array_r_address0, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_2_output_address0 <= grp_set3DFloatArray_5_fu_733_array_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_2_output_address0 <= grp_max_pooling2d_2_fu_715_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_2_output_address0 <= grp_conv2d_2_fu_685_output_r_address0;
        else 
            layer_2_output_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_2_output_ce0_assign_proc : process(grp_conv2d_2_fu_685_output_r_ce0, grp_max_pooling2d_2_fu_715_input_r_ce0, grp_set3DFloatArray_5_fu_733_array_r_ce0, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_2_output_ce0 <= grp_set3DFloatArray_5_fu_733_array_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_2_output_ce0 <= grp_max_pooling2d_2_fu_715_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_2_output_ce0 <= grp_conv2d_2_fu_685_output_r_ce0;
        else 
            layer_2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_2_output_ce1_assign_proc : process(grp_max_pooling2d_2_fu_715_input_r_ce1, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_2_output_ce1 <= grp_max_pooling2d_2_fu_715_input_r_ce1;
        else 
            layer_2_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_2_output_d0_assign_proc : process(grp_conv2d_2_fu_685_output_r_d0, grp_set3DFloatArray_5_fu_733_array_r_d0, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_2_output_d0 <= grp_set3DFloatArray_5_fu_733_array_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_2_output_d0 <= grp_conv2d_2_fu_685_output_r_d0;
        else 
            layer_2_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_2_output_we0_assign_proc : process(grp_conv2d_2_fu_685_output_r_we0, grp_set3DFloatArray_5_fu_733_array_r_we0, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_2_output_we0 <= grp_set3DFloatArray_5_fu_733_array_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_2_output_we0 <= grp_conv2d_2_fu_685_output_r_we0;
        else 
            layer_2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_3_output_address0_assign_proc : process(grp_conv2d_1_fu_695_input_r_address0, grp_max_pooling2d_2_fu_715_output_r_address0, grp_set3DFloatArray_4_fu_743_array_r_address0, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_3_output_address0 <= grp_set3DFloatArray_4_fu_743_array_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_3_output_address0 <= grp_max_pooling2d_2_fu_715_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_3_output_address0 <= grp_conv2d_1_fu_695_input_r_address0;
        else 
            layer_3_output_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    layer_3_output_ce0_assign_proc : process(grp_conv2d_1_fu_695_input_r_ce0, grp_max_pooling2d_2_fu_715_output_r_ce0, grp_set3DFloatArray_4_fu_743_array_r_ce0, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_3_output_ce0 <= grp_set3DFloatArray_4_fu_743_array_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_3_output_ce0 <= grp_max_pooling2d_2_fu_715_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_3_output_ce0 <= grp_conv2d_1_fu_695_input_r_ce0;
        else 
            layer_3_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_3_output_d0_assign_proc : process(grp_max_pooling2d_2_fu_715_output_r_d0, grp_set3DFloatArray_4_fu_743_array_r_d0, ap_CS_fsm_state28, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_3_output_d0 <= grp_set3DFloatArray_4_fu_743_array_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_3_output_d0 <= grp_max_pooling2d_2_fu_715_output_r_d0;
        else 
            layer_3_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_3_output_we0_assign_proc : process(grp_max_pooling2d_2_fu_715_output_r_we0, grp_set3DFloatArray_4_fu_743_array_r_we0, ap_CS_fsm_state28, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_3_output_we0 <= grp_set3DFloatArray_4_fu_743_array_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_3_output_we0 <= grp_max_pooling2d_2_fu_715_output_r_we0;
        else 
            layer_3_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_4_output_address0_assign_proc : process(grp_conv2d_1_fu_695_output_r_address0, grp_max_pooling2d_1_fu_721_input_r_address0, grp_set3DFloatArray_3_fu_738_array_r_address0, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_4_output_address0 <= grp_set3DFloatArray_3_fu_738_array_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_4_output_address0 <= grp_max_pooling2d_1_fu_721_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_4_output_address0 <= grp_conv2d_1_fu_695_output_r_address0;
        else 
            layer_4_output_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    layer_4_output_ce0_assign_proc : process(grp_conv2d_1_fu_695_output_r_ce0, grp_max_pooling2d_1_fu_721_input_r_ce0, grp_set3DFloatArray_3_fu_738_array_r_ce0, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_4_output_ce0 <= grp_set3DFloatArray_3_fu_738_array_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_4_output_ce0 <= grp_max_pooling2d_1_fu_721_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_4_output_ce0 <= grp_conv2d_1_fu_695_output_r_ce0;
        else 
            layer_4_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_4_output_ce1_assign_proc : process(grp_max_pooling2d_1_fu_721_input_r_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_4_output_ce1 <= grp_max_pooling2d_1_fu_721_input_r_ce1;
        else 
            layer_4_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_4_output_d0_assign_proc : process(grp_conv2d_1_fu_695_output_r_d0, grp_set3DFloatArray_3_fu_738_array_r_d0, ap_CS_fsm_state30, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_4_output_d0 <= grp_set3DFloatArray_3_fu_738_array_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_4_output_d0 <= grp_conv2d_1_fu_695_output_r_d0;
        else 
            layer_4_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_4_output_we0_assign_proc : process(grp_conv2d_1_fu_695_output_r_we0, grp_set3DFloatArray_3_fu_738_array_r_we0, ap_CS_fsm_state30, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_4_output_we0 <= grp_set3DFloatArray_3_fu_738_array_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_4_output_we0 <= grp_conv2d_1_fu_695_output_r_we0;
        else 
            layer_4_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_5_output_address0_assign_proc : process(grp_conv2d_fu_705_input_r_address0, grp_max_pooling2d_1_fu_721_output_r_address0, grp_set3DFloatArray_2_fu_748_array_r_address0, ap_CS_fsm_state34, ap_CS_fsm_state32, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_5_output_address0 <= grp_set3DFloatArray_2_fu_748_array_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_5_output_address0 <= grp_max_pooling2d_1_fu_721_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_5_output_address0 <= grp_conv2d_fu_705_input_r_address0;
        else 
            layer_5_output_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    layer_5_output_ce0_assign_proc : process(grp_conv2d_fu_705_input_r_ce0, grp_max_pooling2d_1_fu_721_output_r_ce0, grp_set3DFloatArray_2_fu_748_array_r_ce0, ap_CS_fsm_state34, ap_CS_fsm_state32, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_5_output_ce0 <= grp_set3DFloatArray_2_fu_748_array_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_5_output_ce0 <= grp_max_pooling2d_1_fu_721_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_5_output_ce0 <= grp_conv2d_fu_705_input_r_ce0;
        else 
            layer_5_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_5_output_d0_assign_proc : process(grp_max_pooling2d_1_fu_721_output_r_d0, grp_set3DFloatArray_2_fu_748_array_r_d0, ap_CS_fsm_state32, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_5_output_d0 <= grp_set3DFloatArray_2_fu_748_array_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_5_output_d0 <= grp_max_pooling2d_1_fu_721_output_r_d0;
        else 
            layer_5_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_5_output_we0_assign_proc : process(grp_max_pooling2d_1_fu_721_output_r_we0, grp_set3DFloatArray_2_fu_748_array_r_we0, ap_CS_fsm_state32, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_5_output_we0 <= grp_set3DFloatArray_2_fu_748_array_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_5_output_we0 <= grp_max_pooling2d_1_fu_721_output_r_we0;
        else 
            layer_5_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_6_output_address0_assign_proc : process(grp_conv2d_fu_705_output_r_address0, grp_max_pooling2d_fu_727_input_r_address0, grp_set3DFloatArray_1_fu_753_array_r_address0, ap_CS_fsm_state36, ap_CS_fsm_state34, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_6_output_address0 <= grp_set3DFloatArray_1_fu_753_array_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_6_output_address0 <= grp_max_pooling2d_fu_727_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_6_output_address0 <= grp_conv2d_fu_705_output_r_address0;
        else 
            layer_6_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    layer_6_output_ce0_assign_proc : process(grp_conv2d_fu_705_output_r_ce0, grp_max_pooling2d_fu_727_input_r_ce0, grp_set3DFloatArray_1_fu_753_array_r_ce0, ap_CS_fsm_state36, ap_CS_fsm_state34, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_6_output_ce0 <= grp_set3DFloatArray_1_fu_753_array_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_6_output_ce0 <= grp_max_pooling2d_fu_727_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_6_output_ce0 <= grp_conv2d_fu_705_output_r_ce0;
        else 
            layer_6_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_6_output_ce1_assign_proc : process(grp_max_pooling2d_fu_727_input_r_ce1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_6_output_ce1 <= grp_max_pooling2d_fu_727_input_r_ce1;
        else 
            layer_6_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_6_output_d0_assign_proc : process(grp_conv2d_fu_705_output_r_d0, grp_set3DFloatArray_1_fu_753_array_r_d0, ap_CS_fsm_state34, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_6_output_d0 <= grp_set3DFloatArray_1_fu_753_array_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_6_output_d0 <= grp_conv2d_fu_705_output_r_d0;
        else 
            layer_6_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_6_output_we0_assign_proc : process(grp_conv2d_fu_705_output_r_we0, grp_set3DFloatArray_1_fu_753_array_r_we0, ap_CS_fsm_state34, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_6_output_we0 <= grp_set3DFloatArray_1_fu_753_array_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_6_output_we0 <= grp_conv2d_fu_705_output_r_we0;
        else 
            layer_6_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_7_output_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, grp_max_pooling2d_fu_727_output_r_address0, grp_set3DFloatArray_fu_758_array_r_address0, ap_CS_fsm_state36, ap_block_pp3_stage0, ap_CS_fsm_state24, ii_4_cast8_fu_1012_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            layer_7_output_address0 <= ii_4_cast8_fu_1012_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_7_output_address0 <= grp_set3DFloatArray_fu_758_array_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_7_output_address0 <= grp_max_pooling2d_fu_727_output_r_address0;
        else 
            layer_7_output_address0 <= "XXXXX";
        end if; 
    end process;


    layer_7_output_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, grp_max_pooling2d_fu_727_output_r_ce0, grp_set3DFloatArray_fu_758_array_r_ce0, ap_CS_fsm_state36, ap_CS_fsm_state24)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            layer_7_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_7_output_ce0 <= grp_set3DFloatArray_fu_758_array_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_7_output_ce0 <= grp_max_pooling2d_fu_727_output_r_ce0;
        else 
            layer_7_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_7_output_d0_assign_proc : process(grp_max_pooling2d_fu_727_output_r_d0, grp_set3DFloatArray_fu_758_array_r_d0, ap_CS_fsm_state36, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_7_output_d0 <= grp_set3DFloatArray_fu_758_array_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_7_output_d0 <= grp_max_pooling2d_fu_727_output_r_d0;
        else 
            layer_7_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_7_output_we0_assign_proc : process(grp_max_pooling2d_fu_727_output_r_we0, grp_set3DFloatArray_fu_758_array_r_we0, ap_CS_fsm_state36, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_7_output_we0 <= grp_set3DFloatArray_fu_758_array_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_7_output_we0 <= grp_max_pooling2d_fu_727_output_r_we0;
        else 
            layer_7_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_9_bias_address0 <= zext_ln157_fu_990_p1(6 - 1 downto 0);

    layer_9_bias_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_9_bias_ce0 <= ap_const_logic_1;
        else 
            layer_9_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_9_output_address0_assign_proc : process(ap_enable_reg_pp5_iter0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state37, ap_CS_fsm_state39, layer_9_output_addr_1_reg_1589, ap_enable_reg_pp3_iter4, ap_block_pp3_stage0, ap_block_pp5_stage0, i_4_cast_fu_973_p1, zext_ln157_fu_990_p1, ii_5_cast10_fu_1141_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            layer_9_output_address0 <= ii_5_cast10_fu_1141_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            layer_9_output_address0 <= layer_9_output_addr_1_reg_1589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_9_output_address0 <= zext_ln157_fu_990_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_9_output_address0 <= i_4_cast_fu_973_p1(6 - 1 downto 0);
        else 
            layer_9_output_address0 <= "XXXXXX";
        end if; 
    end process;


    layer_9_output_ce0_assign_proc : process(ap_enable_reg_pp5_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_enable_reg_pp3_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            layer_9_output_ce0 <= ap_const_logic_1;
        else 
            layer_9_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_9_output_d0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_state37, ap_enable_reg_pp3_iter4, ap_block_pp3_stage0, select_ln49_fu_1087_p3)
    begin
        if (((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            layer_9_output_d0 <= select_ln49_fu_1087_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_9_output_d0 <= ap_const_lv32_0;
        else 
            layer_9_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_9_output_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ifzero_reg_1628_pp3_iter3_reg, ap_CS_fsm_state37, ap_enable_reg_pp3_iter4, icmp_ln22_fu_967_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln22_fu_967_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ifzero_reg_1628_pp3_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            layer_9_output_we0 <= ap_const_logic_1;
        else 
            layer_9_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_9_weights_address0 <= zext_ln161_fu_1034_p1(11 - 1 downto 0);

    layer_9_weights_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            layer_9_weights_ce0 <= ap_const_logic_1;
        else 
            layer_9_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln49_1_fu_1210_p2 <= (icmp_ln49_3_fu_1204_p2 or icmp_ln49_2_fu_1198_p2);
    or_ln49_2_fu_1345_p2 <= (icmp_ln49_5_fu_1339_p2 or icmp_ln49_4_fu_1333_p2);
    or_ln49_fu_1075_p2 <= (icmp_ln49_fu_1063_p2 or icmp_ln49_1_fu_1069_p2);
    p_mid1_fu_918_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_898_p3) - unsigned(p_shl22625_cast_mid1_fu_914_p1));
    p_shl1_fu_854_p3 <= (i_2_reg_445 & ap_const_lv3_0);
    p_shl22625_cast_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_854_p3),10));
    p_shl22625_cast_mid1_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl22625_mid1_fu_906_p3),10));
    p_shl22625_mid1_fu_906_p3 <= (add_ln31_1_fu_892_p2 & ap_const_lv3_0);
    p_shl_fu_846_p3 <= (i_2_reg_445 & ap_const_lv5_0);
    p_shl_mid1_fu_898_p3 <= (add_ln31_1_fu_892_p2 & ap_const_lv5_0);
    select_ln24_1_fu_1402_p3 <= 
        layer_12_output_0_0_reg_636 when (icmp_ln24_1_fu_1396_p2(0) = '1') else 
        select_ln24_fu_1388_p3;
    select_ln24_2_fu_1424_p3 <= 
        ap_const_lv32_0 when (icmp_ln24_1_fu_1396_p2(0) = '1') else 
        layer_12_output_1_0_reg_624;
    select_ln24_3_fu_1448_p3 <= 
        layer_12_output_3_0_reg_600 when (icmp_ln24_fu_1382_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln24_4_fu_1456_p3 <= 
        layer_12_output_3_0_reg_600 when (icmp_ln24_1_fu_1396_p2(0) = '1') else 
        select_ln24_3_fu_1448_p3;
    select_ln24_fu_1388_p3 <= 
        ap_const_lv32_0 when (icmp_ln24_fu_1382_p2(0) = '1') else 
        layer_12_output_0_0_reg_636;
    select_ln31_1_fu_924_p3 <= 
        p_mid1_fu_918_p2 when (icmp_ln33_fu_878_p2(0) = '1') else 
        empty_38_fu_866_p2;
    select_ln31_2_fu_932_p3 <= 
        add_ln31_1_fu_892_p2 when (icmp_ln33_fu_878_p2(0) = '1') else 
        i_2_reg_445;
    select_ln31_fu_884_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_fu_878_p2(0) = '1') else 
        ii_reg_456;
    select_ln49_1_fu_1222_p3 <= 
        reg_812 when (and_ln49_1_fu_1216_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln49_2_fu_1357_p3 <= 
        reg_812 when (and_ln49_2_fu_1351_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln49_fu_1087_p3 <= 
        reg_812 when (and_ln49_fu_1081_p2(0) = '1') else 
        ap_const_lv32_0;
    shl_ln161_1_fu_1150_p3 <= (trunc_ln161_1_fu_1146_p1 & ap_const_lv5_0);
    shl_ln161_2_fu_1291_p3 <= (trunc_ln161_2_fu_1287_p1 & ap_const_lv4_0);
    shl_ln_fu_1021_p3 <= (trunc_ln161_fu_1017_p1 & ap_const_lv6_0);
    tmp_38_fu_1184_p4 <= bitcast_ln49_1_fu_1180_p1(30 downto 23);
    tmp_40_fu_1319_p4 <= bitcast_ln49_2_fu_1315_p1(30 downto 23);
    tmp_fu_1049_p4 <= bitcast_ln49_fu_1045_p1(30 downto 23);
    trunc_ln161_1_fu_1146_p1 <= ap_phi_mux_ii_5_phi_fu_538_p4(6 - 1 downto 0);
    trunc_ln161_2_fu_1287_p1 <= ap_phi_mux_ii_6_phi_fu_583_p4(5 - 1 downto 0);
    trunc_ln161_fu_1017_p1 <= ap_phi_mux_ii_4_phi_fu_494_p4(5 - 1 downto 0);
    trunc_ln24_fu_1378_p1 <= i_7_reg_648(2 - 1 downto 0);
    trunc_ln300_fu_1500_p1 <= i_8_reg_659(2 - 1 downto 0);
    trunc_ln49_1_fu_1194_p1 <= bitcast_ln49_1_fu_1180_p1(23 - 1 downto 0);
    trunc_ln49_2_fu_1329_p1 <= bitcast_ln49_2_fu_1315_p1(23 - 1 downto 0);
    trunc_ln49_fu_1059_p1 <= bitcast_ln49_fu_1045_p1(23 - 1 downto 0);
    zext_ln157_1_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_478),11));
    zext_ln157_2_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_522),64));
    zext_ln157_3_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_522),11));
    zext_ln157_4_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_567),64));
    zext_ln157_5_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_567),9));
    zext_ln157_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_478),64));
    zext_ln161_1_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_1_fu_1158_p2),64));
    zext_ln161_2_fu_1304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_2_fu_1299_p2),64));
    zext_ln161_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_fu_1029_p2),64));
    zext_ln37_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_40_fu_944_p2),64));
end behav;

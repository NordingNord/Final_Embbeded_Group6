-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_exp_40_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (12 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (38 downto 0) );
end;


architecture behav of infer_exp_40_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv32_2E42FEF9 : STD_LOGIC_VECTOR (31 downto 0) := "00101110010000101111111011111001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv39_7FFFFFFFFF : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (67 downto 0);
    signal p_Result_s_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_342_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_342_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_347_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_347_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_reg_352_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1498_reg_352_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_357 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_357_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_357_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_227_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_377 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln640_1_fu_233_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln640_1_reg_382 : STD_LOGIC_VECTOR (57 downto 0);
    signal exp_x_msb_1_V_reg_387 : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_387_pp0_iter2_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_146_reg_393 : STD_LOGIC_VECTOR (66 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln534_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_1_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_fu_122_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln340_fu_140_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_fu_132_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_15_fu_144_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_144_fu_170_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln640_fu_188_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_16_fu_180_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_17_fu_210_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln703_1_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln703_fu_220_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_fu_237_p4 : STD_LOGIC_VECTOR (70 downto 0);
    signal r_V_fu_252_p0 : STD_LOGIC_VECTOR (70 downto 0);
    signal r_V_fu_252_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal r_V_fu_252_p2 : STD_LOGIC_VECTOR (138 downto 0);
    signal xor_ln849_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_lo_s_V_fu_285_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal y_l_V_fu_288_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal and_ln571_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln414_fu_277_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_fu_293_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_6_fu_308_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_18_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_324_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_fu_252_p00 : STD_LOGIC_VECTOR (138 downto 0);
    signal r_V_fu_252_p10 : STD_LOGIC_VECTOR (138 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_mul_71ns_68ns_139_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (70 downto 0);
        din1 : IN STD_LOGIC_VECTOR (67 downto 0);
        dout : OUT STD_LOGIC_VECTOR (138 downto 0) );
    end component;


    component infer_exp_40_32_s_f_x_msb_2_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component infer_exp_40_32_s_exp_x_msb_1_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;



begin
    f_x_msb_2_table_V_U : component infer_exp_40_32_s_f_x_msb_2_table_V
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component infer_exp_40_32_s_exp_x_msb_1_table_V
    generic map (
        DataWidth => 68,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    mul_71ns_68ns_139_1_1_U93 : component infer_mul_71ns_68ns_139_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 71,
        din1_WIDTH => 68,
        dout_WIDTH => 139)
    port map (
        din0 => r_V_fu_252_p0,
        din1 => r_V_fu_252_p1,
        dout => r_V_fu_252_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_x_msb_1_V_reg_387 <= exp_x_msb_1_table_V_q0;
                icmp_ln1494_reg_347 <= icmp_ln1494_fu_152_p2;
                icmp_ln1494_reg_347_pp0_iter1_reg <= icmp_ln1494_reg_347;
                icmp_ln1496_reg_357 <= icmp_ln1496_fu_164_p2;
                icmp_ln1496_reg_357_pp0_iter1_reg <= icmp_ln1496_reg_357;
                icmp_ln1498_reg_352 <= icmp_ln1498_fu_158_p2;
                icmp_ln1498_reg_352_pp0_iter1_reg <= icmp_ln1498_reg_352;
                p_Result_s_reg_342 <= x(12 downto 12);
                p_Result_s_reg_342_pp0_iter1_reg <= p_Result_s_reg_342;
                ret_V_reg_377 <= ret_V_fu_227_p2;
                    tmp_148_reg_362(7 downto 2) <= tmp_148_fu_192_p3(7 downto 2);
                trunc_ln640_1_reg_382 <= trunc_ln640_1_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_V_reg_387_pp0_iter2_reg <= exp_x_msb_1_V_reg_387;
                icmp_ln1494_reg_347_pp0_iter2_reg <= icmp_ln1494_reg_347_pp0_iter1_reg;
                icmp_ln1496_reg_357_pp0_iter2_reg <= icmp_ln1496_reg_357_pp0_iter1_reg;
                icmp_ln1498_reg_352_pp0_iter2_reg <= icmp_ln1498_reg_352_pp0_iter1_reg;
                p_Result_s_reg_342_pp0_iter2_reg <= p_Result_s_reg_342_pp0_iter1_reg;
                tmp_146_reg_393 <= r_V_fu_252_p2(138 downto 72);
            end if;
        end if;
    end process;
    tmp_148_reg_362(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln571_fu_268_p2 <= (icmp_ln1498_reg_352_pp0_iter2_reg and icmp_ln1496_reg_357_pp0_iter2_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv39_7FFFFFFFFF when (p_Result_18_fu_316_p3(0) = '1') else 
        tmp_fu_324_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln534_1_fu_205_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_table_V_address0 <= zext_ln534_fu_200_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_fu_152_p2 <= "1" when (signed(p_Result_14_fu_132_p3) > signed(ap_const_lv6_16)) else "0";
    icmp_ln1496_fu_164_p2 <= "1" when (unsigned(p_Result_15_fu_144_p3) > unsigned(ap_const_lv32_2E42FEF9)) else "0";
    icmp_ln1498_fu_158_p2 <= "1" when (p_Result_14_fu_132_p3 = ap_const_lv6_16) else "0";
    or_ln571_fu_303_p2 <= (icmp_ln1494_reg_347_pp0_iter2_reg or and_ln571_fu_268_p2);
    p_Result_14_fu_132_p3 <= (p_Result_s_fu_114_p3 & tmp_143_fu_122_p4);
    p_Result_15_fu_144_p3 <= (trunc_ln340_fu_140_p1 & ap_const_lv24_0);
    p_Result_16_fu_180_p3 <= (p_Result_s_fu_114_p3 & tmp_144_fu_170_p4);
    p_Result_17_fu_210_p4 <= f_x_msb_2_table_V_q0(63 downto 58);
    p_Result_18_fu_316_p3 <= p_Val2_6_fu_308_p3(63 downto 63);
    p_Result_s_fu_114_p3 <= x(12 downto 12);
    p_Val2_6_fu_308_p3 <= 
        select_ln414_fu_277_p3 when (or_ln571_fu_303_p2(0) = '1') else 
        y_V_fu_293_p4;
    r_V_fu_252_p0 <= r_V_fu_252_p00(71 - 1 downto 0);
    r_V_fu_252_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_fu_237_p4),139));
    r_V_fu_252_p1 <= r_V_fu_252_p10(68 - 1 downto 0);
    r_V_fu_252_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_387),139));
    ret_V_fu_227_p2 <= std_logic_vector(unsigned(zext_ln703_1_fu_224_p1) + unsigned(zext_ln703_fu_220_p1));
    rhs_fu_237_p4 <= ((ret_V_reg_377 & trunc_ln640_1_reg_382) & ap_const_lv4_0);
    select_ln414_fu_277_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln849_fu_272_p2(0) = '1') else 
        ap_const_lv64_0;
    tmp_143_fu_122_p4 <= x(12 downto 8);
    tmp_144_fu_170_p4 <= x(12 downto 6);
    tmp_148_fu_192_p3 <= (trunc_ln640_fu_188_p1 & ap_const_lv2_0);
    tmp_fu_324_p4 <= p_Val2_6_fu_308_p3(62 downto 24);
    trunc_ln340_fu_140_p1 <= x(8 - 1 downto 0);
    trunc_ln640_1_fu_233_p1 <= f_x_msb_2_table_V_q0(58 - 1 downto 0);
    trunc_ln640_fu_188_p1 <= x(6 - 1 downto 0);
    xor_ln849_fu_272_p2 <= (p_Result_s_reg_342_pp0_iter2_reg xor ap_const_lv1_1);
    y_V_fu_293_p4 <= y_l_V_fu_288_p2(67 downto 4);
    y_l_V_fu_288_p2 <= std_logic_vector(unsigned(exp_x_msb_1_V_reg_387_pp0_iter2_reg) + unsigned(y_lo_s_V_fu_285_p1));
    y_lo_s_V_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_146_reg_393),68));
    zext_ln534_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_16_fu_180_p3),64));
    zext_ln534_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_192_p3),64));
    zext_ln703_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_reg_362),9));
    zext_ln703_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_17_fu_210_p4),9));
end behav;

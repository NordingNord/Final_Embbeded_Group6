-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_max_pooling2d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1083_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1083_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1083_p_ce : OUT STD_LOGIC;
    grp_fu_2720_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2720_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2720_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2720_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2720_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_max_pooling2d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten58_reg_160 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_171 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_182 : STD_LOGIC_VECTOR (8 downto 0);
    signal ii_reg_193 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_reg_204 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln121_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln121_reg_1131_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln121_fu_232_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln121_reg_1126 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln121_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1131_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1131_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_13_fu_492_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_13_reg_1140 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln124_fu_522_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_reg_1145 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_9_fu_640_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln124_9_reg_1150 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln124_9_reg_1150_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln124_10_fu_648_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln124_10_reg_1156 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_cast_fu_660_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal iii_cast_reg_1161 : STD_LOGIC_VECTOR (11 downto 0);
    signal iii_cast_reg_1161_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln142_fu_742_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln142_reg_1177 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln142_reg_1177_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln142_reg_1177_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln142_reg_1177_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_3_fu_748_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_3_reg_1182 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_load_4_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_fu_754_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln127_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_12_fu_759_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln124_12_reg_1199 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln136_fu_807_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_4_fu_918_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_4_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln136_11_fu_934_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_11_reg_1223 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln136_5_fu_1022_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_5_reg_1228 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_5_reg_1228_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_6_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten58_phi_fu_164_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_175_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_186_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_ii_phi_fu_197_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_iii_phi_fu_208_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln136_6_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_7_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_8_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln136_9_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_fu_1122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_238_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_252_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_260_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_36_fu_270_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_lshr_f9_cast_fu_242_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_lshr_f_cast_fu_280_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln136_fu_298_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln124_fu_276_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln136_6_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln136_fu_318_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_266_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_fu_328_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f9_cast_mid1_fu_358_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_38_fu_354_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_376_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_mid1_fu_384_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln121_9_fu_390_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid110_fu_402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln121_10_fu_408_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_mid_fu_428_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_304_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_444_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_454_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln136_4_fu_462_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln136_7_fu_322_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln127_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln121_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_fu_346_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln121_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_4_fu_500_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_8_fu_368_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_lshr_f_cast_mid1_fu_530_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_mid_fu_420_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_fu_290_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_mid1_fu_540_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_14_fu_548_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln124_6_fu_556_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_dup_fu_506_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln136_8_fu_572_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_mid1_fu_586_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln121_11_fu_436_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln124_8_fu_594_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln124_3_fu_608_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln124_2_fu_416_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln136_12_fu_624_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln136_5_fu_630_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_9_cast_fu_398_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln136_13_fu_634_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln121_12_fu_466_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln124_fu_602_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_680_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_690_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_670_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln121_15_fu_700_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln124_7_fu_578_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln124_11_fu_708_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln136_fu_664_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_716_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln136_2_mid2_fu_614_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_9_fu_731_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal iii_cast9_fu_656_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add40_mid2_fu_564_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln136_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_769_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_779_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_14_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_7_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln124_2_fu_823_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln136_7_fu_836_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_8_fu_853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_839_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_7_fu_849_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_16_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_15_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_856_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_8_fu_866_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_18_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_17_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_8_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_9_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_7_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_8_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln136_3_mid2_fu_816_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_10_fu_924_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln136_4_mid2_fu_828_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln136_9_fu_939_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_10_fu_957_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_943_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_9_fu_953_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_20_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_19_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_960_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_10_fu_970_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_22_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_21_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_10_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_11_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_9_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_10_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_11_fu_1033_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_12_fu_1050_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1036_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_11_fu_1046_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_24_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_23_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_1053_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_12_fu_1063_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_26_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_25_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_12_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_13_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_11_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_12_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_215_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_221_ce : STD_LOGIC;
    signal grp_fu_221_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_171 <= select_ln121_13_reg_1140;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_171 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ii_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ii_reg_193 <= select_ln124_10_reg_1156;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_193 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iii_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                iii_reg_204 <= add_ln127_reg_1194;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_204 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten58_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten58_reg_160 <= add_ln121_reg_1126;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten58_reg_160 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_182 <= select_ln124_12_reg_1199;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_182 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln121_reg_1126 <= add_ln121_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_334_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln124_3_reg_1182 <= add_ln124_3_fu_748_p2;
                add_ln142_reg_1177 <= add_ln142_fu_742_p2;
                icmp_ln124_reg_1135 <= icmp_ln124_fu_340_p2;
                    iii_cast_reg_1161(5 downto 0) <= iii_cast_fu_660_p1(5 downto 0);
                select_ln124_9_reg_1150 <= select_ln124_9_fu_640_p3;
                select_ln124_reg_1145 <= select_ln124_fu_522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln127_reg_1194 <= add_ln127_fu_754_p2;
                input_load_4_reg_1187 <= input_r_q0;
                select_ln124_12_reg_1199 <= select_ln124_12_fu_759_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln136_11_reg_1223 <= add_ln136_11_fu_934_p2;
                select_ln136_4_reg_1211 <= select_ln136_4_fu_918_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln142_reg_1177_pp0_iter1_reg <= add_ln142_reg_1177;
                add_ln142_reg_1177_pp0_iter2_reg <= add_ln142_reg_1177_pp0_iter1_reg;
                add_ln142_reg_1177_pp0_iter3_reg <= add_ln142_reg_1177_pp0_iter2_reg;
                icmp_ln121_reg_1131 <= icmp_ln121_fu_334_p2;
                icmp_ln121_reg_1131_pp0_iter1_reg <= icmp_ln121_reg_1131;
                icmp_ln121_reg_1131_pp0_iter2_reg <= icmp_ln121_reg_1131_pp0_iter1_reg;
                icmp_ln121_reg_1131_pp0_iter3_reg <= icmp_ln121_reg_1131_pp0_iter2_reg;
                    iii_cast_reg_1161_pp0_iter1_reg(5 downto 0) <= iii_cast_reg_1161(5 downto 0);
                select_ln124_9_reg_1150_pp0_iter1_reg <= select_ln124_9_reg_1150;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln121_reg_1131_pp0_iter2_reg = ap_const_lv1_0))) then
                input_load_6_reg_1240 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln121_reg_1131_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_226 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_334_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln121_13_reg_1140 <= select_ln121_13_fu_492_p3;
                select_ln124_10_reg_1156 <= select_ln124_10_fu_648_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln121_reg_1131_pp0_iter2_reg = ap_const_lv1_0))) then
                select_ln136_5_reg_1228 <= select_ln136_5_fu_1022_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln136_5_reg_1228_pp0_iter3_reg <= select_ln136_5_reg_1228;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln136_reg_1204 <= select_ln136_fu_807_p3;
            end if;
        end if;
    end process;
    iii_cast_reg_1161(11 downto 6) <= "000000";
    iii_cast_reg_1161_pp0_iter1_reg(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, icmp_ln121_fu_334_p2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln121_fu_334_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((icmp_ln121_fu_334_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add40_mid2_fu_564_p3 <= (select_ln124_6_fu_556_p3 & ap_const_lv5_0);
    add_ln121_fu_232_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten58_phi_fu_164_p4) + unsigned(ap_const_lv10_1));
    add_ln124_2_fu_823_p2 <= std_logic_vector(unsigned(select_ln124_9_reg_1150_pp0_iter1_reg) + unsigned(ap_const_lv7_1));
    add_ln124_3_fu_748_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_186_p4) + unsigned(ap_const_lv9_1));
    add_ln127_fu_754_p2 <= std_logic_vector(unsigned(select_ln124_reg_1145) + unsigned(ap_const_lv6_1));
    add_ln136_10_fu_924_p2 <= std_logic_vector(unsigned(shl_ln136_3_mid2_fu_816_p3) + unsigned(iii_cast_reg_1161_pp0_iter1_reg));
    add_ln136_11_fu_934_p2 <= std_logic_vector(unsigned(shl_ln136_4_mid2_fu_828_p3) + unsigned(iii_cast_reg_1161_pp0_iter1_reg));
    add_ln136_12_fu_624_p2 <= std_logic_vector(unsigned(zext_ln124_2_fu_416_p1) + unsigned(ii_4_fu_500_p2));
    add_ln136_13_fu_634_p2 <= std_logic_vector(unsigned(zext_ln136_5_fu_630_p1) + unsigned(select_ln121_9_cast_fu_398_p1));
    add_ln136_6_fu_312_p2 <= std_logic_vector(unsigned(zext_ln124_fu_276_p1) + unsigned(ap_phi_mux_ii_phi_fu_197_p4));
    add_ln136_7_fu_322_p2 <= std_logic_vector(unsigned(zext_ln136_fu_318_p1) + unsigned(p_shl_cast_fu_266_p1));
    add_ln136_8_fu_572_p2 <= std_logic_vector(unsigned(select_ln121_13_fu_492_p3) + unsigned(ii_4_fu_500_p2));
    add_ln136_9_fu_731_p2 <= std_logic_vector(unsigned(shl_ln136_2_mid2_fu_614_p4) + unsigned(iii_cast_fu_660_p1));
    add_ln136_fu_298_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_175_p4) + unsigned(ap_phi_mux_ii_phi_fu_197_p4));
    add_ln142_fu_742_p2 <= std_logic_vector(unsigned(iii_cast9_fu_656_p1) + unsigned(add40_mid2_fu_564_p3));
    and_ln121_fu_486_p2 <= (xor_ln121_fu_474_p2 and icmp_ln127_fu_480_p2);
    and_ln136_10_fu_1016_p2 <= (grp_fu_2720_p_dout0 and and_ln136_9_fu_1010_p2);
    and_ln136_11_fu_1103_p2 <= (or_ln136_13_fu_1097_p2 and or_ln136_12_fu_1079_p2);
    and_ln136_12_fu_1109_p2 <= (grp_fu_2720_p_dout0 and and_ln136_11_fu_1103_p2);
    and_ln136_7_fu_906_p2 <= (or_ln136_9_fu_900_p2 and or_ln136_8_fu_882_p2);
    and_ln136_8_fu_912_p2 <= (grp_fu_1083_p_dout0 and and_ln136_7_fu_906_p2);
    and_ln136_9_fu_1010_p2 <= (or_ln136_11_fu_1004_p2 and or_ln136_10_fu_986_p2);
    and_ln136_fu_801_p2 <= (or_ln136_7_fu_795_p2 and grp_fu_1083_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln121_fu_334_p2)
    begin
        if ((icmp_ln121_fu_334_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_175_p4_assign_proc : process(i_reg_171, icmp_ln121_reg_1131, ap_CS_fsm_pp0_stage0, select_ln121_13_reg_1140, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_175_p4 <= select_ln121_13_reg_1140;
        else 
            ap_phi_mux_i_phi_fu_175_p4 <= i_reg_171;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_197_p4_assign_proc : process(ii_reg_193, icmp_ln121_reg_1131, ap_CS_fsm_pp0_stage0, select_ln124_10_reg_1156, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ii_phi_fu_197_p4 <= select_ln124_10_reg_1156;
        else 
            ap_phi_mux_ii_phi_fu_197_p4 <= ii_reg_193;
        end if; 
    end process;


    ap_phi_mux_iii_phi_fu_208_p4_assign_proc : process(iii_reg_204, icmp_ln121_reg_1131, ap_CS_fsm_pp0_stage0, add_ln127_reg_1194, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_iii_phi_fu_208_p4 <= add_ln127_reg_1194;
        else 
            ap_phi_mux_iii_phi_fu_208_p4 <= iii_reg_204;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten58_phi_fu_164_p4_assign_proc : process(indvar_flatten58_reg_160, icmp_ln121_reg_1131, ap_CS_fsm_pp0_stage0, add_ln121_reg_1126, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten58_phi_fu_164_p4 <= add_ln121_reg_1126;
        else 
            ap_phi_mux_indvar_flatten58_phi_fu_164_p4 <= indvar_flatten58_reg_160;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_186_p4_assign_proc : process(indvar_flatten_reg_182, icmp_ln121_reg_1131, ap_CS_fsm_pp0_stage0, select_ln124_12_reg_1199, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln121_reg_1131 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_186_p4 <= select_ln124_12_reg_1199;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_186_p4 <= indvar_flatten_reg_182;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln136_10_fu_957_p1 <= select_ln136_4_reg_1211;
    bitcast_ln136_11_fu_1033_p1 <= input_load_6_reg_1240;
    bitcast_ln136_12_fu_1050_p1 <= select_ln136_5_reg_1228_pp0_iter3_reg;
    bitcast_ln136_7_fu_836_p1 <= input_load_4_reg_1187;
    bitcast_ln136_8_fu_853_p1 <= select_ln136_reg_1204;
    bitcast_ln136_9_fu_939_p1 <= reg_226;
    bitcast_ln136_fu_765_p1 <= reg_226;
    empty_36_fu_270_p2 <= (empty_fu_238_p1 or ap_const_lv3_1);
    empty_38_fu_354_p1 <= i_1_fu_328_p2(3 - 1 downto 0);
    empty_fu_238_p1 <= ap_phi_mux_i_phi_fu_175_p4(3 - 1 downto 0);
    grp_fu_1083_p_ce <= ap_const_logic_1;
    grp_fu_1083_p_din0 <= grp_fu_215_p0;
    grp_fu_1083_p_din1 <= grp_fu_215_p1;
    grp_fu_1083_p_opcode <= ap_const_lv5_2;
    grp_fu_215_ce <= ap_const_logic_1;
    grp_fu_215_opcode <= ap_const_lv5_2;

    grp_fu_215_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, input_load_4_reg_1187, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_215_p0 <= input_load_4_reg_1187;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_215_p0 <= input_r_q1;
        else 
            grp_fu_215_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_215_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, select_ln136_fu_807_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_215_p1 <= select_ln136_fu_807_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_215_p1 <= ap_const_lv32_0;
        else 
            grp_fu_215_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_215_p2 <= grp_fu_1083_p_dout0;
    grp_fu_221_ce <= ap_const_logic_1;
    grp_fu_221_opcode <= ap_const_lv5_2;

    grp_fu_221_p0_assign_proc : process(input_r_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, input_load_6_reg_1240, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_221_p0 <= input_load_6_reg_1240;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_221_p0 <= input_r_q1;
        else 
            grp_fu_221_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_221_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, select_ln136_4_reg_1211, select_ln136_5_reg_1228, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_221_p1 <= select_ln136_5_reg_1228;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_221_p1 <= select_ln136_4_reg_1211;
        else 
            grp_fu_221_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_221_p2 <= grp_fu_2720_p_dout0;
    grp_fu_2720_p_ce <= ap_const_logic_1;
    grp_fu_2720_p_din0 <= grp_fu_221_p0;
    grp_fu_2720_p_din1 <= grp_fu_221_p1;
    grp_fu_2720_p_opcode <= ap_const_lv5_2;
    i_1_fu_328_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_175_p4) + unsigned(ap_const_lv4_2));
    icmp_ln121_fu_334_p2 <= "1" when (ap_phi_mux_indvar_flatten58_phi_fu_164_p4 = ap_const_lv10_200) else "0";
    icmp_ln124_fu_340_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_186_p4 = ap_const_lv9_80) else "0";
    icmp_ln127_fu_480_p2 <= "1" when (ap_phi_mux_iii_phi_fu_208_p4 = ap_const_lv6_20) else "0";
    icmp_ln136_14_fu_789_p2 <= "1" when (trunc_ln136_fu_779_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_15_fu_870_p2 <= "0" when (tmp_20_fu_839_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_16_fu_876_p2 <= "1" when (trunc_ln136_7_fu_849_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_17_fu_888_p2 <= "0" when (tmp_21_fu_856_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_18_fu_894_p2 <= "1" when (trunc_ln136_8_fu_866_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_19_fu_974_p2 <= "0" when (tmp_23_fu_943_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_20_fu_980_p2 <= "1" when (trunc_ln136_9_fu_953_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_21_fu_992_p2 <= "0" when (tmp_24_fu_960_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_22_fu_998_p2 <= "1" when (trunc_ln136_10_fu_970_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_23_fu_1067_p2 <= "0" when (tmp_26_fu_1036_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_24_fu_1073_p2 <= "1" when (trunc_ln136_11_fu_1046_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_25_fu_1085_p2 <= "0" when (tmp_27_fu_1053_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_26_fu_1091_p2 <= "1" when (trunc_ln136_12_fu_1063_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_783_p2 <= "0" when (tmp_18_fu_769_p4 = ap_const_lv8_FF) else "1";
    ii_4_fu_500_p2 <= std_logic_vector(unsigned(select_ln121_fu_346_p3) + unsigned(ap_const_lv4_2));
    iii_cast9_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_fu_522_p3),9));
    iii_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_fu_522_p3),12));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln136_7_fu_737_p1, ap_block_pp0_stage1, zext_ln136_9_fu_1029_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln136_9_fu_1029_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln136_7_fu_737_p1(12 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln136_6_fu_726_p1, zext_ln136_8_fu_929_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln136_8_fu_929_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln136_6_fu_726_p1(12 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_290_p3 <= (p_lshr_f9_cast_fu_242_p4 & p_lshr_f_cast_fu_280_p4);
    mul_mid1_fu_540_p3 <= (select_ln121_8_fu_368_p3 & p_lshr_f_cast_mid1_fu_530_p4);
    mul_mid_fu_420_p3 <= (p_lshr_f9_cast_mid1_fu_358_p4 & ap_const_lv2_0);
    or_ln124_3_fu_608_p2 <= (select_ln124_8_fu_594_p3 or ap_const_lv6_1);
    or_ln124_fu_516_p2 <= (icmp_ln124_fu_340_p2 or and_ln121_fu_486_p2);
    or_ln136_10_fu_986_p2 <= (icmp_ln136_20_fu_980_p2 or icmp_ln136_19_fu_974_p2);
    or_ln136_11_fu_1004_p2 <= (icmp_ln136_22_fu_998_p2 or icmp_ln136_21_fu_992_p2);
    or_ln136_12_fu_1079_p2 <= (icmp_ln136_24_fu_1073_p2 or icmp_ln136_23_fu_1067_p2);
    or_ln136_13_fu_1097_p2 <= (icmp_ln136_26_fu_1091_p2 or icmp_ln136_25_fu_1085_p2);
    or_ln136_7_fu_795_p2 <= (icmp_ln136_fu_783_p2 or icmp_ln136_14_fu_789_p2);
    or_ln136_8_fu_882_p2 <= (icmp_ln136_16_fu_876_p2 or icmp_ln136_15_fu_870_p2);
    or_ln136_9_fu_900_p2 <= (icmp_ln136_18_fu_894_p2 or icmp_ln136_17_fu_888_p2);
    or_ln136_fu_664_p2 <= (shl_ln124_fu_602_p2 or select_ln124_fu_522_p3);
    output_r_address0 <= zext_ln142_fu_1122_p1(9 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        input_load_6_reg_1240 when (and_ln136_12_fu_1109_p2(0) = '1') else 
        select_ln136_5_reg_1228_pp0_iter3_reg;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln121_reg_1131_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln121_reg_1131_pp0_iter3_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_f9_cast_fu_242_p4 <= ap_phi_mux_i_phi_fu_175_p4(2 downto 1);
    p_lshr_f9_cast_mid1_fu_358_p4 <= i_1_fu_328_p2(2 downto 1);
    p_lshr_f_cast_fu_280_p4 <= ap_phi_mux_ii_phi_fu_197_p4(2 downto 1);
    p_lshr_f_cast_mid1_fu_530_p4 <= ii_4_fu_500_p2(2 downto 1);
    p_mid110_fu_402_p2 <= (empty_38_fu_354_p1 or ap_const_lv3_1);
    p_mid1_fu_376_p3 <= (empty_38_fu_354_p1 & ap_const_lv3_0);
    p_shl_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_260_p2),7));
    p_shl_fu_260_p2 <= (tmp_10_fu_252_p3 or ap_const_lv6_8);
    p_shl_mid1_fu_384_p2 <= (p_mid1_fu_376_p3 or ap_const_lv6_8);
    select_ln121_10_fu_408_p3 <= 
        p_mid110_fu_402_p2 when (icmp_ln124_fu_340_p2(0) = '1') else 
        empty_36_fu_270_p2;
    select_ln121_11_fu_436_p3 <= 
        tmp_16_mid_fu_428_p3 when (icmp_ln124_fu_340_p2(0) = '1') else 
        tmp_s_fu_304_p3;
    select_ln121_12_fu_466_p3 <= 
        zext_ln136_4_fu_462_p1 when (icmp_ln124_fu_340_p2(0) = '1') else 
        add_ln136_7_fu_322_p2;
    select_ln121_13_fu_492_p3 <= 
        i_1_fu_328_p2 when (icmp_ln124_fu_340_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_175_p4;
    select_ln121_14_fu_548_p3 <= 
        mul_mid_fu_420_p3 when (icmp_ln124_fu_340_p2(0) = '1') else 
        mul_fu_290_p3;
    select_ln121_15_fu_700_p3 <= 
        tmp_15_fu_680_p4 when (icmp_ln124_fu_340_p2(0) = '1') else 
        tmp_16_fu_690_p4;
    select_ln121_8_fu_368_p3 <= 
        p_lshr_f9_cast_mid1_fu_358_p4 when (icmp_ln124_fu_340_p2(0) = '1') else 
        p_lshr_f9_cast_fu_242_p4;
    select_ln121_9_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln121_9_fu_390_p3),7));
    select_ln121_9_fu_390_p3 <= 
        p_shl_mid1_fu_384_p2 when (icmp_ln124_fu_340_p2(0) = '1') else 
        p_shl_fu_260_p2;
    select_ln121_fu_346_p3 <= 
        ap_const_lv4_0 when (icmp_ln124_fu_340_p2(0) = '1') else 
        ap_phi_mux_ii_phi_fu_197_p4;
    select_ln124_10_fu_648_p3 <= 
        ii_4_fu_500_p2 when (and_ln121_fu_486_p2(0) = '1') else 
        select_ln121_fu_346_p3;
    select_ln124_11_fu_708_p3 <= 
        tmp_14_fu_670_p4 when (and_ln121_fu_486_p2(0) = '1') else 
        select_ln121_15_fu_700_p3;
    select_ln124_12_fu_759_p3 <= 
        ap_const_lv9_1 when (icmp_ln124_reg_1135(0) = '1') else 
        add_ln124_3_reg_1182;
    select_ln124_6_fu_556_p3 <= 
        mul_mid1_fu_540_p3 when (and_ln121_fu_486_p2(0) = '1') else 
        select_ln121_14_fu_548_p3;
    select_ln124_7_fu_578_p3 <= 
        tmp_dup_fu_506_p4 when (and_ln121_fu_486_p2(0) = '1') else 
        select_ln121_8_fu_368_p3;
    select_ln124_8_fu_594_p3 <= 
        tmp_16_mid1_fu_586_p3 when (and_ln121_fu_486_p2(0) = '1') else 
        select_ln121_11_fu_436_p3;
    select_ln124_9_fu_640_p3 <= 
        add_ln136_13_fu_634_p2 when (and_ln121_fu_486_p2(0) = '1') else 
        select_ln121_12_fu_466_p3;
    select_ln124_fu_522_p3 <= 
        ap_const_lv6_0 when (or_ln124_fu_516_p2(0) = '1') else 
        ap_phi_mux_iii_phi_fu_208_p4;
    select_ln136_4_fu_918_p3 <= 
        input_load_4_reg_1187 when (and_ln136_8_fu_912_p2(0) = '1') else 
        select_ln136_reg_1204;
    select_ln136_5_fu_1022_p3 <= 
        reg_226 when (and_ln136_10_fu_1016_p2(0) = '1') else 
        select_ln136_4_reg_1211;
    select_ln136_fu_807_p3 <= 
        reg_226 when (and_ln136_fu_801_p2(0) = '1') else 
        ap_const_lv32_0;
    shl_ln124_fu_602_p2 <= std_logic_vector(shift_left(unsigned(select_ln124_8_fu_594_p3),to_integer(unsigned('0' & ap_const_lv6_5(6-1 downto 0)))));
    shl_ln136_2_mid2_fu_614_p4 <= ((ap_const_lv1_0 & or_ln124_3_fu_608_p2) & ap_const_lv5_0);
    shl_ln136_3_mid2_fu_816_p3 <= (select_ln124_9_reg_1150_pp0_iter1_reg & ap_const_lv5_0);
    shl_ln136_4_mid2_fu_828_p3 <= (add_ln124_2_fu_823_p2 & ap_const_lv5_0);
    tmp_10_fu_252_p3 <= (empty_fu_238_p1 & ap_const_lv3_0);
    tmp_12_fu_444_p4 <= p_shl_mid1_fu_384_p2(5 downto 3);
    tmp_13_fu_454_p3 <= (tmp_12_fu_444_p4 & p_mid110_fu_402_p2);
    tmp_14_fu_670_p4 <= add_ln136_8_fu_572_p2(3 downto 1);
    tmp_15_fu_680_p4 <= i_1_fu_328_p2(3 downto 1);
    tmp_16_fu_690_p4 <= add_ln136_fu_298_p2(3 downto 1);
    tmp_16_mid1_fu_586_p3 <= (tmp_dup_fu_506_p4 & add_ln136_8_fu_572_p2);
    tmp_16_mid_fu_428_p3 <= (p_lshr_f9_cast_mid1_fu_358_p4 & i_1_fu_328_p2);
    tmp_17_fu_716_p4 <= ((select_ln124_7_fu_578_p3 & select_ln124_11_fu_708_p3) & or_ln136_fu_664_p2);
    tmp_18_fu_769_p4 <= bitcast_ln136_fu_765_p1(30 downto 23);
    tmp_20_fu_839_p4 <= bitcast_ln136_7_fu_836_p1(30 downto 23);
    tmp_21_fu_856_p4 <= bitcast_ln136_8_fu_853_p1(30 downto 23);
    tmp_23_fu_943_p4 <= bitcast_ln136_9_fu_939_p1(30 downto 23);
    tmp_24_fu_960_p4 <= bitcast_ln136_10_fu_957_p1(30 downto 23);
    tmp_26_fu_1036_p4 <= bitcast_ln136_11_fu_1033_p1(30 downto 23);
    tmp_27_fu_1053_p4 <= bitcast_ln136_12_fu_1050_p1(30 downto 23);
    tmp_dup_fu_506_p4 <= select_ln121_13_fu_492_p3(2 downto 1);
    tmp_s_fu_304_p3 <= (p_lshr_f9_cast_fu_242_p4 & add_ln136_fu_298_p2);
    trunc_ln136_10_fu_970_p1 <= bitcast_ln136_10_fu_957_p1(23 - 1 downto 0);
    trunc_ln136_11_fu_1046_p1 <= bitcast_ln136_11_fu_1033_p1(23 - 1 downto 0);
    trunc_ln136_12_fu_1063_p1 <= bitcast_ln136_12_fu_1050_p1(23 - 1 downto 0);
    trunc_ln136_7_fu_849_p1 <= bitcast_ln136_7_fu_836_p1(23 - 1 downto 0);
    trunc_ln136_8_fu_866_p1 <= bitcast_ln136_8_fu_853_p1(23 - 1 downto 0);
    trunc_ln136_9_fu_953_p1 <= bitcast_ln136_9_fu_939_p1(23 - 1 downto 0);
    trunc_ln136_fu_779_p1 <= bitcast_ln136_fu_765_p1(23 - 1 downto 0);
    xor_ln121_fu_474_p2 <= (icmp_ln124_fu_340_p2 xor ap_const_lv1_1);
    zext_ln124_2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln121_10_fu_408_p3),4));
    zext_ln124_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_270_p2),4));
    zext_ln136_4_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_454_p3),7));
    zext_ln136_5_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_12_fu_624_p2),7));
    zext_ln136_6_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_716_p4),64));
    zext_ln136_7_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_9_fu_731_p2),64));
    zext_ln136_8_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_10_fu_924_p2),64));
    zext_ln136_9_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_11_reg_1223),64));
    zext_ln136_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_6_fu_312_p2),7));
    zext_ln142_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_reg_1177_pp0_iter3_reg),64));
end behav;

-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_dense_relu_layer_12_weights_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_dense_relu_layer_12_weights_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111111000101010110011100011011", 
    1 => "00111110010100001011001000011000", 
    2 => "00111111001010000111000011110101", 
    3 => "00111101101000110000010001100000", 
    4 => "00111110101011111111111101001011", 
    5 => "00111110110011100101110010000100", 
    6 => "10111111001100011111000111111101", 
    7 => "00111110010001110110011011111010", 
    8 => "00111110010000100010001001001010", 
    9 => "00111110110101010110100110011000", 
    10 => "10111110000011111110100110010100", 
    11 => "00111110111010111111000011101110", 
    12 => "10111110011010101011101001101100", 
    13 => "00111011011101110010010100001001", 
    14 => "00111110111110000000100010110010", 
    15 => "00111110111001111000001011111001", 
    16 => "10111110110001000011011100011010", 
    17 => "10111110101101101100010110010011", 
    18 => "00111110011001101010110001001101", 
    19 => "00111101111101101101001001000011", 
    20 => "10111111001100000111101011000011", 
    21 => "10111111010000011100110101010110", 
    22 => "10111110011010110101111010000111", 
    23 => "00111110100110110001000001101110", 
    24 => "00111110101000100001001101010011", 
    25 => "10111111001110101100010100010110", 
    26 => "00111101111010001110101011111111", 
    27 => "10111101101100010100001111000111", 
    28 => "10111111000110111111011010110101", 
    29 => "10111110110111110001001011101000", 
    30 => "00111110101110011110101100010101", 
    31 => "00111101101010100101001100000001", 
    32 => "00111101100110110111000110101000", 
    33 => "00111101100101111011100110111101", 
    34 => "10111111001110101001001100001100", 
    35 => "10111110110010101101110110011100", 
    36 => "10111110110101101111100000000010", 
    37 => "10111111000011000100001111000011", 
    38 => "00111111000001000010101001110111", 
    39 => "00111110110001010110011000001000", 
    40 => "10111111001100001100000110101010", 
    41 => "10111111000101010001100111000000", 
    42 => "00111111001110101000001010010110", 
    43 => "00111111000101110110100101100011", 
    44 => "00111110011011110100011111000011", 
    45 => "00111111000101101100100110011010", 
    46 => "10111110101011011011100000101001", 
    47 => "10111111010000100010000011011010", 
    48 => "00111110100100100010001001000010", 
    49 => "10111111010001101001110110000110", 
    50 => "00111101010111111110111101100111", 
    51 => "00111111000100010001001100000100", 
    52 => "00111101111111110110000010011000", 
    53 => "10111111000110001110100000110101", 
    54 => "00111110101000100010100100001111", 
    55 => "00111101000011101001111001110000", 
    56 => "00111101001100100000000000111111", 
    57 => "10111110100100011100000011010000", 
    58 => "10111110111011000000000110101010", 
    59 => "00111110100100101011110010100110", 
    60 => "00111111001001011010110001000101", 
    61 => "00111111001000101010010011010110", 
    62 => "10111111010000010100011100001111", 
    63 => "10111111000010110001111101101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_dense_relu_layer_12_weights is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_dense_relu_layer_12_weights is
    component infer_dense_relu_layer_12_weights_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_dense_relu_layer_12_weights_rom_U :  component infer_dense_relu_layer_12_weights_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



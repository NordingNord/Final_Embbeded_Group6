-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_set3DFloatArray is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_we0 : OUT STD_LOGIC;
    array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of infer_set3DFloatArray is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln8_fu_89_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln12_fu_148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln8_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_22_fu_160_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten11_reg_56 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_67 : STD_LOGIC_VECTOR (6 downto 0);
    signal iii_reg_78 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln10_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_fu_131_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_32_fu_139_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_fu_154_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    iii_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iii_reg_78 <= add_ln12_fu_148_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_78 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten11_reg_56 <= add_ln8_fu_89_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten11_reg_56 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_67 <= select_ln10_22_fu_160_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_67 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_95_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_154_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_67) + unsigned(ap_const_lv7_1));
    add_ln12_fu_148_p2 <= std_logic_vector(unsigned(select_ln10_fu_131_p3) + unsigned(ap_const_lv6_1));
    add_ln8_fu_89_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_56) + unsigned(ap_const_lv6_1));
    and_ln8_fu_119_p2 <= (xor_ln8_fu_107_p2 and icmp_ln12_fu_113_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_r_address0 <= zext_ln14_fu_143_p1(5 - 1 downto 0);

    array_r_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_r_d0 <= ap_const_lv32_0;

    array_r_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_95_p2)
    begin
        if (((icmp_ln8_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            array_r_we0 <= ap_const_logic_1;
        else 
            array_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_32_fu_139_p1 <= select_ln10_fu_131_p3(5 - 1 downto 0);
    icmp_ln10_fu_101_p2 <= "1" when (indvar_flatten_reg_67 = ap_const_lv7_20) else "0";
    icmp_ln12_fu_113_p2 <= "1" when (iii_reg_78 = ap_const_lv6_20) else "0";
    icmp_ln8_fu_95_p2 <= "1" when (indvar_flatten11_reg_56 = ap_const_lv6_20) else "0";
    or_ln10_fu_125_p2 <= (icmp_ln10_fu_101_p2 or and_ln8_fu_119_p2);
    select_ln10_22_fu_160_p3 <= 
        ap_const_lv7_1 when (icmp_ln10_fu_101_p2(0) = '1') else 
        add_ln10_fu_154_p2;
    select_ln10_fu_131_p3 <= 
        ap_const_lv6_0 when (or_ln10_fu_125_p2(0) = '1') else 
        iii_reg_78;
    xor_ln8_fu_107_p2 <= (icmp_ln10_fu_101_p2 xor ap_const_lv1_1);
    zext_ln14_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_fu_139_p1),64));
end behav;

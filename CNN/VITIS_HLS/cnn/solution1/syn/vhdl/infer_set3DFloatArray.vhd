-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_set3DFloatArray is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_we0 : OUT STD_LOGIC;
    array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of infer_set3DFloatArray is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln8_fu_131_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln8_fu_257_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln8_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_20_fu_305_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln12_fu_334_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln10_21_fu_346_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten17_reg_76 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_87 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_98 : STD_LOGIC_VECTOR (8 downto 0);
    signal ii_reg_109 : STD_LOGIC_VECTOR (2 downto 0);
    signal iii_reg_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl1_fu_145_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_137_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_153_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln10_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_6_fu_191_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl1_mid1_fu_205_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid1_fu_197_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_mid1_fu_213_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul7_mid1_fu_217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul7_fu_157_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_163_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln12_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_mid27_fu_183_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln12_mid216_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_265_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln12_mid214_fu_231_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_19_fu_293_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_fu_277_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_cast_fu_313_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul7_mid2_fu_223_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_5_fu_317_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln10_19_cast_fu_301_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_fu_323_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_6_fu_340_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_87 <= select_ln8_fu_257_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_87 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ii_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_reg_109 <= select_ln10_20_fu_305_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_109 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    iii_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iii_reg_120 <= add_ln12_fu_334_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_120 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten17_reg_76 <= add_ln8_fu_131_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten17_reg_76 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_98 <= select_ln10_21_fu_346_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_98 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_171_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_6_fu_340_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_98) + unsigned(ap_const_lv9_1));
    add_ln10_fu_265_p2 <= std_logic_vector(unsigned(ii_mid27_fu_183_p3) + unsigned(ap_const_lv3_1));
    add_ln12_fu_334_p2 <= std_logic_vector(unsigned(select_ln10_fu_277_p3) + unsigned(ap_const_lv6_1));
    add_ln14_5_fu_317_p2 <= std_logic_vector(unsigned(iii_cast_fu_313_p1) + unsigned(mul7_mid2_fu_223_p3));
    add_ln14_fu_323_p2 <= std_logic_vector(unsigned(add_ln14_5_fu_317_p2) + unsigned(select_ln10_19_cast_fu_301_p1));
    add_ln8_6_fu_191_p2 <= std_logic_vector(unsigned(i_reg_87) + unsigned(ap_const_lv3_1));
    add_ln8_fu_131_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_76) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_r_address0 <= zext_ln14_fu_329_p1(10 - 1 downto 0);

    array_r_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_r_d0 <= ap_const_lv32_0;

    array_r_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_171_p2)
    begin
        if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            array_r_we0 <= ap_const_logic_1;
        else 
            array_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln10_fu_177_p2 <= "1" when (indvar_flatten_reg_98 = ap_const_lv9_A0) else "0";
    icmp_ln12_fu_245_p2 <= "1" when (iii_reg_120 = ap_const_lv6_20) else "0";
    icmp_ln12_mid216_fu_251_p2 <= (not_exitcond_flatten_fu_239_p2 and icmp_ln12_fu_245_p2);
    icmp_ln8_fu_171_p2 <= "1" when (indvar_flatten17_reg_76 = ap_const_lv10_320) else "0";
    ii_mid27_fu_183_p3 <= 
        ap_const_lv3_0 when (icmp_ln10_fu_177_p2(0) = '1') else 
        ii_reg_109;
    iii_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_fu_277_p3),10));
    mul7_fu_157_p2 <= std_logic_vector(unsigned(p_shl_fu_137_p3) + unsigned(p_shl1_cast_fu_153_p1));
    mul7_mid1_fu_217_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_197_p3) + unsigned(p_shl1_cast_mid1_fu_213_p1));
    mul7_mid2_fu_223_p3 <= 
        mul7_mid1_fu_217_p2 when (icmp_ln10_fu_177_p2(0) = '1') else 
        mul7_fu_157_p2;
    not_exitcond_flatten_fu_239_p2 <= (icmp_ln10_fu_177_p2 xor ap_const_lv1_1);
    or_ln10_fu_271_p2 <= (icmp_ln12_mid216_fu_251_p2 or icmp_ln10_fu_177_p2);
    p_mid1_fu_285_p3 <= (add_ln10_fu_265_p2 & ap_const_lv5_0);
    p_shl1_cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_145_p3),10));
    p_shl1_cast_mid1_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_205_p3),10));
    p_shl1_fu_145_p3 <= (i_reg_87 & ap_const_lv5_0);
    p_shl1_mid1_fu_205_p3 <= (add_ln8_6_fu_191_p2 & ap_const_lv5_0);
    p_shl_fu_137_p3 <= (i_reg_87 & ap_const_lv7_0);
    p_shl_mid1_fu_197_p3 <= (add_ln8_6_fu_191_p2 & ap_const_lv7_0);
    select_ln10_19_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_19_fu_293_p3),10));
    select_ln10_19_fu_293_p3 <= 
        p_mid1_fu_285_p3 when (icmp_ln12_mid216_fu_251_p2(0) = '1') else 
        zext_ln12_mid214_fu_231_p3;
    select_ln10_20_fu_305_p3 <= 
        add_ln10_fu_265_p2 when (icmp_ln12_mid216_fu_251_p2(0) = '1') else 
        ii_mid27_fu_183_p3;
    select_ln10_21_fu_346_p3 <= 
        ap_const_lv9_1 when (icmp_ln10_fu_177_p2(0) = '1') else 
        add_ln10_6_fu_340_p2;
    select_ln10_fu_277_p3 <= 
        ap_const_lv6_0 when (or_ln10_fu_271_p2(0) = '1') else 
        iii_reg_120;
    select_ln8_fu_257_p3 <= 
        add_ln8_6_fu_191_p2 when (icmp_ln10_fu_177_p2(0) = '1') else 
        i_reg_87;
    tmp_fu_163_p3 <= (ii_reg_109 & ap_const_lv5_0);
    zext_ln12_mid214_fu_231_p3 <= 
        ap_const_lv8_0 when (icmp_ln10_fu_177_p2(0) = '1') else 
        tmp_fu_163_p3;
    zext_ln14_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_323_p2),64));
end behav;

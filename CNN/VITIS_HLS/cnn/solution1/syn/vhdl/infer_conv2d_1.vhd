-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_conv2d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_763_p_ce : OUT STD_LOGIC;
    grp_fu_770_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_770_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_770_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_770_p_ce : OUT STD_LOGIC;
    grp_fu_788_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_788_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_788_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_788_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_788_p_ce : OUT STD_LOGIC );
end;


architecture behav of infer_conv2d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_A20 : STD_LOGIC_VECTOR (11 downto 0) := "101000100000";
    constant ap_const_lv10_120 : STD_LOGIC_VECTOR (9 downto 0) := "0100100000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_4_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal layer_4_weights_ce0 : STD_LOGIC;
    signal layer_4_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_4_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_4_bias_ce0 : STD_LOGIC;
    signal layer_4_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten36_reg_216 : STD_LOGIC_VECTOR (8 downto 0);
    signal iv_reg_227 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_238 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_249 : STD_LOGIC_VECTOR (2 downto 0);
    signal vi_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal add4320_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln71_2_fu_296_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln71_2_reg_849 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln74_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_5_fu_412_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln71_5_reg_862 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_mid2_fu_436_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal iii_mid2_reg_868 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_cast_mid2_fu_444_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_cast_mid2_reg_875 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_addr_reg_881 : STD_LOGIC_VECTOR (11 downto 0);
    signal ii_cast_mid2_cast_fu_497_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_cast_mid2_cast_reg_886 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln77_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_3_fu_503_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln77_3_reg_896 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln83_fu_506_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_reg_906 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln83_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_911_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_911_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_5_fu_572_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_5_reg_920 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_fu_622_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_reg_926 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_5_fu_658_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln86_5_reg_931 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln91_fu_693_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln91_reg_941 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln86_3_fu_727_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_3_reg_951 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer_4_weights_load_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln95_fu_752_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln95_reg_961 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln86_7_fu_768_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_7_reg_971 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln77_fu_774_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln77_reg_996 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_fu_785_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln74_reg_1001 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer_4_bias_load_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal indvar_flatten80_reg_160 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_reg_171 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten50_reg_182 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal iii_reg_205 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten36_phi_fu_220_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_iv_phi_fu_231_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_242_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v_phi_fu_253_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_vi_phi_fu_264_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_add4320_phi_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum19_cast_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_2_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal empty_fu_302_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_fu_312_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast_fu_308_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_326_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_cast_fu_332_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_320_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid_fu_372_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast_mid1_fu_368_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid1_fu_380_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln77_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln71_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_fu_342_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln71_fu_360_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln71_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_72_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_420_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_cast_dup_fu_426_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln71_4_fu_386_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_67_fu_336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid146_fu_452_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln71_6_fu_458_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_73_fu_466_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln77_4_fu_482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid1_fu_474_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum19_fu_486_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvars_iv_next34_fu_512_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_68_fu_522_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl2_fu_526_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_fu_518_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_fu_534_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_1_fu_566_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln95_3_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln89_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln83_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_558_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln83_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next34_mid1_fu_630_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_70_fu_640_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl2_mid1_fu_644_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_cast_mid1_fu_636_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next34_dup_fu_610_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln86_fu_666_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_fu_670_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln94_2_fu_652_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_4_fu_679_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_6_fu_584_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln86_6_fu_685_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln94_fu_697_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_5_fu_701_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln83_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_707_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln98_2_fu_717_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_841_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln91_fu_736_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln91_fu_739_p2 : STD_LOGIC_VECTOR (6 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln91_fu_739_p2 : signal is "no";
    signal shl_ln_fu_744_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_fu_733_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln98_fu_757_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln74_2_fu_779_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln49_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_795_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_805_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln49_8_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_841_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_841_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_841_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_281_ce : STD_LOGIC;
    signal grp_fu_286_ce : STD_LOGIC;
    signal grp_fu_291_ce : STD_LOGIC;
    signal grp_fu_291_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_841_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component infer_mac_muladd_4ns_5ns_4ns_7_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component infer_conv2d_1_layer_4_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_conv2d_1_layer_4_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer_4_weights_U : component infer_conv2d_1_layer_4_weights
    generic map (
        DataWidth => 32,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_4_weights_address0,
        ce0 => layer_4_weights_ce0,
        q0 => layer_4_weights_q0);

    layer_4_bias_U : component infer_conv2d_1_layer_4_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_4_bias_address0,
        ce0 => layer_4_bias_ce0,
        q0 => layer_4_bias_q0);

    mac_muladd_4ns_5ns_4ns_7_4_1_U35 : component infer_mac_muladd_4ns_5ns_4ns_7_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_841_p0,
        din1 => grp_fu_841_p1,
        din2 => grp_fu_841_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_841_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add4320_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                add4320_reg_271 <= grp_fu_763_p_dout0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                add4320_reg_271 <= output_r_q0;
            end if; 
        end if;
    end process;

    i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_reg_171 <= select_ln71_5_reg_862;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_171 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    ii_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                ii_reg_194 <= ii_cast_mid2_reg_875;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_194 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    iii_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                iii_reg_205 <= add_ln77_reg_996;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iii_reg_205 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten36_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten36_reg_216 <= add_ln83_reg_906;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten36_reg_216 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten50_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                indvar_flatten50_reg_182 <= select_ln74_reg_1001;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten50_reg_182 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten80_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                indvar_flatten80_reg_160 <= add_ln71_2_reg_849;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten80_reg_160 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_238 <= select_ln86_7_reg_971;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_238 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iv_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                iv_reg_227 <= select_ln83_5_reg_920;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                iv_reg_227 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    v_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                v_reg_249 <= select_ln86_5_reg_931;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_reg_249 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    vi_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                vi_reg_260 <= add_ln95_reg_961;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vi_reg_260 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln71_2_reg_849 <= add_ln71_2_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln77_reg_996 <= add_ln77_fu_774_p2;
                select_ln74_reg_1001 <= select_ln74_fu_785_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln83_reg_906 <= add_ln83_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_fu_546_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln86_3_reg_951 <= add_ln86_3_fu_727_p2;
                icmp_ln86_reg_915 <= icmp_ln86_fu_552_p2;
                select_ln86_reg_926 <= select_ln86_fu_622_p3;
                trunc_ln91_reg_941 <= trunc_ln91_fu_693_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln95_reg_961 <= add_ln95_fu_752_p2;
                select_ln86_7_reg_971 <= select_ln86_7_fu_768_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_reg_1011 <= grp_fu_763_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln74_reg_857 <= icmp_ln74_fu_354_p2;
                ii_cast_mid2_reg_875 <= ii_cast_mid2_fu_444_p3;
                iii_mid2_reg_868 <= iii_mid2_fu_436_p3;
                output_addr_reg_881 <= sum19_cast_fu_492_p1(12 - 1 downto 0);
                select_ln71_5_reg_862 <= select_ln71_5_fu_412_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln83_reg_911 <= icmp_ln83_fu_546_p2;
                icmp_ln83_reg_911_pp0_iter1_reg <= icmp_ln83_reg_911;
                icmp_ln83_reg_911_pp0_iter2_reg <= icmp_ln83_reg_911_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    ii_cast_mid2_cast_reg_886(3 downto 0) <= ii_cast_mid2_cast_fu_497_p1(3 downto 0);
                    zext_ln77_3_reg_896(5 downto 0) <= zext_ln77_3_fu_503_p1(5 downto 0);
                    zext_ln77_reg_891(5 downto 0) <= zext_ln77_fu_500_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                layer_4_bias_load_reg_1006 <= layer_4_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                layer_4_weights_load_reg_956 <= layer_4_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln83_reg_911_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_reg_981 <= grp_fu_770_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_fu_546_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln83_5_reg_920 <= select_ln83_5_fu_572_p3;
                select_ln86_5_reg_931 <= select_ln86_5_fu_658_p3;
            end if;
        end if;
    end process;
    ii_cast_mid2_cast_reg_886(6 downto 4) <= "000";
    zext_ln77_reg_891(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln77_3_reg_896(13 downto 6) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_348_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln83_reg_911, ap_enable_reg_pp0_iter3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln71_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_reg_911 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln83_reg_911 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln71_2_fu_296_p2 <= std_logic_vector(unsigned(indvar_flatten80_reg_160) + unsigned(ap_const_lv12_1));
    add_ln71_fu_342_p2 <= std_logic_vector(unsigned(i_reg_171) + unsigned(ap_const_lv4_1));
    add_ln74_2_fu_779_p2 <= std_logic_vector(unsigned(indvar_flatten50_reg_182) + unsigned(ap_const_lv10_1));
    add_ln74_fu_420_p2 <= std_logic_vector(unsigned(select_ln71_fu_360_p3) + unsigned(ap_const_lv4_1));
    add_ln77_fu_774_p2 <= std_logic_vector(unsigned(iii_mid2_reg_868) + unsigned(ap_const_lv6_1));
    add_ln83_1_fu_566_p2 <= std_logic_vector(unsigned(ap_phi_mux_iv_phi_fu_231_p4) + unsigned(ap_const_lv6_1));
    add_ln83_fu_506_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten36_phi_fu_220_p4) + unsigned(ap_const_lv9_1));
    add_ln86_3_fu_727_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_242_p4) + unsigned(ap_const_lv4_1));
    add_ln86_fu_670_p2 <= std_logic_vector(unsigned(select_ln71_5_reg_862) + unsigned(sext_ln86_fu_666_p1));
    add_ln91_fu_739_p2 <= std_logic_vector(unsigned(grp_fu_841_p3) + unsigned(sext_ln91_fu_736_p1));
    add_ln95_3_fu_540_p2 <= std_logic_vector(unsigned(sub_ln94_fu_534_p2) + unsigned(ap_const_lv4_1));
    add_ln95_4_fu_679_p2 <= std_logic_vector(unsigned(sub_ln94_2_fu_652_p2) + unsigned(ap_const_lv4_1));
    add_ln95_5_fu_701_p2 <= std_logic_vector(unsigned(select_ln86_6_fu_685_p3) + unsigned(sext_ln94_fu_697_p1));
    add_ln95_fu_752_p2 <= std_logic_vector(unsigned(select_ln86_reg_926) + unsigned(ap_const_lv3_1));
    add_ln98_2_fu_717_p2 <= std_logic_vector(unsigned(shl_ln1_fu_707_p4) + unsigned(zext_ln77_3_reg_896));
    add_ln98_fu_757_p2 <= std_logic_vector(unsigned(shl_ln_fu_744_p3) + unsigned(zext_ln83_fu_733_p1));
    and_ln49_fu_827_p2 <= (or_ln49_fu_821_p2 and grp_fu_788_p_dout0);
    and_ln71_fu_406_p2 <= (xor_ln71_fu_394_p2 and icmp_ln77_fu_400_p2);
    and_ln83_fu_604_p2 <= (xor_ln83_fu_592_p2 and icmp_ln89_fu_598_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(8);
    ap_CS_fsm_state19 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(13);
    ap_CS_fsm_state24 <= ap_CS_fsm(14);
    ap_CS_fsm_state25 <= ap_CS_fsm(15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln83_reg_911)
    begin
        if ((icmp_ln83_reg_911 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln71_fu_348_p2)
    begin
        if ((((icmp_ln71_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add4320_phi_fu_274_p4_assign_proc : process(add4320_reg_271, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_911_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, grp_fu_763_p_dout0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_add4320_phi_fu_274_p4 <= grp_fu_763_p_dout0;
        else 
            ap_phi_mux_add4320_phi_fu_274_p4 <= add4320_reg_271;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten36_phi_fu_220_p4_assign_proc : process(indvar_flatten36_reg_216, add_ln83_reg_906, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_911, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten36_phi_fu_220_p4 <= add_ln83_reg_906;
        else 
            ap_phi_mux_indvar_flatten36_phi_fu_220_p4 <= indvar_flatten36_reg_216;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_242_p4_assign_proc : process(indvar_flatten_reg_238, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_911, select_ln86_7_reg_971, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_242_p4 <= select_ln86_7_reg_971;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_242_p4 <= indvar_flatten_reg_238;
        end if; 
    end process;


    ap_phi_mux_iv_phi_fu_231_p4_assign_proc : process(iv_reg_227, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_911, select_ln83_5_reg_920, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_iv_phi_fu_231_p4 <= select_ln83_5_reg_920;
        else 
            ap_phi_mux_iv_phi_fu_231_p4 <= iv_reg_227;
        end if; 
    end process;


    ap_phi_mux_v_phi_fu_253_p4_assign_proc : process(v_reg_249, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_911, select_ln86_5_reg_931, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_v_phi_fu_253_p4 <= select_ln86_5_reg_931;
        else 
            ap_phi_mux_v_phi_fu_253_p4 <= v_reg_249;
        end if; 
    end process;


    ap_phi_mux_vi_phi_fu_264_p4_assign_proc : process(vi_reg_260, ap_CS_fsm_pp0_stage0, icmp_ln83_reg_911, add_ln95_reg_961, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_reg_911 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_vi_phi_fu_264_p4 <= add_ln95_reg_961;
        else 
            ap_phi_mux_vi_phi_fu_264_p4 <= vi_reg_260;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln71_fu_348_p2)
    begin
        if (((icmp_ln71_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln49_fu_792_p1 <= add_reg_1011;
    empty_67_fu_336_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_332_p1) + unsigned(tmp_fu_320_p2));
    empty_68_fu_522_p1 <= indvars_iv_next34_fu_512_p2(2 - 1 downto 0);
    empty_70_fu_640_p1 <= indvars_iv_next34_mid1_fu_630_p2(2 - 1 downto 0);
    empty_72_fu_430_p2 <= (icmp_ln74_fu_354_p2 or and_ln71_fu_406_p2);
    empty_73_fu_466_p3 <= 
        p_mid146_fu_452_p2 when (and_ln71_fu_406_p2(0) = '1') else 
        select_ln71_6_fu_458_p3;
    empty_fu_302_p2 <= std_logic_vector(unsigned(i_reg_171) + unsigned(ap_const_lv4_F));
    grp_fu_281_ce <= ap_const_logic_1;

    grp_fu_281_p0_assign_proc : process(add4320_reg_271, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_phi_mux_add4320_phi_fu_274_p4, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_281_p0 <= add4320_reg_271;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_281_p0 <= ap_phi_mux_add4320_phi_fu_274_p4;
        else 
            grp_fu_281_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_281_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, mul_reg_981, layer_4_bias_load_reg_1006, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_281_p1 <= layer_4_bias_load_reg_1006;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_281_p1 <= mul_reg_981;
        else 
            grp_fu_281_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_281_p2 <= grp_fu_763_p_dout0;
    grp_fu_286_ce <= ap_const_logic_1;
    grp_fu_286_p0 <= input_r_q0;
    grp_fu_286_p1 <= layer_4_weights_load_reg_956;
    grp_fu_286_p2 <= grp_fu_770_p_dout0;
    grp_fu_291_ce <= ap_const_logic_1;
    grp_fu_291_opcode <= ap_const_lv5_2;
    grp_fu_291_p0 <= add_reg_1011;
    grp_fu_291_p1 <= ap_const_lv32_0;
    grp_fu_291_p2 <= grp_fu_788_p_dout0;
    grp_fu_763_p_ce <= ap_const_logic_1;
    grp_fu_763_p_din0 <= grp_fu_281_p0;
    grp_fu_763_p_din1 <= grp_fu_281_p1;
    grp_fu_763_p_opcode <= ap_const_lv2_0;
    grp_fu_770_p_ce <= ap_const_logic_1;
    grp_fu_770_p_din0 <= input_r_q0;
    grp_fu_770_p_din1 <= layer_4_weights_load_reg_956;
    grp_fu_788_p_ce <= ap_const_logic_1;
    grp_fu_788_p_din0 <= add_reg_1011;
    grp_fu_788_p_din1 <= ap_const_lv32_0;
    grp_fu_788_p_opcode <= ap_const_lv5_2;
    grp_fu_841_p0 <= grp_fu_841_p00(4 - 1 downto 0);
    grp_fu_841_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_fu_670_p2),7));
    grp_fu_841_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    grp_fu_841_p2 <= ii_cast_mid2_cast_reg_886(4 - 1 downto 0);
    icmp_ln49_8_fu_815_p2 <= "1" when (trunc_ln49_fu_805_p1 = ap_const_lv23_0) else "0";
    icmp_ln49_fu_809_p2 <= "0" when (tmp_s_fu_795_p4 = ap_const_lv8_FF) else "1";
    icmp_ln71_fu_348_p2 <= "1" when (indvar_flatten80_reg_160 = ap_const_lv12_A20) else "0";
    icmp_ln74_fu_354_p2 <= "1" when (indvar_flatten50_reg_182 = ap_const_lv10_120) else "0";
    icmp_ln77_fu_400_p2 <= "1" when (iii_reg_205 = ap_const_lv6_20) else "0";
    icmp_ln83_fu_546_p2 <= "1" when (ap_phi_mux_indvar_flatten36_phi_fu_220_p4 = ap_const_lv9_120) else "0";
    icmp_ln86_fu_552_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_242_p4 = ap_const_lv4_9) else "0";
    icmp_ln89_fu_598_p2 <= "1" when (ap_phi_mux_vi_phi_fu_264_p4 = ap_const_lv3_2) else "0";
    ii_cast_dup_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln71_fu_360_p3),7));
    ii_cast_mid2_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_cast_mid2_reg_875),7));
    ii_cast_mid2_fu_444_p3 <= 
        add_ln74_fu_420_p2 when (and_ln71_fu_406_p2(0) = '1') else 
        select_ln71_fu_360_p3;
    iii_mid2_fu_436_p3 <= 
        ap_const_lv6_0 when (empty_72_fu_430_p2(0) = '1') else 
        iii_reg_205;
    indvars_iv_next34_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_fu_512_p2),4));
    indvars_iv_next34_cast_mid1_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next34_mid1_fu_630_p2),4));
    indvars_iv_next34_dup_fu_610_p2 <= std_logic_vector(unsigned(select_ln83_fu_558_p3) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_fu_512_p2 <= std_logic_vector(unsigned(ap_phi_mux_v_phi_fu_253_p4) + unsigned(ap_const_lv3_1));
    indvars_iv_next34_mid1_fu_630_p2 <= std_logic_vector(unsigned(select_ln83_fu_558_p3) + unsigned(ap_const_lv3_2));
    input_r_address0 <= zext_ln98_fu_763_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_4_bias_address0 <= zext_ln77_reg_891(5 - 1 downto 0);

    layer_4_bias_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_4_bias_ce0 <= ap_const_logic_1;
        else 
            layer_4_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_4_weights_address0 <= zext_ln98_2_fu_722_p1(14 - 1 downto 0);

    layer_4_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            layer_4_weights_ce0 <= ap_const_logic_1;
        else 
            layer_4_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln49_fu_821_p2 <= (icmp_ln49_fu_809_p2 or icmp_ln49_8_fu_815_p2);
    or_ln86_fu_616_p2 <= (icmp_ln86_fu_552_p2 or and_ln83_fu_604_p2);

    output_r_address0_assign_proc : process(ap_CS_fsm_state2, output_addr_reg_881, ap_CS_fsm_state25, sum19_cast_fu_492_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_address0 <= output_addr_reg_881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= sum19_cast_fu_492_p1(12 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        add_reg_1011 when (and_ln49_fu_827_p2(0) = '1') else 
        ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_302_p2),7));
    p_cast_mid1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_171),7));
    p_mid146_fu_452_p2 <= std_logic_vector(unsigned(ii_cast_dup_fu_426_p1) + unsigned(select_ln71_4_fu_386_p3));
    p_mid1_fu_474_p3 <= (empty_73_fu_466_p3 & ap_const_lv5_0);
    p_mid_fu_372_p3 <= (i_reg_171 & ap_const_lv3_0);
    p_shl2_fu_526_p3 <= (empty_68_fu_522_p1 & ap_const_lv2_0);
    p_shl2_mid1_fu_644_p3 <= (empty_70_fu_640_p1 & ap_const_lv2_0);
    select_ln71_4_fu_386_p3 <= 
        tmp_mid1_fu_380_p2 when (icmp_ln74_fu_354_p2(0) = '1') else 
        tmp_fu_320_p2;
    select_ln71_5_fu_412_p3 <= 
        add_ln71_fu_342_p2 when (icmp_ln74_fu_354_p2(0) = '1') else 
        i_reg_171;
    select_ln71_6_fu_458_p3 <= 
        tmp_mid1_fu_380_p2 when (icmp_ln74_fu_354_p2(0) = '1') else 
        empty_67_fu_336_p2;
    select_ln71_fu_360_p3 <= 
        ap_const_lv4_1 when (icmp_ln74_fu_354_p2(0) = '1') else 
        ii_reg_194;
    select_ln74_fu_785_p3 <= 
        ap_const_lv10_1 when (icmp_ln74_reg_857(0) = '1') else 
        add_ln74_2_fu_779_p2;
    select_ln83_5_fu_572_p3 <= 
        add_ln83_1_fu_566_p2 when (icmp_ln86_fu_552_p2(0) = '1') else 
        ap_phi_mux_iv_phi_fu_231_p4;
    select_ln83_6_fu_584_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_fu_552_p2(0) = '1') else 
        add_ln95_3_fu_540_p2;
    select_ln83_fu_558_p3 <= 
        ap_const_lv3_7 when (icmp_ln86_fu_552_p2(0) = '1') else 
        ap_phi_mux_v_phi_fu_253_p4;
    select_ln86_5_fu_658_p3 <= 
        indvars_iv_next34_dup_fu_610_p2 when (and_ln83_fu_604_p2(0) = '1') else 
        select_ln83_fu_558_p3;
    select_ln86_6_fu_685_p3 <= 
        add_ln95_4_fu_679_p2 when (and_ln83_fu_604_p2(0) = '1') else 
        select_ln83_6_fu_584_p3;
    select_ln86_7_fu_768_p3 <= 
        ap_const_lv4_1 when (icmp_ln86_reg_915(0) = '1') else 
        add_ln86_3_reg_951;
    select_ln86_fu_622_p3 <= 
        ap_const_lv3_7 when (or_ln86_fu_616_p2(0) = '1') else 
        ap_phi_mux_vi_phi_fu_264_p4;
        sext_ln86_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln86_5_fu_658_p3),4));

        sext_ln91_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln91_reg_941),7));

        sext_ln94_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln91_fu_693_p1),4));

    shl_ln1_fu_707_p4 <= ((add_ln95_5_fu_701_p2 & trunc_ln83_fu_580_p1) & ap_const_lv5_0);
    shl_ln_fu_744_p3 <= (add_ln91_fu_739_p2 & ap_const_lv5_0);
    sub_ln94_2_fu_652_p2 <= std_logic_vector(unsigned(p_shl2_mid1_fu_644_p3) - unsigned(indvars_iv_next34_cast_mid1_fu_636_p1));
    sub_ln94_fu_534_p2 <= std_logic_vector(unsigned(p_shl2_fu_526_p3) - unsigned(indvars_iv_next34_cast_fu_518_p1));
    sum19_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum19_fu_486_p2),64));
    sum19_fu_486_p2 <= std_logic_vector(unsigned(zext_ln77_4_fu_482_p1) + unsigned(p_mid1_fu_474_p3));
    tmp3_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_326_p2),7));
    tmp3_fu_326_p2 <= std_logic_vector(unsigned(ii_reg_194) + unsigned(ap_const_lv4_F));
    tmp_47_fu_312_p3 <= (empty_fu_302_p2 & ap_const_lv3_0);
    tmp_fu_320_p2 <= std_logic_vector(unsigned(tmp_47_fu_312_p3) + unsigned(p_cast_fu_308_p1));
    tmp_mid1_fu_380_p2 <= std_logic_vector(unsigned(p_mid_fu_372_p3) + unsigned(p_cast_mid1_fu_368_p1));
    tmp_s_fu_795_p4 <= bitcast_ln49_fu_792_p1(30 downto 23);
    trunc_ln49_fu_805_p1 <= bitcast_ln49_fu_792_p1(23 - 1 downto 0);
    trunc_ln83_fu_580_p1 <= select_ln83_5_fu_572_p3(5 - 1 downto 0);
    trunc_ln91_fu_693_p1 <= select_ln86_fu_622_p3(2 - 1 downto 0);
    xor_ln71_fu_394_p2 <= (icmp_ln74_fu_354_p2 xor ap_const_lv1_1);
    xor_ln83_fu_592_p2 <= (icmp_ln86_fu_552_p2 xor ap_const_lv1_1);
    zext_ln77_3_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_868),14));
    zext_ln77_4_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_fu_436_p3),12));
    zext_ln77_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_mid2_reg_868),64));
    zext_ln83_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_5_reg_920),12));
    zext_ln98_2_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_2_fu_717_p2),64));
    zext_ln98_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_757_p2),64));
end behav;

-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_9_bias_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_9_bias_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101000111100010010010010", 
    1 => "10111011101000111100000010101011", 
    2 => "10111101000111110101001110001010", 
    3 => "10111011011010010100101011010010", 
    4 => "10111100010101010111101100010100", 
    5 => "10111011110001001001111010000110", 
    6 => "10111101001111000100101001110111", 
    7 => "10111100000001001101011101111001", 
    8 => "10111101000110101011111111101110", 
    9 => "10111100001011001010001000111101", 
    10 => "10111100001111000000000100100101", 
    11 => "10111011111000111000000000000010", 
    12 => "10111100000010110100111011100101", 
    13 => "10111101001101011010011101011011", 
    14 => "00111101101011001000011000000100", 
    15 => "10111100010110110000110011011011", 
    16 => "10111101000001110101111000110100", 
    17 => "10111100000011000111000101011110", 
    18 => "10111100011000001010010100010011", 
    19 => "10111011110111111100111101010110", 
    20 => "00000000000000000000000000000000", 
    21 => "10111101001101000111011111110001", 
    22 => "10111100000111101111000000010100", 
    23 => "10111101001100101001101101111111", 
    24 => "00111101110000010101101001001110", 
    25 => "00111101101101000101101110110000", 
    26 => "10111100001101110100101101001100", 
    27 => "10111100010010010010010000111101", 
    28 => "10111100000001111001110101101000", 
    29 => "10111100001010111100110110011110", 
    30 => "10111011101100000001111101100111", 
    31 => "00111101011110101001001100001001", 
    32 => "10111100110110101110010101010101", 
    33 => "10111100001100101011000101010100", 
    34 => "10111100010010100000111101001000", 
    35 => "10111101000101100011011111111000", 
    36 => "10111100100100110010001000110011", 
    37 => "10111101001011101001111000111111", 
    38 => "00111101100000000011110000101011", 
    39 => "10111011111110110001110110010011", 
    40 => "00111100000001011001010010100111", 
    41 => "10111010001100011110110101101010", 
    42 => "10111100011000101101011000100010", 
    43 => "10111100010001100100011110111111", 
    44 => "10111100011100010000100111000010", 
    45 => "10111011100011111100001101101011", 
    46 => "00111101011001011001100110101000", 
    47 => "10111100000111011011000111110011", 
    48 => "10111010011000100100011011101010", 
    49 => "00000000000000000000000000000000", 
    50 => "00111101100100100000000110100101", 
    51 => "10111101000010010111011100010111", 
    52 => "10111011100011100001111101001011", 
    53 => "10111011101000111100011001000000", 
    54 => "00111101011000101101111010101111", 
    55 => "10111100010101011011000111101011", 
    56 => "00000000000000000000000000000000", 
    57 => "00111101100010001101101100101100", 
    58 => "00111100100100001001111000110000", 
    59 => "10111101001000011001101001001011", 
    60 => "10111011110111101011000011000011", 
    61 => "10111100110010001100100100101111", 
    62 => "10111100011101101100011110111100", 
    63 => "10111100110011010010101110011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_9_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_9_bias is
    component infer_layer_9_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_9_bias_rom_U :  component infer_layer_9_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



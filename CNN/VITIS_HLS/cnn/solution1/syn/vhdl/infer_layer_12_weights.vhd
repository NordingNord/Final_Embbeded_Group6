-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_12_weights_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_12_weights_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110111110000001100011110001", 
    1 => "00111101100100000010111110011111", 
    2 => "00111110111111010100011011001110", 
    3 => "00111110111000011001111010010101", 
    4 => "00111111001001001111101110110110", 
    5 => "00111111000011010010001110000111", 
    6 => "10111110010010011001010100111010", 
    7 => "10111100010011000000111010000000", 
    8 => "10111110110011101001011111000001", 
    9 => "10111111001100001101111010110100", 
    10 => "00111110010011000000100010010000", 
    11 => "10111110100010001011011100001100", 
    12 => "00111110100100001110101100010001", 
    13 => "00111110010001110001100001101001", 
    14 => "00111101000010001110001110111000", 
    15 => "00111110111010110110110010110000", 
    16 => "10111110110000101000001010100001", 
    17 => "10111110101000010001111111110010", 
    18 => "00111111000111010110101000100101", 
    19 => "10111110011000001100100110111011", 
    20 => "10111111000101000000111101100010", 
    21 => "00111110011011101101110010000110", 
    22 => "10111110001101110100101110111001", 
    23 => "10111110001001111000100011111010", 
    24 => "00111101000001101000100101010001", 
    25 => "10111110110110100010011100011010", 
    26 => "10111110110011101000000111011010", 
    27 => "00111111000100000101011000111001", 
    28 => "10111110100100100011001100011000", 
    29 => "00111111011000001011110110010010", 
    30 => "00111110011101011000100100000111", 
    31 => "00111101010011110101101111000101", 
    32 => "10111110100000111100100100101001", 
    33 => "10111110110110110110000010100010", 
    34 => "10111101000011101001011110000000", 
    35 => "10111110001010000101110011001110", 
    36 => "10111101100001001000100000000011", 
    37 => "10111110100001010110011010100011", 
    38 => "10111111000000011100111011010001", 
    39 => "10111100111010101011000011101111", 
    40 => "00111110100011001000111101011110", 
    41 => "00111110100101011000001001100111", 
    42 => "10111111000100101010100000101110", 
    43 => "10111110111110010100000000011001", 
    44 => "00111110010001001010101110110000", 
    45 => "00111110010010000010001111110100", 
    46 => "10111111000010111111000100001110", 
    47 => "10111110100011101101101101111001", 
    48 => "10111111010011111000001110001110", 
    49 => "10111100101101101010101101010111", 
    50 => "00111110111101000000100010001001", 
    51 => "10111110101011001010101110010100", 
    52 => "10111011111001111100011000000010", 
    53 => "00111110101100100000011010000111", 
    54 => "10111110000111000000010000101111", 
    55 => "10111110001001001100101001010101", 
    56 => "00111101001011100001010010011000", 
    57 => "00111111000110100010111111110000", 
    58 => "00111110000100000001101000100001", 
    59 => "10111111010101101010101011110001", 
    60 => "10111110110000100001010111001000", 
    61 => "10111101001100101001010011100000", 
    62 => "10111110110001101100010110111000", 
    63 => "10111011111101010001101100000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_12_weights is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_12_weights is
    component infer_layer_12_weights_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_12_weights_rom_U :  component infer_layer_12_weights_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_6_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000001110011000", 1 => "0001100001001000", 2 => "1111111110110110", 
    3 => "1111110001111000", 4 => "0000000001100010", 5 => "0001010111111010", 
    6 => "0000011100000100", 7 => "1110101011111110", 8 => "1111100101110011", 
    9 => "0000001110011011", 10 => "1111101011001110", 11 => "0000011000011111", 
    12 => "1111010101101011", 13 => "0000110111010001", 14 => "1111011100110000", 
    15 => "0001010001110111", 16 => "1110100110011010", 17 => "0001010010010100", 
    18 => "1111011101111011", 19 => "1110110011000001", 20 => "1111001110111011", 
    21 => "0001100100101100", 22 => "1111001001000101", 23 => "1111000010101011", 
    24 => "0000100010000000", 25 => "0000100100101110", 26 => "0000101000010100", 
    27 => "1110100001000011", 28 => "0001001110011110", 29 => "1111110101100100", 
    30 => "0000110011011111", 31 => "0000010000101111", 32 => "0000111000011010", 
    33 => "1110111011100110", 34 => "0000111111101100", 35 => "0000001101001010", 
    36 => "0000000010000111", 37 => "0001010010100101", 38 => "1111010101101000", 
    39 => "0001000100010100", 40 => "1110101011110100", 41 => "1111001100010111", 
    42 => "1111010101101111", 43 => "0000100101110010", 44 => "1110100000011000", 
    45 => "0001011000111010", 46 => "0000010100000111", 47 => "0000101101100111", 
    48 => "0000011111000000", 49 => "0001001101110011", 50 => "0000100101001001", 
    51 => "1111001110000110", 52 => "1110100001111001", 53 => "0000010111111000", 
    54 => "0000000010011110", 55 => "0000000111011000", 56 => "1110111001001000", 
    57 => "0000000111010011", 58 => "0000010111110100", 59 => "1110011111011001", 
    60 => "0000000100110110", 61 => "0000111000010001", 62 => "0001000111101010", 
    63 => "0000111100000101", 64 => "0000101000111011", 65 => "1111010110011001", 
    66 => "0000111110111010", 67 => "0000011100010110", 68 => "0000100110110100", 
    69 => "1111110010000001", 70 => "0000110010100100", 71 => "1110011010001111", 
    72 => "1111001010010000", 73 => "1111100010101101", 74 => "0000000010010000", 
    75 => "1110111101010010", 76 => "0000001011111001", 77 => "1110100000001111", 
    78 => "0000111110000001", 79 => "0000001111110101", 80 => "1111000010111110", 
    81 => "1111101011001001", 82 => "0001011011000010", 83 => "0001011111001000", 
    84 => "1110111011001101", 85 => "0001001111111000", 86 => "1111101001000110", 
    87 => "1110110100110001", 88 => "0001001010001100", 89 => "1111101111110101", 
    90 => "0000001011010100", 91 => "0000101101001001", 92 => "0001010001000110", 
    93 => "0001000010001100", 94 => "1111001011100011", 95 => "1110111001110110", 
    96 => "1111111111010010", 97 => "0000011101111011", 98 => "0001000001101011", 
    99 => "1111110101101010", 100 => "1110100110101001", 101 => "0000010100111001", 
    102 => "1110100000010010", 103 => "1111011001010010", 104 => "1111011111110010", 
    105 => "1111011101111000", 106 => "1111010101101010", 107 => "0000101000011000", 
    108 => "1111101111011011", 109 => "1111011101111101", 110 => "0000101111101001", 
    111 => "0000111110000010", 112 => "1111001010010111", 113 => "1111010001001101", 
    114 => "1111101100010110", 115 => "0000011011010010", 116 => "0000000111011001", 
    117 => "1110100000000001", 118 => "0000001111010000", 119 => "1111100100111011", 
    120 => "0001011011101011", 121 => "0001011000000010", 122 => "0000001101111110", 
    123 => "1111100110000000", 124 => "0001011011101111", 125 => "0001000111101010", 
    126 => "1110110101010011", 127 => "1111111010101001", 128 => "1111100111111001", 
    129 => "1111010111011000", 130 => "1111000000010111", 131 => "0000011010011010", 
    132 => "1111100111011001", 133 => "1111000001000010", 134 => "1110110011001011", 
    135 => "0000101001011001", 136 => "0000111100010011", 137 => "0001010111100000", 
    138 => "0001000101011010", 139 => "1111000001010110", 140 => "0000011011000111", 
    141 => "0000011101011110", 142 => "1111010001001111", 143 => "0000000101101111", 
    144 => "1110101110110100", 145 => "1110110101010010", 146 => "0000111100100110", 
    147 => "0001100111100100", 148 => "1111001100011111", 149 => "1111111111010101", 
    150 => "1111001000010000", 151 => "0001000010110111", 152 => "1111100111001111", 
    153 => "0000111001110100", 154 => "1110100010010111", 155 => "0000011011010000", 
    156 => "0000011011011110", 157 => "0000110001000001", 158 => "1111000000100011", 
    159 => "0001011011000111", 160 => "1111111101111100", 161 => "1110110010101001", 
    162 => "1111111100111101", 163 => "1110110100101011", 164 => "1111011110101011", 
    165 => "1110100000101110", 166 => "1111001110111011", 167 => "0000001111100100", 
    168 => "0001100001010110", 169 => "1111101100000111", 170 => "1111100011111001", 
    171 => "1111110001011100", 172 => "1111101111110110", 173 => "1110011011111111", 
    174 => "1110110011011010", 175 => "0000001100011101", 176 => "1110101000010111", 
    177 => "1111111000010110", 178 => "0000011011001000", 179 => "1111111100001110", 
    180 => "0001100011001100", 181 => "1111010011111000", 182 => "0001001011100001", 
    183 => "0000100011110111", 184 => "1111010100000110", 185 => "0001000110010000", 
    186 => "1111111001111000", 187 => "1110110000101011", 188 => "0000101110011000", 
    189 => "1111001011110111", 190 => "0001001101100010", 191 => "0001100011110100", 
    192 => "0000100100001011", 193 => "0000100011101011", 194 => "1110011110111100", 
    195 => "0001001000101000", 196 => "0000010011000111", 197 => "0000001110111000", 
    198 => "0001010110101001", 199 => "0001011011011111", 200 => "0000110100010011", 
    201 => "1111011110010010", 202 => "0001010101101111", 203 => "1111001000100110", 
    204 => "1111110011000000", 205 => "1111100011010000", 206 => "1111110001110110", 
    207 => "0000001111000101", 208 => "1111111001110111", 209 => "1111100111111111", 
    210 => "0000100010011111", 211 => "1111110110110001", 212 => "0000010011100010", 
    213 => "0000110101110100", 214 => "1110100000010101", 215 => "0000101111011001", 
    216 => "0001000101110100", 217 => "1110111111000111", 218 => "0000111000011101", 
    219 => "1110101001101101", 220 => "1110111100010101", 221 => "0001011111100011", 
    222 => "1111101100111101", 223 => "1111001010000010", 224 => "1110101101011010", 
    225 => "0001010011000010", 226 => "1110100001101101", 227 => "1110011111001010", 
    228 => "1111110110011100", 229 => "0001010100111000", 230 => "1110101010011011", 
    231 => "1110101111001111", 232 => "0001001110001000", 233 => "1110101100000100", 
    234 => "1110011000100000", 235 => "0001010000100110", 236 => "0000010010001100", 
    237 => "1110010101001011", 238 => "0000100001101010", 239 => "0001001111010110", 
    240 => "1111100001000000", 241 => "1110100111111111", 242 => "1111001010100101", 
    243 => "0000110000000010", 244 => "0000111111101010", 245 => "1110111011010010", 
    246 => "0001000100100101", 247 => "0000101111000111", 248 => "1111101000101111", 
    249 => "0000110001111111", 250 => "1111010111101001", 251 => "1111111100111001", 
    252 => "1111100100011000", 253 => "0001010001011100", 254 => "1111001111000011", 
    255 => "0000110110111000", 256 => "1111001100100000", 257 => "0001000101001000", 
    258 => "1111100011010001", 259 => "0000000100110010", 260 => "1110101110001111", 
    261 => "1111111001100001", 262 => "1111000011101001", 263 => "0000110101000101", 
    264 => "0000110011111101", 265 => "1110111100001010", 266 => "1110110100111000", 
    267 => "0001010111011101", 268 => "0000000011111010", 269 => "1110111100000101", 
    270 => "0000110101111101", 271 => "0001011010011110", 272 => "1110100011100000", 
    273 => "0001001010010101", 274 => "1110101000100110", 275 => "1111110110111001", 
    276 => "1111011101111111", 277 => "0000001100100100", 278 => "0000010101010001", 
    279 => "1110011111001011", 280 => "1111010000000110", 281 => "1111011101101010", 
    282 => "1111000111001111", 283 => "0000010010111010", 284 => "1110100010101001", 
    285 => "1111111000100010", 286 => "1110110010110010", 287 => "1110111110101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_6 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_6 is
    component infer_layer_6_weights_V_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_6_rom_U :  component infer_layer_6_weights_V_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



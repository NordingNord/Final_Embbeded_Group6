-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_8_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00110010010111", 1 => "11010011110101", 2 => "11010001110110", 
    3 => "11001111011000", 4 => "01001111001010", 5 => "11100101001101", 
    6 => "11001001101011", 7 => "01100011000100", 8 => "11001110000011", 
    9 => "00000110011010", 10 => "11100000010000", 11 => "00010000100000", 
    12 => "00010001100101", 13 => "01011110011111", 14 => "11010111001000", 
    15 => "10111011101011", 16 => "00010011100011", 17 => "00010001110001", 
    18 => "00100111110001", 19 => "00100010100010", 20 => "11010110010100", 
    21 => "11111101100011", 22 => "11001001010101", 23 => "01000011001000", 
    24 => "00010111000100", 25 => "11100100001101", 26 => "11000100000111", 
    27 => "11110111101000", 28 => "11100100011110", 29 => "10101010100100", 
    30 => "11010000010100", 31 => "01100001011010", 32 => "11010101000100", 
    33 => "11001111001100", 34 => "00000011001000", 35 => "10011110011000", 
    36 => "11010100011100", 37 => "01000110101110", 38 => "00110110100010", 
    39 => "00111100000100", 40 => "11101011011011", 41 => "11010001011010", 
    42 => "01010101000000", 43 => "01001101111001", 44 => "11011011101010", 
    45 => "00010010101011", 46 => "10100010001010", 47 => "11111010001010", 
    48 => "10011010000100", 49 => "00010100001111", 50 => "10100111100110", 
    51 => "11001000001100", 52 => "10110111001111", 53 => "00110100101000", 
    54 => "10101010100011", 55 => "01100101001101", 56 => "00001010110000", 
    57 => "11010011000100", 58 => "10111100100001", 59 => "00101001000100", 
    60 => "10111000110100", 61 => "10101101111001", 62 => "00000101010011", 
    63 => "11100101011001", 64 => "10100010011001", 65 => "00101001010101", 
    66 => "00000001001100", 67 => "11111011111000", 68 => "11011111001110", 
    69 => "11111010111101", 70 => "11010000110011", 71 => "11101000001111", 
    72 => "01001110101110", 73 => "00100001010010", 74 => "11010101010000", 
    75 => "00010111111001", 76 => "11001010101001", 77 => "00011001111100", 
    78 => "00000111110100", 79 => "11011110100111", 80 => "11011101110100", 
    81 => "01010101101000", 82 => "01011100101010", 83 => "00010010100100", 
    84 => "10110001101011", 85 => "01011010011000", 86 => "01000010101100", 
    87 => "00111101010111", 88 => "00101000001100", 89 => "00100110100000", 
    90 => "11111110100101", 91 => "11001110111110", 92 => "00010001111111", 
    93 => "11100111111011", 94 => "00010000000010", 95 => "10111010000110", 
    96 => "11101101010101", 97 => "11110101110110", 98 => "00101111011110", 
    99 => "01010000010000", 100 => "11110011011110", 101 => "00010010110011", 
    102 => "10111010001011", 103 => "11011000000011", 104 => "11111000011000", 
    105 => "01011110000110", 106 => "10111001110001", 107 => "00111111000111", 
    108 => "00011011001100", 109 => "11100110101001", 110 => "00000010100100", 
    111 => "10110100011010", 112 => "11000001100010", 113 => "01001001010111", 
    114 => "00100100110011", 115 => "11101010101000", 116 => "01000011001000", 
    117 => "10111001000101", 118 => "11011011100110", 119 => "00001010101110", 
    120 => "11110100101010", 121 => "00001100001101", 122 => "00110110011011", 
    123 => "00000111001110", 124 => "10100110011011", 125 => "01001011001011", 
    126 => "11001100000000", 127 => "00000100110101", 128 => "11000010110101", 
    129 => "00101010001001", 130 => "01000011100001", 131 => "11011011110001", 
    132 => "10100000111111", 133 => "11101100010010", 134 => "11010000000011", 
    135 => "01010111101111", 136 => "00110011000100", 137 => "10011011100000", 
    138 => "00100111111010", 139 => "11011101111101", 140 => "11101100000010", 
    141 => "00100110111001", 142 => "11001011100000", 143 => "11000100110111", 
    144 => "11010100010010", 145 => "11011100111101", 146 => "11010010111010", 
    147 => "11110111001001", 148 => "11111010001011", 149 => "01001100111100", 
    150 => "01010110100110", 151 => "10011100100001", 152 => "00100001010111", 
    153 => "01011111010010", 154 => "00011001000101", 155 => "11000011100111", 
    156 => "11100111110110", 157 => "11111011111010", 158 => "00000111011110", 
    159 => "11101111100100", 160 => "11111110101111", 161 => "00001001110110", 
    162 => "11100110110110", 163 => "11100110000001", 164 => "00101000110100", 
    165 => "11111000111110", 166 => "00110101010100", 167 => "11010010000011", 
    168 => "00001000001011", 169 => "11011110011111", 170 => "00011001011110", 
    171 => "11100010010111", 172 => "00111001100000", 173 => "00100101101110", 
    174 => "00111100011011", 175 => "11110001110011", 176 => "11110000100101", 
    177 => "10100000100011", 178 => "10101100001001", 179 => "10110011111111", 
    180 => "10101011010001", 181 => "00100101110010", 182 => "10100110110100", 
    183 => "01100100110100", 184 => "01000010110000", 185 => "10110111000000", 
    186 => "10100010001011", 187 => "10100110000111", 188 => "11100001111100", 
    189 => "00001100100111", 190 => "00001101111000", 191 => "10010010010100", 
    192 => "10100010000110", 193 => "00100001110111", 194 => "11101110100011", 
    195 => "00001111010101", 196 => "11110101111111", 197 => "10111000101100", 
    198 => "11100100001011", 199 => "00110011100010", 200 => "10111000001000", 
    201 => "00101111000101", 202 => "10100011101010", 203 => "11100001001111", 
    204 => "10101101000010", 205 => "01001011110001", 206 => "00010001110100", 
    207 => "11110011001110", 208 => "00100001101110", 209 => "11011100100100", 
    210 => "10111101010110", 211 => "10011101110101", 212 => "11111011010101", 
    213 => "01001101101001", 214 => "10111010001011", 215 => "00001001110011", 
    216 => "00101100000001", 217 => "01100001011110", 218 => "01100010010100", 
    219 => "01001111000111", 220 => "11010100001100", 221 => "00111111100101", 
    222 => "11111111110111", 223 => "11000111011100", 224 => "01000110000110", 
    225 => "10110000000001", 226 => "11110000011000", 227 => "11110011110011", 
    228 => "01011110011100", 229 => "01011011101100", 230 => "00001100100010", 
    231 => "00011101100010", 232 => "10011111011110", 233 => "11010101001011", 
    234 => "11100111011111", 235 => "10110010001001", 236 => "11011101000010", 
    237 => "10110100110011", 238 => "11001111010000", 239 => "10101101010100", 
    240 => "11100010101100", 241 => "11100101001011", 242 => "11011111101100", 
    243 => "11000101111010", 244 => "00101010010110", 245 => "10101111010010", 
    246 => "10111011001001", 247 => "00111101010111", 248 => "10100000001111", 
    249 => "10100111001110", 250 => "00011001110011", 251 => "11111100100111", 
    252 => "10011011100000", 253 => "00000000110001", 254 => "01100001001001", 
    255 => "10110111110101", 256 => "11000001011000", 257 => "11001100011001", 
    258 => "00100011000000", 259 => "00001110011011", 260 => "11101101110001", 
    261 => "11011110011100", 262 => "01000000100101", 263 => "11000010100101", 
    264 => "11111000100011", 265 => "11100111111001", 266 => "00110110110001", 
    267 => "00010000000000", 268 => "11111010011100", 269 => "11101110100100", 
    270 => "01000110101110", 271 => "01001000100111", 272 => "10101111010111", 
    273 => "10110011010101", 274 => "00111000100000", 275 => "11111110000100", 
    276 => "01011101100111", 277 => "01010001110111", 278 => "10110100011111", 
    279 => "10101100101111", 280 => "10100111101110", 281 => "01010100110111", 
    282 => "00110101001110", 283 => "00010110010010", 284 => "00111011101101", 
    285 => "00000110110101", 286 => "00100111000101", 287 => "10111000000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_8 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_8 is
    component infer_layer_4_weights_V_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_8_rom_U :  component infer_layer_4_weights_V_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



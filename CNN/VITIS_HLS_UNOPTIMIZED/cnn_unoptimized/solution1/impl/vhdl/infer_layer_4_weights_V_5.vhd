-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_5_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_5_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00101010011101", 1 => "00001100111011", 2 => "11100101000010", 
    3 => "01001000010000", 4 => "11010000111101", 5 => "11010000111111", 
    6 => "00000010100010", 7 => "10110111011010", 8 => "11001000101000", 
    9 => "11100001000010", 10 => "11111101101011", 11 => "00101001000101", 
    12 => "01100111101101", 13 => "11010110010001", 14 => "00001000001010", 
    15 => "11001010101101", 16 => "10100000101000", 17 => "11101011101100", 
    18 => "00011101001110", 19 => "00100000011100", 20 => "01011001011111", 
    21 => "00011001111100", 22 => "11110001010101", 23 => "00000000011010", 
    24 => "00100011011100", 25 => "01001101100010", 26 => "01001010100011", 
    27 => "10101100010100", 28 => "11001101101001", 29 => "00110011101011", 
    30 => "00111001000110", 31 => "11001111011000", 32 => "11110100001111", 
    33 => "00000011011110", 34 => "11111001100100", 35 => "11100111100101", 
    36 => "10111100101100", 37 => "10110001000101", 38 => "01000101100101", 
    39 => "01001100001000", 40 => "01000011100101", 41 => "01100110010101", 
    42 => "10100001101010", 43 => "00111011010011", 44 => "01010100101000", 
    45 => "01000000111010", 46 => "11100010010001", 47 => "11010100000001", 
    48 => "11010111101110", 49 => "10111000101101", 50 => "10011011000111", 
    51 => "00110111111011", 52 => "11100111001100", 53 => "00000011100100", 
    54 => "00110001100010", 55 => "11000111011101", 56 => "11101010111010", 
    57 => "11010110010010", 58 => "00000011111100", 59 => "00110110011101", 
    60 => "00000101010011", 61 => "10011101011000", 62 => "01100000000011", 
    63 => "11001100111110", 64 => "01010111011101", 65 => "11100010101100", 
    66 => "10101101101111", 67 => "01001000100111", 68 => "00100100100001", 
    69 => "11100100001001", 70 => "10011001110111", 71 => "11111000101010", 
    72 => "00011001110101", 73 => "00111110100011", 74 => "11011101011101", 
    75 => "11110101011101", 76 => "11100000011110", 77 => "11011000101000", 
    78 => "00101101101010", 79 => "11110010010111", 80 => "11010010000011", 
    81 => "11000001110111", 82 => "01100001000000", 83 => "11111001011001", 
    84 => "11101001010111", 85 => "00101110000001", 86 => "01011111011011", 
    87 => "11010100001010", 88 => "11001100011001", 89 => "00111011000101", 
    90 => "11010110000010", 91 => "01011110110010", 92 => "00010010011010", 
    93 => "01000110011100", 94 => "11000010010100", 95 => "00000101010100", 
    96 => "11011000101011", 97 => "10101100111001", 98 => "11111110110001", 
    99 => "10100101101111", 100 => "01001100101011", 101 => "11000110111110", 
    102 => "11011111000001", 103 => "00000100101000", 104 => "11100001000010", 
    105 => "01001101000001", 106 => "00000111110000", 107 => "00001011010011", 
    108 => "01000000000101", 109 => "10011111010010", 110 => "00011100100101", 
    111 => "00101010101110", 112 => "11111010110000", 113 => "10101011001000", 
    114 => "00001001000000", 115 => "11000000101010", 116 => "00000000100000", 
    117 => "11000100110111", 118 => "01010010010011", 119 => "10010111101110", 
    120 => "01011110000101", 121 => "00100111110100", 122 => "11010100101000", 
    123 => "01100111101110", 124 => "00011101011101", 125 => "11010111001011", 
    126 => "01011110000111", 127 => "00011100110101", 128 => "10011010100001", 
    129 => "11001101101010", 130 => "01011010001011", 131 => "01000000101001", 
    132 => "10011010001100", 133 => "11100111001010", 134 => "11110011001110", 
    135 => "01000000001111", 136 => "00111100011011", 137 => "11000011100110", 
    138 => "00101100000110", 139 => "10110101011101", 140 => "11100111101100", 
    141 => "11101110100111", 142 => "11000010010110", 143 => "11110000101000", 
    144 => "11101101101011", 145 => "10101010010010", 146 => "11101100000000", 
    147 => "11000101000100", 148 => "00011000111011", 149 => "11001011011001", 
    150 => "10111000011101", 151 => "10011010110100", 152 => "11011000010010", 
    153 => "00100001010011", 154 => "00101100101100", 155 => "00101001101010", 
    156 => "00110101000101", 157 => "11110111001100", 158 => "11111111010111", 
    159 => "00101100100011", 160 => "11101001101011", 161 => "00111100111001", 
    162 => "00111000001110", 163 => "11001010010100", 164 => "10100111100001", 
    165 => "11010100100110", 166 => "01100111000010", 167 => "00111011101011", 
    168 => "10110011101111", 169 => "01011110110000", 170 => "10101100011000", 
    171 => "10111111100101", 172 => "01001111010000", 173 => "10101001101000", 
    174 => "10100011100010", 175 => "10010010100010", 176 => "11000001011101", 
    177 => "11000100000111", 178 => "10010110100101", 179 => "10110110111000", 
    180 => "11110000001111", 181 => "10101100001010", 182 => "00110100100110", 
    183 => "00101111101000", 184 => "01010000100010", 185 => "01011000101111", 
    186 => "00100000010010", 187 => "01010000010100", 188 => "00001001111011", 
    189 => "10111111100010", 190 => "01011011100110", 191 => "10101011010010", 
    192 => "11010101100001", 193 => "11101100011101", 194 => "00011100111000", 
    195 => "11001011110101", 196 => "01011111001001", 197 => "10010011011111", 
    198 => "00011001000010", 199 => "00101100010101", 200 => "00000100010101", 
    201 => "00110110010110", 202 => "00110110100001", 203 => "11111010000111", 
    204 => "00001100100001", 205 => "01010010011101", 206 => "00000110010100", 
    207 => "01011111001001", 208 => "01001001011101", 209 => "11001100101100", 
    210 => "00010000101010", 211 => "00001101000101", 212 => "00110010110100", 
    213 => "00111111010110", 214 => "10101100111100", 215 => "00110101110011", 
    216 => "11101001110010", 217 => "10100111100011", 218 => "10110101111011", 
    219 => "00001110101101", 220 => "11011011010001", 221 => "10100101011011", 
    222 => "10110011111111", 223 => "10010011010010", 224 => "01000110011011", 
    225 => "00010001111000", 226 => "00110010101010", 227 => "11110001011100", 
    228 => "11100011011011", 229 => "10011000001100", 230 => "01010011100010", 
    231 => "10101100010000", 232 => "00000101000100", 233 => "00000000001010", 
    234 => "00100010100011", 235 => "11101001110010", 236 => "00001010010101", 
    237 => "11101010001111", 238 => "10110111000000", 239 => "10101110011101", 
    240 => "11101011110010", 241 => "00000101001010", 242 => "10010001110111", 
    243 => "11011110111011", 244 => "11101011000001", 245 => "00100110101101", 
    246 => "01010000100010", 247 => "11001011001011", 248 => "00010101101101", 
    249 => "00000011110011", 250 => "11110101101010", 251 => "01001100010101", 
    252 => "11100010111011", 253 => "11001100011000", 254 => "00100010110111", 
    255 => "01010111100001", 256 => "01000000001100", 257 => "00100000111000", 
    258 => "10110011010101", 259 => "00100001011111", 260 => "01010010101101", 
    261 => "00100111001110", 262 => "11000111101011", 263 => "00110100100101", 
    264 => "00010111001100", 265 => "10101010010001", 266 => "11000100111101", 
    267 => "00110111010111", 268 => "00010000000000", 269 => "00101101110000", 
    270 => "11011001100110", 271 => "11101010010001", 272 => "00010000010110", 
    273 => "01010000111011", 274 => "11010000010111", 275 => "11010100101101", 
    276 => "01000100011101", 277 => "00101001000001", 278 => "00101101101001", 
    279 => "00111100100110", 280 => "11110101111101", 281 => "00100111001111", 
    282 => "11000011110100", 283 => "10101111010000", 284 => "01010100101100", 
    285 => "10101001100101", 286 => "11011010111001", 287 => "11000111111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_5 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_5 is
    component infer_layer_4_weights_V_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_5_rom_U :  component infer_layer_4_weights_V_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_6_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010011000000001", 1 => "1111011100010001", 2 => "0000110010100011", 
    3 => "0000010000000000", 4 => "1111101101100011", 5 => "1111101010001100", 
    6 => "0000010101100011", 7 => "0001010100110011", 8 => "0000000000100111", 
    9 => "0001010111111000", 10 => "1110111000101100", 11 => "1110101011101111", 
    12 => "0001011000000010", 13 => "1110100010010001", 14 => "1111010111100000", 
    15 => "1111101000111110", 16 => "1111000000001011", 17 => "1110011110111110", 
    18 => "0011000010100000", 19 => "0000100010110011", 20 => "1110110111101000", 
    21 => "0000101101111100", 22 => "1111110110100000", 23 => "1111000100011010", 
    24 => "0001010011011000", 25 => "0001000001101110", 26 => "1110011111001000", 
    27 => "1111000011001101", 28 => "0101101100111100", 29 => "0000110000000100", 
    30 => "0100001100001000", 31 => "0001011100110010", 32 => "0011011010110011", 
    33 => "1111011000110100", 34 => "1110111100101100", 35 => "0001000011010110", 
    36 => "1110100111110100", 37 => "1110011111011101", 38 => "1111001101000011", 
    39 => "0000011000101011", 40 => "0000011111000100", 41 => "0000110001011100", 
    42 => "1111100101001000", 43 => "0001000000001111", 44 => "0000110110100101", 
    45 => "1111111110011110", 46 => "1110101000101101", 47 => "1110000010100111", 
    48 => "1110101001001110", 49 => "0001001010010100", 50 => "0111101001101001", 
    51 => "0011101000100011", 52 => "1110011100101110", 53 => "0000111010100000", 
    54 => "1110110001101110", 55 => "1111101010011100", 56 => "0001001001010111", 
    57 => "0000100100001100", 58 => "1110011000000100", 59 => "1111111111011010", 
    60 => "0100010101110011", 61 => "0000101001011100", 62 => "0011100011000000", 
    63 => "0001111111110100", 64 => "0010110100100011", 65 => "0000011100000101", 
    66 => "0000110100101111", 67 => "0000111110100011", 68 => "1111110001001111", 
    69 => "0000010110101010", 70 => "0001000011111010", 71 => "1111001101101000", 
    72 => "0001011110011001", 73 => "0001000101101111", 74 => "0000110001110100", 
    75 => "1110110100010000", 76 => "0001010011101110", 77 => "0000101000010100", 
    78 => "0000110001001100", 79 => "1111000100101010", 80 => "1111101101001110", 
    81 => "1110010100001000", 82 => "0111111001011110", 83 => "0001101010110011", 
    84 => "1110111001101101", 85 => "1101111100101011", 86 => "1111010010101000", 
    87 => "1110100110000110", 88 => "0001001100111011", 89 => "1110011100010000", 
    90 => "0000000011001111", 91 => "1111011010011110", 92 => "0100000001101001", 
    93 => "0000001111100101", 94 => "0011001110000111", 95 => "0010000000010010", 
    96 => "0001110110011010", 97 => "1111001000111011", 98 => "1110101100010010", 
    99 => "1111100011111111", 100 => "1111111100100111", 101 => "0000011111011010", 
    102 => "0000100011101010", 103 => "1110110101111011", 104 => "1110110011101011", 
    105 => "0000101100101110", 106 => "1111111111110010", 107 => "0000101001101101", 
    108 => "1111001010000011", 109 => "0010100101101101", 110 => "0000001100001110", 
    111 => "0001010000110100", 112 => "0001010010001011", 113 => "1111100111011110", 
    114 => "1110111100100001", 115 => "1111100110001010", 116 => "0000101001101111", 
    117 => "0010001010111111", 118 => "0001011110111010", 119 => "0000100010100101", 
    120 => "1110111001111110", 121 => "0010000000110001", 122 => "0001001011001101", 
    123 => "0000000101101110", 124 => "0100001111101100", 125 => "1111101001011111", 
    126 => "0011100011111000", 127 => "0001010110010000", 128 => "0101000111110111", 
    129 => "0000110100001110", 130 => "0000011110101000", 131 => "1110111100110100", 
    132 => "0001010001000101", 133 => "1110101000010101", 134 => "1110100100110110", 
    135 => "1110110000111100", 136 => "0000110000111101", 137 => "1110110111111011", 
    138 => "1110101100000010", 139 => "0001000010100111", 140 => "0000001100111110", 
    141 => "0000100000100100", 142 => "0000111111001000", 143 => "1111010000100101", 
    144 => "0000011101011101", 145 => "0000011101010110", 146 => "0101101011100011", 
    147 => "0011111100111000", 148 => "1111011110101100", 149 => "0001101000001100", 
    150 => "1111110010101010", 151 => "0001000000110101", 152 => "1111010011101100", 
    153 => "0000000010100011", 154 => "0001100110001111", 155 => "0001000100111110", 
    156 => "0101111111101011", 157 => "1110001010111100", 158 => "0010110110111100", 
    159 => "0011111101111001", 160 => "0110110110101010", 161 => "0000001110101100", 
    162 => "1111111000111000", 163 => "0000100001010010", 164 => "0001011100101001", 
    165 => "0001100100100001", 166 => "1111111011111001", 167 => "1111001010001110", 
    168 => "1111001000010111", 169 => "0001100010000101", 170 => "0000101100111001", 
    171 => "0000001011100000", 172 => "1110011101101110", 173 => "1111100000010010", 
    174 => "1111101110000101", 175 => "0000100101110010", 176 => "0001011001001001", 
    177 => "1110000001001000", 178 => "0101100011110011", 179 => "0001110010010011", 
    180 => "1110100000111100", 181 => "1111001111001010", 182 => "1110100010100100", 
    183 => "1110111111111100", 184 => "0000000011101010", 185 => "0000110101000110", 
    186 => "1111000110111011", 187 => "0001001010101000", 188 => "0111011111010010", 
    189 => "0000000000011100", 190 => "0101110100001110", 191 => "0011011001001001", 
    192 => "0000001101111110", 193 => "0000001111011111", 194 => "1110110011010001", 
    195 => "0001100000000010", 196 => "0001000111011111", 197 => "0001100101100101", 
    198 => "1111000111001111", 199 => "1111010101011010", 200 => "1111001111011111", 
    201 => "0000110001101111", 202 => "1110110100111110", 203 => "0001011100101100", 
    204 => "0000011001001101", 205 => "0001010111011000", 206 => "1111000011010011", 
    207 => "1111100011111111", 208 => "0000111000111110", 209 => "0001011110101110", 
    210 => "0001001011110101", 211 => "0011010011000011", 212 => "0000001001000110", 
    213 => "0001101110110100", 214 => "0001010000010010", 215 => "0001011111001111", 
    216 => "1111101010000000", 217 => "0001011010110010", 218 => "0001011101010100", 
    219 => "1111011110111001", 220 => "1111001000110011", 221 => "0000101010100000", 
    222 => "1111111100100011", 223 => "0001111111010000", 224 => "0001000001100100", 
    225 => "1111111001000100", 226 => "0001011000111010", 227 => "0001011001111001", 
    228 => "1111101110111000", 229 => "1101101110010011", 230 => "1110101101110010", 
    231 => "1111101010100100", 232 => "0001001100110001", 233 => "1111000101100001", 
    234 => "1111011101011100", 235 => "0000010100101100", 236 => "1110101001011100", 
    237 => "0001010010100110", 238 => "1110011010110111", 239 => "0000111011001111", 
    240 => "0000011111011111", 241 => "0001111100010000", 242 => "0100011111010100", 
    243 => "0011101111100001", 244 => "1111011010110010", 245 => "0000011111101101", 
    246 => "0000010010111101", 247 => "1111111000111010", 248 => "1110111110010010", 
    249 => "1110010001010100", 250 => "0001100101001110", 251 => "1111110001100011", 
    252 => "0001000101110010", 253 => "1111100011001110", 254 => "1100011111010111", 
    255 => "0011011001110011", 256 => "0010100001000000", 257 => "1111010100001000", 
    258 => "0000011001100101", 259 => "0001001010000101", 260 => "0000101111100000", 
    261 => "0001100110010100", 262 => "0001010111000001", 263 => "0000100001100111", 
    264 => "0000001000010111", 265 => "0001011001100110", 266 => "0000000010100111", 
    267 => "0000101000100000", 268 => "0001000111011110", 269 => "0001001000000100", 
    270 => "1110011000000001", 271 => "1110101110100111", 272 => "0000010110011101", 
    273 => "1110100110100010", 274 => "0101010101001111", 275 => "0001000101110101", 
    276 => "0000100101111100", 277 => "1110001111110001", 278 => "0001001000001010", 
    279 => "1111000100100110", 280 => "1111100001111101", 281 => "0000101111010000", 
    282 => "1110011110101111", 283 => "1110100101110011", 284 => "0011110001000010", 
    285 => "1110100111000111", 286 => "0011000101110111", 287 => "0010011011100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_6 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_6 is
    component infer_layer_4_weights_V_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_6_rom_U :  component infer_layer_4_weights_V_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



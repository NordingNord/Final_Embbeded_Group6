-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_0_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1101000001111001", 1 => "1110111111110010", 2 => "0001010100100111", 
    3 => "0000000111101000", 4 => "0001000100000101", 5 => "0000000010101011", 
    6 => "1110111111110111", 7 => "1110011111101011", 8 => "1111000000101001", 
    9 => "0000010111011010", 10 => "0000000000011111", 11 => "0000010110111011", 
    12 => "1111001000101011", 13 => "0001001111101100", 14 => "0001010101111111", 
    15 => "1111111100110010", 16 => "1110011001110110", 17 => "0001010010001101", 
    18 => "1011010011110010", 19 => "0000001101011111", 20 => "0001010000110101", 
    21 => "1111000111000100", 22 => "1111111010100101", 23 => "0001001010010010", 
    24 => "0000101010101010", 25 => "1101010011100101", 26 => "1111111001001001", 
    27 => "0001000101000111", 28 => "1101101001000000", 29 => "0001101000010000", 
    30 => "1011101000111100", 31 => "1111100110011010", 32 => "1101111011010110", 
    33 => "0000111001001110", 34 => "0000101011100010", 35 => "0000001111101111", 
    36 => "1110100010111101", 37 => "1111110101101011", 38 => "1110011111011000", 
    39 => "1111110110000000", 40 => "0001001100001001", 41 => "0000001101110101", 
    42 => "0000101011100001", 43 => "0000001000101111", 44 => "1111010011011010", 
    45 => "1110110010100011", 46 => "1111110001011110", 47 => "0001011011011010", 
    48 => "0000100110111001", 49 => "0001111100010100", 50 => "1010111110110111", 
    51 => "1111101011101101", 52 => "0001001101010100", 53 => "1111010000101000", 
    54 => "0000001101010101", 55 => "0000101110111000", 56 => "1110110111101100", 
    57 => "1111001001010111", 58 => "1111110001001000", 59 => "0000000101000010", 
    60 => "1100100101000111", 61 => "1110110100000110", 62 => "1101111101110111", 
    63 => "1110111001101010", 64 => "1100010100010101", 65 => "0001101100101000", 
    66 => "1110101010001101", 67 => "0000001111001100", 68 => "1111011001001100", 
    69 => "1110100110111011", 70 => "1111100000000100", 71 => "0000110101000101", 
    72 => "1111011010101001", 73 => "1111100100011010", 74 => "0001000111101001", 
    75 => "1111110000100010", 76 => "1111100010010011", 77 => "0001100000110110", 
    78 => "1111111011010010", 79 => "0001111110010000", 80 => "1111001100100100", 
    81 => "0000011110101101", 82 => "1101100011001111", 83 => "1101110010101001", 
    84 => "0001111000110001", 85 => "0000110000010101", 86 => "1111101101100101", 
    87 => "0000010101110001", 88 => "1110100000010110", 89 => "1111011100010111", 
    90 => "1111101010000011", 91 => "1111011111111101", 92 => "1101110011111100", 
    93 => "0000110000110100", 94 => "1100111111010001", 95 => "1101111000010101", 
    96 => "1110101001110100", 97 => "0001000000010101", 98 => "1111111101011111", 
    99 => "0001000000001110", 100 => "1111111111011000", 101 => "1111000011001111", 
    102 => "0000111100101110", 103 => "1111011111101011", 104 => "1111110000100001", 
    105 => "0001101000000100", 106 => "1111010100010101", 107 => "1111100011000011", 
    108 => "0001011011100111", 109 => "1111011011001010", 110 => "1111100001100111", 
    111 => "0001000111100100", 112 => "0000100100101010", 113 => "1111001110101111", 
    114 => "1100101011111010", 115 => "1110010100110001", 116 => "0001010000100111", 
    117 => "0000111111111011", 118 => "0001011010010001", 119 => "0000000111000110", 
    120 => "0001010011000001", 121 => "0000001100010111", 122 => "0000110110100001", 
    123 => "0000110010101001", 124 => "1100010100110011", 125 => "1111111011101010", 
    126 => "1100010011001110", 127 => "1101001010011110", 128 => "1110100010111010", 
    129 => "1110111110010000", 130 => "1110110101101111", 131 => "1111110100110110", 
    132 => "0001010100110111", 133 => "0000101011001000", 134 => "0001100001011111", 
    135 => "0001000001110001", 136 => "1111000100000000", 137 => "1111011110001000", 
    138 => "0000001011100111", 139 => "0001010000111000", 140 => "1111100100111111", 
    141 => "0000111010000001", 142 => "1111001000100100", 143 => "0001101101010101", 
    144 => "1111101011111000", 145 => "0001100001100000", 146 => "1101111000010101", 
    147 => "1111010110101000", 148 => "0000110001011100", 149 => "1110111101101100", 
    150 => "1111001001101101", 151 => "1110110100110101", 152 => "1111001011111110", 
    153 => "1110001101000101", 154 => "0001100110001000", 155 => "0001010100000011", 
    156 => "1110101110110011", 157 => "1110101010101010", 158 => "1011110111000011", 
    159 => "1110100101101011", 160 => "1101011110111010", 161 => "1111010011111010", 
    162 => "1110100100011011", 163 => "0001101011111100", 164 => "1110011101100100", 
    165 => "0000001011011110", 166 => "1111001111011001", 167 => "1111011011010001", 
    168 => "1110100101011111", 169 => "0000111010100110", 170 => "1111100011010011", 
    171 => "0000101011101001", 172 => "1110011100101110", 173 => "0001110010001101", 
    174 => "0000010111111011", 175 => "0001111010010000", 176 => "0000101111001100", 
    177 => "0001001010011110", 178 => "0000101111011100", 179 => "0001101110110011", 
    180 => "0001101110101001", 181 => "1111011011001100", 182 => "0001010010111111", 
    183 => "1110101011110001", 184 => "1111010000100010", 185 => "1111001010000001", 
    186 => "0000101001100110", 187 => "0001011000101100", 188 => "1110101100100111", 
    189 => "0001010100101011", 190 => "1101100010010000", 191 => "0000000101011110", 
    192 => "1100001001100001", 193 => "0001100100010000", 194 => "1111000100110110", 
    195 => "1111010010110000", 196 => "0001011000100001", 197 => "1101100000100010", 
    198 => "0001011101110110", 199 => "0000110111100011", 200 => "0000010110101110", 
    201 => "0001001110010011", 202 => "0000011101100000", 203 => "0001100011011110", 
    204 => "1111111110001101", 205 => "1110001010101100", 206 => "0000011110001001", 
    207 => "0000000000010111", 208 => "1110011100001110", 209 => "0000000111000100", 
    210 => "0011011010110011", 211 => "1110010011110001", 212 => "0000110000111111", 
    213 => "0001001111110010", 214 => "0000101001010010", 215 => "1110100100100000", 
    216 => "0000101101111010", 217 => "1110100110101000", 218 => "1111100111111100", 
    219 => "0001000101001010", 220 => "1011001111000100", 221 => "0000110111111001", 
    222 => "1110000001001110", 223 => "1101011111111100", 224 => "1100011110010010", 
    225 => "0000100011111110", 226 => "1110110100001001", 227 => "1111011110101110", 
    228 => "0000100011001010", 229 => "1110101101011010", 230 => "0000010101101001", 
    231 => "0000110001101100", 232 => "1111010011111101", 233 => "0000111110110010", 
    234 => "0000100000011000", 235 => "0000100011000010", 236 => "0000101000110011", 
    237 => "0000011100011000", 238 => "1111110010100111", 239 => "1111010101101110", 
    240 => "0001100100101010", 241 => "1111101101100000", 242 => "0011110001001011", 
    243 => "0000110011010011", 244 => "1111101001111101", 245 => "0000000101010100", 
    246 => "1111100011101111", 247 => "0000000000111100", 248 => "1110101010111110", 
    249 => "1100100011000100", 250 => "0001011001100110", 251 => "0000010010010100", 
    252 => "1101001010110001", 253 => "0000101110001100", 254 => "1010100010100101", 
    255 => "1110011010111011", 256 => "1110011100000110", 257 => "0001001011101110", 
    258 => "1111101100010001", 259 => "0000110000011110", 260 => "0001100001000011", 
    261 => "1111001111101011", 262 => "1111001011010110", 263 => "0000110111010001", 
    264 => "1111111100110011", 265 => "1111010101111100", 266 => "0000010010001011", 
    267 => "1111000100101001", 268 => "0000100011010010", 269 => "1111011100111110", 
    270 => "1110011010000100", 271 => "1111011001111111", 272 => "1111001010101111", 
    273 => "1111111100010001", 274 => "0111000101010101", 275 => "0010001100111001", 
    276 => "1111001111111001", 277 => "1110101000100110", 278 => "0001000001010100", 
    279 => "1110101101100001", 280 => "1111110111111100", 281 => "1111000010110001", 
    282 => "1111011111101010", 283 => "0000010111001100", 284 => "1011111000011001", 
    285 => "0000111011100001", 286 => "1100111100110011", 287 => "1101101101111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_0 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_0 is
    component infer_layer_4_weights_V_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_0_rom_U :  component infer_layer_4_weights_V_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



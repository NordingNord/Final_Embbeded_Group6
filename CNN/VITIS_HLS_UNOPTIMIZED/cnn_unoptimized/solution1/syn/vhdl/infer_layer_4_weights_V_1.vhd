-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_1_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11011110011111", 1 => "11011101011010", 2 => "11111111010001", 
    3 => "00010110011011", 4 => "11011010111111", 5 => "11011110000000", 
    6 => "11100010110110", 7 => "00011101111101", 8 => "00001011001001", 
    9 => "01100110010111", 10 => "11101100111101", 11 => "10110010010011", 
    12 => "11111011010011", 13 => "00111011111100", 14 => "10100110000100", 
    15 => "11001011111011", 16 => "11001111000111", 17 => "10101110011000", 
    18 => "00011101010111", 19 => "11010000110010", 20 => "00110010000101", 
    21 => "00001100001010", 22 => "00011111000011", 23 => "11110111101111", 
    24 => "11000010110101", 25 => "10100000010100", 26 => "10110110000110", 
    27 => "11011011000111", 28 => "00100010000110", 29 => "00111101110111", 
    30 => "00000111101110", 31 => "11010101100010", 32 => "01010101010101", 
    33 => "10010010001001", 34 => "11001101000110", 35 => "10111000101010", 
    36 => "11101111111001", 37 => "00100110010100", 38 => "01000011001011", 
    39 => "01001100101001", 40 => "10101001011101", 41 => "10110110101110", 
    42 => "00001000011101", 43 => "11010010110100", 44 => "01101000011010", 
    45 => "01001101001010", 46 => "00011010001010", 47 => "01000010100011", 
    48 => "00001100000010", 49 => "01010010001001", 50 => "01100000000010", 
    51 => "10101100100111", 52 => "11101000110110", 53 => "01001010101101", 
    54 => "01001101111111", 55 => "10011110000011", 56 => "00101001011100", 
    57 => "00011000110110", 58 => "01000010111101", 59 => "11010011101010", 
    60 => "11100011011011", 61 => "11101011100010", 62 => "01000110010000", 
    63 => "11010110100111", 64 => "00101001001111", 65 => "00011001001110", 
    66 => "11100011100110", 67 => "11010111110010", 68 => "11101001010010", 
    69 => "10101110011110", 70 => "00110101001010", 71 => "11000110101011", 
    72 => "10110101100111", 73 => "01000001110001", 74 => "11000100000000", 
    75 => "11101110000111", 76 => "11110001010010", 77 => "11101110000100", 
    78 => "11100100010010", 79 => "00001001100001", 80 => "11101111111111", 
    81 => "00000011000111", 82 => "00000010110010", 83 => "00001110011000", 
    84 => "00111001101010", 85 => "10001101111001", 86 => "01011010110111", 
    87 => "00010110111010", 88 => "01001000001101", 89 => "11110101011101", 
    90 => "00011100001111", 91 => "10110111000010", 92 => "00101111011010", 
    93 => "01010011110001", 94 => "00000111010111", 95 => "10111100000010", 
    96 => "00010100000110", 97 => "00010010100110", 98 => "11111000111111", 
    99 => "10100000101000", 100 => "01011111010101", 101 => "11001011000010", 
    102 => "00010100000100", 103 => "01011001000100", 104 => "00000000110000", 
    105 => "11010111011111", 106 => "10101001010000", 107 => "10100100011101", 
    108 => "11111100010110", 109 => "11011111101111", 110 => "10100101000011", 
    111 => "10011001100110", 112 => "11110011000001", 113 => "00001010110001", 
    114 => "10110110001111", 115 => "00111000010110", 116 => "00000011100101", 
    117 => "01010010010001", 118 => "10011110000000", 119 => "10100110011000", 
    120 => "01100100111010", 121 => "11001101011111", 122 => "00011000001011", 
    123 => "00001100111011", 124 => "00100000110110", 125 => "11111001101010", 
    126 => "11100101000010", 127 => "00001111011101", 128 => "01010011001100", 
    129 => "01000001011110", 130 => "00010111011010", 131 => "00000011111111", 
    132 => "00000000011000", 133 => "00010110010011", 134 => "10110111011010", 
    135 => "11010111111000", 136 => "00011000111110", 137 => "11001000111001", 
    138 => "10011000101001", 139 => "11000011111101", 140 => "00011011000011", 
    141 => "00010101001001", 142 => "00110100100100", 143 => "11011000111111", 
    144 => "00110011011101", 145 => "10111001010000", 146 => "01000100100001", 
    147 => "00110010100011", 148 => "11011100110001", 149 => "00100000100101", 
    150 => "00001110001000", 151 => "11011010110110", 152 => "01100011001100", 
    153 => "01010101110111", 154 => "11101001000110", 155 => "01001110000000", 
    156 => "10111001000101", 157 => "00110001110100", 158 => "11111110110001", 
    159 => "01010110011100", 160 => "00110000001101", 161 => "00100110101001", 
    162 => "01011011110101", 163 => "11101100000110", 164 => "11011001010011", 
    165 => "01001111110010", 166 => "10111101110011", 167 => "00111100011011", 
    168 => "00001101000011", 169 => "01100101100000", 170 => "00111100010111", 
    171 => "00101011100110", 172 => "10110001100111", 173 => "00001110000100", 
    174 => "00010110001010", 175 => "10100100000110", 176 => "00101011001101", 
    177 => "01000110011111", 178 => "00000000001110", 179 => "01010101111110", 
    180 => "11111001010000", 181 => "11100110111111", 182 => "11001111110101", 
    183 => "11100010000110", 184 => "10101011111010", 185 => "11011000011110", 
    186 => "00101001100001", 187 => "10011101010100", 188 => "10100001101001", 
    189 => "11111001111000", 190 => "01001011010111", 191 => "00110100111011", 
    192 => "11101100110011", 193 => "00110100110111", 194 => "11111010101111", 
    195 => "10011111101111", 196 => "01000111100000", 197 => "11000111001000", 
    198 => "00100110110010", 199 => "00001010110111", 200 => "00001010011001", 
    201 => "00011110100011", 202 => "10011000101010", 203 => "11110110011110", 
    204 => "01001101010011", 205 => "11110011111010", 206 => "11011101001011", 
    207 => "00101011011100", 208 => "11110011000111", 209 => "10100110111110", 
    210 => "01011010101011", 211 => "01001001111110", 212 => "11000100011001", 
    213 => "11010001010101", 214 => "00000101011010", 215 => "11010011010111", 
    216 => "01011101010111", 217 => "10111001100100", 218 => "00000110001000", 
    219 => "10110010101011", 220 => "00010101110101", 221 => "11110110010011", 
    222 => "01001100010111", 223 => "01000001000000", 224 => "11001111010011", 
    225 => "00010101011010", 226 => "11110010100100", 227 => "11010101101111", 
    228 => "11111011110100", 229 => "10100101111010", 230 => "10011110101010", 
    231 => "10011110110110", 232 => "01100111001110", 233 => "00101011010000", 
    234 => "11110100000011", 235 => "00001101110100", 236 => "01010111110011", 
    237 => "11000111100000", 238 => "10110000000001", 239 => "00011111010111", 
    240 => "11010101100100", 241 => "11100000110001", 242 => "00111111000001", 
    243 => "01010110100001", 244 => "10010111100001", 245 => "00100111001000", 
    246 => "11100001101001", 247 => "11111001010100", 248 => "00000000011101", 
    249 => "10011110001101", 250 => "11001010000100", 251 => "00001010001110", 
    252 => "00001011100010", 253 => "00111100100000", 254 => "11001111111010", 
    255 => "10100011101000", 256 => "10111100111101", 257 => "10100011111000", 
    258 => "11101010100111", 259 => "10011010001000", 260 => "11101000000110", 
    261 => "00011100110000", 262 => "10100101001100", 263 => "11011100000001", 
    264 => "00010001101010", 265 => "00101101010101", 266 => "11110011010100", 
    267 => "11111100010101", 268 => "00101011001110", 269 => "10011111001001", 
    270 => "00011010010100", 271 => "01011000010010", 272 => "10100111000001", 
    273 => "10111110010110", 274 => "10101000101100", 275 => "11100001110001", 
    276 => "11110011010001", 277 => "11000101111011", 278 => "11101010100001", 
    279 => "00011010100011", 280 => "01001000010110", 281 => "00000010000000", 
    282 => "00100011100100", 283 => "00011100010001", 284 => "10100011100010", 
    285 => "00110011011001", 286 => "01001101010000", 287 => "10010000000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_1 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_1 is
    component infer_layer_4_weights_V_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_1_rom_U :  component infer_layer_4_weights_V_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



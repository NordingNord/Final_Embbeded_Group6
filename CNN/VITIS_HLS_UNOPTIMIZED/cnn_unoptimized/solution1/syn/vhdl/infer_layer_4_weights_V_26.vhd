-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_26_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110100110011011", 1 => "00000101001110011", 
    2 => "11110101000010110", 3 => "00001100000100101", 
    4 => "11111010000101001", 5 => "11110010010010100", 
    6 => "11110110001000110", 7 => "11110011110100001", 
    8 => "11111010110011110", 9 => "00001010100100111", 
    10 => "00001000100100110", 11 => "00001000111100000", 
    12 => "00001010100100101", 13 => "00010000001001001", 
    14 => "00000000110011101", 15 => "11111010011010001", 
    16 => "00000111010000000", 17 => "11111101111000001", 
    18 => "00101111001001010", 19 => "00010111000011001", 
    20 => "00000011111111011", 21 => "00001101100011110", 
    22 => "11110110010100101", 23 => "11111101011000100", 
    24 => "11111111111101100", 25 => "11111110111001110", 
    26 => "11111100110000010", 27 => "00001101000001010", 
    28 => "11011100000000001", 29 => "00010010001111111", 
    30 => "11101001110000001", 31 => "11111111110010001", 
    32 => "11010010100001000", 33 => "11110110110010010", 
    34 => "11111101010011010", 35 => "00000110111010010", 
    36 => "00000010101100010", 37 => "11110101011010001", 
    38 => "00000110011001100", 39 => "00000110001000010", 
    40 => "00000011001000000", 41 => "11110111000001011", 
    42 => "00000101111011001", 43 => "11110101001010111", 
    44 => "11111011011100100", 45 => "00001011100110001", 
    46 => "00000110111001111", 47 => "00000100000100011", 
    48 => "11111101010101000", 49 => "00000111010111111", 
    50 => "00100110111101110", 51 => "00000101101110001", 
    52 => "00001110001010001", 53 => "11111010110001100", 
    54 => "11111111110110010", 55 => "11111110010011111", 
    56 => "00000011000101001", 57 => "11100001001101100", 
    58 => "11110101000001101", 59 => "11111101100101101", 
    60 => "11001111000111001", 61 => "00010000010000110", 
    62 => "11010010000000101", 63 => "11111110101001000", 
    64 => "11101100111000110", 65 => "11111011000010000", 
    66 => "11111110110100001", 67 => "11111001101000011", 
    68 => "00001100100110101", 69 => "00001001111111010", 
    70 => "11110101011001001", 71 => "11110110001010100", 
    72 => "00001011101011000", 73 => "00000111000010110", 
    74 => "11111001110001110", 75 => "11111001110011100", 
    76 => "00000001100111011", 77 => "00001010110011111", 
    78 => "00001000100010110", 79 => "11111111010111100", 
    80 => "11110011001001101", 81 => "00000111101100100", 
    82 => "00010100011111010", 83 => "11101101001000100", 
    84 => "11111011111100101", 85 => "00001101001011101", 
    86 => "11111101011000101", 87 => "11111110000011100", 
    88 => "11111100111110000", 89 => "00000010101111111", 
    90 => "00000010011101110", 91 => "00000010001010100", 
    92 => "11100000000000111", 93 => "11111111111111101", 
    94 => "00001011001000100", 95 => "11100111101010000", 
    96 => "11111110000011001", 97 => "00000111100100101", 
    98 => "11111110100010100", 99 => "11111011000010111", 
    100 => "11111011010010101", 101 => "11110010101010111", 
    102 => "11111001000010011", 103 => "11110101011111011", 
    104 => "11111001010000011", 105 => "00001011010000000", 
    106 => "11111110110000101", 107 => "11111101011000000", 
    108 => "00000010100010011", 109 => "11111001011110100", 
    110 => "00000100100110110", 111 => "00000101000100010", 
    112 => "11111010100100111", 113 => "00000011110110001", 
    114 => "01000000010010010", 115 => "00110000010011111", 
    116 => "00000110100110111", 117 => "11110110111011111", 
    118 => "11110100001011101", 119 => "00000011110000111", 
    120 => "11111101011000011", 121 => "11100101000110001", 
    122 => "00000001111111111", 123 => "00000010000100100", 
    124 => "11111000011000010", 125 => "00001000110000001", 
    126 => "11100111101100000", 127 => "00011010000111101", 
    128 => "11111011010000001", 129 => "00000101101011100", 
    130 => "00000001100111100", 131 => "00000010110100010", 
    132 => "11110110100010110", 133 => "11101010000001001", 
    134 => "00000100100100101", 135 => "11110100001111001", 
    136 => "11110110001001001", 137 => "00000100000010011", 
    138 => "11111000100111000", 139 => "11111110100100100", 
    140 => "00000000110100111", 141 => "11111000110010111", 
    142 => "00000011011000111", 143 => "00000110011100010", 
    144 => "00000000010111101", 145 => "00000010110000100", 
    146 => "00101011101110001", 147 => "00011001011011011", 
    148 => "11110101101100011", 149 => "11110100000010001", 
    150 => "11111110101010110", 151 => "11111000111010010", 
    152 => "00001001110010011", 153 => "11101111011111010", 
    154 => "00000100011001010", 155 => "11111000101001111", 
    156 => "11111100111000111", 157 => "11110011010011000", 
    158 => "00001000001111000", 159 => "11111010011110001", 
    160 => "11101110010100010", 161 => "11111001010001011", 
    162 => "00001100100111000", 163 => "00000100001001111", 
    164 => "11111101011010110", 165 => "00010110110010110", 
    166 => "00000000011000000", 167 => "11110110111100110", 
    168 => "00000011101101000", 169 => "00001001100101101", 
    170 => "11110111111011101", 171 => "11111111011010001", 
    172 => "11111011110000111", 173 => "11110001101110101", 
    174 => "11110011000011000", 175 => "11111110110000010", 
    176 => "11110110100010100", 177 => "00000110011100101", 
    178 => "00000100011010100", 179 => "11001111010000000", 
    180 => "11110011010010011", 181 => "00001000101110100", 
    182 => "11110110111011010", 183 => "11111011010100101", 
    184 => "00001100100010011", 185 => "00010110000101011", 
    186 => "11111000010111000", 187 => "00001001100011011", 
    188 => "11111111110100001", 189 => "00010000000100011", 
    190 => "00101100101001000", 191 => "11100111010101001", 
    192 => "00010001101110011", 193 => "00001011100111001", 
    194 => "00000100001000000", 195 => "11111110010010110", 
    196 => "11111111011111100", 197 => "00000011011001111", 
    198 => "00001001000101010", 199 => "11111111110100110", 
    200 => "11111111011101011", 201 => "11111111111101001", 
    202 => "11111101111001110", 203 => "11111011010010100", 
    204 => "11110111110100011", 205 => "00000001100111001", 
    206 => "00001001110101000", 207 => "11110011101010011", 
    208 => "11110111010000000", 209 => "11110101010011110", 
    210 => "00110011110110100", 211 => "00011001001011101", 
    212 => "00000011011000111", 213 => "11110101000011011", 
    214 => "11111101001101100", 215 => "11111011110011001", 
    216 => "00000100100110111", 217 => "00000010010110110", 
    218 => "00000010110010011", 219 => "00000111110000011", 
    220 => "00101001100000011", 221 => "11101111110110000", 
    222 => "00000111110100000", 223 => "00001010110110010", 
    224 => "00101000100110010", 225 => "11111111000111000", 
    226 => "11111011010111110", 227 => "11110010110010111", 
    228 => "00001010010111011", 229 => "00010110000101100", 
    230 => "11110101011000010", 231 => "00000001111111101", 
    232 => "11111010101111010", 233 => "00001010001101111", 
    234 => "11111111001111110", 235 => "11111110001110111", 
    236 => "00001011110111010", 237 => "00000101100001010", 
    238 => "00001100101110111", 239 => "11101100111111000", 
    240 => "11111011100101001", 241 => "11110010000010101", 
    242 => "00011010011111100", 243 => "11110001101100111", 
    244 => "11101110000110011", 245 => "00000000001000010", 
    246 => "00001011001100111", 247 => "11110011001001011", 
    248 => "11110110011111011", 249 => "00100011001000011", 
    250 => "11111011010100110", 251 => "00000001111111110", 
    252 => "00110100111100010", 253 => "11111100000101011", 
    254 => "00101111100101011", 255 => "00010111110010011", 
    256 => "00001111111000101", 257 => "11111001111001110", 
    258 => "00000011011111110", 259 => "11111100101100001", 
    260 => "11110100001000111", 261 => "00011010101010011", 
    262 => "11110101100011111", 263 => "11110110110000100", 
    264 => "11111010101101101", 265 => "11111100111101111", 
    266 => "11111011110100110", 267 => "11111011000010000", 
    268 => "00000001110100100", 269 => "00001111011101110", 
    270 => "11111011101100101", 271 => "11111101001010011", 
    272 => "11111011010111100", 273 => "00000110000110101", 
    274 => "11001010000000011", 275 => "11011011001000011", 
    276 => "00000000111111000", 277 => "00000101000111111", 
    278 => "00000011101100010", 279 => "11111101100100001", 
    280 => "00000100100000111", 281 => "00101010001101001", 
    282 => "00001000110101001", 283 => "00000010000001011", 
    284 => "00100110101111100", 285 => "00001110101000101", 
    286 => "00110101000001110", 287 => "00001111110100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_26 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_26 is
    component infer_layer_4_weights_V_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_26_rom_U :  component infer_layer_4_weights_V_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_24_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_24_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10100001010100", 1 => "11010101100100", 2 => "10110111010110", 
    3 => "00011100101001", 4 => "00000011110101", 5 => "00110000101111", 
    6 => "00100111000000", 7 => "00000101000001", 8 => "11011100100110", 
    9 => "00100000010011", 10 => "00001011101110", 11 => "00001100111111", 
    12 => "11100000111010", 13 => "00001000000001", 14 => "11100001100010", 
    15 => "00101111010100", 16 => "00100110000010", 17 => "10111110001010", 
    18 => "01000110100010", 19 => "11110111001001", 20 => "01000111011111", 
    21 => "11011101011111", 22 => "01010101011101", 23 => "11000001000011", 
    24 => "00011100011110", 25 => "11100110101001", 26 => "10110011000100", 
    27 => "00011100110010", 28 => "11111001100001", 29 => "11001000001001", 
    30 => "01011111011100", 31 => "11011101101111", 32 => "00110111000111", 
    33 => "11101101110010", 34 => "11111000000010", 35 => "01011100010010", 
    36 => "10110111010100", 37 => "10110000100110", 38 => "11110000111110", 
    39 => "01100111110000", 40 => "00111010100000", 41 => "01100000011000", 
    42 => "11011110011111", 43 => "11100000011000", 44 => "01010111001001", 
    45 => "00010111001100", 46 => "00010011100100", 47 => "10111001111010", 
    48 => "01011101100100", 49 => "11011000111001", 50 => "00101110111001", 
    51 => "10111010001110", 52 => "00100001111111", 53 => "11000010100110", 
    54 => "00111001000001", 55 => "00111101001101", 56 => "00100100001101", 
    57 => "11110100100011", 58 => "10101001001000", 59 => "11100110000001", 
    60 => "00010101110111", 61 => "00001101101111", 62 => "10101100111100", 
    63 => "01100010111100", 64 => "10110000110101", 65 => "11100110010100", 
    66 => "11100001100110", 67 => "10110101001001", 68 => "11110111011001", 
    69 => "00011110000001", 70 => "11110101000101", 71 => "01011111000000", 
    72 => "10110110010001", 73 => "00010011010110", 74 => "11100110000111", 
    75 => "00110111001010", 76 => "11010001101111", 77 => "11011010001100", 
    78 => "00110110100001", 79 => "11111011001101", 80 => "10101110010110", 
    81 => "00110010011001", 82 => "10110011000001", 83 => "11111100110010", 
    84 => "11110101100100", 85 => "11110000010011", 86 => "00000101010110", 
    87 => "10011000110010", 88 => "00100110111100", 89 => "11110000011101", 
    90 => "01011000111101", 91 => "11101101111110", 92 => "00010100010100", 
    93 => "00111101110011", 94 => "10100100111010", 95 => "11000000001000", 
    96 => "01001000111101", 97 => "10110110111010", 98 => "00011001100011", 
    99 => "11001111100001", 100 => "00011100011010", 101 => "11101110001010", 
    102 => "10111000100011", 103 => "00100010010000", 104 => "00001100001010", 
    105 => "11101000011001", 106 => "00011110111101", 107 => "00110011100000", 
    108 => "11001010011100", 109 => "01011110101011", 110 => "00110111111011", 
    111 => "00000010111110", 112 => "10100010110000", 113 => "00011100010111", 
    114 => "00110001110011", 115 => "10110001001110", 116 => "00111111111000", 
    117 => "10100100111100", 118 => "10110100100010", 119 => "11101000110100", 
    120 => "10101001011011", 121 => "00110010101100", 122 => "10011011101111", 
    123 => "10100010011001", 124 => "01100001000100", 125 => "11110001000110", 
    126 => "11111100101110", 127 => "00001001011010", 128 => "00111000111101", 
    129 => "10111101101111", 130 => "01001100011000", 131 => "00000100100000", 
    132 => "11011111100001", 133 => "11001100000101", 134 => "10111001000110", 
    135 => "00110000000110", 136 => "11000010111001", 137 => "10011000001000", 
    138 => "11111110010101", 139 => "01010110001010", 140 => "11111101111111", 
    141 => "10100111111011", 142 => "11001100110011", 143 => "11110011101000", 
    144 => "11000101100100", 145 => "00110111011100", 146 => "01010000010000", 
    147 => "11100000111010", 148 => "11010010100010", 149 => "11100110100001", 
    150 => "10111001100110", 151 => "11011011101000", 152 => "11000101111000", 
    153 => "00001000101101", 154 => "01000101100100", 155 => "11011100011000", 
    156 => "11011100000101", 157 => "00010001110111", 158 => "00001010100010", 
    159 => "10010101000000", 160 => "10101010110000", 161 => "11000011010111", 
    162 => "00000010010101", 163 => "10111001001111", 164 => "01100100111010", 
    165 => "00101101101001", 166 => "10101100100011", 167 => "01010100011000", 
    168 => "01011010100011", 169 => "11110101100001", 170 => "00111101010001", 
    171 => "00011111001111", 172 => "10011001110100", 173 => "10100000000100", 
    174 => "10110111001011", 175 => "11000000011001", 176 => "01001010110110", 
    177 => "00111001010100", 178 => "00111111100001", 179 => "01000111111000", 
    180 => "11110110100101", 181 => "11011110010001", 182 => "00000010101100", 
    183 => "11111101010100", 184 => "01000101001101", 185 => "11101010011001", 
    186 => "10110011101111", 187 => "00110010011101", 188 => "11011110010111", 
    189 => "00101001100110", 190 => "00110000001101", 191 => "01000110101100", 
    192 => "10101000100111", 193 => "11010001010101", 194 => "10110111001010", 
    195 => "00011101110011", 196 => "00110000010011", 197 => "00001111110111", 
    198 => "00101111110110", 199 => "00000010010010", 200 => "00111111111000", 
    201 => "11110100110111", 202 => "00110010111011", 203 => "11010111011000", 
    204 => "10100101100101", 205 => "10101011110000", 206 => "00110111000001", 
    207 => "00000100001010", 208 => "10110010001011", 209 => "00010001010111", 
    210 => "11001111001011", 211 => "10110010000100", 212 => "11100101011000", 
    213 => "11110000000011", 214 => "11110100100001", 215 => "10110010111101", 
    216 => "11010001110110", 217 => "11100100100110", 218 => "00000111010100", 
    219 => "01000000100111", 220 => "10110010100001", 221 => "10111010001111", 
    222 => "00110010111111", 223 => "11001110110111", 224 => "11100101010100", 
    225 => "01001011100001", 226 => "01011001010001", 227 => "00001011010101", 
    228 => "01010101011011", 229 => "00110011011100", 230 => "01010110110010", 
    231 => "00001011110000", 232 => "11001111100101", 233 => "01000010111000", 
    234 => "00001101000010", 235 => "00111011010111", 236 => "10100100001100", 
    237 => "11111111100110", 238 => "00010111000010", 239 => "00110001110011", 
    240 => "00110111111011", 241 => "10100000010011", 242 => "00001011010110", 
    243 => "11100000000010", 244 => "10010111001111", 245 => "10111111000111", 
    246 => "11110000111101", 247 => "11111011011101", 248 => "11010000011000", 
    249 => "10101011010000", 250 => "00111001000010", 251 => "00100011010010", 
    252 => "11011101010010", 253 => "11101000111000", 254 => "11110100011010", 
    255 => "00011111000101", 256 => "01100001001010", 257 => "01100000101011", 
    258 => "11011001001100", 259 => "01101000000001", 260 => "00000001011001", 
    261 => "01001000110000", 262 => "01000100110001", 263 => "11011111010110", 
    264 => "11111000110000", 265 => "11100001011101", 266 => "00000111000101", 
    267 => "00100011100100", 268 => "00110101001011", 269 => "01001111100111", 
    270 => "11011110010001", 271 => "00100010010111", 272 => "01011000010101", 
    273 => "01000001100010", 274 => "01000000011100", 275 => "01000101101100", 
    276 => "11010100101000", 277 => "10101000000010", 278 => "11010100001001", 
    279 => "11010011000100", 280 => "11111111101111", 281 => "00011101101000", 
    282 => "00110011010100", 283 => "01100000001010", 284 => "01001010010001", 
    285 => "00110111011111", 286 => "11010101101010", 287 => "11110110100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_24 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_24 is
    component infer_layer_6_weights_V_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_24_rom_U :  component infer_layer_6_weights_V_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



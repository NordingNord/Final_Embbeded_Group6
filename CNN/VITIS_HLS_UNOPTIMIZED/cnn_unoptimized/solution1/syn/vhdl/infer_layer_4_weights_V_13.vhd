-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_13_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0100101110101000", 1 => "1110101000001001", 2 => "1111111000101011", 
    3 => "1110111010101011", 4 => "0001011100001100", 5 => "0001011110011101", 
    6 => "1110100111011010", 7 => "1110111001110001", 8 => "0000100000011101", 
    9 => "1110110100111011", 10 => "1110111110101101", 11 => "1111001111110000", 
    12 => "1110110100011010", 13 => "0000111111010000", 14 => "0000010011000000", 
    15 => "1110110101100110", 16 => "1110111101100101", 17 => "1111110100010010", 
    18 => "0000011010100110", 19 => "1110001100010110", 20 => "0000000000000001", 
    21 => "1110010100111001", 22 => "1110011110101110", 23 => "0001001100111110", 
    24 => "0000010001101101", 25 => "0001110100100110", 26 => "0000100111111101", 
    27 => "0000101100001011", 28 => "0110011010111000", 29 => "1101001110011101", 
    30 => "0101011101110110", 31 => "0010011111100000", 32 => "0101101001111111", 
    33 => "1110110010101000", 34 => "0000011101000110", 35 => "1110100111010101", 
    36 => "1111000001100101", 37 => "1111110010010101", 38 => "0000110000111010", 
    39 => "1111110011010001", 40 => "0001010000001111", 41 => "1111010100001110", 
    42 => "1111010101010010", 43 => "0001000000001101", 44 => "0001100111001100", 
    45 => "0001101001010101", 46 => "0000011010000101", 47 => "1111111100111011", 
    48 => "1111010011101011", 49 => "1110010110010101", 50 => "0000101111110100", 
    51 => "1110010101001001", 52 => "1101110010100010", 53 => "0000101010000000", 
    54 => "1110011000001111", 55 => "0000011011100010", 56 => "1110110100111111", 
    57 => "0001001111100110", 58 => "0001010001110010", 59 => "0001010000000010", 
    60 => "0110100100010111", 61 => "1101110000000010", 62 => "0100011110101111", 
    63 => "0100111001110111", 64 => "0011101111110101", 65 => "0000010000000111", 
    66 => "1111010111000100", 67 => "0000101010000000", 68 => "0000101000010011", 
    69 => "0001100111001011", 70 => "0000110000101110", 71 => "1111010110100101", 
    72 => "1111000100001110", 73 => "1111011101011011", 74 => "0001011110001110", 
    75 => "0000100110101101", 76 => "1110101100010010", 77 => "0000101111110111", 
    78 => "0001001111110111", 79 => "1101100001011010", 80 => "0000110111101010", 
    81 => "1110001001111011", 82 => "0011110000000111", 83 => "0001100100011010", 
    84 => "1110011100110100", 85 => "0000110100100010", 86 => "0001010110001001", 
    87 => "0000000110110001", 88 => "0000110010001000", 89 => "0011000100000001", 
    90 => "1111110101110011", 91 => "0001011110000011", 92 => "0101000011101001", 
    93 => "1111101100000100", 94 => "0101011111001101", 95 => "0001111111000010", 
    96 => "0100100000010111", 97 => "0001110101001110", 98 => "0001001010110001", 
    99 => "1110110001010010", 100 => "1111000100011100", 101 => "0001110110101101", 
    102 => "0000000100001011", 103 => "1111110011110000", 104 => "1110011111110000", 
    105 => "1111101100001110", 106 => "1111111011100110", 107 => "0001010011110110", 
    108 => "1110101111010111", 109 => "1111110001111000", 110 => "0000011001111010", 
    111 => "1111100100101100", 112 => "1110100110100001", 113 => "0000100001011100", 
    114 => "1001111100001110", 115 => "1110010100000100", 116 => "1111111101100101", 
    117 => "0000100010100110", 118 => "0000101001111111", 119 => "0000101000001011", 
    120 => "0000110001110001", 121 => "0011111111101111", 122 => "0001011101001001", 
    123 => "1110011001100000", 124 => "0101001001001110", 125 => "0001010111101001", 
    126 => "0011001010100110", 127 => "0011000111111101", 128 => "0011010101001011", 
    129 => "0001010001100110", 130 => "0001011111000010", 131 => "1110110011011011", 
    132 => "1111001111110110", 133 => "1111001010010101", 134 => "1110100101111011", 
    135 => "0001011010000010", 136 => "1111110101110011", 137 => "1111011100000100", 
    138 => "0001000011110101", 139 => "0000001110100101", 140 => "1110111100010111", 
    141 => "0000000011010011", 142 => "0000010001001111", 143 => "0000100000101100", 
    144 => "1110011101000001", 145 => "0001000111011110", 146 => "1010100111110011", 
    147 => "0000001101010100", 148 => "0000001001000001", 149 => "0001001110010000", 
    150 => "1110100101001100", 151 => "0001100011001011", 152 => "0001001111110001", 
    153 => "0010101001111000", 154 => "1110011111110100", 155 => "1111011101000111", 
    156 => "0011001010101101", 157 => "0000100100111101", 158 => "0011010000100110", 
    159 => "0011011100100001", 160 => "0010100100000010", 161 => "1110101011110101", 
    162 => "0000000111001100", 163 => "1111000101011001", 164 => "1111110001000101", 
    165 => "0000111010101101", 166 => "0000011110101101", 167 => "0000100100000110", 
    168 => "0000010000010001", 169 => "1111011011101101", 170 => "1110011010110111", 
    171 => "0000110100000011", 172 => "1110100010001100", 173 => "0001100111101111", 
    174 => "0001010010110110", 175 => "1110100010000010", 176 => "0000000010110100", 
    177 => "0000101000100000", 178 => "0000100101110010", 179 => "0001111001101001", 
    180 => "1111001011011010", 181 => "1111110000110001", 182 => "0001001000110001", 
    183 => "1111010001011110", 184 => "0000010100101100", 185 => "0001000101000000", 
    186 => "0001010011011111", 187 => "1111110000010110", 188 => "0100110011000000", 
    189 => "1110101001011001", 190 => "0100011100010001", 191 => "0001111001110010", 
    192 => "1111111010011100", 193 => "0001011001010010", 194 => "0000111100110000", 
    195 => "0001010110000100", 196 => "1110111011111010", 197 => "1111100111100001", 
    198 => "1111100010001111", 199 => "1111010100100010", 200 => "0000010111011000", 
    201 => "0000101111111110", 202 => "0001000101110001", 203 => "1110101000011001", 
    204 => "1110100011000101", 205 => "0001000000110010", 206 => "1111100110010111", 
    207 => "0001011010011101", 208 => "1110100011101011", 209 => "0001111110100101", 
    210 => "1010011011011101", 211 => "1101011101011001", 212 => "0001000001011101", 
    213 => "1111110111111100", 214 => "0000001101111011", 215 => "1111101111010011", 
    216 => "0000101001001100", 217 => "0001010001011101", 218 => "0000011111011101", 
    219 => "1111111010101011", 220 => "0001011111000100", 221 => "0001110111100111", 
    222 => "0011101111110001", 223 => "1110010001100100", 224 => "1111000111010011", 
    225 => "1111111001111110", 226 => "0000110010111101", 227 => "0000100101111001", 
    228 => "0000001001101000", 229 => "0001000011011010", 230 => "1111110101000110", 
    231 => "1111011011110001", 232 => "1111100000000110", 233 => "0000000100011001", 
    234 => "1111000011001111", 235 => "1111010100101011", 236 => "1110100001000111", 
    237 => "0001001010110000", 238 => "0001010000011010", 239 => "0001110111001010", 
    240 => "1111010010100010", 241 => "1111011000001111", 242 => "1011101111110101", 
    243 => "1110110001010010", 244 => "0001101011100100", 245 => "0001001100110000", 
    246 => "1111100000001110", 247 => "0000111110100101", 248 => "0000101100010101", 
    249 => "0000101000100101", 250 => "0000110110100110", 251 => "1111100011111011", 
    252 => "1111110001101000", 253 => "1111111000100011", 254 => "1110110101110101", 
    255 => "1111011010010001", 256 => "0000100000000010", 257 => "0000010110000011", 
    258 => "0001010100101111", 259 => "1110110011110110", 260 => "0000000100110110", 
    261 => "1110101110010010", 262 => "1111011100011110", 263 => "0000110000111110", 
    264 => "1111010010010010", 265 => "1111001000001100", 266 => "1110111010111000", 
    267 => "1111001111001010", 268 => "0001100001111100", 269 => "0001000000001101", 
    270 => "0000000100110110", 271 => "1111111001010011", 272 => "0000110010101001", 
    273 => "0000001100001111", 274 => "1110101011011100", 275 => "0001100001101001", 
    276 => "0000100111001101", 277 => "0000010001011111", 278 => "1111011111001110", 
    279 => "0000100011101100", 280 => "1111110111110001", 281 => "1110110011001101", 
    282 => "1110110001110110", 283 => "1111110000101110", 284 => "0100001010010111", 
    285 => "1111100111000110", 286 => "1101100110001011", 287 => "0011011100001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_13 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_13 is
    component infer_layer_4_weights_V_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_13_rom_U :  component infer_layer_4_weights_V_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



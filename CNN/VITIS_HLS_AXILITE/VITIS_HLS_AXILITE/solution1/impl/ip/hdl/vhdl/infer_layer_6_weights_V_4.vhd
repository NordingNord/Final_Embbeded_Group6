-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_4_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11011000001001", 1 => "00111000010011", 2 => "00011101111111", 
    3 => "00110001000000", 4 => "10110111100000", 5 => "10011101010111", 
    6 => "00111010100000", 7 => "10111011101000", 8 => "10110100011110", 
    9 => "00111010001101", 10 => "10100101111111", 11 => "00101101111000", 
    12 => "11010000110110", 13 => "00111000111101", 14 => "10101010101100", 
    15 => "00000010101010", 16 => "00010011011010", 17 => "11100111011001", 
    18 => "00011111000100", 19 => "00001010010110", 20 => "10100011010101", 
    21 => "10011111110001", 22 => "11100001010101", 23 => "00110011000110", 
    24 => "00000100101000", 25 => "10100010010101", 26 => "11111000100101", 
    27 => "01100000000100", 28 => "10111011011111", 29 => "10100000101011", 
    30 => "00001011101100", 31 => "10101101010110", 32 => "11010111001001", 
    33 => "11110011001110", 34 => "00001110011011", 35 => "11101111000000", 
    36 => "01100101101001", 37 => "11000101001011", 38 => "11000110111001", 
    39 => "11100010100101", 40 => "00010011111110", 41 => "11111001000101", 
    42 => "01011100110100", 43 => "00100101011100", 44 => "11011101111001", 
    45 => "10010111011100", 46 => "11001011000101", 47 => "00110000010110", 
    48 => "11001001110110", 49 => "01001100100001", 50 => "10100000001100", 
    51 => "00110101011000", 52 => "11100011100100", 53 => "01100000001100", 
    54 => "11000111011011", 55 => "01001001010000", 56 => "11100110011010", 
    57 => "00001010010011", 58 => "10101100101100", 59 => "11111110011000", 
    60 => "01100011101011", 61 => "10101110110000", 62 => "10011000001111", 
    63 => "00111111111000", 64 => "01100001011000", 65 => "00000110100011", 
    66 => "01000111000000", 67 => "00110001011010", 68 => "00111110001111", 
    69 => "00101011100000", 70 => "11011001100000", 71 => "11111010100100", 
    72 => "11111110111010", 73 => "11010011111110", 74 => "10101000111000", 
    75 => "11100000010000", 76 => "11101111000010", 77 => "00110001100001", 
    78 => "00000010001110", 79 => "00010001011100", 80 => "11110000000111", 
    81 => "10110101000110", 82 => "11010000101111", 83 => "10011001100011", 
    84 => "00011001001000", 85 => "11010101101111", 86 => "11001110101001", 
    87 => "10100111100001", 88 => "00010011000011", 89 => "10100000001000", 
    90 => "10100000001110", 91 => "10100101010100", 92 => "00100111011101", 
    93 => "00000010111111", 94 => "10111100000011", 95 => "11111000110000", 
    96 => "10011001000110", 97 => "00110010100101", 98 => "11011100001000", 
    99 => "11001110010010", 100 => "00011011000001", 101 => "00010010110010", 
    102 => "11101010010001", 103 => "01010011110001", 104 => "00110100110011", 
    105 => "00000111111001", 106 => "01001100010001", 107 => "00111101001110", 
    108 => "11010011010010", 109 => "11001101101011", 110 => "10101011111110", 
    111 => "00011100000010", 112 => "00000110110001", 113 => "11111011010110", 
    114 => "10101011001010", 115 => "11100110001010", 116 => "11110000001011", 
    117 => "00100011000101", 118 => "01010111001100", 119 => "10100110010001", 
    120 => "00000111001000", 121 => "10011111100000", 122 => "00101010111101", 
    123 => "01000101101100", 124 => "00101111000100", 125 => "11010001010110", 
    126 => "01001010111000", 127 => "01010100100110", 128 => "10110101101010", 
    129 => "00011000101110", 130 => "00110110011100", 131 => "11110111010110", 
    132 => "11001010100101", 133 => "00101010001001", 134 => "11100110110001", 
    135 => "11001001110010", 136 => "01100110001010", 137 => "10110101101001", 
    138 => "10111100110011", 139 => "11110101001001", 140 => "00100001001011", 
    141 => "11101011111001", 142 => "10101110010101", 143 => "10101000111101", 
    144 => "11111111110011", 145 => "10110110111111", 146 => "10111100111101", 
    147 => "01010100011100", 148 => "00110101101100", 149 => "01000111100100", 
    150 => "11111101100011", 151 => "10101101101101", 152 => "00101110000011", 
    153 => "11011110010100", 154 => "10101101110100", 155 => "10100111111000", 
    156 => "10100001110001", 157 => "10111010100101", 158 => "01001011110101", 
    159 => "00111111010000", 160 => "11100100101001", 161 => "10110001001000", 
    162 => "11101010111100", 163 => "11110111100100", 164 => "01011111001001", 
    165 => "11111111011100", 166 => "01011111011111", 167 => "11011110000001", 
    168 => "11101011111110", 169 => "10110101000010", 170 => "01000101000100", 
    171 => "01010110100000", 172 => "10011111001101", 173 => "00111010111111", 
    174 => "01001110010010", 175 => "11110110000100", 176 => "10010011000110", 
    177 => "10100101100001", 178 => "00000111110110", 179 => "00110000111101", 
    180 => "01001100111101", 181 => "10011100100000", 182 => "00100010010101", 
    183 => "10110011110011", 184 => "10101100011011", 185 => "01011101010001", 
    186 => "00011001000101", 187 => "11011011010011", 188 => "01001010100100", 
    189 => "00111010011010", 190 => "01011111110001", 191 => "00010110111111", 
    192 => "10011100000101", 193 => "10011000011001", 194 => "00110111001010", 
    195 => "00010100100010", 196 => "11100010000100", 197 => "10111100000111", 
    198 => "00010101011110", 199 => "11110011110110", 200 => "00111100101110", 
    201 => "01000111110100", 202 => "10100001010011", 203 => "10101101100100", 
    204 => "11001010100110", 205 => "01001110000011", 206 => "01011001011011", 
    207 => "10101001110010", 208 => "00000011111100", 209 => "11011010111100", 
    210 => "10100100111110", 211 => "01010011110101", 212 => "11000011010010", 
    213 => "11000001100100", 214 => "10111011101011", 215 => "00110100111101", 
    216 => "00001010110010", 217 => "11000000001010", 218 => "10101100101101", 
    219 => "11100001001100", 220 => "10011111010001", 221 => "10101101001100", 
    222 => "00011111001010", 223 => "11100000101111", 224 => "11001110001000", 
    225 => "01100001000111", 226 => "00110001001001", 227 => "11010100110111", 
    228 => "11101001011010", 229 => "11100100011000", 230 => "01010011101000", 
    231 => "10100100010011", 232 => "00100001001010", 233 => "00001100001011", 
    234 => "01010001111111", 235 => "00111100101111", 236 => "00000101101000", 
    237 => "11000010001100", 238 => "11111110110101", 239 => "11011011010000", 
    240 => "10100100000001", 241 => "01001110001110", 242 => "10101001100111", 
    243 => "00010101011100", 244 => "01011011110110", 245 => "10100001111111", 
    246 => "00111100101100", 247 => "00011000000111", 248 => "00011001101100", 
    249 => "01100100011110", 250 => "00101100100110", 251 => "00010111001100", 
    252 => "01010011011000", 253 => "01001111000000", 254 => "11001111010000", 
    255 => "00010101001101", 256 => "11010011110000", 257 => "10100110000001", 
    258 => "11001011010100", 259 => "10111000110010", 260 => "10101000001101", 
    261 => "00011101011111", 262 => "00111011111111", 263 => "11101110010001", 
    264 => "01100001110000", 265 => "11001110111110", 266 => "10100010110010", 
    267 => "01000001010010", 268 => "00111110101110", 269 => "00010011011000", 
    270 => "01010001010111", 271 => "01001010001000", 272 => "01011010111001", 
    273 => "10111000001111", 274 => "00011000100110", 275 => "11100000011000", 
    276 => "10100100010100", 277 => "11010001101010", 278 => "00111100010100", 
    279 => "11111111101111", 280 => "01011010011000", 281 => "10100001000000", 
    282 => "10101100100010", 283 => "00101110110111", 284 => "11110010100101", 
    285 => "00101000100011", 286 => "11110100100111", 287 => "10010110011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_4 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_4 is
    component infer_layer_6_weights_V_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_4_rom_U :  component infer_layer_6_weights_V_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



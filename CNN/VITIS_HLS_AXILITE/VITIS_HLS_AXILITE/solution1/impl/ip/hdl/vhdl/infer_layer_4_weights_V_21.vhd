-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_21_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_21_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01011010101010", 1 => "00100100010010", 2 => "11100000011100", 
    3 => "01011000111111", 4 => "11010000110000", 5 => "01000001010000", 
    6 => "01001011101111", 7 => "11100011110000", 8 => "10100101001001", 
    9 => "11011000111100", 10 => "01011010000010", 11 => "00010101011010", 
    12 => "11010010000101", 13 => "11101000101101", 14 => "00001011111000", 
    15 => "01100010010011", 16 => "10010111101111", 17 => "00010010110111", 
    18 => "10101001000001", 19 => "11111010100111", 20 => "11101000001010", 
    21 => "11010010001100", 22 => "11011110010001", 23 => "11001010110000", 
    24 => "00100000110110", 25 => "11010101101100", 26 => "01011001110110", 
    27 => "11110001010001", 28 => "10110100011011", 29 => "01100001111101", 
    30 => "10010111100110", 31 => "00001000000110", 32 => "00101001101010", 
    33 => "00111110011100", 34 => "00100000110101", 35 => "11110111100000", 
    36 => "11011100101000", 37 => "00101000110010", 38 => "00001100010000", 
    39 => "01011110010001", 40 => "01011001111010", 41 => "11111101011110", 
    42 => "00110011101110", 43 => "11011101001010", 44 => "11111011111100", 
    45 => "00001101110000", 46 => "00000001010010", 47 => "11010110100111", 
    48 => "11101100111010", 49 => "10010110011110", 50 => "11110000010100", 
    51 => "00111100001010", 52 => "01000100010010", 53 => "11000100010001", 
    54 => "11110110110010", 55 => "11110111001100", 56 => "01001010000010", 
    57 => "00000101010000", 58 => "01010010010001", 59 => "11001101100001", 
    60 => "10100010001101", 61 => "01011011000101", 62 => "00000100011000", 
    63 => "00101101111000", 64 => "10111111111101", 65 => "11110111000111", 
    66 => "11011000001000", 67 => "00100010000111", 68 => "00000111010111", 
    69 => "00110011010001", 70 => "10011000001100", 71 => "00111000100101", 
    72 => "00101001100011", 73 => "01010100010011", 74 => "01011110110100", 
    75 => "11010100111110", 76 => "11010000010110", 77 => "11111100100010", 
    78 => "00101100010111", 79 => "00001101110010", 80 => "10011110010010", 
    81 => "00101000101000", 82 => "11010000001111", 83 => "11110110011100", 
    84 => "11010110111100", 85 => "11110010111110", 86 => "11110010111000", 
    87 => "10101001001111", 88 => "00111010010111", 89 => "00001101011000", 
    90 => "11000101011110", 91 => "01000000001111", 92 => "00111011000101", 
    93 => "11110111011111", 94 => "00100010100101", 95 => "11111001111010", 
    96 => "11110101011010", 97 => "11111100010001", 98 => "11110100101100", 
    99 => "00010000001101", 100 => "00000010101001", 101 => "11011110110011", 
    102 => "10100101011100", 103 => "00101101101000", 104 => "00000100011101", 
    105 => "00100001101100", 106 => "00011111011001", 107 => "00001111011011", 
    108 => "01010100110010", 109 => "00000010001110", 110 => "01011110010011", 
    111 => "00100110101000", 112 => "00001101111111", 113 => "10100001101110", 
    114 => "01000100100100", 115 => "00101010110010", 116 => "10110000010100", 
    117 => "10111001000000", 118 => "10011010101100", 119 => "00101101011011", 
    120 => "00010101100110", 121 => "00011100000001", 122 => "00110101100101", 
    123 => "10011001000100", 124 => "10100001011000", 125 => "10101111000011", 
    126 => "01011100110010", 127 => "01000111101000", 128 => "01010110101111", 
    129 => "10101010011000", 130 => "10111001001000", 131 => "11101110010100", 
    132 => "00110110110100", 133 => "01010101010011", 134 => "00111111011110", 
    135 => "01100010001010", 136 => "11100001101001", 137 => "00110011100000", 
    138 => "10100001111001", 139 => "11100001101000", 140 => "00010110011011", 
    141 => "00010110111011", 142 => "11110111001001", 143 => "10100101010001", 
    144 => "00011100011100", 145 => "11101110010111", 146 => "11011100111110", 
    147 => "00001111001111", 148 => "11101100100011", 149 => "00000011010000", 
    150 => "01000100010100", 151 => "00101010000110", 152 => "00011111011011", 
    153 => "00100111011000", 154 => "11011110011111", 155 => "00100010010111", 
    156 => "10101111000001", 157 => "11100001101100", 158 => "11111110111011", 
    159 => "11111011110101", 160 => "10101111110001", 161 => "10010100100010", 
    162 => "01011011000000", 163 => "01100001111101", 164 => "11101101100000", 
    165 => "00111010011010", 166 => "01010100010101", 167 => "11011000001111", 
    168 => "10110010100100", 169 => "00010110010110", 170 => "01100110011000", 
    171 => "11110101011101", 172 => "00001110000000", 173 => "10010010101010", 
    174 => "11110100010001", 175 => "01011111010101", 176 => "11011011000001", 
    177 => "11001101000110", 178 => "11101101111010", 179 => "01001110001111", 
    180 => "00000101011000", 181 => "00000100111111", 182 => "00010001000110", 
    183 => "01101000001100", 184 => "10101000010001", 185 => "11011011001101", 
    186 => "10011101111111", 187 => "01001101010010", 188 => "01001011010100", 
    189 => "00001001001000", 190 => "11000000011100", 191 => "01001011010010", 
    192 => "10101001110010", 193 => "00001100000111", 194 => "00101111000000", 
    195 => "11001111110001", 196 => "11000011000000", 197 => "10110011111110", 
    198 => "10100101111111", 199 => "11111011010000", 200 => "01001101010011", 
    201 => "00101000001100", 202 => "00110001110100", 203 => "11001110011111", 
    204 => "11001000100010", 205 => "00101010110011", 206 => "00010100000100", 
    207 => "01000011011110", 208 => "11111001001011", 209 => "10100010000011", 
    210 => "10011110100011", 211 => "10011001010000", 212 => "01100010110000", 
    213 => "11011101100101", 214 => "00101010011001", 215 => "00000011111000", 
    216 => "00000011011001", 217 => "11110010000010", 218 => "00101111101011", 
    219 => "11000001100110", 220 => "00010110100000", 221 => "10101111110011", 
    222 => "00111001110001", 223 => "11111011111001", 224 => "11111101101001", 
    225 => "00001101000000", 226 => "11010100110100", 227 => "11011000000010", 
    228 => "11110100111101", 229 => "01010010010001", 230 => "11000011101101", 
    231 => "11111100100010", 232 => "11110101101001", 233 => "10111111010000", 
    234 => "10010111101101", 235 => "00111101110110", 236 => "00100011101011", 
    237 => "11010010001010", 238 => "00000111001010", 239 => "00000111111010", 
    240 => "11001111000011", 241 => "00011001100000", 242 => "00100100010000", 
    243 => "01010111001100", 244 => "11000000000010", 245 => "00111100111100", 
    246 => "10110000000011", 247 => "01010101011101", 248 => "10111000100011", 
    249 => "00101111011101", 250 => "01001011101011", 251 => "01000110110101", 
    252 => "00110011001000", 253 => "01001001001100", 254 => "00000101111110", 
    255 => "00000101101001", 256 => "11101101001010", 257 => "00001101101001", 
    258 => "11101010001000", 259 => "10111011110011", 260 => "11000101100111", 
    261 => "00101000100110", 262 => "01011111111000", 263 => "11000010101101", 
    264 => "01011000000000", 265 => "10011011100001", 266 => "00001101110110", 
    267 => "01011111111011", 268 => "01100100000010", 269 => "11001010001001", 
    270 => "11111010000010", 271 => "11000011000011", 272 => "00000011011110", 
    273 => "00101111100001", 274 => "00101010110011", 275 => "10010100000111", 
    276 => "10101111111001", 277 => "11100111110110", 278 => "10100101011011", 
    279 => "10100110111000", 280 => "11111111010100", 281 => "00000101111100", 
    282 => "10110001001010", 283 => "11100111010010", 284 => "00110011111100", 
    285 => "10011000011110", 286 => "10110011001010", 287 => "10110010111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_21 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_21 is
    component infer_layer_4_weights_V_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_21_rom_U :  component infer_layer_4_weights_V_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_19_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_19_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000100101001000", 1 => "1110100010000110", 2 => "0000010011010010", 
    3 => "1111010011001000", 4 => "1110100000110000", 5 => "1111110001101111", 
    6 => "0000111001011101", 7 => "1111100110001110", 8 => "1110100001100010", 
    9 => "0001100001101110", 10 => "0000001100101000", 11 => "0000100110100101", 
    12 => "1101010100000001", 13 => "1101101110010010", 14 => "0001001000111101", 
    15 => "0001011111011101", 16 => "1111011010101011", 17 => "0000101111010001", 
    18 => "1110101100111011", 19 => "1110101010011001", 20 => "1110101110010101", 
    21 => "0001101100011011", 22 => "0000101101100000", 23 => "0001001001100000", 
    24 => "0100110001011101", 25 => "1111010001000111", 26 => "0010100111111000", 
    27 => "1110100010100110", 28 => "0000101110010110", 29 => "0001000101000100", 
    30 => "1111000001010100", 31 => "1110110101001111", 32 => "0000101010111101", 
    33 => "0000011010100011", 34 => "1111000110001101", 35 => "1111001111000101", 
    36 => "0001000101001100", 37 => "0001001110001000", 38 => "1110011110000010", 
    39 => "0000010111010011", 40 => "0001010000100011", 41 => "0000011101011100", 
    42 => "0001000001101010", 43 => "0000100001000110", 44 => "0000110011110110", 
    45 => "0000001001010111", 46 => "1111000000111111", 47 => "0000100110111011", 
    48 => "0000010010100100", 49 => "0001111101010100", 50 => "0001000001111001", 
    51 => "0001011110111001", 52 => "1111010000100110", 53 => "1110111000101000", 
    54 => "1101001010001111", 55 => "0010111001110011", 56 => "0001100101001010", 
    57 => "0001001010101010", 58 => "0010111111011110", 59 => "1111100111101001", 
    60 => "0000001001110001", 61 => "1111100101101110", 62 => "0001010011011011", 
    63 => "1111011011111101", 64 => "0010001010010000", 65 => "0000000110000110", 
    66 => "1110111111110000", 67 => "0000110101010010", 68 => "0001010101110000", 
    69 => "0000100000100000", 70 => "1100001110011111", 71 => "0001011011001110", 
    72 => "0001001110001010", 73 => "1111101101100010", 74 => "0001000111101111", 
    75 => "1110101110100001", 76 => "1110010011110100", 77 => "1111010010100000", 
    78 => "0000001010111001", 79 => "0000001110111010", 80 => "0000000100100010", 
    81 => "0001101100110000", 82 => "1111001001111110", 83 => "0000011101100111", 
    84 => "0000111010101010", 85 => "1111000000111011", 86 => "1101011011011000", 
    87 => "1101001101001001", 88 => "1111110110111011", 89 => "1111111011100010", 
    90 => "1111110000001011", 91 => "1111000111010100", 92 => "1111010011100101", 
    93 => "1111000110001010", 94 => "0001011100111110", 95 => "1111111000010101", 
    96 => "1110001010101001", 97 => "1111011010111010", 98 => "0010011111111000", 
    99 => "1111001011110000", 100 => "1111011000110100", 101 => "1111110111000100", 
    102 => "0011010001000000", 103 => "1111001010001010", 104 => "0001010111001100", 
    105 => "1111011110110110", 106 => "0000001000000100", 107 => "1110111111111001", 
    108 => "0011111100110000", 109 => "0010101111011100", 110 => "1111010010101101", 
    111 => "1111000100101011", 112 => "1111100100010101", 113 => "1110011100110011", 
    114 => "1111101011001001", 115 => "0000111100110010", 116 => "1111011111001100", 
    117 => "0001101011000000", 118 => "0010101101001000", 119 => "0110010000110100", 
    120 => "0010010001101111", 121 => "1111001011110101", 122 => "0100011110000101", 
    123 => "1110111101010110", 124 => "0000100101101111", 125 => "0000110001100010", 
    126 => "0000010001111011", 127 => "0001010101011100", 128 => "0000100000111000", 
    129 => "1111110111111011", 130 => "0100001101111110", 131 => "1111111100000100", 
    132 => "1111000001111011", 133 => "0001000111101110", 134 => "0000110001101100", 
    135 => "0001100100100000", 136 => "0001011110111100", 137 => "0001000111011000", 
    138 => "0000110011111001", 139 => "0000000000001010", 140 => "0011010010001100", 
    141 => "0010100010010101", 142 => "0000001010111000", 143 => "0001000101000110", 
    144 => "1111001001100101", 145 => "1111011001001111", 146 => "1111010101010100", 
    147 => "0000011011010010", 148 => "1110011100101000", 149 => "0001000101110001", 
    150 => "1110100111100101", 151 => "0100011110111111", 152 => "0001101011001101", 
    153 => "1110110110100110", 154 => "0010010000001110", 155 => "0000011101000010", 
    156 => "1110111111110110", 157 => "0000010001001010", 158 => "1110110111001001", 
    159 => "0000001110110011", 160 => "0000010111111001", 161 => "1111011011011111", 
    162 => "0001001000001011", 163 => "0001000001100010", 164 => "1110111100100001", 
    165 => "0000101000111100", 166 => "1111110111110111", 167 => "0001001111111011", 
    168 => "1111111000101000", 169 => "1111000000010000", 170 => "0001011011100000", 
    171 => "0001010011001000", 172 => "1111101011101100", 173 => "0001001000101001", 
    174 => "1110111001110111", 175 => "1111010011100001", 176 => "1111100110110010", 
    177 => "0001000010100101", 178 => "0001010110100101", 179 => "1111000111101000", 
    180 => "0000000000000110", 181 => "1111011111001011", 182 => "0010011110011100", 
    183 => "1101001010000011", 184 => "0001100110110111", 185 => "1111001101110110", 
    186 => "1110101100011100", 187 => "1111011110010101", 188 => "0001011011100000", 
    189 => "0000110010110000", 190 => "0000110010011101", 191 => "0000100111111110", 
    192 => "1110101000011010", 193 => "0000011101101001", 194 => "0011110011011001", 
    195 => "0000011110001100", 196 => "1111110000010101", 197 => "0000110000110110", 
    198 => "0000101001001010", 199 => "0000000110111110", 200 => "0001101010000001", 
    201 => "1110100001010100", 202 => "0000101010011011", 203 => "0000101100011000", 
    204 => "0011010011111110", 205 => "0000000100000011", 206 => "0000101010001000", 
    207 => "0000101011010100", 208 => "1101111111111000", 209 => "1110110111101110", 
    210 => "1111001010011110", 211 => "1110100110111010", 212 => "1111101001110100", 
    213 => "0000000010110101", 214 => "1111110110001010", 215 => "0110110111111001", 
    216 => "0001100010101110", 217 => "0001001000010000", 218 => "0100001110000110", 
    219 => "1110100110000110", 220 => "1110110011111101", 221 => "0000100000101110", 
    222 => "1111100010110111", 223 => "0001101000010111", 224 => "0001010001100100", 
    225 => "0001100111100010", 226 => "1111111100101000", 227 => "0000010100010000", 
    228 => "1110101101110100", 229 => "1110100111000110", 230 => "0000010000100010", 
    231 => "1111101100001000", 232 => "1110100100101000", 233 => "1110010101110100", 
    234 => "1111111010010101", 235 => "1111010001110010", 236 => "0011011000101011", 
    237 => "0010010100111010", 238 => "1111111111100101", 239 => "0000111001110101", 
    240 => "1111001110001100", 241 => "1111101101110010", 242 => "1111010001001001", 
    243 => "0000110001111001", 244 => "1110111100010100", 245 => "0001100000101001", 
    246 => "0000110010001000", 247 => "0010010100011111", 248 => "0000101101010100", 
    249 => "0000111100111000", 250 => "0001111000100110", 251 => "0000000010100110", 
    252 => "1110110010111111", 253 => "0001000001001010", 254 => "1110111010010111", 
    255 => "1111101110111110", 256 => "1111101100001010", 257 => "0000000110011101", 
    258 => "0000001001000100", 259 => "0000100110110010", 260 => "1111110111110111", 
    261 => "0001101111100101", 262 => "1101100001000110", 263 => "0001000110111100", 
    264 => "1111000011100110", 265 => "0000101110011101", 266 => "1111101010100000", 
    267 => "1110011111001000", 268 => "1111110110111000", 269 => "0001000000110100", 
    270 => "1110011011000110", 271 => "1110000000101011", 272 => "1110101100011110", 
    273 => "1110111010010011", 274 => "1111011111110101", 275 => "1111011101011101", 
    276 => "1111100001011100", 277 => "0000010011110111", 278 => "1111000001110000", 
    279 => "1100010110111110", 280 => "1101101010101000", 281 => "0001101000101100", 
    282 => "1101001001001100", 283 => "0001010101111011", 284 => "1111101101100100", 
    285 => "1111100010111111", 286 => "1111101011101111", 287 => "0000110011111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_19 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_19 is
    component infer_layer_6_weights_V_19_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_19_rom_U :  component infer_layer_6_weights_V_19_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



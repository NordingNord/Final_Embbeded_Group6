-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_18_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00100111001110", 1 => "00101000101000", 2 => "00000111001001", 
    3 => "10111011111001", 4 => "00101000100110", 5 => "10110011011001", 
    6 => "11100110100100", 7 => "00100000001000", 8 => "11000101100000", 
    9 => "01000100101011", 10 => "00111100100110", 11 => "10011010110011", 
    12 => "11111011111111", 13 => "11100001100111", 14 => "10111001100011", 
    15 => "10101101101011", 16 => "11100010110000", 17 => "01100111000110", 
    18 => "01000001000100", 19 => "00001101101111", 20 => "00110100000100", 
    21 => "01001110010010", 22 => "10101101101101", 23 => "00010011000111", 
    24 => "00100000100110", 25 => "01000011000110", 26 => "11010110110110", 
    27 => "11011011101100", 28 => "00111111001001", 29 => "01011101010111", 
    30 => "00001010100011", 31 => "11010011100111", 32 => "00110100110100", 
    33 => "11000110100001", 34 => "01001000001111", 35 => "00001100011011", 
    36 => "00111100101110", 37 => "00101100011100", 38 => "11111000010011", 
    39 => "00111101100010", 40 => "01000011001100", 41 => "01000101100100", 
    42 => "01000101110010", 43 => "11101000011100", 44 => "00011111010000", 
    45 => "10011111000010", 46 => "10100001011011", 47 => "11001001001100", 
    48 => "11001011010101", 49 => "11010111010011", 50 => "00100101101011", 
    51 => "01010111000010", 52 => "00011110000010", 53 => "00101011110001", 
    54 => "00001000110000", 55 => "10111011110000", 56 => "10011000111001", 
    57 => "10111001001100", 58 => "01000011111110", 59 => "11101111111101", 
    60 => "11000011011101", 61 => "00001111110000", 62 => "11100101110000", 
    63 => "10110100111011", 64 => "11011010111110", 65 => "00010100101111", 
    66 => "10110010000000", 67 => "11100011110010", 68 => "00010111111001", 
    69 => "00000101111101", 70 => "00000010110100", 71 => "11100110101110", 
    72 => "00011110000000", 73 => "11110001110001", 74 => "00000100010010", 
    75 => "00100100001011", 76 => "01011011010100", 77 => "11000001110011", 
    78 => "11011111110001", 79 => "11010001100000", 80 => "10011001101111", 
    81 => "10111101110110", 82 => "01001111011101", 83 => "01001100010100", 
    84 => "11001011100001", 85 => "00010001000100", 86 => "00010110111010", 
    87 => "10101001100100", 88 => "11010010010000", 89 => "01010101011100", 
    90 => "10111000010010", 91 => "00101111100011", 92 => "00100101001110", 
    93 => "10100110000011", 94 => "11110111000010", 95 => "10111111011110", 
    96 => "11111111100111", 97 => "10101010101110", 98 => "01000100110110", 
    99 => "00100100100000", 100 => "10100001011010", 101 => "00011011001111", 
    102 => "10110000101101", 103 => "11000101011010", 104 => "10101101100001", 
    105 => "01011010010000", 106 => "10100000000101", 107 => "10110011110100", 
    108 => "11001111110011", 109 => "11010000010001", 110 => "11001010000010", 
    111 => "00000110100001", 112 => "11011000110100", 113 => "10111100100111", 
    114 => "01001110010010", 115 => "00000111001111", 116 => "00011101010110", 
    117 => "11011100111010", 118 => "10110000000011", 119 => "11001110000110", 
    120 => "00111111011000", 121 => "00000000010110", 122 => "01101000011101", 
    123 => "00000011100111", 124 => "00010011010001", 125 => "00010011110000", 
    126 => "00110000001001", 127 => "01001001100010", 128 => "00100111100101", 
    129 => "00100100111101", 130 => "00011000101101", 131 => "00000101001001", 
    132 => "01100100101101", 133 => "00011110000111", 134 => "00000101110111", 
    135 => "10100001011000", 136 => "10110111101100", 137 => "00111011100011", 
    138 => "00111110100111", 139 => "11110110001001", 140 => "10011010110111", 
    141 => "11101001100010", 142 => "11000111100010", 143 => "11111001011100", 
    144 => "11000110000110", 145 => "00001000000101", 146 => "00100111000110", 
    147 => "11100011100001", 148 => "11001110000110", 149 => "10101000000000", 
    150 => "10100101010101", 151 => "01100001100010", 152 => "11110101010101", 
    153 => "10111100100100", 154 => "00000101101100", 155 => "11101110011110", 
    156 => "00011010011110", 157 => "00110101000010", 158 => "01010000001001", 
    159 => "00011001010011", 160 => "00100101000011", 161 => "01100000011010", 
    162 => "11001110111001", 163 => "10110111111010", 164 => "11000011000001", 
    165 => "11001001100000", 166 => "00010011101011", 167 => "00001000110101", 
    168 => "11000000100011", 169 => "11110101101110", 170 => "00110000001000", 
    171 => "00110101011101", 172 => "11011100010000", 173 => "00011100000010", 
    174 => "11101010000100", 175 => "11010001111100", 176 => "11100011110100", 
    177 => "01011111011111", 178 => "10011110001000", 179 => "11101110010110", 
    180 => "10100000011101", 181 => "10100011001010", 182 => "10111101001001", 
    183 => "00101111101110", 184 => "11010110110000", 185 => "01101000010111", 
    186 => "01001101011100", 187 => "00011111110000", 188 => "11000111011101", 
    189 => "00111101001000", 190 => "11100000110101", 191 => "00000101001000", 
    192 => "11111000010101", 193 => "00000110101001", 194 => "10111000100010", 
    195 => "00110101010101", 196 => "01010010001001", 197 => "00001001111011", 
    198 => "00011101111100", 199 => "01000100000111", 200 => "11100111000101", 
    201 => "11101000000111", 202 => "11010011010010", 203 => "10101010100100", 
    204 => "11001010100001", 205 => "10011011111011", 206 => "11110111001000", 
    207 => "11000101000011", 208 => "01010000001111", 209 => "11010101101111", 
    210 => "10101101111111", 211 => "01100011101010", 212 => "00000001010110", 
    213 => "11011100011001", 214 => "11010001100100", 215 => "10111100101111", 
    216 => "10101111010110", 217 => "11101101101101", 218 => "01000111000010", 
    219 => "00101001110000", 220 => "00110100010001", 221 => "01000100011011", 
    222 => "10011010100100", 223 => "11101100101010", 224 => "00010000111011", 
    225 => "01011100000010", 226 => "11101001111110", 227 => "00001111100110", 
    228 => "00001010110001", 229 => "00001000110000", 230 => "11110101001110", 
    231 => "00100111100101", 232 => "11001001111011", 233 => "11110010110110", 
    234 => "01000001010110", 235 => "11101111110110", 236 => "01100001011101", 
    237 => "01000100010101", 238 => "01001001000011", 239 => "00010100001001", 
    240 => "01100010110010", 241 => "10110100001110", 242 => "01011100101110", 
    243 => "00000001011100", 244 => "01001101100101", 245 => "11111100011100", 
    246 => "11100111111011", 247 => "10111011010100", 248 => "11101100101011", 
    249 => "00110001000111", 250 => "10111010010101", 251 => "11011000111101", 
    252 => "00110010101101", 253 => "11000000010000", 254 => "10110001111011", 
    255 => "00010111011110", 256 => "11011100001101", 257 => "00100000101010", 
    258 => "00011110001110", 259 => "10110111011000", 260 => "11010001100101", 
    261 => "11010000010111", 262 => "00001111011000", 263 => "01100011000111", 
    264 => "00110011101100", 265 => "11011010101101", 266 => "01100001100111", 
    267 => "01100001101010", 268 => "01010010001000", 269 => "10111101001110", 
    270 => "11111111011111", 271 => "00101011110001", 272 => "00001111001110", 
    273 => "11000001110100", 274 => "00001111000001", 275 => "10010111111110", 
    276 => "00010000100001", 277 => "00100001010010", 278 => "01001100000001", 
    279 => "00100010101101", 280 => "11101110010000", 281 => "01010011110100", 
    282 => "00001111000111", 283 => "00110101110111", 284 => "11110010011101", 
    285 => "01000110100001", 286 => "00011110100110", 287 => "00011110011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_18 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_18 is
    component infer_layer_6_weights_V_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_18_rom_U :  component infer_layer_6_weights_V_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



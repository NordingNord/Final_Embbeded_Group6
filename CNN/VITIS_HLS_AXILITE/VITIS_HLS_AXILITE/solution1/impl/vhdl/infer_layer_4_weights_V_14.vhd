-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_14_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_14_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11011100100011", 1 => "01001111000111", 2 => "11011111011101", 
    3 => "11010010001010", 4 => "11000101011110", 5 => "11001100110111", 
    6 => "11000001011110", 7 => "01011111110111", 8 => "10110100010100", 
    9 => "11001010010010", 10 => "11001011100000", 11 => "00100100100010", 
    12 => "11110100110000", 13 => "10010100011110", 14 => "11010001101001", 
    15 => "01000000001011", 16 => "00110110100100", 17 => "00111110101010", 
    18 => "01001101000011", 19 => "00000111001110", 20 => "00101101100101", 
    21 => "00000110110110", 22 => "11100110111011", 23 => "11011101010101", 
    24 => "11110010001100", 25 => "00010100000111", 26 => "11101110010101", 
    27 => "10111111101000", 28 => "10100111011001", 29 => "11101110110111", 
    30 => "11111011111010", 31 => "11010001101010", 32 => "00010101111000", 
    33 => "01001100110011", 34 => "00011001101100", 35 => "00001000001000", 
    36 => "00100100100011", 37 => "11110011100101", 38 => "00110101010010", 
    39 => "00110101001101", 40 => "10110110010111", 41 => "01010110111011", 
    42 => "01100010110001", 43 => "10100000001111", 44 => "01010100010101", 
    45 => "00011110100001", 46 => "11101011011111", 47 => "10110011000011", 
    48 => "11010100000100", 49 => "10011100110011", 50 => "00001110110001", 
    51 => "00111011111011", 52 => "00011111110000", 53 => "11000000001000", 
    54 => "00010111111111", 55 => "11001111101101", 56 => "11111010100011", 
    57 => "00100110000001", 58 => "11101110011011", 59 => "10100001001110", 
    60 => "11011100110000", 61 => "01001011111100", 62 => "10110111010000", 
    63 => "10110101001101", 64 => "00000011011011", 65 => "10111101001101", 
    66 => "00001001100011", 67 => "00110100010001", 68 => "11000100001110", 
    69 => "10101010100010", 70 => "11110010001101", 71 => "00100101001001", 
    72 => "00001110101100", 73 => "10111000011111", 74 => "01001011011110", 
    75 => "00101001110011", 76 => "01000010110111", 77 => "00001001111001", 
    78 => "10110100010001", 79 => "01001110100100", 80 => "01011100111100", 
    81 => "10011110000110", 82 => "10111110010011", 83 => "10110011001110", 
    84 => "00010100100101", 85 => "10100001010001", 86 => "00100010011100", 
    87 => "01010111001011", 88 => "11111011000000", 89 => "11000110001101", 
    90 => "00111011111100", 91 => "00110000000001", 92 => "11011011001000", 
    93 => "00110110010101", 94 => "10110010111001", 95 => "00011101110001", 
    96 => "11011001000110", 97 => "00100010111101", 98 => "11100011101100", 
    99 => "00101110010100", 100 => "11111100100001", 101 => "00000011110101", 
    102 => "10111100000001", 103 => "11011011010111", 104 => "00011101001001", 
    105 => "01100001001110", 106 => "10101000001110", 107 => "10111010011011", 
    108 => "00000011111101", 109 => "01011110001001", 110 => "00010010000101", 
    111 => "11001100111000", 112 => "00111011000010", 113 => "01001110111110", 
    114 => "10010001000001", 115 => "01000010001111", 116 => "00101100100011", 
    117 => "00010101100110", 118 => "10101001011111", 119 => "10100110000111", 
    120 => "01100001111010", 121 => "00101100010111", 122 => "00011100101111", 
    123 => "01100011011001", 124 => "00000001100110", 125 => "10011011000001", 
    126 => "10100011110000", 127 => "01010110000101", 128 => "01010110000110", 
    129 => "10011110110111", 130 => "11010010101001", 131 => "00010101110101", 
    132 => "01011001001100", 133 => "11110010101100", 134 => "01010000111111", 
    135 => "00010110001100", 136 => "11101100011001", 137 => "11001101011111", 
    138 => "00101111000001", 139 => "01000010010101", 140 => "10111110100011", 
    141 => "11111111111011", 142 => "11100110010011", 143 => "01000011100101", 
    144 => "10110011010111", 145 => "11001101111100", 146 => "11111111011011", 
    147 => "00011110001101", 148 => "01010100110000", 149 => "11010011110000", 
    150 => "11010110100000", 151 => "11111100111110", 152 => "00011111110111", 
    153 => "11000110011011", 154 => "11101000000110", 155 => "11110011101000", 
    156 => "11011100001100", 157 => "00010010001010", 158 => "10101011101100", 
    159 => "11011000000111", 160 => "00010001001001", 161 => "11000100111001", 
    162 => "00100010100000", 163 => "10100011101101", 164 => "11010000001101", 
    165 => "11110010001001", 166 => "10101110111010", 167 => "00101000101010", 
    168 => "11011011100011", 169 => "11011000110000", 170 => "00110101100111", 
    171 => "01001000000010", 172 => "00010110001001", 173 => "00000110110111", 
    174 => "11100100010101", 175 => "10010011110000", 176 => "00101100010111", 
    177 => "11111000011011", 178 => "10011010110001", 179 => "01000100000011", 
    180 => "11110110010011", 181 => "11101001111011", 182 => "11100111000111", 
    183 => "00111001001001", 184 => "01000011000110", 185 => "10110100011010", 
    186 => "01000010011000", 187 => "11010100000001", 188 => "00110010111100", 
    189 => "11101010110001", 190 => "01000110100101", 191 => "10011011011111", 
    192 => "00111001000111", 193 => "00001001011011", 194 => "10101010010101", 
    195 => "00101100000100", 196 => "11110111001001", 197 => "11111000000010", 
    198 => "10110100011011", 199 => "10111000000011", 200 => "11110110011000", 
    201 => "11110110100000", 202 => "10110101001100", 203 => "11001001011100", 
    204 => "00000100101001", 205 => "00001110001011", 206 => "11000011101011", 
    207 => "11000110111111", 208 => "01001110000001", 209 => "10011001111101", 
    210 => "11111010101110", 211 => "00100110111011", 212 => "11011100001001", 
    213 => "00000101010000", 214 => "01001110001010", 215 => "01011110001011", 
    216 => "00001000100010", 217 => "11101001010111", 218 => "01100001000100", 
    219 => "00001001010011", 220 => "00111111100110", 221 => "00110101101011", 
    222 => "11010111000111", 223 => "00010101100011", 224 => "11000011100010", 
    225 => "00010000000110", 226 => "01000111001100", 227 => "01010100011111", 
    228 => "00110011100100", 229 => "01001111111000", 230 => "11001110011100", 
    231 => "11110100000010", 232 => "11011011100101", 233 => "10101010010101", 
    234 => "11100101000100", 235 => "11101101000011", 236 => "10111001101110", 
    237 => "10101011111100", 238 => "11101010110100", 239 => "10010010011011", 
    240 => "11001101001101", 241 => "11010001011110", 242 => "00111000110110", 
    243 => "00101000110101", 244 => "00010000111110", 245 => "10110010100011", 
    246 => "11110110101011", 247 => "10011011001111", 248 => "11000101000110", 
    249 => "10011011100001", 250 => "11000000101001", 251 => "11001101000110", 
    252 => "11000101111100", 253 => "01001100001011", 254 => "11001011010100", 
    255 => "00101001010011", 256 => "00101000000001", 257 => "11110000000101", 
    258 => "11000011010100", 259 => "00011010000101", 260 => "01010001010011", 
    261 => "00000100110011", 262 => "00110100110111", 263 => "01100101011100", 
    264 => "10110011011010", 265 => "11110101110010", 266 => "00010010010110", 
    267 => "11000001100011", 268 => "00001100111100", 269 => "11111100110101", 
    270 => "10100000111000", 271 => "10110101001010", 272 => "11000001001110", 
    273 => "00101011101110", 274 => "11011000111110", 275 => "11000101000010", 
    276 => "10111001101001", 277 => "00001010100010", 278 => "01001111111010", 
    279 => "10111110100011", 280 => "00011101011010", 281 => "11000111010110", 
    282 => "01100000111010", 283 => "11011111011000", 284 => "00010111000101", 
    285 => "00001110000011", 286 => "00011110101000", 287 => "11011101001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_14 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_14 is
    component infer_layer_4_weights_V_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_14_rom_U :  component infer_layer_4_weights_V_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



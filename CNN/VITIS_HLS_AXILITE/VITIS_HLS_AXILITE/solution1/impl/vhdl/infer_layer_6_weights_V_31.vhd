-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_31_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_31_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111100010001", 1 => "11010110101110", 2 => "01000001110111", 
    3 => "10101000101011", 4 => "00000110110101", 5 => "11101101101110", 
    6 => "00000110111101", 7 => "11010010101010", 8 => "10101110111001", 
    9 => "01001000110001", 10 => "00010001001001", 11 => "01000010001100", 
    12 => "00101000111100", 13 => "10011111011111", 14 => "11110010100111", 
    15 => "00011101100001", 16 => "00010001010011", 17 => "10101001010011", 
    18 => "00110011011000", 19 => "00101101001011", 20 => "11111101011010", 
    21 => "10111000011001", 22 => "01000110011010", 23 => "11001001110110", 
    24 => "00101110101001", 25 => "10011010010001", 26 => "11101001011010", 
    27 => "11101001100011", 28 => "11011000111101", 29 => "10101110101100", 
    30 => "00101001010111", 31 => "00000100001010", 32 => "10000011010111", 
    33 => "11011100000101", 34 => "11100001001000", 35 => "00000101100100", 
    36 => "10011011001001", 37 => "10111000001111", 38 => "10110110111010", 
    39 => "11010000110000", 40 => "11000111101001", 41 => "00001000000001", 
    42 => "00010111010001", 43 => "11110100000100", 44 => "11000000111100", 
    45 => "10011010000101", 46 => "10110101011100", 47 => "11011111000111", 
    48 => "00100100100100", 49 => "11111110000101", 50 => "11001101101111", 
    51 => "00100110000001", 52 => "01000000000010", 53 => "11100011011010", 
    54 => "11001000110110", 55 => "00111001110000", 56 => "11011010011010", 
    57 => "11100110111110", 58 => "11101111000110", 59 => "10011110101110", 
    60 => "00001011110010", 61 => "00000100100001", 62 => "00110010001001", 
    63 => "00000011101100", 64 => "11101110111110", 65 => "10011100111100", 
    66 => "00011010100100", 67 => "00101111011010", 68 => "10111100111100", 
    69 => "10110100010110", 70 => "11001101000001", 71 => "11011010100011", 
    72 => "11000100001001", 73 => "00110001111000", 74 => "11010011000011", 
    75 => "01011111110000", 76 => "11011000110001", 77 => "11000001001111", 
    78 => "10110000100001", 79 => "00001110111001", 80 => "11111000100010", 
    81 => "10111110010001", 82 => "00111000100101", 83 => "01011011111001", 
    84 => "00111000001010", 85 => "10110110001000", 86 => "00011101011010", 
    87 => "11110101100101", 88 => "00011100111100", 89 => "00000111011111", 
    90 => "10111100011110", 91 => "11011001011011", 92 => "11001110001100", 
    93 => "11101111000010", 94 => "11001100011101", 95 => "11111100000111", 
    96 => "00110101001010", 97 => "00100110111011", 98 => "11100100011011", 
    99 => "00010100101001", 100 => "11000001110000", 101 => "01011001010110", 
    102 => "11110101001101", 103 => "11001011100111", 104 => "01001000100100", 
    105 => "00001110100111", 106 => "01011010010100", 107 => "11101101101111", 
    108 => "11110100101011", 109 => "00110101001001", 110 => "11001000010111", 
    111 => "10000110011000", 112 => "11011001101011", 113 => "11100101001001", 
    114 => "00100001100011", 115 => "11110001000011", 116 => "00011001001011", 
    117 => "11001000111100", 118 => "10110101110111", 119 => "00101101000110", 
    120 => "10100100110101", 121 => "11101001100111", 122 => "00101000000110", 
    123 => "00011001000000", 124 => "00101111000011", 125 => "10111010010100", 
    126 => "00011001100011", 127 => "01010101100000", 128 => "00111111110010", 
    129 => "01001111111000", 130 => "00010111000001", 131 => "01100011000100", 
    132 => "10111100011000", 133 => "11001101010010", 134 => "01011100101010", 
    135 => "11001000001011", 136 => "01011100011111", 137 => "11010100010110", 
    138 => "00010110101001", 139 => "00101001110011", 140 => "00011100110011", 
    141 => "10111101110001", 142 => "00111001101111", 143 => "10110010111000", 
    144 => "00101000111010", 145 => "10011110011100", 146 => "11110110010001", 
    147 => "00111111010100", 148 => "11111011000101", 149 => "00001001000010", 
    150 => "00111001100010", 151 => "01011101110100", 152 => "11010011011001", 
    153 => "11010000110011", 154 => "00010010000010", 155 => "01011110000110", 
    156 => "10110010101010", 157 => "01000111000110", 158 => "11110100011101", 
    159 => "00101100010110", 160 => "00001110101100", 161 => "11011101000000", 
    162 => "11000101001010", 163 => "11001110000111", 164 => "10110110111011", 
    165 => "00101101000011", 166 => "10111000100100", 167 => "10110101100111", 
    168 => "11110010010011", 169 => "11011110101011", 170 => "00001011011010", 
    171 => "10011010011001", 172 => "10110010010011", 173 => "10111010110011", 
    174 => "10100100000111", 175 => "11110010101111", 176 => "01000011110011", 
    177 => "11110000111010", 178 => "00001100010111", 179 => "01100110011111", 
    180 => "11000101011001", 181 => "10011110011000", 182 => "11111000101101", 
    183 => "10010100111010", 184 => "11001111010000", 185 => "00100000100101", 
    186 => "10001010101011", 187 => "11000101000110", 188 => "00000010010011", 
    189 => "11011111111110", 190 => "11110011001111", 191 => "01011001001100", 
    192 => "11100000001101", 193 => "11110000101110", 194 => "11110011111001", 
    195 => "00110000010000", 196 => "11111110010100", 197 => "11111010101101", 
    198 => "00010000100011", 199 => "01001011001101", 200 => "00110001111111", 
    201 => "00011011000110", 202 => "01000101000100", 203 => "01000001000000", 
    204 => "01101100100101", 205 => "00010110001111", 206 => "01000010011100", 
    207 => "11111011011100", 208 => "00001001110101", 209 => "00010111110001", 
    210 => "10011101110101", 211 => "10111001011111", 212 => "10110111110001", 
    213 => "10100011001101", 214 => "11101001101010", 215 => "00110010000110", 
    216 => "00000100011010", 217 => "01000001111100", 218 => "00010011000101", 
    219 => "10101000101111", 220 => "01000000010100", 221 => "00001010011100", 
    222 => "00011110111111", 223 => "10100111010100", 224 => "00011001111111", 
    225 => "11001011111111", 226 => "10110111011110", 227 => "11000100010111", 
    228 => "10111000001101", 229 => "00100011100111", 230 => "11101111111100", 
    231 => "10011111011101", 232 => "00100110110111", 233 => "11000100000111", 
    234 => "11000111111000", 235 => "11111010101010", 236 => "11110001011011", 
    237 => "00001110001011", 238 => "11011101000111", 239 => "11010100001110", 
    240 => "10000100110100", 241 => "11010101111101", 242 => "11011100100101", 
    243 => "10101010110010", 244 => "00011011000101", 245 => "10110010100100", 
    246 => "01110000011110", 247 => "11001000111000", 248 => "00110010100111", 
    249 => "11100111010010", 250 => "00100111110001", 251 => "00101010100110", 
    252 => "00101111010011", 253 => "10111111001111", 254 => "00110111010110", 
    255 => "01001001110001", 256 => "00001100000110", 257 => "01011011011001", 
    258 => "00110100000111", 259 => "11110010110101", 260 => "01100110011110", 
    261 => "11110010100000", 262 => "11010010111011", 263 => "00010100100100", 
    264 => "10100001010100", 265 => "11000100000011", 266 => "00110100011001", 
    267 => "00110101101000", 268 => "10111010010111", 269 => "11010100000001", 
    270 => "00011000110010", 271 => "00011000100110", 272 => "10101011100110", 
    273 => "10100001001111", 274 => "00000000100110", 275 => "00111011010110", 
    276 => "11000001011100", 277 => "11100010000001", 278 => "01100101010011", 
    279 => "10100110010010", 280 => "11111100111110", 281 => "11011101001111", 
    282 => "00011010011111", 283 => "11111010100110", 284 => "10111000000110", 
    285 => "00010111110010", 286 => "01010101111000", 287 => "01000001000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_31 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_31 is
    component infer_layer_6_weights_V_31_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_31_rom_U :  component infer_layer_6_weights_V_31_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



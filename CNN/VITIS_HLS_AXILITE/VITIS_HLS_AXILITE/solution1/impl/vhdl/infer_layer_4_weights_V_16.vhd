-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_16_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000111100111110", 1 => "000111010100110", 2 => "111010110011001", 
    3 => "001110000000000", 4 => "110110001001111", 5 => "110110010010001", 
    6 => "000010100001101", 7 => "000111000111111", 8 => "001101001010110", 
    9 => "001000010110110", 10 => "000000100101110", 11 => "111110010011101", 
    12 => "000011011011000", 13 => "111110001010110", 14 => "000000001001000", 
    15 => "111100011101101", 16 => "001100100011100", 17 => "111010000000111", 
    18 => "101111001101101", 19 => "111001110011010", 20 => "001011000100100", 
    21 => "110110101001000", 22 => "000000001001010", 23 => "110100001100000", 
    24 => "111100010100110", 25 => "111010100011011", 26 => "000101101010011", 
    27 => "110110011011011", 28 => "110010110010110", 29 => "110101110100000", 
    30 => "111001001110100", 31 => "111100011001101", 32 => "111011101101100", 
    33 => "111001001111001", 34 => "001010101100000", 35 => "001100101111110", 
    36 => "110111101111100", 37 => "110100000001110", 38 => "001011111011110", 
    39 => "111000000110100", 40 => "000111000110110", 41 => "001011101001000", 
    42 => "110110011111110", 43 => "000110010100001", 44 => "110111110011000", 
    45 => "111000101110110", 46 => "110101001010100", 47 => "000001001011010", 
    48 => "111101000011110", 49 => "000000001101111", 50 => "101111110001100", 
    51 => "000111010100101", 52 => "001110001010101", 53 => "110110111000011", 
    54 => "111100000010100", 55 => "000110101001100", 56 => "000100110100001", 
    57 => "000010010010111", 58 => "000110110010101", 59 => "111010011100000", 
    60 => "110111111010110", 61 => "001011001100000", 62 => "111011010101011", 
    63 => "111011000100101", 64 => "000011000011011", 65 => "000010000101111", 
    66 => "000110101110100", 67 => "001010000000000", 68 => "000011001110111", 
    69 => "111011010100001", 70 => "111011101011101", 71 => "000100111000001", 
    72 => "111000001110110", 73 => "110110001011011", 74 => "000110001001010", 
    75 => "001000011000011", 76 => "001100001010001", 77 => "111111100111110", 
    78 => "000011011111010", 79 => "000010110011011", 80 => "001011100101011", 
    81 => "110111011011100", 82 => "010101011100100", 83 => "111100001001110", 
    84 => "000101010010100", 85 => "000011101101111", 86 => "000000111010100", 
    87 => "111101100001010", 88 => "111001010111111", 89 => "111100001000000", 
    90 => "110100000000001", 91 => "000100000110010", 92 => "110011000011000", 
    93 => "001001010001101", 94 => "101111101010111", 95 => "001001010010011", 
    96 => "110000110110001", 97 => "001000001010000", 98 => "111000001000011", 
    99 => "001101110000000", 100 => "111100101111110", 101 => "001001010100110", 
    102 => "000000101110100", 103 => "001010100111011", 104 => "000111001010100", 
    105 => "110111100011111", 106 => "000001001001000", 107 => "110101000100000", 
    108 => "000111010101000", 109 => "001110011010111", 110 => "000010001000110", 
    111 => "000100011100011", 112 => "000110000000101", 113 => "001101110000111", 
    114 => "111001101011101", 115 => "111111011001000", 116 => "111011010100100", 
    117 => "111000100111101", 118 => "000010101110101", 119 => "110011101000011", 
    120 => "110101010000011", 121 => "000111111101000", 122 => "111001010101101", 
    123 => "001000001100101", 124 => "101110000011101", 125 => "111111110110111", 
    126 => "110011001001111", 127 => "111011011001011", 128 => "001101001101011", 
    129 => "000111010100101", 130 => "111111111111010", 131 => "001001010111010", 
    132 => "000101101111011", 133 => "000001100011010", 134 => "111010000011000", 
    135 => "000100000100110", 136 => "110110010110010", 137 => "110111011000100", 
    138 => "000000000101101", 139 => "111101101001110", 140 => "000001001011010", 
    141 => "111010100000100", 142 => "111110110111000", 143 => "000111011110101", 
    144 => "111000101011011", 145 => "111011000001100", 146 => "001000101011111", 
    147 => "010001001110110", 148 => "001000001001011", 149 => "001101000011011", 
    150 => "111100101000110", 151 => "111111001000100", 152 => "000101000101011", 
    153 => "110101000001111", 154 => "110110010001111", 155 => "000010100010011", 
    156 => "111001101011011", 157 => "110101010011010", 158 => "001000011000011", 
    159 => "001000110110101", 160 => "111001101011010", 161 => "111101010110111", 
    162 => "110110010111001", 163 => "111110000110101", 164 => "001011001101111", 
    165 => "110011111011101", 166 => "000101010101001", 167 => "110101001001010", 
    168 => "000100110111001", 169 => "001011110001010", 170 => "000110011000011", 
    171 => "001001001011011", 172 => "110111001011111", 173 => "000111110010110", 
    174 => "001000010001111", 175 => "111111001101011", 176 => "111101110111000", 
    177 => "001101011010111", 178 => "011100011101100", 179 => "001000010010011", 
    180 => "001101001000011", 181 => "110101001001011", 182 => "110011100110101", 
    183 => "111101000100011", 184 => "001010110111111", 185 => "111110110010110", 
    186 => "110101101111011", 187 => "000111101011001", 188 => "000011100010000", 
    189 => "110110110110011", 190 => "101011100011101", 191 => "001001101100111", 
    192 => "111011111110100", 193 => "110111100110110", 194 => "110011001010010", 
    195 => "001111000010001", 196 => "001001011100101", 197 => "001000011110000", 
    198 => "001010010000000", 199 => "001001000101101", 200 => "001101010110110", 
    201 => "000110010100011", 202 => "000100011111110", 203 => "110110001000101", 
    204 => "110100000101101", 205 => "001001111011101", 206 => "111111001001010", 
    207 => "000111100100100", 208 => "111100111111101", 209 => "000101101101010", 
    210 => "110010011010000", 211 => "110001011011101", 212 => "001101000100110", 
    213 => "001111101101000", 214 => "000011110111001", 215 => "000101000110001", 
    216 => "001011010111011", 217 => "001100001011001", 218 => "000000010111000", 
    219 => "001010101101101", 220 => "100100100000100", 221 => "001000001001101", 
    222 => "111101010011010", 223 => "000011000111110", 224 => "101100110000001", 
    225 => "111100010101000", 226 => "000100110011111", 227 => "000011100110011", 
    228 => "110010101010000", 229 => "001000101001110", 230 => "001001110100010", 
    231 => "000110110101100", 232 => "111011010100110", 233 => "000001000110101", 
    234 => "110110101000000", 235 => "000111100100110", 236 => "111001000111011", 
    237 => "110100110110000", 238 => "000110011000011", 239 => "000001000000010", 
    240 => "111110000001010", 241 => "111110001100110", 242 => "011110001101110", 
    243 => "010111000011001", 244 => "000010100011110", 245 => "111100101001011", 
    246 => "000100110001011", 247 => "000001110010101", 248 => "111111011001000", 
    249 => "110110100011010", 250 => "000010010111111", 251 => "000110010100101", 
    252 => "110001100000111", 253 => "001001000100000", 254 => "101011101010000", 
    255 => "111101011001101", 256 => "000111110111110", 257 => "000110110011000", 
    258 => "000111000110010", 259 => "000100110101001", 260 => "110010110000001", 
    261 => "111111101111001", 262 => "000010001010100", 263 => "001011101001101", 
    264 => "001011011001001", 265 => "110110111110001", 266 => "110101010010111", 
    267 => "000010101001000", 268 => "000001111110101", 269 => "000101000100111", 
    270 => "001011001100001", 271 => "110011001001110", 272 => "111010101110011", 
    273 => "000011010001001", 274 => "011001011111011", 275 => "010010001111001", 
    276 => "000000110111101", 277 => "111001101010000", 278 => "000111011011001", 
    279 => "000000010100011", 280 => "000011111010010", 281 => "101100110001101", 
    282 => "001010010110110", 283 => "111010100001001", 284 => "110011100101111", 
    285 => "000111011010000", 286 => "101101010011110", 287 => "111111000000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_16 is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_16 is
    component infer_layer_4_weights_V_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_16_rom_U :  component infer_layer_4_weights_V_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



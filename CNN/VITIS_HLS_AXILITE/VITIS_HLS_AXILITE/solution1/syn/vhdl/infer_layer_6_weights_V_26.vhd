-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_26_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10011001111001", 1 => "10100000110000", 2 => "00100011110100", 
    3 => "00101100001010", 4 => "10111011110001", 5 => "00111111100001", 
    6 => "00001101110110", 7 => "00001000010101", 8 => "01000011000011", 
    9 => "11010110111011", 10 => "10110101110110", 11 => "00101000011101", 
    12 => "10101110010101", 13 => "00100001011001", 14 => "11010100101100", 
    15 => "01010011000000", 16 => "11001111000100", 17 => "00101110010111", 
    18 => "11111010010100", 19 => "00101011011101", 20 => "00100101000111", 
    21 => "11011010101111", 22 => "10111000010110", 23 => "11100001001000", 
    24 => "11001111000011", 25 => "00110010100100", 26 => "11000010101001", 
    27 => "00011011001101", 28 => "00010110101100", 29 => "00010100111000", 
    30 => "11100110111101", 31 => "11011010111011", 32 => "01000010001000", 
    33 => "11000111101011", 34 => "00011001010011", 35 => "00010100010000", 
    36 => "00010000110010", 37 => "10101101000101", 38 => "10100011000101", 
    39 => "00000010011101", 40 => "01001000001010", 41 => "11101101110001", 
    42 => "00010100011101", 43 => "11111111000000", 44 => "10110000000001", 
    45 => "10111011111001", 46 => "01010100110010", 47 => "00100100101000", 
    48 => "11101101000111", 49 => "11111110001111", 50 => "00110111101100", 
    51 => "00111110000001", 52 => "11110000110000", 53 => "01011010000000", 
    54 => "01001001111111", 55 => "11001010011100", 56 => "11111000011111", 
    57 => "01010011011001", 58 => "00101111001100", 59 => "10101001000100", 
    60 => "11100101111101", 61 => "01000100110011", 62 => "00010010101010", 
    63 => "11001110100000", 64 => "11101110110001", 65 => "11001110011001", 
    66 => "01010110001001", 67 => "00110100001011", 68 => "11100010110110", 
    69 => "00111000011111", 70 => "00111010010100", 71 => "10011100000100", 
    72 => "11100101101100", 73 => "11110001110011", 74 => "01011010010001", 
    75 => "11001100010011", 76 => "10100101101011", 77 => "10110010011011", 
    78 => "01000110100000", 79 => "11101011011111", 80 => "00001100001000", 
    81 => "00100101111011", 82 => "00001111101101", 83 => "10110101001010", 
    84 => "11110101111001", 85 => "10110011010011", 86 => "10110110110100", 
    87 => "00110000001101", 88 => "10101101100011", 89 => "00011111110000", 
    90 => "10110101111000", 91 => "10110110001001", 92 => "10011111000011", 
    93 => "10110111000001", 94 => "10110101100000", 95 => "00010000110011", 
    96 => "10111010000101", 97 => "00100001001100", 98 => "11011011001100", 
    99 => "10100011111101", 100 => "00110111111100", 101 => "00010011100111", 
    102 => "10111000111111", 103 => "00101100111000", 104 => "00000001001010", 
    105 => "01001010110001", 106 => "01001100001010", 107 => "01001001011110", 
    108 => "10011001101101", 109 => "00010000110100", 110 => "11110110001110", 
    111 => "00100110111000", 112 => "01001000110010", 113 => "11001011111011", 
    114 => "11011001010111", 115 => "11010010000001", 116 => "00001010011010", 
    117 => "00110000101010", 118 => "11111111110001", 119 => "01000100010011", 
    120 => "00011011010111", 121 => "00111101110111", 122 => "00100111000100", 
    123 => "10110100111010", 124 => "11000000000001", 125 => "11011010101001", 
    126 => "00000111110010", 127 => "00111110000010", 128 => "00100000001111", 
    129 => "11000101011011", 130 => "01000111000001", 131 => "00101010000101", 
    132 => "00100001011001", 133 => "00111001000011", 134 => "10100100001001", 
    135 => "11101010101011", 136 => "11001000010111", 137 => "01000110011000", 
    138 => "10110110000111", 139 => "10111001101101", 140 => "11101010100100", 
    141 => "11110011010111", 142 => "11001100001101", 143 => "01011100110001", 
    144 => "11110100110000", 145 => "01011010111011", 146 => "00010000000010", 
    147 => "00101101100100", 148 => "00011111111111", 149 => "10011111010000", 
    150 => "11010100111111", 151 => "00110010100001", 152 => "01011100110011", 
    153 => "10111101000110", 154 => "00001010011001", 155 => "00001000101110", 
    156 => "00110101111110", 157 => "11101101100010", 158 => "10111101111001", 
    159 => "01001000011111", 160 => "10101101110101", 161 => "10110010001010", 
    162 => "11011011101000", 163 => "00011110010000", 164 => "00101101011011", 
    165 => "01011011010110", 166 => "10100001001101", 167 => "11011110000100", 
    168 => "10011111011111", 169 => "10101110000001", 170 => "11101010100110", 
    171 => "10100010011000", 172 => "11110011100000", 173 => "10101010001000", 
    174 => "11010010011100", 175 => "11010100001001", 176 => "11100101011010", 
    177 => "01001011011001", 178 => "00001010011000", 179 => "10111100111001", 
    180 => "00001010010010", 181 => "10101101001110", 182 => "11101000011110", 
    183 => "00000011111110", 184 => "11001111110101", 185 => "10111111010110", 
    186 => "10011110110011", 187 => "11001101000000", 188 => "10111111010010", 
    189 => "00001000100100", 190 => "00110100101100", 191 => "11000110000111", 
    192 => "10111100010100", 193 => "00100111110100", 194 => "10110101110010", 
    195 => "00010011101000", 196 => "01010011011100", 197 => "11011001011001", 
    198 => "00101001011000", 199 => "10110101111100", 200 => "10111110101001", 
    201 => "00010001101010", 202 => "00011000100011", 203 => "00111001011001", 
    204 => "00011000100111", 205 => "00011001010010", 206 => "10101010111000", 
    207 => "11000000101010", 208 => "11100010010011", 209 => "00001010100010", 
    210 => "10110101000001", 211 => "11010001101010", 212 => "10101001111001", 
    213 => "00111100010001", 214 => "10100001111111", 215 => "10100001001000", 
    216 => "11011011011110", 217 => "00111101011111", 218 => "01001100100010", 
    219 => "11100000011001", 220 => "00100000000110", 221 => "00011000101110", 
    222 => "11111001111111", 223 => "00000000100001", 224 => "11010111000100", 
    225 => "10110111101010", 226 => "00110101100111", 227 => "00101010001001", 
    228 => "00010011001100", 229 => "10110100110010", 230 => "11011101101001", 
    231 => "11110100110000", 232 => "11100101001011", 233 => "11000101001011", 
    234 => "00010010010001", 235 => "01011100011100", 236 => "00110010111111", 
    237 => "11110010011111", 238 => "11101101100111", 239 => "01000011101011", 
    240 => "11101010100011", 241 => "01001100110001", 242 => "10110101101100", 
    243 => "10111100001001", 244 => "00110001111011", 245 => "11101100101110", 
    246 => "11101100110010", 247 => "00001111101111", 248 => "11100001010111", 
    249 => "00100111111010", 250 => "00101011101111", 251 => "10011001111010", 
    252 => "01001011000110", 253 => "00100111011101", 254 => "10100101010000", 
    255 => "01011000101101", 256 => "00000110100110", 257 => "11011011101100", 
    258 => "10111111001111", 259 => "00100010101101", 260 => "00110111111100", 
    261 => "11010111101100", 262 => "11011011001000", 263 => "01000001100011", 
    264 => "00000001101010", 265 => "11101011011001", 266 => "11111111101000", 
    267 => "00110010011100", 268 => "10110100010101", 269 => "11111011010001", 
    270 => "10110100110010", 271 => "10011010110011", 272 => "11101100110001", 
    273 => "10011001101010", 274 => "10100011111110", 275 => "00011101111000", 
    276 => "01000101001001", 277 => "10101000011111", 278 => "00011100111011", 
    279 => "00111101001110", 280 => "10110111100110", 281 => "01011110100100", 
    282 => "10111110001001", 283 => "11011110001111", 284 => "11001110001000", 
    285 => "11100000010001", 286 => "01000000101010", 287 => "00110110001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_26 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_26 is
    component infer_layer_6_weights_V_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_26_rom_U :  component infer_layer_6_weights_V_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



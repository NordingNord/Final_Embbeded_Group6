-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_5_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_5_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11001101101000", 1 => "10011010001010", 2 => "10010111000100", 
    3 => "10100101010011", 4 => "11101100101010", 5 => "01010110011010", 
    6 => "00101010011001", 7 => "00011111100100", 8 => "00111010111110", 
    9 => "01010110100000", 10 => "11110001110111", 11 => "01100010101001", 
    12 => "10110100001010", 13 => "01001110011111", 14 => "00011001010010", 
    15 => "01001100010001", 16 => "00001010000110", 17 => "01001000011001", 
    18 => "00101110101010", 19 => "00010110011110", 20 => "10110111000101", 
    21 => "11001101101000", 22 => "11010101100001", 23 => "00110111000001", 
    24 => "10010000010010", 25 => "01011001110101", 26 => "00000110010000", 
    27 => "10111010011010", 28 => "11101010110111", 29 => "11010001101011", 
    30 => "10100101110110", 31 => "10111011001111", 32 => "00111101001110", 
    33 => "00000101101101", 34 => "00100100000011", 35 => "10111000010000", 
    36 => "11011110010110", 37 => "00000110010010", 38 => "11111110101100", 
    39 => "11101000010010", 40 => "11010010010100", 41 => "00001100000000", 
    42 => "00111110011101", 43 => "11101110110101", 44 => "11001010000101", 
    45 => "11010001000101", 46 => "10111011000100", 47 => "10101101001001", 
    48 => "10010010100000", 49 => "10011001111000", 50 => "00000111010000", 
    51 => "01100010101000", 52 => "11011111001100", 53 => "01100010101010", 
    54 => "01001100000011", 55 => "11100011110110", 56 => "01000010010100", 
    57 => "11010010111000", 58 => "01010000001001", 59 => "11011101001001", 
    60 => "00001100101010", 61 => "00101110011010", 62 => "01000111101001", 
    63 => "01001110111001", 64 => "10100101100111", 65 => "10100111110110", 
    66 => "10111010011110", 67 => "00011110111100", 68 => "01001000110110", 
    69 => "00110000011110", 70 => "01011001111001", 71 => "10011001110011", 
    72 => "01010000010010", 73 => "01011110010111", 74 => "00010100000110", 
    75 => "01101000010010", 76 => "00000001000101", 77 => "10010100101100", 
    78 => "10100100001101", 79 => "01011010011010", 80 => "11111100001110", 
    81 => "10011100110011", 82 => "00011101001001", 83 => "11110001001100", 
    84 => "00110110001011", 85 => "00011100000010", 86 => "10111010000110", 
    87 => "11001110000001", 88 => "00011000100100", 89 => "00111101000011", 
    90 => "00110110110010", 91 => "00000010000110", 92 => "00101011100011", 
    93 => "10011111000011", 94 => "00100000010010", 95 => "01011110100010", 
    96 => "11100111111101", 97 => "01011110000010", 98 => "10100111011100", 
    99 => "00110101010110", 100 => "10101011010010", 101 => "00100101100010", 
    102 => "00100010111010", 103 => "11000011011100", 104 => "00011011010100", 
    105 => "00100000010011", 106 => "11100011001110", 107 => "01000011111110", 
    108 => "11010101111010", 109 => "00011001001101", 110 => "10111011111000", 
    111 => "00101001100001", 112 => "11010010010111", 113 => "01010011010000", 
    114 => "00011101010001", 115 => "00100111011111", 116 => "11111000011101", 
    117 => "01001110001010", 118 => "11100101100001", 119 => "01011010100010", 
    120 => "11010110100000", 121 => "11110101011110", 122 => "10110101110100", 
    123 => "01001101110011", 124 => "00100010100001", 125 => "10011010001000", 
    126 => "01100011100101", 127 => "01011101011011", 128 => "10010101101100", 
    129 => "11001110000110", 130 => "00010001001000", 131 => "01010001011100", 
    132 => "01010110110100", 133 => "11011100001100", 134 => "11110000000000", 
    135 => "11000100111010", 136 => "10101110000001", 137 => "00010000111011", 
    138 => "00110010101000", 139 => "01000110001100", 140 => "11001001100111", 
    141 => "10111111101001", 142 => "11011111101100", 143 => "00110010001100", 
    144 => "11100000010110", 145 => "11010011010010", 146 => "10100110010100", 
    147 => "11100010000111", 148 => "01011010100010", 149 => "00011010111110", 
    150 => "00011101011010", 151 => "10100011110011", 152 => "00000110110110", 
    153 => "00111010000000", 154 => "11000111100111", 155 => "11111111001111", 
    156 => "10101011000000", 157 => "00011001010110", 158 => "11010000100001", 
    159 => "00001011100101", 160 => "11001011000011", 161 => "11111111101011", 
    162 => "01010111011011", 163 => "01010001111000", 164 => "00111000001011", 
    165 => "00100111010001", 166 => "11101000111101", 167 => "00010011001000", 
    168 => "01001011111100", 169 => "00010110100000", 170 => "00100100001101", 
    171 => "11011101010101", 172 => "01001110001100", 173 => "00001001010101", 
    174 => "10110001000110", 175 => "10010001100001", 176 => "00100100101100", 
    177 => "11111001101110", 178 => "00111111110111", 179 => "01000000011100", 
    180 => "00101010000100", 181 => "00100000001111", 182 => "00010111000100", 
    183 => "00010011000001", 184 => "10011001010100", 185 => "11011100010010", 
    186 => "11010011111100", 187 => "10111001001101", 188 => "00011101010101", 
    189 => "11000000101011", 190 => "11010111000001", 191 => "00100101010011", 
    192 => "11110100010011", 193 => "00101001110110", 194 => "10101100000100", 
    195 => "10111100011010", 196 => "00001000011111", 197 => "10100001100111", 
    198 => "10010000010111", 199 => "11110101000110", 200 => "00100101110110", 
    201 => "11110001111100", 202 => "10111111010110", 203 => "00010010110001", 
    204 => "00011110010001", 205 => "11101000100000", 206 => "11000101001101", 
    207 => "01010110010000", 208 => "10110101111101", 209 => "10110001010101", 
    210 => "00001100011011", 211 => "11011011100101", 212 => "00100100010001", 
    213 => "10101101001100", 214 => "11000110101101", 215 => "01000000111111", 
    216 => "11000101100101", 217 => "00111110010011", 218 => "11101101010010", 
    219 => "01010000100101", 220 => "01011001101110", 221 => "00010101000100", 
    222 => "10111010001010", 223 => "01000110001111", 224 => "00000111000011", 
    225 => "00110001111000", 226 => "10111001000010", 227 => "01010000101000", 
    228 => "11101000000001", 229 => "10111111010001", 230 => "11000000011011", 
    231 => "00001000000011", 232 => "00111100100010", 233 => "11000111001001", 
    234 => "00011011011110", 235 => "00010000001001", 236 => "00011001101011", 
    237 => "00101110110001", 238 => "00011110110100", 239 => "11110001101010", 
    240 => "10110100000101", 241 => "11101100100000", 242 => "00000101011000", 
    243 => "00101110101011", 244 => "01000010101110", 245 => "01010000100011", 
    246 => "10111010001001", 247 => "00101010101011", 248 => "10100000110001", 
    249 => "00111000101110", 250 => "00100101010000", 251 => "10011111101101", 
    252 => "11101111010111", 253 => "10100101011011", 254 => "11111111110011", 
    255 => "00011100000111", 256 => "11111110000000", 257 => "11110001101010", 
    258 => "01001110101100", 259 => "00101110110111", 260 => "00111011110101", 
    261 => "11110010000000", 262 => "11110000101001", 263 => "00111100000110", 
    264 => "01010011000111", 265 => "00001001011000", 266 => "10011100110111", 
    267 => "11110111100010", 268 => "00010110110111", 269 => "10101101111000", 
    270 => "01000101000111", 271 => "11111110000111", 272 => "00010011010100", 
    273 => "01010000000100", 274 => "00110110011100", 275 => "11100100110111", 
    276 => "01011101010010", 277 => "10100111110001", 278 => "01010010000111", 
    279 => "00010100100101", 280 => "10111101011001", 281 => "00110001100010", 
    282 => "01010111011010", 283 => "10101010000001", 284 => "00011000010100", 
    285 => "00001111010011", 286 => "00011101111000", 287 => "01000100110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_5 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_5 is
    component infer_layer_6_weights_V_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_5_rom_U :  component infer_layer_6_weights_V_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



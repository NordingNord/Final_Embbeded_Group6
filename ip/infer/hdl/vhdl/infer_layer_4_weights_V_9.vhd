-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_9_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_9_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001011110000001", 1 => "1110100010100001", 2 => "0000111010111100", 
    3 => "1111011111110110", 4 => "1110111000111000", 5 => "1110100000010100", 
    6 => "0000011001110111", 7 => "1111110101000001", 8 => "1111011101000100", 
    9 => "1111000101011110", 10 => "0001010111011000", 11 => "1110100010110101", 
    12 => "0000101101101011", 13 => "1110110110010100", 14 => "0000110001101010", 
    15 => "1110100101100101", 16 => "1110111101011110", 17 => "1111000011110101", 
    18 => "1110111010011110", 19 => "0000011010110100", 20 => "0001011010001010", 
    21 => "1111000001001001", 22 => "0000011101111101", 23 => "0001100000000010", 
    24 => "1110011111110111", 25 => "1110101011000100", 26 => "0000101100101000", 
    27 => "1110101001111100", 28 => "0000001101001100", 29 => "0000100101110111", 
    30 => "1111110010000111", 31 => "0001000111100010", 32 => "1111011110011100", 
    33 => "0000111101000101", 34 => "0000010011100111", 35 => "1111111100111011", 
    36 => "1111001011011011", 37 => "1111000101100111", 38 => "0000110101000010", 
    39 => "1111110100111110", 40 => "0001001011111101", 41 => "0001010110000001", 
    42 => "0000101110100001", 43 => "1110100010101011", 44 => "1111101010011000", 
    45 => "1110011100000100", 46 => "0001100000000111", 47 => "1111111100010000", 
    48 => "0001010010000011", 49 => "1111111111001111", 50 => "0001001001001010", 
    51 => "1110101001010010", 52 => "0001010010111001", 53 => "1110101111000011", 
    54 => "1111101000000100", 55 => "0000110110010000", 56 => "0000011000111001", 
    57 => "1110110111111110", 58 => "0000101011100111", 59 => "0000110111001001", 
    60 => "0000000001100101", 61 => "1110110110011011", 62 => "0000101110000101", 
    63 => "1110100011000111", 64 => "0000101100011100", 65 => "1110100001100101", 
    66 => "1110100100111000", 67 => "1111011010000100", 68 => "0000010000111110", 
    69 => "0000011110101110", 70 => "1111101100001111", 71 => "1111000000100011", 
    72 => "1110110001101010", 73 => "0000110000000001", 74 => "1111010000010000", 
    75 => "0000110101011000", 76 => "1111101100001100", 77 => "0001000011000001", 
    78 => "1110100111101110", 79 => "1111010011001001", 80 => "0000010001011001", 
    81 => "1111010101110101", 82 => "1111111001110001", 83 => "1110011110100100", 
    84 => "1111100110010011", 85 => "0001100001111100", 86 => "1111101000111100", 
    87 => "1111000001100000", 88 => "0000100111100100", 89 => "0000001000101011", 
    90 => "1110011000001000", 91 => "0001001101101010", 92 => "0000111001000110", 
    93 => "0000000101001011", 94 => "0000111111101000", 95 => "1111110101001111", 
    96 => "0000010001011111", 97 => "1110011001101110", 98 => "0000011110001001", 
    99 => "1111001111101001", 100 => "0000101011001000", 101 => "1111010001101010", 
    102 => "0001010011111010", 103 => "0001010000101101", 104 => "1111100000111111", 
    105 => "0000110111000001", 106 => "1111001001110010", 107 => "1111110110000110", 
    108 => "0000111010110101", 109 => "0001010101100110", 110 => "1111000000100011", 
    111 => "0000011111010101", 112 => "1110110101110111", 113 => "0001010101011000", 
    114 => "0000111010001111", 115 => "0000100011101100", 116 => "1111010101100111", 
    117 => "0001011101111111", 118 => "1111111011001101", 119 => "0001010111010110", 
    120 => "1110100101001101", 121 => "1110101001111110", 122 => "1111010010011001", 
    123 => "0000111010010000", 124 => "0001011011011010", 125 => "0001000001010011", 
    126 => "0000100010000001", 127 => "0001011010000010", 128 => "0000001101000010", 
    129 => "1110110010110010", 130 => "0001010101001111", 131 => "1111110000100111", 
    132 => "0001001010110010", 133 => "0000011010100101", 134 => "0001001011111101", 
    135 => "1110101011101011", 136 => "1110110011010011", 137 => "1111110011000101", 
    138 => "0000101110001111", 139 => "1111000100000110", 140 => "1111011111110110", 
    141 => "0001001011011100", 142 => "0000100111010110", 143 => "0000101000101000", 
    144 => "0000011001001110", 145 => "1111111010110110", 146 => "1110101000110100", 
    147 => "0000000111111010", 148 => "1110111110111101", 149 => "0001000111001000", 
    150 => "1110101011110101", 151 => "1111100101000100", 152 => "1111001011101100", 
    153 => "1111111100011101", 154 => "1111101100010110", 155 => "1111011010100110", 
    156 => "1110101110101001", 157 => "1111100100110111", 158 => "1111101100110010", 
    159 => "1110010101011011", 160 => "1111001111101111", 161 => "1111110000011000", 
    162 => "1111000111110110", 163 => "0000001011100110", 164 => "1111110100001001", 
    165 => "0001010001111101", 166 => "1111110101011011", 167 => "1110011010001011", 
    168 => "0001001101100110", 169 => "1111001101111010", 170 => "1110101001011010", 
    171 => "0000101110101111", 172 => "1111010001100110", 173 => "0001011110100000", 
    174 => "1110111010000001", 175 => "1110110101000111", 176 => "0000000110101010", 
    177 => "1110111001011010", 178 => "1111101000010110", 179 => "0001001011101001", 
    180 => "1111011100000110", 181 => "1111001100001000", 182 => "0001011111101000", 
    183 => "0000111000101010", 184 => "0000011101001001", 185 => "1111100100100110", 
    186 => "0000110111001111", 187 => "0000100101111001", 188 => "0001001000010111", 
    189 => "0000101100010011", 190 => "1110011101101011", 191 => "1110011011001111", 
    192 => "0001001011010101", 193 => "0000101100100110", 194 => "0001001000100100", 
    195 => "0001001101000010", 196 => "0000011110010000", 197 => "1111010101101000", 
    198 => "0000100000111111", 199 => "0001011111111111", 200 => "0000101010001101", 
    201 => "1111001000010100", 202 => "0000001001110100", 203 => "0000111011011110", 
    204 => "0001001011101010", 205 => "0000111011101001", 206 => "1110100111001110", 
    207 => "1110110001000000", 208 => "1111011000100011", 209 => "1111000001010101", 
    210 => "1110011100001101", 211 => "0001011011101011", 212 => "0000001111000011", 
    213 => "0000001111010001", 214 => "0001100110001011", 215 => "1110011011010011", 
    216 => "1110110100101110", 217 => "0000011110101110", 218 => "1110100001011001", 
    219 => "1111001000011010", 220 => "0001000000001011", 221 => "0000110111111000", 
    222 => "1111001100000010", 223 => "1111110111010100", 224 => "1110101000101000", 
    225 => "1110110001101001", 226 => "1110100011000001", 227 => "1111100011110010", 
    228 => "1110110110001100", 229 => "1111000101011011", 230 => "1111101011100000", 
    231 => "1111011001100101", 232 => "1111100011110101", 233 => "1110011111111100", 
    234 => "1110111010001111", 235 => "0000101000000001", 236 => "0000001010100001", 
    237 => "1110110100010111", 238 => "1111100110000110", 239 => "0001001111110001", 
    240 => "0000100100111100", 241 => "0000101011101000", 242 => "1110010110100011", 
    243 => "1110110001010111", 244 => "1111011001001010", 245 => "1110011111110101", 
    246 => "0001001100001101", 247 => "0001100001000011", 248 => "0000000000110010", 
    249 => "0000000101001100", 250 => "1110111011110010", 251 => "0000010000000011", 
    252 => "1110011000100110", 253 => "0000010101000010", 254 => "1110110010100111", 
    255 => "0000010110001010", 256 => "1111110001111100", 257 => "0001010110000000", 
    258 => "1111001111001010", 259 => "1110100011101100", 260 => "1110100110010000", 
    261 => "1111101101101100", 262 => "1110100110110110", 263 => "1111101110010111", 
    264 => "0001001100001101", 265 => "1110011001010110", 266 => "1111010010111000", 
    267 => "0000110011101000", 268 => "1111100000111100", 269 => "1111101101100001", 
    270 => "0000111001110111", 271 => "0000110110000111", 272 => "0001011010100100", 
    273 => "0000011110101110", 274 => "0001001100101010", 275 => "0001000111010111", 
    276 => "0000000111000111", 277 => "0001011100101101", 278 => "1111101010000011", 
    279 => "1110011111011001", 280 => "1111100111111000", 281 => "1111110001100001", 
    282 => "1111100001111000", 283 => "0000101101011110", 284 => "0001001101101000", 
    285 => "1111110110101111", 286 => "0000000111001001", 287 => "0000001011110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_9 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_9 is
    component infer_layer_4_weights_V_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_9_rom_U :  component infer_layer_4_weights_V_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



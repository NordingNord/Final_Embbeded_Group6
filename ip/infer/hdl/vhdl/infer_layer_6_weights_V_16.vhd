-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_16_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "110110101101110", 1 => "111110101100011", 2 => "000101010010110", 
    3 => "111100000000011", 4 => "000100100111011", 5 => "001100110111101", 
    6 => "000001111001010", 7 => "111000000101111", 8 => "001001110010011", 
    9 => "001000101011110", 10 => "111001001010100", 11 => "110100011001010", 
    12 => "111000101000010", 13 => "000010111110001", 14 => "110100110001000", 
    15 => "110101001111010", 16 => "000011001010011", 17 => "111110101100111", 
    18 => "111110010110000", 19 => "111010101011001", 20 => "111011001101110", 
    21 => "001000111100100", 22 => "110111000110100", 23 => "111010011001011", 
    24 => "000110111101000", 25 => "110011011000111", 26 => "000010110011001", 
    27 => "111101010011011", 28 => "111110010011000", 29 => "111000011111001", 
    30 => "111010011100000", 31 => "111010101111000", 32 => "001011000001100", 
    33 => "111011100100100", 34 => "000111100011100", 35 => "000110111011010", 
    36 => "001001101011010", 37 => "110111110010110", 38 => "000110011011100", 
    39 => "110101011100111", 40 => "001010000101010", 41 => "001100000011001", 
    42 => "000100011101101", 43 => "111011101100110", 44 => "111001100101001", 
    45 => "110010011000110", 46 => "110011011000001", 47 => "110010010001001", 
    48 => "110010011011011", 49 => "000000011010000", 50 => "110110001000001", 
    51 => "111011011000101", 52 => "000001100111001", 53 => "110111011011011", 
    54 => "000111010001011", 55 => "001001010011111", 56 => "000010101110100", 
    57 => "000010110000101", 58 => "111100011010010", 59 => "111110011001111", 
    60 => "000010111100100", 61 => "110010111101100", 62 => "001000011101111", 
    63 => "111001101110111", 64 => "000100101110010", 65 => "111101001000010", 
    66 => "000001010100000", 67 => "110100000100100", 68 => "001001101111111", 
    69 => "001001001101101", 70 => "001010101000000", 71 => "111001010001101", 
    72 => "111100000110111", 73 => "001001001101010", 74 => "000111110000010", 
    75 => "111000110100101", 76 => "110011000111010", 77 => "000001001001100", 
    78 => "111101001000100", 79 => "000000111010101", 80 => "110010011011000", 
    81 => "001011011010100", 82 => "110100000101001", 83 => "001001111100011", 
    84 => "111001011100011", 85 => "111000101010000", 86 => "111011011101100", 
    87 => "111100000101101", 88 => "111110101111011", 89 => "111001101000010", 
    90 => "111100001001010", 91 => "000000001111000", 92 => "001011010010100", 
    93 => "000000100000011", 94 => "001011000000000", 95 => "111101110110010", 
    96 => "110101110000101", 97 => "111110011101010", 98 => "111111100000011", 
    99 => "111100010100001", 100 => "000101001100001", 101 => "000110111000010", 
    102 => "001000011111000", 103 => "001000111111010", 104 => "111001100101110", 
    105 => "110101011000001", 106 => "000000101011110", 107 => "001011100000110", 
    108 => "110111011000100", 109 => "110001111101111", 110 => "110111011001000", 
    111 => "111110101011000", 112 => "000010100000101", 113 => "111000100000101", 
    114 => "111000001010010", 115 => "000000110010010", 116 => "110110111011000", 
    117 => "111001100111101", 118 => "111100001110000", 119 => "001001000011110", 
    120 => "111100011000000", 121 => "001011010001101", 122 => "001010000111001", 
    123 => "000011111110000", 124 => "110111111110100", 125 => "001000100011010", 
    126 => "000100101110001", 127 => "000111000010101", 128 => "000111100011001", 
    129 => "000000010010101", 130 => "000011000011001", 131 => "111101010010101", 
    132 => "001010001000100", 133 => "111001010100100", 134 => "111000101111100", 
    135 => "111101010100110", 136 => "111001111111111", 137 => "000001111010000", 
    138 => "111110101110100", 139 => "000000010011001", 140 => "000000100001101", 
    141 => "111011011111111", 142 => "110110111001011", 143 => "001011111000100", 
    144 => "110111000011101", 145 => "111010110010101", 146 => "000011111101111", 
    147 => "110011101101111", 148 => "001001000101100", 149 => "111100110010000", 
    150 => "111011110011011", 151 => "001010011001101", 152 => "000110110011110", 
    153 => "111100110011011", 154 => "001000001110010", 155 => "001011010011110", 
    156 => "000101001110101", 157 => "110110110010111", 158 => "001011100000101", 
    159 => "111011100110000", 160 => "000011010111000", 161 => "111110000011010", 
    162 => "111011001100110", 163 => "111110000110101", 164 => "001001111110100", 
    165 => "000010101011001", 166 => "111000101111001", 167 => "001001101101000", 
    168 => "000100100001110", 169 => "001010001000110", 170 => "000101100111000", 
    171 => "001100001010111", 172 => "110010001011000", 173 => "110100111011000", 
    174 => "000100001101000", 175 => "000011001100101", 176 => "111100001010000", 
    177 => "111110011011011", 178 => "111101010010111", 179 => "001100000100011", 
    180 => "110111011000100", 181 => "001001011000100", 182 => "110110000000010", 
    183 => "110011111000000", 184 => "110011000111011", 185 => "000100011011111", 
    186 => "110011100110000", 187 => "001011010001000", 188 => "000010001110000", 
    189 => "000010100100110", 190 => "111011101011000", 191 => "000001011000110", 
    192 => "000110001101010", 193 => "000101010011001", 194 => "000111101110110", 
    195 => "110111001111111", 196 => "111100011000011", 197 => "000110011111101", 
    198 => "110100110100001", 199 => "001001011011010", 200 => "111110010000101", 
    201 => "111011101111000", 202 => "110110100011001", 203 => "000010100001001", 
    204 => "001000001010100", 205 => "110101110110101", 206 => "000010110110010", 
    207 => "110111110110000", 208 => "110010011000100", 209 => "000001010011101", 
    210 => "111011011011001", 211 => "000110111010101", 212 => "000011011110111", 
    213 => "111110100001001", 214 => "110101011100100", 215 => "000011110101110", 
    216 => "001000101100011", 217 => "000110001110100", 218 => "110100110100111", 
    219 => "000001101111000", 220 => "111011100000101", 221 => "110101001001000", 
    222 => "000110100111110", 223 => "111110001101000", 224 => "111001100000110", 
    225 => "001001100101000", 226 => "110111001001111", 227 => "110101110010111", 
    228 => "001100000000001", 229 => "111011110100010", 230 => "001010010110100", 
    231 => "110110001010111", 232 => "000010011100000", 233 => "111111000110000", 
    234 => "111001101001010", 235 => "000011010000001", 236 => "111100111110100", 
    237 => "000110010111110", 238 => "110101100000110", 239 => "110110101011101", 
    240 => "000010011000111", 241 => "000111001001010", 242 => "000101101000010", 
    243 => "111011001000010", 244 => "000101100000111", 245 => "001011100001001", 
    246 => "110101111000101", 247 => "000011110111011", 248 => "110011100000101", 
    249 => "001100110110110", 250 => "111000101100011", 251 => "111110010100110", 
    252 => "001011001111101", 253 => "000010101100101", 254 => "000010101110010", 
    255 => "000101001011001", 256 => "000110001111100", 257 => "001100110111101", 
    258 => "111111110111111", 259 => "111010101010010", 260 => "111001110011101", 
    261 => "110101011010111", 262 => "111110110000011", 263 => "110111110110000", 
    264 => "000000001000110", 265 => "000000001010100", 266 => "111100100001101", 
    267 => "110100100111100", 268 => "000011110001110", 269 => "000001100001001", 
    270 => "111100111110011", 271 => "110110000010100", 272 => "000111010010001", 
    273 => "000100010010011", 274 => "001001000100111", 275 => "001000001001101", 
    276 => "000010010011100", 277 => "111011101110111", 278 => "000101100000111", 
    279 => "001001100100010", 280 => "000110110001001", 281 => "001001011111000", 
    282 => "110111101110110", 283 => "001100011110011", 284 => "000110101100111", 
    285 => "000000101100000", 286 => "000000001101000", 287 => "110100010000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_16 is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_16 is
    component infer_layer_6_weights_V_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_16_rom_U :  component infer_layer_6_weights_V_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



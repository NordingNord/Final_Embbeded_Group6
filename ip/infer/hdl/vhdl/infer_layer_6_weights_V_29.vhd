-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_29_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_29_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00101110000000", 1 => "00000000011011", 2 => "11101001100110", 
    3 => "11000110111000", 4 => "11111110011110", 5 => "01011001001011", 
    6 => "00010010001100", 7 => "10011110001010", 8 => "00000111100011", 
    9 => "10100101100000", 10 => "01010011001000", 11 => "01010111110011", 
    12 => "11000001110100", 13 => "01001010101010", 14 => "01001110110011", 
    15 => "00010001110011", 16 => "11011010110000", 17 => "01010001001011", 
    18 => "00000011010100", 19 => "00101111011011", 20 => "01110101111101", 
    21 => "11011110101001", 22 => "00100101101100", 23 => "10010000011101", 
    24 => "11101111111011", 25 => "10101000110101", 26 => "10111000101011", 
    27 => "01001101111001", 28 => "00000010111000", 29 => "11011110010001", 
    30 => "10011110100001", 31 => "01011101110010", 32 => "11111100101001", 
    33 => "10011100100110", 34 => "11101110110111", 35 => "11110111101100", 
    36 => "00101100001000", 37 => "01000010010011", 38 => "10110110000100", 
    39 => "01000010000010", 40 => "00001001000010", 41 => "11101001100101", 
    42 => "00110100000101", 43 => "10010111100111", 44 => "11110111100000", 
    45 => "11101101111111", 46 => "10110101000010", 47 => "11000010110110", 
    48 => "00110110010110", 49 => "10011010101101", 50 => "10011011010010", 
    51 => "00100101010000", 52 => "11111100010010", 53 => "00010011010100", 
    54 => "01001001011011", 55 => "10110000001101", 56 => "10001001111101", 
    57 => "11100101111110", 58 => "00001100100111", 59 => "00110110001101", 
    60 => "11101001110000", 61 => "10011000111000", 62 => "11111000101110", 
    63 => "01011000010011", 64 => "00110110001010", 65 => "10111110011111", 
    66 => "00000101000011", 67 => "00000111011110", 68 => "11010010000100", 
    69 => "11111011011100", 70 => "01011010100111", 71 => "00000100110011", 
    72 => "10101010101000", 73 => "10111100110001", 74 => "00001010110011", 
    75 => "01000100001001", 76 => "11100101001111", 77 => "10110010110011", 
    78 => "00101001101111", 79 => "11011010010001", 80 => "11010011010110", 
    81 => "00010000111111", 82 => "10101011111011", 83 => "10111001100011", 
    84 => "11101000010001", 85 => "01010011001111", 86 => "00000001001000", 
    87 => "11101111000000", 88 => "10011000001011", 89 => "11000110001111", 
    90 => "11101100101011", 91 => "10111000000010", 92 => "00000100010110", 
    93 => "11010000011101", 94 => "01011010110101", 95 => "01000101110000", 
    96 => "10100111011010", 97 => "11000010110111", 98 => "00010101100001", 
    99 => "00011100100000", 100 => "10111010101101", 101 => "00010000111101", 
    102 => "11111110100010", 103 => "11011000010001", 104 => "11111100101011", 
    105 => "00000100110110", 106 => "10111001010011", 107 => "01011010011111", 
    108 => "00110100101011", 109 => "11100110000001", 110 => "01011011110101", 
    111 => "10100011011101", 112 => "00000110110101", 113 => "00111001010100", 
    114 => "11101010000100", 115 => "11001111110111", 116 => "01100010100110", 
    117 => "11111000110100", 118 => "01001001101100", 119 => "11100101101101", 
    120 => "01000011010100", 121 => "00101100001001", 122 => "00000010101111", 
    123 => "00001110001100", 124 => "10101000111010", 125 => "11100110001011", 
    126 => "11001100011101", 127 => "10100000011100", 128 => "11110100011101", 
    129 => "10111001010100", 130 => "11011100101011", 131 => "10100010011111", 
    132 => "00010001001000", 133 => "11110110011101", 134 => "01010001011011", 
    135 => "11001111100100", 136 => "11100100110010", 137 => "01001000111101", 
    138 => "01000011111010", 139 => "01010010010010", 140 => "11011001101100", 
    141 => "00000111010011", 142 => "01011100101000", 143 => "00110100101000", 
    144 => "11110111010101", 145 => "00111001110100", 146 => "01011001001010", 
    147 => "11110101011000", 148 => "10111010111111", 149 => "00010010001011", 
    150 => "00110100000111", 151 => "10100111111100", 152 => "01001100010001", 
    153 => "01100110110100", 154 => "11100111001000", 155 => "10011001001110", 
    156 => "00101000001010", 157 => "00000001011100", 158 => "10100000100001", 
    159 => "11010111010101", 160 => "11101101100010", 161 => "01100101010110", 
    162 => "00101000111110", 163 => "10100101100001", 164 => "00010010011011", 
    165 => "11011010111000", 166 => "11010011010101", 167 => "11000010101100", 
    168 => "00010011110111", 169 => "01001110110000", 170 => "00110011011010", 
    171 => "11110001111110", 172 => "01010001110111", 173 => "10110101010011", 
    174 => "00110010110000", 175 => "10101001100001", 176 => "00001000101001", 
    177 => "11010100100111", 178 => "11011101011000", 179 => "00001111000110", 
    180 => "00011010001011", 181 => "11010011111100", 182 => "11111100010100", 
    183 => "00000011100100", 184 => "10110000001101", 185 => "10010101001010", 
    186 => "11011110000001", 187 => "11001100111100", 188 => "10101010000000", 
    189 => "10101010000111", 190 => "00000100101000", 191 => "00001110001001", 
    192 => "00100101001111", 193 => "11010001111000", 194 => "11101100010010", 
    195 => "00010100100001", 196 => "11010010111000", 197 => "11110010011100", 
    198 => "01000101101111", 199 => "10100011110010", 200 => "00001001110100", 
    201 => "10011000011110", 202 => "01000011000011", 203 => "01000111110000", 
    204 => "10011010111100", 205 => "10100100101100", 206 => "11010100000011", 
    207 => "11001000110110", 208 => "00100110100001", 209 => "01001010111111", 
    210 => "11101010001000", 211 => "11010000101011", 212 => "11011110101001", 
    213 => "10010111111000", 214 => "11110010011111", 215 => "01100110000111", 
    216 => "10110011001100", 217 => "11110011111011", 218 => "11010101101101", 
    219 => "00100101110110", 220 => "01100110101111", 221 => "11000101111100", 
    222 => "11011001101011", 223 => "00000100001111", 224 => "00001101011010", 
    225 => "10101001001011", 226 => "00000011110010", 227 => "11001001001010", 
    228 => "10110011010110", 229 => "10011101100100", 230 => "11001011011110", 
    231 => "00010000011100", 232 => "11100111011011", 233 => "11011100000001", 
    234 => "10111111000101", 235 => "10101000001010", 236 => "11001010110000", 
    237 => "10100010101001", 238 => "11000010010101", 239 => "11100001111000", 
    240 => "01001111000000", 241 => "00110011001111", 242 => "01001100001100", 
    243 => "01010111110111", 244 => "00110000010011", 245 => "11001010000100", 
    246 => "11011110010101", 247 => "11000001010001", 248 => "11110110100011", 
    249 => "11101010001100", 250 => "10111000110100", 251 => "11001001001001", 
    252 => "00111101110011", 253 => "01000111010101", 254 => "00000011001110", 
    255 => "11010011100110", 256 => "11101101010010", 257 => "01001001110110", 
    258 => "10010101011000", 259 => "11101000010101", 260 => "01100001000100", 
    261 => "11110100110111", 262 => "00011000110100", 263 => "01010100011011", 
    264 => "11111001110011", 265 => "01100010100011", 266 => "01001010000101", 
    267 => "01011001110001", 268 => "11000100101111", 269 => "00000110111001", 
    270 => "01001000010000", 271 => "11111000101001", 272 => "10111010011011", 
    273 => "11011010001010", 274 => "01001000001101", 275 => "01100000111101", 
    276 => "01101110010011", 277 => "00001001110101", 278 => "00000101111001", 
    279 => "01001000100001", 280 => "11001101111100", 281 => "01000011111100", 
    282 => "10100010000011", 283 => "11101100110011", 284 => "01000001000110", 
    285 => "11101001001110", 286 => "11001111011011", 287 => "11011000101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_29 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_29 is
    component infer_layer_6_weights_V_29_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_29_rom_U :  component infer_layer_6_weights_V_29_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



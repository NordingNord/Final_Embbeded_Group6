-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_10_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_10_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101010000001", 1 => "10010110010011", 2 => "00001100000110", 
    3 => "00100011010000", 4 => "01100010100000", 5 => "10101101101100", 
    6 => "00111000001100", 7 => "11100010001110", 8 => "00111000000101", 
    9 => "01001111000110", 10 => "00111011001110", 11 => "01000110101100", 
    12 => "00111111100110", 13 => "01001110000100", 14 => "00110111010101", 
    15 => "10111010100010", 16 => "10101000000010", 17 => "01011010001011", 
    18 => "10100010001010", 19 => "00001111101110", 20 => "11000110101011", 
    21 => "11110111001110", 22 => "10101011111010", 23 => "01011110010111", 
    24 => "11010110000000", 25 => "10100011011100", 26 => "00011001000100", 
    27 => "01100111110010", 28 => "10101011000011", 29 => "01001110010110", 
    30 => "11100000100100", 31 => "00000001111000", 32 => "00001000001010", 
    33 => "10111010100000", 34 => "11000010011000", 35 => "01001101101000", 
    36 => "01000001100010", 37 => "01100001000101", 38 => "00111100110001", 
    39 => "10111110110100", 40 => "01010101001010", 41 => "01010101011101", 
    42 => "10111010111101", 43 => "01010111101001", 44 => "00100000110110", 
    45 => "01100000100110", 46 => "11110101000110", 47 => "10011101011011", 
    48 => "00101001010010", 49 => "11100110011010", 50 => "11001111010001", 
    51 => "10111001101011", 52 => "10100000111001", 53 => "00011000001101", 
    54 => "11000000101001", 55 => "00100001100000", 56 => "00011100011000", 
    57 => "10010010111111", 58 => "01100000000001", 59 => "00000011111001", 
    60 => "11100001011111", 61 => "00101110110111", 62 => "00100011010000", 
    63 => "00111000111001", 64 => "00000100010000", 65 => "11111001100100", 
    66 => "01000001001001", 67 => "11001111000001", 68 => "11001000011001", 
    69 => "00010100010000", 70 => "01100000000111", 71 => "11001001100101", 
    72 => "10111111010110", 73 => "11110111010110", 74 => "11011000111100", 
    75 => "10011001100011", 76 => "10100110100011", 77 => "10111100001011", 
    78 => "10011011101101", 79 => "00001010111110", 80 => "00101111001001", 
    81 => "00011101001111", 82 => "00010101010001", 83 => "00000000010011", 
    84 => "10011011110001", 85 => "00001100000110", 86 => "10011010011011", 
    87 => "00000011010101", 88 => "01000100010100", 89 => "10110100100101", 
    90 => "11010100011100", 91 => "11000000101000", 92 => "10011001010010", 
    93 => "01001111111110", 94 => "11111101000000", 95 => "00000110011011", 
    96 => "10010111010011", 97 => "11100011001010", 98 => "10101000111001", 
    99 => "11111111010011", 100 => "11000001011100", 101 => "11101011001110", 
    102 => "11000001101111", 103 => "00010011111100", 104 => "10100101001100", 
    105 => "00100011011111", 106 => "00000000101110", 107 => "11101111010100", 
    108 => "11001111111101", 109 => "00101011101001", 110 => "11101011110001", 
    111 => "01000001111100", 112 => "11001010100010", 113 => "01011000010100", 
    114 => "10011000100100", 115 => "11000001001010", 116 => "10011101100011", 
    117 => "00110001100110", 118 => "00011010110111", 119 => "10111100111110", 
    120 => "11110011011000", 121 => "11110010000110", 122 => "00101000001101", 
    123 => "10111110001101", 124 => "11010010100111", 125 => "01010000111001", 
    126 => "00100101101000", 127 => "11110000101001", 128 => "00110110010000", 
    129 => "11110011100110", 130 => "10110111110000", 131 => "00111100101101", 
    132 => "11011000001011", 133 => "00010000101010", 134 => "01000101010110", 
    135 => "11001001010101", 136 => "00101100000101", 137 => "00110000001110", 
    138 => "00010000100010", 139 => "01100101101110", 140 => "10101101101110", 
    141 => "00100110111111", 142 => "11100101101100", 143 => "00110001001000", 
    144 => "11110101111111", 145 => "11011000001010", 146 => "01011110011010", 
    147 => "00110101001001", 148 => "00100010110100", 149 => "11001010110000", 
    150 => "01010000000100", 151 => "10111010100011", 152 => "01010100110110", 
    153 => "00001011001000", 154 => "10100111100000", 155 => "00010010000101", 
    156 => "10110110001001", 157 => "10101011100010", 158 => "00110001001101", 
    159 => "00110110101101", 160 => "11100101100111", 161 => "00101100111001", 
    162 => "10111111010000", 163 => "00111001110100", 164 => "10011010011101", 
    165 => "01010000111100", 166 => "11111001111010", 167 => "10011001100111", 
    168 => "11011111001001", 169 => "00011011001000", 170 => "11101110101110", 
    171 => "11111110101011", 172 => "11110001101101", 173 => "10111011000110", 
    174 => "11001011111001", 175 => "00100101000000", 176 => "00011111110011", 
    177 => "10110010101011", 178 => "01011011001111", 179 => "01000001000111", 
    180 => "10101111100111", 181 => "11000110110100", 182 => "11001110110101", 
    183 => "00101001000111", 184 => "00100101111001", 185 => "11111100100101", 
    186 => "01000000010011", 187 => "00111111100000", 188 => "00010110000110", 
    189 => "00010010001110", 190 => "11001110110011", 191 => "10111010011110", 
    192 => "11011111110111", 193 => "11010111001101", 194 => "10101001011101", 
    195 => "00010010011100", 196 => "01011111001110", 197 => "11010101000101", 
    198 => "11101010111101", 199 => "10100111001001", 200 => "11001000000110", 
    201 => "11111110110001", 202 => "00111011000010", 203 => "10101100011001", 
    204 => "11001100010011", 205 => "01100000011001", 206 => "01001011111011", 
    207 => "11011001111101", 208 => "11100111110011", 209 => "10110001111100", 
    210 => "01100111100000", 211 => "10101101101010", 212 => "11001011111001", 
    213 => "01001111110001", 214 => "10100001000010", 215 => "01100010010010", 
    216 => "00001000111000", 217 => "10010101100111", 218 => "00000101001101", 
    219 => "00111011011001", 220 => "11111100100001", 221 => "10010111010000", 
    222 => "00000110000010", 223 => "10010101100000", 224 => "11100110111111", 
    225 => "10101100101001", 226 => "01000110111011", 227 => "01011100101100", 
    228 => "11110000001010", 229 => "00100100010110", 230 => "00010011011111", 
    231 => "00001001101101", 232 => "11110110011011", 233 => "01000011110001", 
    234 => "00111001011010", 235 => "11010000011011", 236 => "00010001011000", 
    237 => "11100000110101", 238 => "01010101111100", 239 => "00100110101000", 
    240 => "11100100111101", 241 => "10101000111110", 242 => "10010111100100", 
    243 => "00101000100000", 244 => "01011101001010", 245 => "00111011011100", 
    246 => "01000010110100", 247 => "01011010010000", 248 => "10101100110010", 
    249 => "01001110001110", 250 => "01001111000110", 251 => "11011011111011", 
    252 => "01011110000010", 253 => "10110010011100", 254 => "10101011100011", 
    255 => "01000010001010", 256 => "11110100101101", 257 => "10100001111100", 
    258 => "01000010001000", 259 => "00000011100011", 260 => "10101011111100", 
    261 => "11011001100000", 262 => "10100110000000", 263 => "00110100001101", 
    264 => "00110011110101", 265 => "00101111001111", 266 => "01011100100110", 
    267 => "10100011111111", 268 => "00100011110111", 269 => "00100111101101", 
    270 => "00101011101101", 271 => "10101101100000", 272 => "00000011001011", 
    273 => "10110110101101", 274 => "00111000001001", 275 => "01011101110110", 
    276 => "11000010100111", 277 => "01010010101111", 278 => "00101101010101", 
    279 => "11010101110110", 280 => "01010000100010", 281 => "10010111110100", 
    282 => "01010000001010", 283 => "10011111101110", 284 => "11000010000011", 
    285 => "11000111110010", 286 => "11100110111000", 287 => "00111100010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_10 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_10 is
    component infer_layer_4_weights_V_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_10_rom_U :  component infer_layer_4_weights_V_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



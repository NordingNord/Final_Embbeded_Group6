-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_24_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_24_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110100001010100", 1 => "11111010101100100", 
    2 => "11110110111010110", 3 => "00000011100101001", 
    4 => "00000000011110101", 5 => "00000110000101111", 
    6 => "00000100111000000", 7 => "00000000101000001", 
    8 => "11111011100100110", 9 => "00000100000010011", 
    10 => "00000001011101110", 11 => "00000001100111111", 
    12 => "11111100000111010", 13 => "00000001000000001", 
    14 => "11111100001100010", 15 => "00000101111010100", 
    16 => "00000100110000010", 17 => "11110111110001010", 
    18 => "00001000110100010", 19 => "11111110111001001", 
    20 => "00001000111011111", 21 => "11111011101011111", 
    22 => "00001010101011101", 23 => "11111000001000011", 
    24 => "00000011100011110", 25 => "11111100110101001", 
    26 => "11110110011000100", 27 => "00000011100110010", 
    28 => "11111111001100001", 29 => "11111001000001001", 
    30 => "00001011111011100", 31 => "11111011101101111", 
    32 => "00000110111000111", 33 => "11111101101110010", 
    34 => "11111111000000010", 35 => "00001011100010010", 
    36 => "11110110111010100", 37 => "11110110000100110", 
    38 => "11111110000111110", 39 => "00001100111110000", 
    40 => "00000111010100000", 41 => "00001100000011000", 
    42 => "11111011110011111", 43 => "11111100000011000", 
    44 => "00001010111001001", 45 => "00000010111001100", 
    46 => "00000010011100100", 47 => "11110111001111010", 
    48 => "00001011101100100", 49 => "11111011000111001", 
    50 => "00000101110111001", 51 => "11110111010001110", 
    52 => "00000100001111111", 53 => "11111000010100110", 
    54 => "00000111001000001", 55 => "00000111101001101", 
    56 => "00000100100001101", 57 => "11111110100100011", 
    58 => "11110101001001000", 59 => "11111100110000001", 
    60 => "00000010101110111", 61 => "00000001101101111", 
    62 => "11110101100111100", 63 => "00001100010111100", 
    64 => "11110110000110101", 65 => "11111100110010100", 
    66 => "11111100001100110", 67 => "11110110101001001", 
    68 => "11111110111011001", 69 => "00000011110000001", 
    70 => "11111110101000101", 71 => "00001011111000000", 
    72 => "11110110110010001", 73 => "00000010011010110", 
    74 => "11111100110000111", 75 => "00000110111001010", 
    76 => "11111010001101111", 77 => "11111011010001100", 
    78 => "00000110110100001", 79 => "11111111011001101", 
    80 => "11110101110010110", 81 => "00000110010011001", 
    82 => "11110110011000001", 83 => "11111111100110010", 
    84 => "11111110101100100", 85 => "11111110000010011", 
    86 => "00000000101010110", 87 => "11110011000110010", 
    88 => "00000100110111100", 89 => "11111110000011101", 
    90 => "00001011000111101", 91 => "11111101101111110", 
    92 => "00000010100010100", 93 => "00000111101110011", 
    94 => "11110100100111010", 95 => "11111000000001000", 
    96 => "00001001000111101", 97 => "11110110110111010", 
    98 => "00000011001100011", 99 => "11111001111100001", 
    100 => "00000011100011010", 101 => "11111101110001010", 
    102 => "11110111000100011", 103 => "00000100010010000", 
    104 => "00000001100001010", 105 => "11111101000011001", 
    106 => "00000011110111101", 107 => "00000110011100000", 
    108 => "11111001010011100", 109 => "00001011110101011", 
    110 => "00000110111111011", 111 => "00000000010111110", 
    112 => "11110100010110000", 113 => "00000011100010111", 
    114 => "00000110001110011", 115 => "11110110001001110", 
    116 => "00000111111111000", 117 => "11110100100111100", 
    118 => "11110110100100010", 119 => "11111101000110100", 
    120 => "11110101001011011", 121 => "00000110010101100", 
    122 => "11110011011101111", 123 => "11110100010011001", 
    124 => "00001100001000100", 125 => "11111110001000110", 
    126 => "11111111100101110", 127 => "00000001001011010", 
    128 => "00000111000111101", 129 => "11110111101101111", 
    130 => "00001001100011000", 131 => "00000000100100000", 
    132 => "11111011111100001", 133 => "11111001100000101", 
    134 => "11110111001000110", 135 => "00000110000000110", 
    136 => "11111000010111001", 137 => "11110011000001000", 
    138 => "11111111110010101", 139 => "00001010110001010", 
    140 => "11111111101111111", 141 => "11110100111111011", 
    142 => "11111001100110011", 143 => "11111110011101000", 
    144 => "11111000101100100", 145 => "00000110111011100", 
    146 => "00001010000010000", 147 => "11111100000111010", 
    148 => "11111010010100010", 149 => "11111100110100001", 
    150 => "11110111001100110", 151 => "11111011011101000", 
    152 => "11111000101111000", 153 => "00000001000101101", 
    154 => "00001000101100100", 155 => "11111011100011000", 
    156 => "11111011100000101", 157 => "00000010001110111", 
    158 => "00000001010100010", 159 => "11110010101000000", 
    160 => "11110101010110000", 161 => "11111000011010111", 
    162 => "00000000010010101", 163 => "11110111001001111", 
    164 => "00001100100111010", 165 => "00000101101101001", 
    166 => "11110101100100011", 167 => "00001010100011000", 
    168 => "00001011010100011", 169 => "11111110101100001", 
    170 => "00000111101010001", 171 => "00000011111001111", 
    172 => "11110011001110100", 173 => "11110100000000100", 
    174 => "11110110111001011", 175 => "11111000000011001", 
    176 => "00001001010110110", 177 => "00000111001010100", 
    178 => "00000111111100001", 179 => "00001000111111000", 
    180 => "11111110110100101", 181 => "11111011110010001", 
    182 => "00000000010101100", 183 => "11111111101010100", 
    184 => "00001000101001101", 185 => "11111101010011001", 
    186 => "11110110011101111", 187 => "00000110010011101", 
    188 => "11111011110010111", 189 => "00000101001100110", 
    190 => "00000110000001101", 191 => "00001000110101100", 
    192 => "11110101000100111", 193 => "11111010001010101", 
    194 => "11110110111001010", 195 => "00000011101110011", 
    196 => "00000110000010011", 197 => "00000001111110111", 
    198 => "00000101111110110", 199 => "00000000010010010", 
    200 => "00000111111111000", 201 => "11111110100110111", 
    202 => "00000110010111011", 203 => "11111010111011000", 
    204 => "11110100101100101", 205 => "11110101011110000", 
    206 => "00000110111000001", 207 => "00000000100001010", 
    208 => "11110110010001011", 209 => "00000010001010111", 
    210 => "11111001111001011", 211 => "11110110010000100", 
    212 => "11111100101011000", 213 => "11111110000000011", 
    214 => "11111110100100001", 215 => "11110110010111101", 
    216 => "11111010001110110", 217 => "11111100100100110", 
    218 => "00000000111010100", 219 => "00001000000100111", 
    220 => "11110110010100001", 221 => "11110111010001111", 
    222 => "00000110010111111", 223 => "11111001110110111", 
    224 => "11111100101010100", 225 => "00001001011100001", 
    226 => "00001011001010001", 227 => "00000001011010101", 
    228 => "00001010101011011", 229 => "00000110011011100", 
    230 => "00001010110110010", 231 => "00000001011110000", 
    232 => "11111001111100101", 233 => "00001000010111000", 
    234 => "00000001101000010", 235 => "00000111011010111", 
    236 => "11110100100001100", 237 => "11111111111100110", 
    238 => "00000010111000010", 239 => "00000110001110011", 
    240 => "00000110111111011", 241 => "11110100000010011", 
    242 => "00000001011010110", 243 => "11111100000000010", 
    244 => "11110010111001111", 245 => "11110111111000111", 
    246 => "11111110000111101", 247 => "11111111011011101", 
    248 => "11111010000011000", 249 => "11110101011010000", 
    250 => "00000111001000010", 251 => "00000100011010010", 
    252 => "11111011101010010", 253 => "11111101000111000", 
    254 => "11111110100011010", 255 => "00000011111000101", 
    256 => "00001100001001010", 257 => "00001100000101011", 
    258 => "11111011001001100", 259 => "00001101000000001", 
    260 => "00000000001011001", 261 => "00001001000110000", 
    262 => "00001000100110001", 263 => "11111011111010110", 
    264 => "11111111000110000", 265 => "11111100001011101", 
    266 => "00000000111000101", 267 => "00000100011100100", 
    268 => "00000110101001011", 269 => "00001001111100111", 
    270 => "11111011110010001", 271 => "00000100010010111", 
    272 => "00001011000010101", 273 => "00001000001100010", 
    274 => "00001000000011100", 275 => "00001000101101100", 
    276 => "11111010100101000", 277 => "11110101000000010", 
    278 => "11111010100001001", 279 => "11111010011000100", 
    280 => "11111111111101111", 281 => "00000011101101000", 
    282 => "00000110011010100", 283 => "00001100000001010", 
    284 => "00001001010010001", 285 => "00000110111011111", 
    286 => "11111010101101010", 287 => "11111110110100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_24 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_24 is
    component infer_layer_6_weights_V_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_24_rom_U :  component infer_layer_6_weights_V_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



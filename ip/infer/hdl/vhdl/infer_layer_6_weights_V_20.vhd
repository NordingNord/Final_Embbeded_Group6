-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_20_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_20_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000011000001000", 1 => "0000011110110101", 2 => "1110010101011100", 
    3 => "1110011001000000", 4 => "0000110110010011", 5 => "0000111000111110", 
    6 => "1111110101100010", 7 => "0001000010001101", 8 => "0000001111100111", 
    9 => "1111011101001000", 10 => "1111011001010110", 11 => "0000111011101011", 
    12 => "1110110011100000", 13 => "1101010001110110", 14 => "0000000010110110", 
    15 => "0000001110110011", 16 => "1111101001001110", 17 => "0000100011010111", 
    18 => "1110111001010100", 19 => "1111000101101001", 20 => "0000111011100001", 
    21 => "1111010000110011", 22 => "0010000100110100", 23 => "1110010010000111", 
    24 => "1111100111011000", 25 => "1111110101010111", 26 => "0001000101011101", 
    27 => "1111110111011111", 28 => "0000010110010110", 29 => "0001001011111001", 
    30 => "1110100001010111", 31 => "0000110100011011", 32 => "1111011001101110", 
    33 => "1111010110110011", 34 => "0000001011010000", 35 => "0001010101001100", 
    36 => "0000000011111011", 37 => "1111100101110011", 38 => "1111101011001011", 
    39 => "0000010100010010", 40 => "1110100110101010", 41 => "1111010001011011", 
    42 => "1111000011101011", 43 => "0001010101100110", 44 => "0001110010010010", 
    45 => "0000100001100010", 46 => "0000010100101001", 47 => "0001111000111111", 
    48 => "1110011010011010", 49 => "1110111000110111", 50 => "1111100011110011", 
    51 => "1111010000001000", 52 => "1110111111100111", 53 => "1111011010011000", 
    54 => "0001001011101111", 55 => "0000110001010000", 56 => "0001100011100000", 
    57 => "0001101000100111", 58 => "0011101110011011", 59 => "0001010000010010", 
    60 => "1111000110111110", 61 => "0000110011100000", 62 => "1111001100111010", 
    63 => "0000100110010110", 64 => "1110110000000111", 65 => "1110011110111010", 
    66 => "1110111010111110", 67 => "1110100100001000", 68 => "1111010101011001", 
    69 => "0000011111100111", 70 => "0000100001011100", 71 => "0000110111010010", 
    72 => "0000011101101011", 73 => "0000101011010100", 74 => "0000101100111000", 
    75 => "0001000111010101", 76 => "1111001110011100", 77 => "0001010111011100", 
    78 => "1111010011001001", 79 => "0000010111011110", 80 => "0000001100111100", 
    81 => "1110111111011011", 82 => "0001100101101100", 83 => "1111000011010111", 
    84 => "1110100111011001", 85 => "0000010011100110", 86 => "1110101011101000", 
    87 => "0001001111001111", 88 => "1101100101111010", 89 => "1111011110011001", 
    90 => "0000000010000101", 91 => "1110111010101011", 92 => "1110110110011010", 
    93 => "1111110101010101", 94 => "1111111011101010", 95 => "0000010110101101", 
    96 => "0000011010011110", 97 => "1110110000100011", 98 => "0011010100010011", 
    99 => "1110011011110111", 100 => "0000000101100010", 101 => "1111110001101101", 
    102 => "0001110110100111", 103 => "1110111101010101", 104 => "0000011000001011", 
    105 => "0000010010011101", 106 => "1111111001111010", 107 => "0000011010111000", 
    108 => "0000101000000010", 109 => "0000001011011001", 110 => "0001011101110110", 
    111 => "0000101110100000", 112 => "1110010101100101", 113 => "1110100111010011", 
    114 => "1111000001100000", 115 => "1110110110110101", 116 => "0000011001010000", 
    117 => "1110101100000011", 118 => "0010010010001001", 119 => "0010110000100101", 
    120 => "0010000110011000", 121 => "0001010110000111", 122 => "0001100110000100", 
    123 => "0000001101001011", 124 => "1111000110101111", 125 => "0000101010110110", 
    126 => "1111101111110000", 127 => "1111101100110110", 128 => "1111101011000100", 
    129 => "0001001000010010", 130 => "0000111111110100", 131 => "1110111110100110", 
    132 => "1111011000010101", 133 => "0000000011001011", 134 => "1111100100110110", 
    135 => "0001000001001100", 136 => "1110111111000111", 137 => "0001010111110100", 
    138 => "1111001101011101", 139 => "0001010000011010", 140 => "0011101101110111", 
    141 => "0010011110100010", 142 => "1110010000011111", 143 => "1110010101111010", 
    144 => "1111001111001010", 145 => "1110100010111110", 146 => "0000111101100110", 
    147 => "0000001100000010", 148 => "0001110011001001", 149 => "0000100110011101", 
    150 => "0000111111100101", 151 => "0000110100100011", 152 => "1011110111011100", 
    153 => "1110111011100000", 154 => "0001010000000010", 155 => "0000100100010001", 
    156 => "0000000100100010", 157 => "0001001010001111", 158 => "0000000011100001", 
    159 => "0000010011001101", 160 => "0000011110110011", 161 => "1111000011101001", 
    162 => "1111000111001001", 163 => "0001011110110000", 164 => "1111101110100111", 
    165 => "0000000011010011", 166 => "1111111010110001", 167 => "1111111101000101", 
    168 => "0000010011000100", 169 => "0000010110010010", 170 => "1110111000000011", 
    171 => "1110110000101110", 172 => "1111111001001111", 173 => "0001110010001100", 
    174 => "0000110000100011", 175 => "0001011000010010", 176 => "0001000010010001", 
    177 => "1111111010100110", 178 => "1111111111011010", 179 => "1111001001001110", 
    180 => "1111011010010001", 181 => "1111110000000101", 182 => "1101110100001111", 
    183 => "1101101100011101", 184 => "1110101000110111", 185 => "0000011011000111", 
    186 => "1011100100101100", 187 => "0000000110000111", 188 => "1110111111000101", 
    189 => "1110011000011110", 190 => "1111000100011010", 191 => "0001011010000010", 
    192 => "0001011111110111", 193 => "0001100100000001", 194 => "0001101010111111", 
    195 => "1110100100000011", 196 => "1110011011001100", 197 => "0001011110101111", 
    198 => "1110110101010000", 199 => "1111101111100110", 200 => "1111000010001110", 
    201 => "1111101010000010", 202 => "1111110110101001", 203 => "0001010001101010", 
    204 => "0010111011011011", 205 => "0000101000100010", 206 => "0001010101011101", 
    207 => "1111101110101101", 208 => "0000000000100110", 209 => "0000110000111000", 
    210 => "1110101110100111", 211 => "1110011000110000", 212 => "1110111110111111", 
    213 => "0000011100000101", 214 => "0000101000110101", 215 => "0000110101101001", 
    216 => "1110111111101110", 217 => "1110111011001101", 218 => "0001010000001100", 
    219 => "0000010001110000", 220 => "1110111001101110", 221 => "1110100001110011", 
    222 => "1111111101100011", 223 => "1111101010011001", 224 => "1111011001111011", 
    225 => "0000001001011101", 226 => "1111000011001011", 227 => "0001011100000011", 
    228 => "1111000001010110", 229 => "0001001011000001", 230 => "1111100010101101", 
    231 => "1110011010000000", 232 => "0000111000010100", 233 => "1110100101010101", 
    234 => "1111100110000101", 235 => "1111111101001001", 236 => "0001000111001010", 
    237 => "0001110100101010", 238 => "0000101000001111", 239 => "1111001110000001", 
    240 => "0001011100010100", 241 => "1111010100110101", 242 => "1111000111000110", 
    243 => "0000011001101111", 244 => "1111010111010111", 245 => "1110110101001111", 
    246 => "1111011010000001", 247 => "1100001010010010", 248 => "1101111100111010", 
    249 => "1111111010110011", 250 => "1011111011111011", 251 => "1111110110110111", 
    252 => "1111100000110110", 253 => "1111101110010101", 254 => "0000101010111000", 
    255 => "0000111111100000", 256 => "0001101111010011", 257 => "1110111111100011", 
    258 => "1100011100010101", 259 => "0001100111110010", 260 => "1110110001011011", 
    261 => "1110110001000110", 262 => "1111011100111111", 263 => "1111011010011001", 
    264 => "0000000011010110", 265 => "1111011000001001", 266 => "1111000001110010", 
    267 => "1110100001011010", 268 => "1101100101010001", 269 => "1111001011100010", 
    270 => "0001011101111110", 271 => "0001110001011000", 272 => "1111101000011100", 
    273 => "0000111100101110", 274 => "0000001000011100", 275 => "1111111000010101", 
    276 => "1111011100111011", 277 => "0001000011010110", 278 => "1111011100001010", 
    279 => "1101110101000001", 280 => "0001101101010101", 281 => "1111001001010011", 
    282 => "1101111010001000", 283 => "1110011011110111", 284 => "1111110000110111", 
    285 => "1111000011101010", 286 => "1110111000000000", 287 => "1111011110100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_20 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_20 is
    component infer_layer_6_weights_V_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_20_rom_U :  component infer_layer_6_weights_V_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



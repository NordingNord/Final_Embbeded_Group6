-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_3_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_3_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110100000111100", 1 => "0000011010011101", 2 => "0000010111000110", 
    3 => "0001000111010011", 4 => "1111000001110001", 5 => "0000111111101101", 
    6 => "0001101000010111", 7 => "1110111100011011", 8 => "1110100101101111", 
    9 => "1111111110110110", 10 => "1111101111001011", 11 => "1110111100100111", 
    12 => "0001000101010011", 13 => "1111011101111011", 14 => "1111010111001101", 
    15 => "1110101010010100", 16 => "0000010011010100", 17 => "0001011111001000", 
    18 => "0001001011000101", 19 => "0001010001100100", 20 => "0001010000111000", 
    21 => "1111001001101010", 22 => "0000100111001000", 23 => "0001011010110100", 
    24 => "1111000100111110", 25 => "0000001111100101", 26 => "1111110111111111", 
    27 => "0000111101010010", 28 => "0000111100110100", 29 => "0000100010011010", 
    30 => "1110100010101001", 31 => "0001100000100011", 32 => "0000000100000110", 
    33 => "0000111001001001", 34 => "1111011011000000", 35 => "0001000000101101", 
    36 => "0001000011101001", 37 => "1111001010000001", 38 => "1111001011010111", 
    39 => "1111100011001000", 40 => "0000011110011100", 41 => "0001000100100101", 
    42 => "0000100100001011", 43 => "0000001001101000", 44 => "0001011100001110", 
    45 => "1111111100000001", 46 => "1111010101000100", 47 => "1110111000101010", 
    48 => "1111001001010010", 49 => "0000111000011001", 50 => "0000111000111011", 
    51 => "1110010011011100", 52 => "0000010011010101", 53 => "1110110010011101", 
    54 => "1110100101010110", 55 => "0000011000100101", 56 => "1110110111100101", 
    57 => "0001011111001011", 58 => "1111001101101101", 59 => "1110101110000000", 
    60 => "1111101001000010", 61 => "1111011001110000", 62 => "1111110001111001", 
    63 => "1111010000111111", 64 => "1111001000100001", 65 => "1111101110110000", 
    66 => "0000010000010111", 67 => "1110111000001101", 68 => "0000100101011000", 
    69 => "1111111001100001", 70 => "1110100010111111", 71 => "0000001100100101", 
    72 => "0001000011111110", 73 => "0000101111100000", 74 => "0000010011001011", 
    75 => "0001011000010010", 76 => "0000011110110001", 77 => "1111000010001111", 
    78 => "0000010110011111", 79 => "0000100101110101", 80 => "0000111110000111", 
    81 => "1111100101010110", 82 => "1110100000000011", 83 => "1110101100100000", 
    84 => "1111001111101100", 85 => "0000101111010110", 86 => "0001011101001011", 
    87 => "0000010101000011", 88 => "1110111011101010", 89 => "1110011010001011", 
    90 => "1110101011111001", 91 => "0000110010100011", 92 => "1111001011000110", 
    93 => "1111010111110110", 94 => "0000100111011001", 95 => "0000011010011101", 
    96 => "1110111010010111", 97 => "1111001010001100", 98 => "0001010111101011", 
    99 => "1111111110000011", 100 => "0000111001011111", 101 => "1110011011001010", 
    102 => "0001011010000010", 103 => "0000101100110010", 104 => "1110010010110111", 
    105 => "0001011110100110", 106 => "0000101100010110", 107 => "0000000011011101", 
    108 => "0001011111111010", 109 => "1111101000001011", 110 => "1111001100010101", 
    111 => "1111001100110000", 112 => "1110101110101011", 113 => "1110100000100101", 
    114 => "1110101110100100", 115 => "1111000011011010", 116 => "1111011010011111", 
    117 => "0001010011011100", 118 => "0000101111010100", 119 => "1110110011011110", 
    120 => "1111110010011101", 121 => "0000001101101101", 122 => "0000111000100001", 
    123 => "1111100000110110", 124 => "0000011101101010", 125 => "0001010101010110", 
    126 => "0000010011101110", 127 => "0000111101111110", 128 => "1111011101111101", 
    129 => "1111100100110110", 130 => "0001000101010011", 131 => "0000110000111000", 
    132 => "0000111100100000", 133 => "0000000011011100", 134 => "0000111000010111", 
    135 => "1111001110000010", 136 => "0000101111111100", 137 => "1111111010001010", 
    138 => "0000010010110011", 139 => "0001100001111011", 140 => "1111110110111001", 
    141 => "0001000011001011", 142 => "0000000110101100", 143 => "1110010110101000", 
    144 => "1110100110011001", 145 => "1111100011110100", 146 => "0001010010001110", 
    147 => "1111000001010001", 148 => "1111101111000100", 149 => "0000110111010011", 
    150 => "1111010001001110", 151 => "1111011010101100", 152 => "1110011111111110", 
    153 => "1111011001001100", 154 => "1110111011110000", 155 => "0000110110110011", 
    156 => "1111011001100101", 157 => "1110011001111101", 158 => "0000010000101001", 
    159 => "1110111100100101", 160 => "1111101001000111", 161 => "1111111001010110", 
    162 => "0000000111110001", 163 => "0001000010000101", 164 => "0000111000001110", 
    165 => "0000010110110111", 166 => "1110110100111010", 167 => "1110101010101100", 
    168 => "1111000110110001", 169 => "1111100101111101", 170 => "0000101001100011", 
    171 => "0000100000110101", 172 => "1111111101100111", 173 => "1111100111010110", 
    174 => "0000101010111100", 175 => "0001100001100111", 176 => "0000100001001101", 
    177 => "0001000011101101", 178 => "0000100011110111", 179 => "1111010110000010", 
    180 => "1110111000001010", 181 => "1110111110010101", 182 => "1110110011001111", 
    183 => "1110011010010011", 184 => "1110110111110111", 185 => "0000010110001110", 
    186 => "1111111000100000", 187 => "0001000111111111", 188 => "1111011011001000", 
    189 => "1111000001101111", 190 => "0000101101111001", 191 => "1111000100111001", 
    192 => "1110101010101010", 193 => "1111011100100000", 194 => "1111011111100000", 
    195 => "1110010110101010", 196 => "1110100100011010", 197 => "1110100101000000", 
    198 => "0000111001010010", 199 => "0001100100010010", 200 => "1111001110110100", 
    201 => "0000001010001011", 202 => "0000101001000100", 203 => "1111001011010000", 
    204 => "0001001100111111", 205 => "1110111111100100", 206 => "0000001010001110", 
    207 => "0000001100001011", 208 => "0001100101001110", 209 => "0000001011000010", 
    210 => "0000011001010011", 211 => "0001010101100011", 212 => "1111000101001101", 
    213 => "1110101100001111", 214 => "0001001011110111", 215 => "0001001111100111", 
    216 => "0000000100101000", 217 => "0000110000100000", 218 => "1111001110111000", 
    219 => "0000101010101011", 220 => "0000010100000111", 221 => "1111101001000010", 
    222 => "1110011011000010", 223 => "0001011010011100", 224 => "1110100000101100", 
    225 => "1110100010011101", 226 => "1111101100011000", 227 => "1111010111001000", 
    228 => "1111010001001001", 229 => "0000000010011010", 230 => "0000010100011001", 
    231 => "1111110110100111", 232 => "1110110011111100", 233 => "1111001011010000", 
    234 => "0001011001001010", 235 => "0001000100000001", 236 => "0001011110101011", 
    237 => "0001011010101010", 238 => "0000111010000101", 239 => "1110010110101010", 
    240 => "1111101110111000", 241 => "1111101110011101", 242 => "1110010110110100", 
    243 => "0000110111110011", 244 => "0000100101011111", 245 => "1111011000000101", 
    246 => "1111001001111010", 247 => "0000000000101111", 248 => "1110010111101010", 
    249 => "0000101100111011", 250 => "1111101010110010", 251 => "1111111101100110", 
    252 => "1111110100011000", 253 => "1110111101101011", 254 => "1110011100000110", 
    255 => "1111101001000110", 256 => "0000011000011010", 257 => "1110011000111110", 
    258 => "1110100011011011", 259 => "1111011011011000", 260 => "0001011111000010", 
    261 => "0000000011101101", 262 => "0000100111110001", 263 => "0000111010000010", 
    264 => "1110011111101110", 265 => "1111100010011001", 266 => "0000010100101110", 
    267 => "0000001011101110", 268 => "0000010000011101", 269 => "0000100011000111", 
    270 => "0001010001000111", 271 => "1111000001100101", 272 => "0000111011010110", 
    273 => "1111110111101100", 274 => "0000011010111001", 275 => "0000101000010110", 
    276 => "0000110100000110", 277 => "0000010000010100", 278 => "1110010111111000", 
    279 => "0001001010011110", 280 => "0001010001111011", 281 => "0000101100011101", 
    282 => "1111001010001000", 283 => "0000000011000000", 284 => "0001010100001111", 
    285 => "1110101000100110", 286 => "1110111010010001", 287 => "0000101100100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_3 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_3 is
    component infer_layer_4_weights_V_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_3_rom_U :  component infer_layer_4_weights_V_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



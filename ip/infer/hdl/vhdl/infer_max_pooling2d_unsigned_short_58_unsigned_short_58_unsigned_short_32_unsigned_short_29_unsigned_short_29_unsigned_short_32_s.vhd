-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer_max_pooling2d_unsigned_short_58_unsigned_short_58_unsigned_short_32_unsigned_short_29_unsigned_short_29_unsigned_short_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_dim1 : IN STD_LOGIC_VECTOR (5 downto 0);
    in_dim2 : IN STD_LOGIC_VECTOR (5 downto 0);
    convolution_output_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    convolution_output_V_ce0 : OUT STD_LOGIC;
    convolution_output_V_q0 : IN STD_LOGIC_VECTOR (20 downto 0);
    convolution_output_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    convolution_output_V_ce1 : OUT STD_LOGIC;
    convolution_output_V_q1 : IN STD_LOGIC_VECTOR (20 downto 0);
    max_pooling_output_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    max_pooling_output_V_ce0 : OUT STD_LOGIC;
    max_pooling_output_V_we0 : OUT STD_LOGIC;
    max_pooling_output_V_d0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
end;


architecture behav of infer_max_pooling2d_unsigned_short_58_unsigned_short_58_unsigned_short_32_unsigned_short_29_unsigned_short_29_unsigned_short_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_3A : STD_LOGIC_VECTOR (11 downto 0) := "000000111010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv22_3A : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal iii_reg_170 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_cast1_fu_188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_cast1_reg_518 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln88_fu_198_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln88_reg_523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln88_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln110_fu_229_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln110_reg_536 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln103_reg_541 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln103_1_fu_245_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln103_1_reg_547 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln91_fu_251_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln91_reg_552 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln91_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_3_cast_fu_279_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_cast_reg_561 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln103_fu_295_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln103_fu_295_p2 : signal is "no";
    signal add_ln103_reg_566 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln103_1_fu_300_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln103_1_reg_571 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_cast_fu_324_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_cast_reg_576 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_cast_fu_337_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_cast_reg_581 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_1_fu_345_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln94_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln103_5_fu_393_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln103_5_reg_605 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln94_fu_398_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln94_reg_610 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln110_1_fu_434_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln110_1_reg_625 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln104_1_fu_467_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln104_1_reg_630 : STD_LOGIC_VECTOR (20 downto 0);
    signal ii_1_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_reg_146 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_158 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_iii_phi_fu_174_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln103_7_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_8_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_9_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln103_10_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_2_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_fu_182_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub4_fu_192_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_215_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln110_fu_229_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln110_fu_229_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln88_fu_211_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_235_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln103_1_fu_245_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln103_1_fu_245_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_260_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln110_1_fu_270_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln110_fu_274_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_4_fu_291_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln103_3_fu_287_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln103_fu_305_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln103_1_fu_315_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln103_fu_309_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln103_2_fu_318_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln103_3_fu_332_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_361_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_fu_370_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln103_6_fu_357_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln103_4_fu_383_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_408_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_417_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln103_5_fu_404_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1494_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1494_fu_439_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln104_fu_449_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln103_fu_457_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln1494_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_2_fu_484_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln1494_3_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_512_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_512_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_512_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln103_1_fu_245_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln110_fu_229_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component infer_mul_5ns_6ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component infer_mul_6ns_7ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component infer_mul_mul_16ns_7ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    mul_5ns_6ns_10_1_1_U368 : component infer_mul_5ns_6ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln110_fu_229_p0,
        din1 => mul_ln110_fu_229_p1,
        dout => mul_ln110_fu_229_p2);

    mul_6ns_7ns_12_1_1_U369 : component infer_mul_6ns_7ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln103_1_fu_245_p0,
        din1 => mul_ln103_1_fu_245_p1,
        dout => mul_ln103_1_fu_245_p2);

    mul_mul_16ns_7ns_22_4_1_U370 : component infer_mul_mul_16ns_7ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_512_p0,
        din1 => grp_fu_512_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_512_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln91_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln91_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_reg_146 <= i_1_fu_345_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_146 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ii_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ii_reg_158 <= ii_1_fu_506_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ii_reg_158 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    iii_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln94_reg_591 = ap_const_lv1_0))) then 
                iii_reg_170 <= add_ln94_reg_610;
            elsif (((icmp_ln91_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                iii_reg_170 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln103_1_reg_571 <= add_ln103_1_fu_300_p2;
                add_ln103_reg_566 <= add_ln103_fu_295_p2;
                    tmp_3_cast_reg_561(14 downto 5) <= tmp_3_cast_fu_279_p3(14 downto 5);
                    tmp_7_cast_reg_576(16 downto 5) <= tmp_7_cast_fu_324_p3(16 downto 5);
                    tmp_9_cast_reg_581(16 downto 5) <= tmp_9_cast_fu_337_p3(16 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln94_fu_351_p2 = ap_const_lv1_0))) then
                add_ln103_5_reg_605 <= add_ln103_5_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln94_reg_591 = ap_const_lv1_0))) then
                add_ln110_1_reg_625 <= add_ln110_1_fu_434_p2;
                select_ln104_1_reg_630 <= select_ln104_1_fu_467_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln94_reg_610 <= add_ln94_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln94_reg_591 <= icmp_ln94_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln103_1_reg_547 <= mul_ln103_1_fu_245_p2;
                mul_ln103_reg_541 <= grp_fu_512_p2;
                mul_ln110_reg_536 <= mul_ln110_fu_229_p2;
                    zext_ln91_reg_552(11 downto 0) <= zext_ln91_fu_251_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    sub_cast1_reg_518(5 downto 0) <= sub_cast1_fu_188_p1(5 downto 0);
                    zext_ln88_reg_523(5 downto 0) <= zext_ln88_fu_198_p1(5 downto 0);
            end if;
        end if;
    end process;
    sub_cast1_reg_518(15 downto 6) <= "0000000000";
    zext_ln88_reg_523(15 downto 6) <= "0000000000";
    zext_ln91_reg_552(16 downto 12) <= "00000";
    tmp_3_cast_reg_561(4 downto 0) <= "00000";
    tmp_7_cast_reg_576(4 downto 0) <= "00000";
    tmp_9_cast_reg_581(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln88_fu_202_p2, icmp_ln91_fu_255_p2, ap_CS_fsm_state6, icmp_ln94_reg_591, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln88_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln91_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln94_reg_591 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln94_reg_591 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln103_1_fu_300_p2 <= std_logic_vector(unsigned(zext_ln91_reg_552) + unsigned(zext_ln103_3_fu_287_p1));
    add_ln103_2_fu_318_p2 <= std_logic_vector(unsigned(trunc_ln103_1_fu_315_p1) + unsigned(or_ln103_fu_309_p2));
    add_ln103_3_fu_332_p2 <= std_logic_vector(unsigned(mul_ln103_1_reg_547) + unsigned(or_ln103_fu_309_p2));
    add_ln103_4_fu_383_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_576) + unsigned(zext_ln103_6_fu_357_p1));
    add_ln103_5_fu_393_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_581) + unsigned(zext_ln103_6_fu_357_p1));
    add_ln103_fu_295_p2 <= std_logic_vector(unsigned(mul_ln103_reg_541) + unsigned(zext_ln103_4_fu_291_p1));
    add_ln110_1_fu_434_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_561) + unsigned(zext_ln103_5_fu_404_p1));
    add_ln110_fu_274_p2 <= std_logic_vector(unsigned(mul_ln110_reg_536) + unsigned(zext_ln110_1_fu_270_p1));
    add_ln94_fu_398_p2 <= std_logic_vector(unsigned(iii_reg_170) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln94_reg_591)
    begin
        if ((icmp_ln94_reg_591 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln88_fu_202_p2)
    begin
        if ((((icmp_ln88_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_iii_phi_fu_174_p4_assign_proc : process(iii_reg_170, icmp_ln94_reg_591, ap_CS_fsm_pp0_stage0, add_ln94_reg_610, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln94_reg_591 = ap_const_lv1_0))) then 
            ap_phi_mux_iii_phi_fu_174_p4 <= add_ln94_reg_610;
        else 
            ap_phi_mux_iii_phi_fu_174_p4 <= iii_reg_170;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln88_fu_202_p2)
    begin
        if (((icmp_ln88_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    convolution_output_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln103_8_fu_388_p1, ap_block_pp0_stage1, zext_ln103_10_fu_430_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                convolution_output_V_address0 <= zext_ln103_10_fu_430_p1(17 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                convolution_output_V_address0 <= zext_ln103_8_fu_388_p1(17 - 1 downto 0);
            else 
                convolution_output_V_address0 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            convolution_output_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    convolution_output_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln103_7_fu_378_p1, zext_ln103_9_fu_425_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                convolution_output_V_address1 <= zext_ln103_9_fu_425_p1(17 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                convolution_output_V_address1 <= zext_ln103_7_fu_378_p1(17 - 1 downto 0);
            else 
                convolution_output_V_address1 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            convolution_output_V_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    convolution_output_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            convolution_output_V_ce0 <= ap_const_logic_1;
        else 
            convolution_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    convolution_output_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            convolution_output_V_ce1 <= ap_const_logic_1;
        else 
            convolution_output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_235_p2 <= (trunc_ln88_fu_211_p1 or ap_const_lv6_1);
    grp_fu_512_p0 <= grp_fu_512_p00(16 - 1 downto 0);
    grp_fu_512_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_146),22));
    grp_fu_512_p1 <= ap_const_lv22_3A(7 - 1 downto 0);
    i_1_fu_345_p2 <= std_logic_vector(unsigned(i_reg_146) + unsigned(ap_const_lv16_2));
    icmp_ln1494_1_fu_461_p2 <= "1" when (signed(convolution_output_V_q0) > signed(zext_ln103_fu_457_p1)) else "0";
    icmp_ln1494_2_fu_479_p2 <= "1" when (signed(convolution_output_V_q1) > signed(select_ln104_1_reg_630)) else "0";
    icmp_ln1494_3_fu_491_p2 <= "1" when (signed(convolution_output_V_q0) > signed(select_ln104_2_fu_484_p3)) else "0";
    icmp_ln1494_fu_443_p2 <= "1" when (signed(convolution_output_V_q1) > signed(ap_const_lv21_0)) else "0";
    icmp_ln88_fu_202_p2 <= "1" when (unsigned(i_reg_146) < unsigned(sub_cast1_reg_518)) else "0";
    icmp_ln91_fu_255_p2 <= "1" when (unsigned(ii_reg_158) < unsigned(zext_ln88_reg_523)) else "0";
    icmp_ln94_fu_351_p2 <= "1" when (ap_phi_mux_iii_phi_fu_174_p4 = ap_const_lv6_20) else "0";
    ii_1_fu_506_p2 <= std_logic_vector(unsigned(ii_reg_158) + unsigned(ap_const_lv16_2));
    max_pooling_output_V_address0 <= zext_ln110_2_fu_475_p1(15 - 1 downto 0);

    max_pooling_output_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pooling_output_V_ce0 <= ap_const_logic_1;
        else 
            max_pooling_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pooling_output_V_d0 <= 
        convolution_output_V_q0 when (icmp_ln1494_3_fu_491_p2(0) = '1') else 
        select_ln104_2_fu_484_p3;

    max_pooling_output_V_we0_assign_proc : process(icmp_ln94_reg_591, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln94_reg_591 = ap_const_lv1_0))) then 
            max_pooling_output_V_we0 <= ap_const_logic_1;
        else 
            max_pooling_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln103_1_fu_245_p0 <= mul_ln103_1_fu_245_p00(6 - 1 downto 0);
    mul_ln103_1_fu_245_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_235_p2),12));
    mul_ln103_1_fu_245_p1 <= ap_const_lv12_3A(7 - 1 downto 0);
    mul_ln110_fu_229_p0 <= mul_ln110_fu_229_p00(5 - 1 downto 0);
    mul_ln110_fu_229_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_215_p4),10));
    mul_ln110_fu_229_p1 <= ap_const_lv10_1D(6 - 1 downto 0);
    or_ln103_fu_309_p2 <= (trunc_ln103_fu_305_p1 or ap_const_lv12_1);
    select_ln104_1_fu_467_p3 <= 
        convolution_output_V_q0 when (icmp_ln1494_1_fu_461_p2(0) = '1') else 
        zext_ln103_fu_457_p1;
    select_ln104_2_fu_484_p3 <= 
        convolution_output_V_q1 when (icmp_ln1494_2_fu_479_p2(0) = '1') else 
        select_ln104_1_reg_630;
    select_ln104_fu_449_p3 <= 
        trunc_ln1494_fu_439_p1 when (icmp_ln1494_fu_443_p2(0) = '1') else 
        ap_const_lv20_0;
    sub4_fu_192_p2 <= std_logic_vector(unsigned(in_dim2) + unsigned(ap_const_lv6_3F));
    sub_cast1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_fu_182_p2),16));
    sub_fu_182_p2 <= std_logic_vector(unsigned(in_dim1) + unsigned(ap_const_lv6_3F));
    tmp_1_fu_260_p4 <= ii_reg_158(5 downto 1);
    tmp_2_fu_361_p4 <= add_ln103_reg_566(21 downto 1);
    tmp_3_cast_fu_279_p3 <= (add_ln110_fu_274_p2 & ap_const_lv5_0);
    tmp_3_fu_370_p3 <= (tmp_2_fu_361_p4 & ap_phi_mux_iii_phi_fu_174_p4);
    tmp_4_fu_408_p4 <= add_ln103_1_reg_571(16 downto 1);
    tmp_5_fu_417_p3 <= (tmp_4_fu_408_p4 & iii_reg_170);
    tmp_7_cast_fu_324_p3 <= (add_ln103_2_fu_318_p2 & ap_const_lv5_0);
    tmp_9_cast_fu_337_p3 <= (add_ln103_3_fu_332_p2 & ap_const_lv5_0);
    tmp_fu_215_p4 <= i_reg_146(5 downto 1);
    trunc_ln103_1_fu_315_p1 <= mul_ln103_reg_541(12 - 1 downto 0);
    trunc_ln103_fu_305_p1 <= ii_reg_158(12 - 1 downto 0);
    trunc_ln1494_fu_439_p1 <= convolution_output_V_q1(20 - 1 downto 0);
    trunc_ln88_fu_211_p1 <= i_reg_146(6 - 1 downto 0);
    zext_ln103_10_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_5_reg_605),64));
    zext_ln103_3_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_158),17));
    zext_ln103_4_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_158),22));
    zext_ln103_5_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iii_reg_170),15));
    zext_ln103_6_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_iii_phi_fu_174_p4),17));
    zext_ln103_7_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_370_p3),64));
    zext_ln103_8_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_4_fu_383_p2),64));
    zext_ln103_9_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_417_p3),64));
    zext_ln103_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_fu_449_p3),21));
    zext_ln110_1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_260_p4),10));
    zext_ln110_2_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_1_reg_625),64));
    zext_ln88_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub4_fu_192_p2),16));
    zext_ln91_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln103_1_fu_245_p2),17));
end behav;

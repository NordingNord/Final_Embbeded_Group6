-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_15_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_15_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000011001011100", 1 => "0001010101100000", 2 => "0000101101010001", 
    3 => "0000010110110101", 4 => "0000100101011101", 5 => "1110101100001110", 
    6 => "0000110011100101", 7 => "0000000010001100", 8 => "0000001110000101", 
    9 => "1110101000111111", 10 => "0001011110000111", 11 => "0001011011101001", 
    12 => "1110010111001111", 13 => "0000011100011101", 14 => "1111010111010000", 
    15 => "1111100010111100", 16 => "0000010000010111", 17 => "1111111110111110", 
    18 => "1111011000111010", 19 => "1111111100101000", 20 => "1111101111111101", 
    21 => "0001001110010001", 22 => "1110100110110001", 23 => "1101111011011001", 
    24 => "1110111000101010", 25 => "1110110100111010", 26 => "1101011111100001", 
    27 => "1111010100010100", 28 => "0000010000001110", 29 => "1111010100011100", 
    30 => "0000010101111000", 31 => "1111000101111100", 32 => "0001001010110001", 
    33 => "1110101100101110", 34 => "1011101110111110", 35 => "1110111101100101", 
    36 => "0001100010100111", 37 => "1110110110010000", 38 => "1110110111010001", 
    39 => "0000111100110101", 40 => "0000010111111010", 41 => "0001000001110010", 
    42 => "0000000110000111", 43 => "1111001100111011", 44 => "1101001010001000", 
    45 => "1101001011101110", 46 => "0000011000001000", 47 => "1110111011010110", 
    48 => "0000001111110110", 49 => "0001001101001001", 50 => "1111100100010111", 
    51 => "1111111110000000", 52 => "1111011110110101", 53 => "1111100100011100", 
    54 => "1110100110110000", 55 => "1101011001111101", 56 => "0010111011110001", 
    57 => "1110100001100110", 58 => "1111111011001011", 59 => "0000111011000010", 
    60 => "1111110011100100", 61 => "0001011110010110", 62 => "0000000011100110", 
    63 => "0000111011000010", 64 => "1111000100011011", 65 => "1110011001010100", 
    66 => "1101100111101010", 67 => "0000101001101011", 68 => "1110100101000110", 
    69 => "1111000101000110", 70 => "1101111010010010", 71 => "1111110100101100", 
    72 => "1110011010111011", 73 => "0001010000001111", 74 => "1110011110110000", 
    75 => "0000011010000001", 76 => "1101110000100011", 77 => "1110010010011101", 
    78 => "1111000101101111", 79 => "1111100110100101", 80 => "1111011011010110", 
    81 => "0000101011010010", 82 => "1111100000010011", 83 => "1110111001101101", 
    84 => "0000000011000101", 85 => "0000001000101111", 86 => "1101101000110011", 
    87 => "0000001101001001", 88 => "0010101111001110", 89 => "1111101011011000", 
    90 => "0001011000110100", 91 => "0000111110001001", 92 => "0000111010101001", 
    93 => "1111111011000101", 94 => "0001000011001101", 95 => "0000101000000100", 
    96 => "0000011111110111", 97 => "1111000010000101", 98 => "1111110110011000", 
    99 => "0000011011110110", 100 => "1111010110100100", 101 => "1111010100001100", 
    102 => "0000011010011000", 103 => "0000101110001100", 104 => "1111100011010100", 
    105 => "0000101101100010", 106 => "1110011111001001", 107 => "0001011001000100", 
    108 => "1101010000110011", 109 => "1111011000111111", 110 => "0000110100000011", 
    111 => "0000011010000001", 112 => "0000011001011011", 113 => "0000100111100001", 
    114 => "1110110110111110", 115 => "1111010101010000", 116 => "0000100101001110", 
    117 => "1111001011000000", 118 => "0011001001101111", 119 => "1100111000001110", 
    120 => "0010100011100001", 121 => "0000101101111011", 122 => "1110010011000100", 
    123 => "1111100001101110", 124 => "1110101011110101", 125 => "1111100110000001", 
    126 => "1110101111011110", 127 => "1110110010010010", 128 => "0000110111100011", 
    129 => "1111110110011110", 130 => "1111110111111001", 131 => "0000100111000110", 
    132 => "0000111001010100", 133 => "0000011101001110", 134 => "0010101101111101", 
    135 => "0001001011001000", 136 => "0000111110110100", 137 => "0000100111001100", 
    138 => "0001100101100000", 139 => "0001011101110101", 140 => "1110110011101010", 
    141 => "1110101010101110", 142 => "1111110010000101", 143 => "0000010001011011", 
    144 => "0001000000011000", 145 => "1111110100000000", 146 => "0001100000010010", 
    147 => "1111111010011000", 148 => "1111111111001111", 149 => "1111100111100000", 
    150 => "0001011000011100", 151 => "0100110010011101", 152 => "0011110100100000", 
    153 => "1110100011101001", 154 => "0100011101100011", 155 => "0001001101010100", 
    156 => "1111000011010010", 157 => "0001000100010100", 158 => "1110111000011011", 
    159 => "0001011000111011", 160 => "0000100101001100", 161 => "1111011101011010", 
    162 => "0001111101100000", 163 => "1111110010011010", 164 => "1111001100111011", 
    165 => "1111110111000011", 166 => "1110010111000101", 167 => "0001000101000101", 
    168 => "1110111111110011", 169 => "1110110010010001", 170 => "1111001111111101", 
    171 => "1110101110110010", 172 => "0010110001110100", 173 => "0000001110000101", 
    174 => "1111110000011001", 175 => "0000101111100101", 176 => "0000000101100000", 
    177 => "1110000101000111", 178 => "1111111001101110", 179 => "0000001110111111", 
    180 => "0000111010101110", 181 => "1110110100011000", 182 => "1101111010010111", 
    183 => "0001110111111100", 184 => "0001101101011101", 185 => "1111011000100100", 
    186 => "0011111101010000", 187 => "1111010101011110", 188 => "0001100010101101", 
    189 => "0000101001111110", 190 => "0001011001000101", 191 => "1110101010110101", 
    192 => "0001000000111111", 193 => "0000101010000111", 194 => "1110001100111010", 
    195 => "1111001111010011", 196 => "1111101101111110", 197 => "1111010111000110", 
    198 => "0011011100010000", 199 => "1110011011111001", 200 => "1111011101101111", 
    201 => "1110100111110011", 202 => "0001001101010110", 203 => "0001011110001001", 
    204 => "1110100011101100", 205 => "1110101110101001", 206 => "0000111111111101", 
    207 => "1111101011110111", 208 => "0001001111110011", 209 => "1111111101010111", 
    210 => "1110110110100010", 211 => "0000111100000110", 212 => "0001011000011001", 
    213 => "1111001011000101", 214 => "0100101111011111", 215 => "1100010100011010", 
    216 => "0001010011001010", 217 => "1111100011100110", 218 => "1111101111000100", 
    219 => "1111110110100000", 220 => "1111101100001100", 221 => "1111010011110110", 
    222 => "1111001100001111", 223 => "0001100001110100", 224 => "1110001100110001", 
    225 => "1111010001000001", 226 => "0001000101000111", 227 => "1110101001100001", 
    228 => "1111100111011010", 229 => "0001010100101111", 230 => "0000111011101010", 
    231 => "0000001101010010", 232 => "0001011110010001", 233 => "1110011100000100", 
    234 => "0000001100000110", 235 => "1110011100010011", 236 => "0001110010101110", 
    237 => "0000011110011011", 238 => "1111111110011110", 239 => "0001111000001100", 
    240 => "0000010110011101", 241 => "1111011101111010", 242 => "1111010111110010", 
    243 => "1111110100010011", 244 => "1111101101110110", 245 => "0001011100101100", 
    246 => "0010111100011001", 247 => "0101011110100111", 248 => "0011100011111000", 
    249 => "1110110100001101", 250 => "0100111010110100", 251 => "1110101110000100", 
    252 => "1111100011011110", 253 => "1111111101101011", 254 => "1110011010101000", 
    255 => "0000110010111101", 256 => "1101011000101011", 257 => "0001100011000010", 
    258 => "0001010101100010", 259 => "1111000110110101", 260 => "0000001110111110", 
    261 => "0001100000011000", 262 => "1110100001011110", 263 => "0001011010000100", 
    264 => "1111001010011111", 265 => "0000111011110111", 266 => "1110110101011110", 
    267 => "1111100001000110", 268 => "0100110001001011", 269 => "0000000001011101", 
    270 => "1111010010110001", 271 => "1111010000111000", 272 => "1110110010111100", 
    273 => "0000011101100110", 274 => "0001011101100100", 275 => "1111110001100110", 
    276 => "1111111111100000", 277 => "1110110101011011", 278 => "1101111001001100", 
    279 => "0011111011100010", 280 => "1101100000000110", 281 => "0000011101110101", 
    282 => "0010011101010001", 283 => "1111000000011111", 284 => "0001000101000100", 
    285 => "0001000011101001", 286 => "0000111100111001", 287 => "0001101000000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_15 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_15 is
    component infer_layer_6_weights_V_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_15_rom_U :  component infer_layer_6_weights_V_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



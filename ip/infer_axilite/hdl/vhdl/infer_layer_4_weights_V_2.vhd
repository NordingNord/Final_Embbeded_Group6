-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_2_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111100000100101", 1 => "11111001110100000", 
    2 => "11110011010011101", 3 => "11111011101010000", 
    4 => "11110101100010000", 5 => "11101011100100001", 
    6 => "00001001101100101", 7 => "00000001010101111", 
    8 => "00001000010110001", 9 => "11111000000011010", 
    10 => "00001001100001101", 11 => "11110111111100001", 
    12 => "00001100001110000", 13 => "11101110100001110", 
    14 => "00001010110000001", 15 => "00000011000000101", 
    16 => "11111001000110110", 17 => "00000010000001111", 
    18 => "01000001011000010", 19 => "00100111010101010", 
    20 => "11110111011011111", 21 => "11101100011011100", 
    22 => "00000001100000001", 23 => "00000101000010011", 
    24 => "11111010010111000", 25 => "11011101000111010", 
    26 => "00001010011111010", 27 => "11110110000001101", 
    28 => "11110010010100000", 29 => "00000111000010111", 
    30 => "11110100001110010", 31 => "00000110101010111", 
    32 => "11011011101001101", 33 => "11110011010001000", 
    34 => "00000011001101011", 35 => "00001000110010001", 
    36 => "11110100010001000", 37 => "11101111100010000", 
    38 => "00001001001011110", 39 => "11111000110111001", 
    40 => "00000011001000011", 41 => "00001100000001000", 
    42 => "00000000110010110", 43 => "11111011000001001", 
    44 => "11111111001001011", 45 => "11101000110010010", 
    46 => "00000011111100011", 47 => "00000100010001011", 
    48 => "00000111000001010", 49 => "00000000101000001", 
    50 => "00101111101101101", 51 => "11110111001110001", 
    52 => "11110111011101111", 53 => "11110000110011111", 
    54 => "00001100110011100", 55 => "00000100000001100", 
    56 => "00001000111011011", 57 => "11011011001010101", 
    58 => "11111111101111110", 59 => "11110111100011010", 
    60 => "11100011100001011", 61 => "00001000101101010", 
    62 => "00000010101100101", 63 => "11100100110100001", 
    64 => "11001110011100110", 65 => "11110011110110010", 
    66 => "11111111110111010", 67 => "00000011001111011", 
    68 => "00000010101010100", 69 => "00001010111110110", 
    70 => "00000100111100010", 71 => "00000001100010100", 
    72 => "00000000101101001", 73 => "00000001011101000", 
    74 => "11111010100000001", 75 => "00000010011101011", 
    76 => "00000011101111010", 77 => "11111101001011000", 
    78 => "11110110110111011", 79 => "00000100110101000", 
    80 => "00000010010010011", 81 => "00000111011100101", 
    82 => "00001011101111001", 83 => "11010110101111000", 
    84 => "00000111000100100", 85 => "00001001011100011", 
    86 => "00001000110001110", 87 => "11110111001111000", 
    88 => "00001000010111110", 89 => "00000010101111100", 
    90 => "00001001010010011", 91 => "00001100100001000", 
    92 => "11010011111001100", 93 => "00000111011011110", 
    94 => "00001010101100000", 95 => "11100100110110010", 
    96 => "00100000111110110", 97 => "11110101011101110", 
    98 => "00000100011100111", 99 => "11111000001001111", 
    100 => "00000010110001100", 101 => "11111110101000010", 
    102 => "00000111011011110", 103 => "11111001110011000", 
    104 => "00000000010111101", 105 => "11110111001100100", 
    106 => "11110100101001101", 107 => "00000001111001001", 
    108 => "11110011000100100", 109 => "00000001001101001", 
    110 => "00001001001010001", 111 => "11101000110000110", 
    112 => "00000101010110101", 113 => "11111010000001011", 
    114 => "00001111110010010", 115 => "00000011110000101", 
    116 => "11111110110001100", 117 => "00000110011101111", 
    118 => "00001100101101110", 119 => "11110110100000010", 
    120 => "00001001111011001", 121 => "00010001101111000", 
    122 => "00000001110000010", 123 => "11111111010010111", 
    124 => "00110100100110101", 125 => "11111110110010101", 
    126 => "00101001010110001", 127 => "00100100100011000", 
    128 => "00110011001000111", 129 => "00000010000011010", 
    130 => "11110110111011100", 131 => "11110011111101010", 
    132 => "11111011011001010", 133 => "11111110101000100", 
    134 => "11111100001010110", 135 => "11111000101100100", 
    136 => "00000111001100010", 137 => "00000111000001011", 
    138 => "11110110101001010", 139 => "11111101110111110", 
    140 => "11110101111011010", 141 => "00000101011000001", 
    142 => "11111001111110110", 143 => "11101000000011000", 
    144 => "00001001100100111", 145 => "11110101010000110", 
    146 => "00010000101100011", 147 => "00000000111100101", 
    148 => "11110100001101010", 149 => "11110110100010001", 
    150 => "00001100011110100", 151 => "11111011101010001", 
    152 => "00001011110001000", 153 => "00011011111110111", 
    154 => "00000010000000011", 155 => "00000011011110000", 
    156 => "00110111111110110", 157 => "11110000110001011", 
    158 => "00111101110101010", 159 => "00011111011001000", 
    160 => "00011110001011111", 161 => "00000011011100101", 
    162 => "11111001010111100", 163 => "00000101000111001", 
    164 => "11111000000011000", 165 => "00001101110101011", 
    166 => "00000010101101100", 167 => "11111110011011010", 
    168 => "11111001110001010", 169 => "11111111000000000", 
    170 => "00001000101101100", 171 => "00001101010010111", 
    172 => "00000001011101111", 173 => "11111000000100111", 
    174 => "11111001011110100", 175 => "00000010010010100", 
    176 => "00000010111000010", 177 => "00000010000001000", 
    178 => "11110001101010101", 179 => "11101110110100010", 
    180 => "11111001101110100", 181 => "11110101010010101", 
    182 => "00000111010000100", 183 => "00000100000100110", 
    184 => "00000101001110101", 185 => "00010011110001010", 
    186 => "00000011010101100", 187 => "00000110101100100", 
    188 => "00100001101100110", 189 => "11111101101001001", 
    190 => "00101010111001011", 191 => "00000011011110111", 
    192 => "00100110001101011", 193 => "00000110010000000", 
    194 => "00000011101001010", 195 => "00001110010000001", 
    196 => "00000000100001001", 197 => "00010000111111000", 
    198 => "11111100101010111", 199 => "00001000010111011", 
    200 => "11111000110011100", 201 => "00000001000100001", 
    202 => "00000111011011100", 203 => "11110011100001000", 
    204 => "00000011000010011", 205 => "00010010100100111", 
    206 => "11110011011111110", 207 => "00001101011101000", 
    208 => "11110011000110101", 209 => "00001001000101011", 
    210 => "11001111011100110", 211 => "00000000111101001", 
    212 => "00000111001101111", 213 => "00000101011011000", 
    214 => "11111011111100110", 215 => "11110011000110010", 
    216 => "00000100001111110", 217 => "00000100011100100", 
    218 => "11110100111010010", 219 => "11111001011011011", 
    220 => "00110000111101000", 221 => "11111110001000101", 
    222 => "00011011100101111", 223 => "00010011011000100", 
    224 => "00100100110001010", 225 => "00001001101111001", 
    226 => "00000001000000010", 227 => "00000101100001010", 
    228 => "00001001001000111", 229 => "00000001111000001", 
    230 => "00000110000110100", 231 => "00001011101011010", 
    232 => "00000010100000001", 233 => "00001010100100110", 
    234 => "11111111110010100", 235 => "00000100101000011", 
    236 => "11111100000001011", 237 => "00001010100011111", 
    238 => "11110011110001101", 239 => "00001011010101100", 
    240 => "11110100111000110", 241 => "00001110110000010", 
    242 => "11100010000111000", 243 => "00000011111011111", 
    244 => "00001011100111100", 245 => "00000011100001001", 
    246 => "11110101001010110", 247 => "00001011101110101", 
    248 => "00001001010010001", 249 => "00001101010010101", 
    250 => "11111000101100011", 251 => "11110111010011001", 
    252 => "00100010100000110", 253 => "11110011000001100", 
    254 => "00010111110101110", 255 => "00100010110110110", 
    256 => "00011101100101001", 257 => "00001100000011010", 
    258 => "11111010011111100", 259 => "00000111000110000", 
    260 => "00001010000011001", 261 => "00001011001101110", 
    262 => "11111110110110011", 263 => "00001000101100010", 
    264 => "11110001111000110", 265 => "11111100111010001", 
    266 => "00001000100110101", 267 => "11111011111010011", 
    268 => "11111101001111101", 269 => "11111100101101011", 
    270 => "00001001001110111", 271 => "11111101100110001", 
    272 => "11111110111111011", 273 => "11111110100001100", 
    274 => "11100110000001100", 275 => "11111111010101110", 
    276 => "00001010111110010", 277 => "11111110101011001", 
    278 => "00001000001101110", 279 => "11111111000100101", 
    280 => "00001001010100100", 281 => "00000111111010010", 
    282 => "11110110000111000", 283 => "11111101011001010", 
    284 => "00100011000011111", 285 => "11111101001110011", 
    286 => "00101011011011010", 287 => "00010110101001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_2 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_2 is
    component infer_layer_4_weights_V_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_2_rom_U :  component infer_layer_4_weights_V_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



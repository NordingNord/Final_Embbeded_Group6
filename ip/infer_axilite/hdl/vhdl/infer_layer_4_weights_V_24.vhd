-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_4_weights_V_24_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_4_weights_V_24_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101000111001111", 1 => "00000100101110100", 
    2 => "11110011110011101", 3 => "00000111000000010", 
    4 => "11111101100100010", 5 => "00001010010010011", 
    6 => "11111110011001001", 7 => "00000011011100101", 
    8 => "11110011101111111", 9 => "00001010001000100", 
    10 => "11111101101010101", 11 => "00000110010101010", 
    12 => "00000000110001110", 13 => "00000000000100000", 
    14 => "00000101001111110", 15 => "00001101110011101", 
    16 => "11110111111011001", 17 => "00001011011101011", 
    18 => "11011001101111101", 19 => "11111010001111000", 
    20 => "00010000010010110", 21 => "00000111010000010", 
    22 => "11110110110010100", 23 => "11111101011101001", 
    24 => "11110110110001111", 25 => "00010010100111000", 
    26 => "00000101100000010", 27 => "11111111101011011", 
    28 => "11010100011011100", 29 => "00000100101011100", 
    30 => "11101101000111001", 31 => "11100101111101011", 
    32 => "11101100011100101", 33 => "11111011000011101", 
    34 => "00000000001101101", 35 => "00010000000101100", 
    36 => "11111011001010100", 37 => "00000000110000110", 
    38 => "11111110100010100", 39 => "11110011101011011", 
    40 => "11111000100111111", 41 => "00001100101011001", 
    42 => "11111010011111000", 43 => "00000000000010100", 
    44 => "00001100111100110", 45 => "00001100011011011", 
    46 => "00000100111110110", 47 => "00010010000100000", 
    48 => "11111001110110001", 49 => "00001111000011110", 
    50 => "00001010011101001", 51 => "00010111001100001", 
    52 => "00001101110011100", 53 => "11111111000001011", 
    54 => "00000111000000100", 55 => "00000001110101110", 
    56 => "00000111100011111", 57 => "11111101100101011", 
    58 => "00000101000100101", 59 => "11111101001001101", 
    60 => "11010111010011010", 61 => "00010000010000110", 
    62 => "11011110000100010", 63 => "11111011001110101", 
    64 => "11111010101011000", 65 => "11111001111010011", 
    66 => "11110101001110111", 67 => "00001000100101010", 
    68 => "11111101000001010", 69 => "00000111011100100", 
    70 => "00000010101011000", 71 => "00001001010100011", 
    72 => "11110011110110010", 73 => "11110100000111101", 
    74 => "11110110000010110", 75 => "00001011000011110", 
    76 => "11110101101101110", 77 => "00001001101010010", 
    78 => "11110101011000001", 79 => "00001010100110000", 
    80 => "00001000010001011", 81 => "00001110100110010", 
    82 => "00001110110000100", 83 => "00010011100100010", 
    84 => "00001001111001110", 85 => "00001011100111110", 
    86 => "00001001111111010", 87 => "00000001000001000", 
    88 => "00001001011100101", 89 => "00000100110010000", 
    90 => "11111101011101111", 91 => "11111010100111001", 
    92 => "11100101000111011", 93 => "11111011001100110", 
    94 => "11100011001101110", 95 => "00000011111010001", 
    96 => "11010101110101011", 97 => "00000111010001101", 
    98 => "11111101010110111", 99 => "11111010000110000", 
    100 => "00001010010110111", 101 => "11101100110010000", 
    102 => "00000111101111111", 103 => "00001011101010110", 
    104 => "00000111111011101", 105 => "00000101010111001", 
    106 => "11111111010010110", 107 => "11111100010111111", 
    108 => "00000100011001000", 109 => "11111111010100001", 
    110 => "00000100101101100", 111 => "00010001100010110", 
    112 => "00000111101000101", 113 => "00000000010110010", 
    114 => "00101001111110100", 115 => "00001110101000110", 
    116 => "00001101000101101", 117 => "00001000110000110", 
    118 => "00001001001011010", 119 => "11111001111100101", 
    120 => "00000101000100010", 121 => "11101101110110110", 
    122 => "11111010000011011", 123 => "11111100000100011", 
    124 => "11000100110111101", 125 => "00000111011010111", 
    126 => "11011100000111000", 127 => "11011110010100101", 
    128 => "11000101010101100", 129 => "00001100110111101", 
    130 => "00000001000110110", 131 => "00000001111001100", 
    132 => "00000011100110111", 133 => "11101011011101101", 
    134 => "11111110001101000", 135 => "00000010011001101", 
    136 => "11111000101001110", 137 => "00000100000100110", 
    138 => "11111011110010111", 139 => "00000011001101000", 
    140 => "00000011011100111", 141 => "11111101011000101", 
    142 => "00000101010111011", 143 => "00001011101100010", 
    144 => "11111001111011000", 145 => "00001000001100010", 
    146 => "00111010101100011", 147 => "00011110100110110", 
    148 => "11111100000110001", 149 => "00000101111010010", 
    150 => "00000110101010001", 151 => "11110011000011011", 
    152 => "11110100110111110", 153 => "11010000110000100", 
    154 => "00001011101111011", 155 => "00000011101001110", 
    156 => "10111111001010011", 157 => "00000001100101000", 
    158 => "11000010111011111", 159 => "11110100100001000", 
    160 => "11100011010000101", 161 => "11111110110010110", 
    162 => "00001010111000010", 163 => "00001010111101100", 
    164 => "11111100010101100", 165 => "11101111010011001", 
    166 => "00000100111111011", 167 => "00001011000000000", 
    168 => "00000110010111100", 169 => "00000101011110101", 
    170 => "00001011101010100", 171 => "11111011100100111", 
    172 => "11111010001111000", 173 => "00000001000101001", 
    174 => "00000001001011000", 175 => "11111011000111000", 
    176 => "00000001101100110", 177 => "11111110110001000", 
    178 => "00101001111010010", 179 => "00010001000111111", 
    180 => "11110010101011000", 181 => "00000000111001010", 
    182 => "00000100010110001", 183 => "00001011010100010", 
    184 => "00001100011000101", 185 => "11110011011110001", 
    186 => "00000101000100100", 187 => "00000011000011011", 
    188 => "11011001111101101", 189 => "11111110011000100", 
    190 => "11010111011110011", 191 => "11100111101101101", 
    192 => "00010010101111111", 193 => "11110010111101001", 
    194 => "00000100000100001", 195 => "00000101010101111", 
    196 => "11110100100000111", 197 => "11111000011111010", 
    198 => "11110100111001101", 199 => "11111001101000100", 
    200 => "00001010001000010", 201 => "11111111011001010", 
    202 => "11111100010101101", 203 => "11110011101000011", 
    204 => "11111000010101001", 205 => "11110011111011010", 
    206 => "11110100110100011", 207 => "11101001010001101", 
    208 => "00001010010101110", 209 => "11110010111001000", 
    210 => "00111010000010110", 211 => "00011101110101101", 
    212 => "11110000011111010", 213 => "11110100111000100", 
    214 => "00000110000001100", 215 => "00000001111001000", 
    216 => "00000100011011000", 217 => "11101011101011010", 
    218 => "00001001100110010", 219 => "11110110100011101", 
    220 => "00011011011111011", 221 => "11110001001110010", 
    222 => "00010011011000010", 223 => "00001100000000010", 
    224 => "00001000011100010", 225 => "00000100001010010", 
    226 => "00000110010000011", 227 => "11101100110111100", 
    228 => "00001001011000110", 229 => "11111000011011111", 
    230 => "11110100011101111", 231 => "00001011000100010", 
    232 => "00000111000010101", 233 => "11110101100100101", 
    234 => "00000010001101000", 235 => "11111111100111001", 
    236 => "00001000100101101", 237 => "11101111000110001", 
    238 => "11111111001110101", 239 => "11111000110000110", 
    240 => "11111101111001110", 241 => "11101011011110000", 
    242 => "00110111100010000", 243 => "00001110111000001", 
    244 => "00000000001110011", 245 => "11101010000011011", 
    246 => "11110011110100100", 247 => "11111101000100001", 
    248 => "11111010000100110", 249 => "11101001111111111", 
    250 => "11111010111000011", 251 => "11111110000000001", 
    252 => "00011101000010100", 253 => "11110010101111001", 
    254 => "00001110001000000", 255 => "00010111010100111", 
    256 => "00001110000001010", 257 => "11111000001011001", 
    258 => "00000111101111110", 259 => "11111111010001010", 
    260 => "00001011111000000", 261 => "00000111111111111", 
    262 => "00000000011101111", 263 => "11110011100111110", 
    264 => "00000110001010001", 265 => "00001001100100111", 
    266 => "00001011010011110", 267 => "11111111110011101", 
    268 => "00000101011001101", 269 => "11110101001101110", 
    270 => "11111100101101010", 271 => "11110111000111000", 
    272 => "11111000010101101", 273 => "11101110010100100", 
    274 => "00110001010100100", 275 => "11110011011111110", 
    276 => "11111110100100011", 277 => "11101110101101110", 
    278 => "00001011010010101", 279 => "00000010000001100", 
    280 => "00000110101010100", 281 => "11111110001011110", 
    282 => "11111000011011110", 283 => "00001010100011001", 
    284 => "00010111100101011", 285 => "11110011100111110", 
    286 => "00100001110001100", 287 => "00000100010011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_4_weights_V_24 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_4_weights_V_24 is
    component infer_layer_4_weights_V_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_4_weights_V_24_rom_U :  component infer_layer_4_weights_V_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



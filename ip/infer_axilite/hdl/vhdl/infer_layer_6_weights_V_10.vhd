-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_10_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_10_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110100101100", 1 => "11010001101100", 2 => "10111010011000", 
    3 => "01000101001101", 4 => "11101100001110", 5 => "01001001101010", 
    6 => "00100001000100", 7 => "11011110001100", 8 => "01001100000101", 
    9 => "11001000001000", 10 => "01011111100100", 11 => "00101111100010", 
    12 => "10111110111011", 13 => "11101010010101", 14 => "10100110011000", 
    15 => "00100111111010", 16 => "10010100000011", 17 => "00011101100101", 
    18 => "11001100110000", 19 => "00110000001111", 20 => "11001101110110", 
    21 => "00110111000010", 22 => "00101100110110", 23 => "00100111101010", 
    24 => "00010000100000", 25 => "10011100011001", 26 => "11110101111101", 
    27 => "01001011111000", 28 => "11010001111101", 29 => "00110010010110", 
    30 => "00111111111101", 31 => "10100111000101", 32 => "10111001111101", 
    33 => "00001100010001", 34 => "11110100010111", 35 => "01000100111000", 
    36 => "10011110000001", 37 => "00111110001001", 38 => "01000000111110", 
    39 => "01011110010010", 40 => "10111001000110", 41 => "11010000011000", 
    42 => "11110001001100", 43 => "10011100001111", 44 => "10101000001000", 
    45 => "11011101100011", 46 => "01001101001010", 47 => "11100010010111", 
    48 => "10011001001100", 49 => "11011101011011", 50 => "01011100100101", 
    51 => "00001001111111", 52 => "10101111111110", 53 => "10110110000001", 
    54 => "11101010101111", 55 => "11101001111010", 56 => "11001100010101", 
    57 => "11111111111011", 58 => "01001101100010", 59 => "11101010010101", 
    60 => "00110100100101", 61 => "11101110010110", 62 => "00100111000001", 
    63 => "01010000100000", 64 => "11101101000111", 65 => "10110001110111", 
    66 => "00000101011100", 67 => "11000000011110", 68 => "00000101000111", 
    69 => "00011011001011", 70 => "11101010010011", 71 => "11111001110010", 
    72 => "01010101100000", 73 => "11011101100010", 74 => "11000000000000", 
    75 => "11101000010000", 76 => "10011011010111", 77 => "11011101001111", 
    78 => "11011001100101", 79 => "00000010001001", 80 => "11010011011001", 
    81 => "00000101111001", 82 => "11101110110000", 83 => "10100100000110", 
    84 => "11010110000000", 85 => "01010001100101", 86 => "00001010100010", 
    87 => "00100011010001", 88 => "11010100001101", 89 => "00000011110000", 
    90 => "11100110111101", 91 => "01010011000001", 92 => "01010011011001", 
    93 => "11011001100101", 94 => "10110011001110", 95 => "01010010101010", 
    96 => "00000010000001", 97 => "11101000010110", 98 => "11001111011010", 
    99 => "01001000011000", 100 => "01100111101100", 101 => "10100000110000", 
    102 => "11011111011101", 103 => "10110000010101", 104 => "01001101010101", 
    105 => "11101110101011", 106 => "11001010000110", 107 => "10011010000001", 
    108 => "01000110010000", 109 => "01011110011101", 110 => "10101111011100", 
    111 => "01001001100111", 112 => "10101000111001", 113 => "00101101110110", 
    114 => "11011110111010", 115 => "00000010010111", 116 => "11011110011100", 
    117 => "11000001000111", 118 => "00011000111000", 119 => "00101000110010", 
    120 => "00111111010010", 121 => "10101110011000", 122 => "00101000000100", 
    123 => "00101100001000", 124 => "10110100001001", 125 => "00111101100111", 
    126 => "00101110001010", 127 => "10011101100011", 128 => "10110110101100", 
    129 => "01001111111011", 130 => "10010101010110", 131 => "01100000010101", 
    132 => "10111010010010", 133 => "01010111111110", 134 => "00011100001011", 
    135 => "11000101010111", 136 => "00111010101010", 137 => "11001001110010", 
    138 => "11000000101111", 139 => "01101000010011", 140 => "10010111101111", 
    141 => "00111101110110", 142 => "11011011001111", 143 => "01001100110111", 
    144 => "01010011000100", 145 => "11001101111111", 146 => "11111010100100", 
    147 => "01100100111111", 148 => "11001111010111", 149 => "00111001110011", 
    150 => "11111010010011", 151 => "10011011101001", 152 => "00101010100011", 
    153 => "01011001011111", 154 => "00011001110110", 155 => "01000110100001", 
    156 => "10111110111011", 157 => "10100100101011", 158 => "11001100111011", 
    159 => "00111111001101", 160 => "10100101100101", 161 => "11000100100110", 
    162 => "10111001111011", 163 => "01011001000110", 164 => "11100111111100", 
    165 => "11111111111010", 166 => "11010001010000", 167 => "00100011110001", 
    168 => "10110111010111", 169 => "11010100010100", 170 => "00100111000110", 
    171 => "00111001111001", 172 => "01011100110111", 173 => "01010101101100", 
    174 => "00000110101001", 175 => "01010110111111", 176 => "01011010110011", 
    177 => "01000100110011", 178 => "11010011000000", 179 => "11110011000000", 
    180 => "11001110111101", 181 => "00111001111111", 182 => "11000000101010", 
    183 => "10111100111010", 184 => "11111111010111", 185 => "10110001111010", 
    186 => "11001100100011", 187 => "11110100000110", 188 => "11001010001111", 
    189 => "00000001000111", 190 => "11011100011110", 191 => "00100000111111", 
    192 => "10101111000011", 193 => "00010101101101", 194 => "00000101100110", 
    195 => "10110111000001", 196 => "11101111100101", 197 => "00010001110000", 
    198 => "11100110100001", 199 => "00100001000010", 200 => "01011001010011", 
    201 => "10100100111011", 202 => "11010110001100", 203 => "00001001011001", 
    204 => "11000110011010", 205 => "00110011110000", 206 => "00010100100011", 
    207 => "00110100101001", 208 => "11010010010001", 209 => "11101111010011", 
    210 => "01010001011110", 211 => "01010110111001", 212 => "11101111011011", 
    213 => "11001010101010", 214 => "11100000100011", 215 => "01010111010000", 
    216 => "11111010101100", 217 => "11000010011011", 218 => "11001010111010", 
    219 => "11101111001100", 220 => "11011110110101", 221 => "10110000100100", 
    222 => "00010100000010", 223 => "00001111110000", 224 => "00100101100001", 
    225 => "01000111101001", 226 => "11111111010010", 227 => "01000000100110", 
    228 => "11011101011101", 229 => "11010000100011", 230 => "10101011111011", 
    231 => "11110111000011", 232 => "01101010011011", 233 => "00110110010100", 
    234 => "11011111100111", 235 => "10110010000110", 236 => "10101100101000", 
    237 => "11000111000010", 238 => "00001000010011", 239 => "11000011110011", 
    240 => "01010000011101", 241 => "10011111011000", 242 => "11010110111101", 
    243 => "01000010101010", 244 => "10010101111010", 245 => "00001011101101", 
    246 => "01100100101111", 247 => "10111001000100", 248 => "11111000000011", 
    249 => "10011111101010", 250 => "11111011001100", 251 => "10010101101101", 
    252 => "10111101111111", 253 => "11000011000101", 254 => "11111100001011", 
    255 => "11101100001010", 256 => "11011110000010", 257 => "01001011111111", 
    258 => "01000010111110", 259 => "11011110011000", 260 => "11110111111100", 
    261 => "11100110000000", 262 => "10011001000000", 263 => "01010111000101", 
    264 => "00001000111011", 265 => "10100011000011", 266 => "00100011101100", 
    267 => "00100100110110", 268 => "01001110100100", 269 => "11001010011111", 
    270 => "00001011101100", 271 => "00111011111110", 272 => "11010100111000", 
    273 => "00011001000111", 274 => "10100010101001", 275 => "00110111001101", 
    276 => "11000000101000", 277 => "10110000101110", 278 => "11111101101100", 
    279 => "00001110010000", 280 => "00011100010101", 281 => "11010110001101", 
    282 => "11111000011010", 283 => "11110000100101", 284 => "00110110010101", 
    285 => "00110111101111", 286 => "00010010011110", 287 => "00110000110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_10 is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_10 is
    component infer_layer_6_weights_V_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_10_rom_U :  component infer_layer_6_weights_V_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



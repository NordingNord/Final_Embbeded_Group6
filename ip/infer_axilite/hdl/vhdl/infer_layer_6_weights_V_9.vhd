-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_layer_6_weights_V_9_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 288
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_layer_6_weights_V_9_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001001000101111", 1 => "1110100011110100", 2 => "1110010100100010", 
    3 => "0001000001001110", 4 => "1111111001001011", 5 => "0000110011110100", 
    6 => "1101011100110010", 7 => "0001011000010110", 8 => "1111111110001000", 
    9 => "0001100110010000", 10 => "1110111100000100", 11 => "1111101111100001", 
    12 => "1010111111010000", 13 => "1011110011000100", 14 => "0000111010001001", 
    15 => "0001101000000111", 16 => "1111001000111010", 17 => "0000110111010101", 
    18 => "0000111001111001", 19 => "0001100011010111", 20 => "0000001111000100", 
    21 => "0000110011001110", 22 => "1101100010001110", 23 => "1010010111111001", 
    24 => "1100001011100011", 25 => "0000010011000100", 26 => "1100010010010100", 
    27 => "1110110010000011", 28 => "0001000101010100", 29 => "1111111111110101", 
    30 => "1110011111111000", 31 => "1110110001000110", 32 => "0001110000001110", 
    33 => "1110110001111100", 34 => "1011001101110011", 35 => "0001100110010101", 
    36 => "0000000101010010", 37 => "0001000001011011", 38 => "1110001111111001", 
    39 => "1111010100011111", 40 => "0001001000001010", 41 => "1111110100110010", 
    42 => "1111110110011000", 43 => "0000011010111001", 44 => "1100101010010010", 
    45 => "1100111100011000", 46 => "0000110000100100", 47 => "1111100001100110", 
    48 => "0000111111110011", 49 => "1110111001001010", 50 => "1110100101111010", 
    51 => "0000010001000110", 52 => "1110100001001000", 53 => "1110100101011100", 
    54 => "1011101011111110", 55 => "1100000110001110", 56 => "1111011011010111", 
    57 => "0000101101110111", 58 => "1100011111101010", 59 => "0000100101010110", 
    60 => "1110110011000110", 61 => "1111001111111010", 62 => "1111010101101011", 
    63 => "1111100101111101", 64 => "0010100010101000", 65 => "0000100110110000", 
    66 => "1110010000001001", 67 => "1111000000011010", 68 => "1111001001111010", 
    69 => "1110011010110110", 70 => "0001001100111010", 71 => "0000110010000010", 
    72 => "1110101010100101", 73 => "0001011100011111", 74 => "1111011010010001", 
    75 => "1111011100001011", 76 => "1100011001001100", 77 => "1111110001011101", 
    78 => "1111011010101000", 79 => "0001110001000011", 80 => "0001111110001010", 
    81 => "0000111001010000", 82 => "1111101101010001", 83 => "0001000100101011", 
    84 => "1111101110010000", 85 => "0000000010000010", 86 => "1111101010110010", 
    87 => "1011111111000011", 88 => "0000010001011100", 89 => "1111101010011110", 
    90 => "1110001110110110", 91 => "1110101100010110", 92 => "1111011001011011", 
    93 => "0001100110001111", 94 => "0001001111011101", 95 => "0000011000100000", 
    96 => "0001111100111010", 97 => "1111100001110111", 98 => "1111001000111110", 
    99 => "0000001001110000", 100 => "0001100011100001", 101 => "0001100001000101", 
    102 => "1110001011001010", 103 => "1111010001000110", 104 => "1110011010000110", 
    105 => "0000101101000001", 106 => "0000100101110111", 107 => "1111010011111011", 
    108 => "1100101011011101", 109 => "1101011011111111", 110 => "1111111111010011", 
    111 => "1110101100110111", 112 => "0010000110011111", 113 => "1110010100001000", 
    114 => "1110100010100111", 115 => "0001100000101101", 116 => "1111111000110111", 
    117 => "0001000001000111", 118 => "1101100000001000", 119 => "1100011111111000", 
    120 => "1011011110001111", 121 => "1111111010100001", 122 => "1011100000011000", 
    123 => "1110111110001101", 124 => "1110110100011110", 125 => "0000110000100000", 
    126 => "1110111100101110", 127 => "0001000010100100", 128 => "0001101100010000", 
    129 => "1110011110011110", 130 => "1111101010111010", 131 => "0001010111110101", 
    132 => "1111111011010001", 133 => "0000110111001000", 134 => "1110100111001011", 
    135 => "1111111100101011", 136 => "1110101111001111", 137 => "0000110010101000", 
    138 => "1111100110111111", 139 => "1110101101100010", 140 => "1111010101000111", 
    141 => "1110100010000001", 142 => "0000111001010110", 143 => "0001000000111011", 
    144 => "0001010001000010", 145 => "0000100110101110", 146 => "0000110010010111", 
    147 => "0000110011000100", 148 => "1110111010001011", 149 => "1111100111000001", 
    150 => "0000000100010111", 151 => "1100100011101010", 152 => "1110001111001010", 
    153 => "0001011111101010", 154 => "1101010001111100", 155 => "1111000111101001", 
    156 => "0001011111100011", 157 => "1110011101101010", 158 => "0000000010101010", 
    159 => "1111010100001100", 160 => "0001010001110010", 161 => "1110110110001010", 
    162 => "1111011110111110", 163 => "1111101010010011", 164 => "0000101110001110", 
    165 => "1111001101100010", 166 => "0001111001101000", 167 => "1111010101100110", 
    168 => "0000111101011101", 169 => "0000001010011011", 170 => "1111010010100011", 
    171 => "1111001001001111", 172 => "1110110001010000", 173 => "0000000001101010", 
    174 => "0001010001110101", 175 => "0001110101010111", 176 => "0000000010100010", 
    177 => "0001110111101011", 178 => "1110100010110011", 179 => "0000110111111001", 
    180 => "1110011110000111", 181 => "0000111111000101", 182 => "0011001111000110", 
    183 => "0000100101011100", 184 => "0000000111101011", 185 => "0000001000110011", 
    186 => "0010000101011110", 187 => "0000111111111101", 188 => "1110011110000101", 
    189 => "0001011001001010", 190 => "0001001001101000", 191 => "1111100110011001", 
    192 => "0001011000001110", 193 => "0001100101111001", 194 => "1110000101110100", 
    195 => "1111111001011101", 196 => "1111111001011110", 197 => "0000001011011000", 
    198 => "1111100000101111", 199 => "1110100011110111", 200 => "0000011011010100", 
    201 => "0000101011011101", 202 => "1110101000001101", 203 => "1111101101011010", 
    204 => "1101111010110101", 205 => "0000001011001001", 206 => "1110101010011101", 
    207 => "0010001101110001", 208 => "0000010110011100", 209 => "0011000101001000", 
    210 => "1111001101000101", 211 => "0000000100110111", 212 => "0000110101010100", 
    213 => "0000011111110101", 214 => "0000111101010000", 215 => "1110000110000101", 
    216 => "0001110101011011", 217 => "0000001111010000", 218 => "0000010011000000", 
    219 => "1110011011000100", 220 => "1110111100000001", 221 => "0000111111011110", 
    222 => "0000101000000110", 223 => "1110011001101010", 224 => "0010011011110101", 
    225 => "1110101111010000", 226 => "1101111010011000", 227 => "0000000001010111", 
    228 => "1110110000111110", 229 => "1111110111001011", 230 => "0001100001001011", 
    231 => "1111100001001011", 232 => "0001000000001001", 233 => "1111010110111111", 
    234 => "0001001101011101", 235 => "1111110000000011", 236 => "1101110010111011", 
    237 => "1110110001010001", 238 => "0000010000100000", 239 => "0000111000101110", 
    240 => "0010111000101001", 241 => "0010101010001010", 242 => "0000000100101101", 
    243 => "1111011101001010", 244 => "1110111001111100", 245 => "1111100000000110", 
    246 => "0000111011101101", 247 => "0001010001101001", 248 => "0011101101000000", 
    249 => "0001000000110111", 250 => "0010110110010100", 251 => "1111010010110100", 
    252 => "1111011011101100", 253 => "1110111111111111", 254 => "1111100111011011", 
    255 => "1111111001100000", 256 => "1111001010100011", 257 => "0000010101000000", 
    258 => "1111101110101011", 259 => "1110101000111001", 260 => "0000111101000001", 
    261 => "1111011110111100", 262 => "1111000010000011", 263 => "1110011111111111", 
    264 => "1110111010100110", 265 => "1110100110111011", 266 => "0000100110000100", 
    267 => "1110110011101111", 268 => "0011010111010101", 269 => "0000100101010110", 
    270 => "0000100110010111", 271 => "0001101101000010", 272 => "1111010111100111", 
    273 => "1111001111001011", 274 => "0001011010000101", 275 => "0001100001010000", 
    276 => "0001000110000100", 277 => "0000010010001000", 278 => "1110101000011110", 
    279 => "0101101001010101", 280 => "0000100110111000", 281 => "1111100011010010", 
    282 => "0101010101011101", 283 => "1111011100011101", 284 => "0001011001110001", 
    285 => "0001000100001011", 286 => "0001000101111101", 287 => "0000111011001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_layer_6_weights_V_9 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 288;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_layer_6_weights_V_9 is
    component infer_layer_6_weights_V_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_layer_6_weights_V_9_rom_U :  component infer_layer_6_weights_V_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


